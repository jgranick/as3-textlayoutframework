<?xml version="1.0" encoding="UTF-8"?><allClasses><apiPackage id="flash.text.ime"><apiName>flash.text.ime</apiName><apiDetail/><apiClassifier id="flash.text.ime:IIMEClient"><apiName>IIMEClient</apiName><shortdesc>
Interface for IME (input method editor) clients.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
Interface for IME (input method editor) clients.  Components based on the flash.text.engine package must implement 
this interface to support editing text inline using an IME. This interface is not used with TextField objects. 
TextLayoutFramework (TLF) uses this interface to support inline IME, so clients using TLF do not need to implement this 
interface. 
<p>To support inline IME, set the <codeph>imeClient</codeph> property of an <codeph>ImeEvent.IME_START_COMPOSITION</codeph> event to
an object which implements this interface.</p>

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.ime.xml#CompositionAttributeRange"><linktext>flash.text.ime.CompositionAttributeRange</linktext></link><link href="" invalidHref="flash.events.ImeEvent.imeClient.xml"><linktext>flash.events.ImeEvent:imeClient</linktext></link></related-links><adobeApiEvent id="flash.text.ime:IIMEClient_flash.events.TextEvent.TEXT_INPUT_textInput"><apiName>textInput</apiName><shortdesc>
 Dispatched when the user enters text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.TextEvent.TEXT_INPUT</apiEventType><adobeApiEventClassifier>flash.TextEvent.TEXT_INPUT</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 Dispatched when the user enters text. For IME (input method editor) clients, the receiver should 
 insert the string contained in the event object's <codeph>text</codeph> property at the current insertion point.
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.text.ime:IIMEClient_flash.events.IMEEvent.IME_START_COMPOSITION_imeStartComposition"><apiName>imeStartComposition</apiName><shortdesc>
 Dispatched when the user begins to use an IME (input method editor).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.IMEEvent.IME_START_COMPOSITION</apiEventType><adobeApiEventClassifier>flash.IMEEvent.IME_START_COMPOSITION</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 Dispatched when the user begins to use an IME (input method editor).
 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiOperation id="flash.text.ime:IIMEClient:flash.text.ime:IIMEClient:confirmComposition"><apiName>confirmComposition</apiName><shortdesc>
	Use this callback to end the inline editing session and confirm the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc> the final state of the text in the inline session (the text that got confirmed).
	</apiDesc></apiParam><apiParam><apiItemName>preserveSelection</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc> when true, you should not reset the current selection to the end of the confirmed text.
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	Use this callback to end the inline editing session and confirm the text.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.ime:IIMEClient:flash.text.ime:IIMEClient:getTextBounds"><apiName>getTextBounds</apiName><shortdesc>
	This callback is used by the IME to query the bounding box of the text being edited with the IME client.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the bounding box of the specified range of text, or <codeph>null</codeph> if either or both of the indexes are invalid.
	The same value should be returned independant of whether <codeph>startIndex</codeph> is greater or less than <codeph>endIndex</codeph>.
	</apiDesc><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>startIndex</apiItemName><apiType value="int"/><apiDesc>an integer that specifies the starting location of the range of text for which you need to measure the bounding box.
	</apiDesc></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiType value="int"/><apiDesc>Optional; an integer that specifies the ending location of the range of text for which you need to measure the bounding box.
	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	This callback is used by the IME to query the bounding box of the text being edited with the IME client.
	Use this method to place the candidate window and set the mouse cursor in the IME client when the mouse is over the 
	text field or other component that supports IME.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.ime:IIMEClient:flash.text.ime:IIMEClient:getTextInRange"><apiName>getTextInRange</apiName><shortdesc> 
	 Gets the specified range of text from the component.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The requested text, or <codeph>null</codeph> if no text is available in the requested range
	 or if either or both of the indexes are invalid.  The same value should be returned 
	 independant of whether <codeph>startIndex</codeph> is greater or less than <codeph>endIndex</codeph>.
	 
	 </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>startIndex</apiItemName><apiType value="int"/><apiDesc>an integer that specifies the starting location of the range of text to be retrieved.
	 </apiDesc></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiType value="int"/><apiDesc>an integer that specifies the ending location of the range of text to be retrieved.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc> 
	 Gets the specified range of text from the component.  This method is called during IME reconversion.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.ime:IIMEClient:flash.text.ime:IIMEClient:selectRange"><apiName>selectRange</apiName><shortdesc> 
	 Sets the range of selected text in the component.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>anchorIndex</apiItemName><apiType value="int"/><apiDesc>The zero-based index value of the character at the anchor end of the selection
	 </apiDesc></apiParam><apiParam><apiItemName>activeIndex</apiItemName><apiType value="int"/><apiDesc>The zero-based index value of the character at the active end of the selection.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc> 
	 Sets the range of selected text in the component.
	 If either of the arguments is out of bounds the selection should not be changed.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.ime:IIMEClient:flash.text.ime:IIMEClient:updateComposition"><apiName>updateComposition</apiName><shortdesc>
	Callback for updating the contents of the inline editing session.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiDesc> contains the text of the inline edit session from the IME
	</apiDesc></apiParam><apiParam><apiItemName>attributes</apiItemName><apiType value="Vector$flash.text.ime:CompositionAttributeRange"/><apiDesc> contains an array of composition clauses with adornment info 
	</apiDesc></apiParam><apiParam><apiItemName>compositionStartIndex</apiItemName><apiType value="int"/><apiDesc> start of the inline session relative to the start of the text object
	</apiDesc></apiParam><apiParam><apiItemName>compositionEndIndex</apiItemName><apiType value="int"/><apiDesc> end of the inline session relative to the start of the text object
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	Callback for updating the contents of the inline editing session.
	This gets called whenever the text being edited with the IME has changed
	and its contents are used by the client to redraw the entire inline edit session.
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.text.ime:IIMEClient:flash.text.ime:IIMEClient:compositionEndIndex:get"><apiName>compositionEndIndex</apiName><shortdesc> 
	 The zero-based character index value of the end of the current edit session text (i.e.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 
	 The zero-based character index value of the end of the current edit session text (i.e.
	 all text in the inline session that is still not yet confirmed to the document).
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.ime:IIMEClient:flash.text.ime:IIMEClient:compositionStartIndex:get"><apiName>compositionStartIndex</apiName><shortdesc> 
	 The zero-based character index value of the start of the current edit session text (i.e.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 
	 The zero-based character index value of the start of the current edit session text (i.e.
	 all text in the inline session that is still not yet confirmed to the document).
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.ime:IIMEClient:flash.text.ime:IIMEClient:selectionActiveIndex:get"><apiName>selectionActiveIndex</apiName><shortdesc> 
	 The zero-based character index value of the last character in the current selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 
	 The zero-based character index value of the last character in the current selection.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.ime:IIMEClient:flash.text.ime:IIMEClient:selectionAnchorIndex:get"><apiName>selectionAnchorIndex</apiName><shortdesc> 
	 The zero-based character index value of the first character in the current selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 
	 The zero-based character index value of the first character in the current selection.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.ime:IIMEClient:flash.text.ime:IIMEClient:verticalTextLayout:get"><apiName>verticalTextLayout</apiName><shortdesc> 
	 Indicates whether the text in the component is vertical or not.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc> 
	 Indicates whether the text in the component is vertical or not.  This will affect the positioning
	 of the candidate window (beside vertical text, below horizontal text).
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.ime:CompositionAttributeRange"><apiName>CompositionAttributeRange</apiName><shortdesc>
The CompositionAttributeRange class represents a range of composition attributes for use with IME events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
The CompositionAttributeRange class represents a range of composition attributes for use with IME events. 
For example, when editing text in the IME, the text is divided by the IME into composition ranges.
These composition ranges are flagged as selected (i.e. currently being lengthened, shortened, or edited),
and/or converted (i.e. they have made one pass through the IME dictionary lookup already).

<p>By convention, the client should adorn these composition ranges with underlining or hiliting according to
the flags.</p>

<p>For example:</p>
<codeblock>
     !converted              = thick gray underline (raw text)
     !selected &amp;&amp; converted  = thin black underline
      selected &amp;&amp; converted  = thick black underline
</codeblock>
</apiDesc></apiClassifierDetail><apiConstructor id="flash.text.ime:CompositionAttributeRange:CompositionAttributeRange"><apiName>CompositionAttributeRange</apiName><shortdesc>
	 Creates a CompositionAttributeRange object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>relativeStart</apiItemName><apiType value="int"/><apiDesc> The zero based index of the first character included in the character range.
	 </apiDesc></apiParam><apiParam><apiItemName>relativeEnd</apiItemName><apiType value="int"/><apiDesc> The zero based index of the last character included in the character range.
	 </apiDesc></apiParam><apiParam><apiItemName>selected</apiItemName><apiType value="Boolean"/><apiDesc> The selected flag
	 </apiDesc></apiParam><apiParam><apiItemName>converted</apiItemName><apiType value="Boolean"/><apiDesc> The converted flag
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>Constructor for CompositionAttributeRange objects.
	 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	 Creates a CompositionAttributeRange object.
	 
	 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flash.text.ime:CompositionAttributeRange:converted"><apiName>converted</apiName><shortdesc>
	 The converted flag, meaning this clause has been processed by the IME
	 and is awaiting acceptance/confirmation by the user
	 
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/></apiVersion></asMetadata><asCustoms><helpid>
	 
	 </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Boolean"/></apiValueDef><apiDesc>
	 The converted flag, meaning this clause has been processed by the IME
	 and is awaiting acceptance/confirmation by the user
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.ime:CompositionAttributeRange:relativeEnd"><apiName>relativeEnd</apiName><shortdesc>
	 The relative end of the composition clause, relative to the beginning
	 of the inline edit session.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/></apiVersion></asMetadata><asCustoms><helpid>
	 
	 </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="int"/></apiValueDef><apiDesc>
	 The relative end of the composition clause, relative to the beginning
	 of the inline edit session.
	 i.e. 0 = the start of the text the IME can see (there may be text 
	 before that in the edit field)
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.ime:CompositionAttributeRange:relativeStart"><apiName>relativeStart</apiName><shortdesc>
	 The relative start from the beginning of the inline edit session
	 i.e.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/></apiVersion></asMetadata><asCustoms><helpid>
	 
	 </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="int"/></apiValueDef><apiDesc>
	 The relative start from the beginning of the inline edit session
	 i.e. 0 = the start of the text the IME can see (there may be text 
	 before that in the edit field)
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.ime:CompositionAttributeRange:selected"><apiName>selected</apiName><shortdesc>
	 The selected flag, meaning this composition clause is active and 
	 being lengthened or shortened or edited with the IME, and the neighboring
	 clauses are not.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/></apiVersion></asMetadata><asCustoms><helpid>
	 
	 </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Boolean"/></apiValueDef><apiDesc>
	 The selected flag, meaning this composition clause is active and 
	 being lengthened or shortened or edited with the IME, and the neighboring
	 clauses are not.
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage><apiPackage id="flashx.textLayout.compose"><apiName>flashx.textLayout.compose</apiName><apiDetail/><apiClassifier id="flashx.textLayout.compose:StandardFlowComposer"><apiName>StandardFlowComposer</apiName><shortdesc> 
	The StandardFlowComposer class provides a standard composer and container manager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.compose:IFlowComposer</apiBaseInterface><apiBaseClassifier>flashx.textLayout.compose:FlowComposerBase</apiBaseClassifier></apiClassifierDef><apiDesc> 
	The StandardFlowComposer class provides a standard composer and container manager. 
	
	<p>Each call to <codeph>compose()</codeph> or <codeph>updateAllControllers()</codeph> normalizes the text flow as a first step.  
	The normalizing process checks the parts of the TextFlow object that were modified and takes the following steps:
	<ol>
	<li> Deletes empty FlowLeafElement and SubParagraphGroupElement objects.</li>
	<li> Merges sibling spans that have identical attributes.</li>
	<li> Adds an empty paragraph if a flow is empty.</li>
 	</ol>
 	</p>
	
	<p>To use a StandardFlowComposer, assign it to the
	<codeph>flowComposer</codeph> property of a TextFlow object. Call the <codeph>updateAllControllers()</codeph>
	method to lay out and display the text in the containers attached to the flow composer.</p>
	
	<p><b>Note:</b> For simple, static text flows, you can also use the one of the text line factory classes.
	These factory classes will typically create lines with less overhead than a flow composer, but do not
	support editing, dynamic changes, or user interaction.</p>
	
	</apiDesc><example conref="examples\StandardFlowComposer_ClassExample.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow/flowComposer"><linktext>flashx.textLayout.elements.TextFlow.flowComposer</linktext></link></related-links><apiConstructor id="flashx.textLayout.compose:StandardFlowComposer:StandardFlowComposer"><apiName>StandardFlowComposer</apiName><shortdesc> 
		Creates a StandardFlowComposer object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> 
		Creates a StandardFlowComposer object. 
		
		<p>To use an StandardFlowComposer object, assign it to the
		<codeph>flowComposer</codeph> property of a TextFlow object. Call the <codeph>updateAllControllers()</codeph>
		method to lay out and display the text in the containers attached to the flow composer.</p>
		
		</apiDesc><example conref="examples\StandardFlowComposer_constructor.as"/></apiConstructorDetail></apiConstructor><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:addControllerAt"><apiName>addControllerAt</apiName><shortdesc conref="IFlowComposer#addControllerAt()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>controller</apiItemName><apiOperationClassifier>flashx.textLayout.container:ContainerController</apiOperationClassifier><apiDesc>The ContainerController object to add.
		 </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>A numeric index that specifies the position in the controller list at which to insert the ContainerController object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="IFlowComposer#addControllerAt()"> </apiDesc><example conref="examples\StandardFlowComposer_addControllerAt.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:addController"><apiName>addController</apiName><shortdesc conref="IFlowComposer#addController()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>controller</apiItemName><apiOperationClassifier>flashx.textLayout.container:ContainerController</apiOperationClassifier><apiDesc>The ContainerController object to add.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="IFlowComposer#addController()"> </apiDesc><example conref="examples\StandardFlowComposer_addController.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:composeToController"><apiName>composeToController</apiName><shortdesc conref="IFlowComposer#composeToController()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>true if anything changed.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiData>unknown</apiData><apiDesc>compose at least up to this container in the TextFlow. If controllerIndex is greater than the number of controllers, compose to the end of the last container.
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="IFlowComposer#composeToController()"> </apiDesc><example conref="examples\StandardFlowComposer_composeToController.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:composeToPosition"><apiName>composeToPosition</apiName><shortdesc conref="IFlowComposer#composeToPosition()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>true if anything changed.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>absolutePosition</apiItemName><apiType value="int"/><apiData>unknown</apiData><apiDesc>compose at least up to this position in the TextFlow. By default or if absolutePosition is past the end of the flow compose to the end of the flow.
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="IFlowComposer#composeToPosition()"> </apiDesc><example conref="examples\StandardFlowComposer_composeToPosition.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:compose"><apiName>compose</apiName><shortdesc> 
		 Calculates how many lines are necessary to display the content in the root element of the flow and the positions of these 
		 lines in the flow's display containers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>true if anything changed.
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc> 
		 Calculates how many lines are necessary to display the content in the root element of the flow and the positions of these 
		 lines in the flow's display containers.
		 
		 <p>The <codeph>compose()</codeph> method only composes content if it has changed since the last composition operation. 
		 Results are saved so that subsequent
		 calls to <codeph>compose()</codeph> or <codeph>updateAllControllers()</codeph> do not perform an additional recomposition
		 if the flow content has not changed.</p>
		 
		 <p>If the contents of any container have changed, the method returns <codeph>true</codeph>.</p>
		 
		 </apiDesc><example conref="examples\StandardFlowComposer_compose.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.compose.xml#StandardFlowComposer/updateAllControllers()"><linktext>updateAllControllers()</linktext></link><link href="flashx.textLayout.compose.xml#StandardFlowComposer/updateToController()"><linktext>updateToController()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:findControllerIndexAtPosition"><apiName>findControllerIndexAtPosition</apiName><shortdesc> 
		 Returns the index of the controller containing the content at the specified position.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the index of the container controller or -1 if not found.
		 
		 </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>absolutePosition</apiItemName><apiType value="int"/><apiDesc>The position of the content for which the container index is sought.
		 </apiDesc></apiParam><apiParam><apiItemName>preferPrevious</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Specifies which container index to return when the position is between the last element in 
		 one container and the first element in the next.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Returns the index of the controller containing the content at the specified position. 
		 
		 <p>A position can be considered to be the division between two characters or other elements of a text flow. If 
		 the value in <codeph>absolutePosition</codeph> is a position between the last character of one 
		 container and the first character of the next, then the preceding container is returned if
		 the <codeph>preferPrevious</codeph> parameter is set to <codeph>true</codeph> and the later container is returned if
		 the <codeph>preferPrevious</codeph> parameter is set to <codeph>false</codeph>.</p>
		 
		 <p>The method returns -1 if the content at the specified position is not in any container or is outside
		 the range of positions in the text flow.</p>
		 
		 </apiDesc><example conref="examples\StandardFlowComposer_findControllerIndexAtPosition.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:getAbsoluteStart"><apiName>getAbsoluteStart</apiName><shortdesc> 
		 Returns the absolute position of the first content element in the specified ContainerController object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the position before the first character or graphic in the ContainerController.
		 
		 </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>controller</apiItemName><apiOperationClassifier>flashx.textLayout.container:ContainerController</apiOperationClassifier><apiDesc>A ContainerController object associated with this flow composer.
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Returns the absolute position of the first content element in the specified ContainerController object.
		 
		 <p>A position is calculated by counting the division between two characters or other elements of a text flow. 
		 The position preceding the first element of a flow is zero. An absolute position is the position
		 counting from the beginning of the flow.</p>
		 
		 </apiDesc><example conref="examples\StandardFlowComposer_getAbsoluteStart.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:getControllerAt"><apiName>getControllerAt</apiName><shortdesc conref="IFlowComposer#getControllerAt()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.container:ContainerController</apiOperationClassifier><apiDesc>the ContainerController object at the specified position.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>The index of the ContainerController object to return.
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="IFlowComposer#getControllerAt()"> </apiDesc><example conref="examples\StandardFlowComposer_getControllerAt.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:getControllerIndex"><apiName>getControllerIndex</apiName><shortdesc conref="IFlowComposer#getControllerIndex()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata><asCustoms><player>version AIR 1.5
	 	 </player></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/><apiDesc>the index of the specified ContainerController object or -1 if the controller is not attached to this flow composer.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>controller</apiItemName><apiOperationClassifier>flashx.textLayout.container:ContainerController</apiOperationClassifier><apiDesc>A reference to the ContainerController object to find.
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="IFlowComposer#getControllerIndex()"> </apiDesc><example conref="examples\StandardFlowComposer_getControllerIndex.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:interactionManagerChanged"><apiName>interactionManagerChanged</apiName><shortdesc>
		 Called by the TextFlow when the interaction manager changes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newInteractionManager</apiItemName><apiOperationClassifier>flashx.textLayout.edit:ISelectionManager</apiOperationClassifier><apiDesc>The new ISelectionManager instance.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Called by the TextFlow when the interaction manager changes. 
		 
		 <p>This function is called automatically. Your code does not typically need to call this
		 method. Classes that extend StandardFlowComposer can override this method to update
		 event listeners and other properties that depend on the interaction manager.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:protected:preCompose"><apiName>preCompose</apiName><shortdesc> Returns true if composition is necessary, false otherwise </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc> Returns true if composition is necessary, false otherwise </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:removeAllControllers"><apiName>removeAllControllers</apiName><shortdesc conref="IFlowComposer#removeAllControllers()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="IFlowComposer#removeAllControllers()"> </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:removeControllerAt"><apiName>removeControllerAt</apiName><shortdesc conref="IFlowComposer#removeControllerAt()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>The index of the ContainerController object to remove.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="IFlowComposer#removeControllerAt()"> </apiDesc><example conref="examples\StandardFlowController_removeControllerAt.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:removeController"><apiName>removeController</apiName><shortdesc conref="IFlowComposer#removeController()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>controller</apiItemName><apiOperationClassifier>flashx.textLayout.container:ContainerController</apiOperationClassifier><apiDesc>The ContainerController instance to remove.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="IFlowComposer#removeController()"> </apiDesc><example conref="examples\StandardFlowController_removeController.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:setFocus"><apiName>setFocus</apiName><shortdesc> 
		 Sets the focus to the container that contains the location specified by the absolutePosition
		 parameter.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>absolutePosition</apiItemName><apiType value="int"/><apiDesc>Specifies the position in the text flow of the container to receive focus.
		 </apiDesc></apiParam><apiParam><apiItemName>leanLeft</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>If true and the position is before the first character in a container, sets focus to the end of 
		  the previous container.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Sets the focus to the container that contains the location specified by the <codeph>absolutePosition</codeph>
		 parameter. 
		 
		 <p>The StandardFlowComposer calls the <codeph>setFocus()</codeph> method of the ContainerController object
		 containing the specified text flow position.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#Stage/focus"><linktext>flash.display.Stage.focus</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:setRootElement"><apiName>setRootElement</apiName><shortdesc conref="IFlowComposer#setRootElement()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newRootElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:ContainerFormattedElement</apiOperationClassifier></apiParam></apiOperationDef><apiDesc conref="IFlowComposer#setRootElement()"> </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:updateAllControllers"><apiName>updateAllControllers</apiName><shortdesc> 
		 Composes the content of the root element and updates the display.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>true if anything changed.
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc> 
		 Composes the content of the root element and updates the display.  
		 
		 <p>Text layout is conducted in two phases: composition and display. In the composition phase,
		 the flow composer calculates how many lines are necessary to display the content as well as the position of these 
		 lines in the flow's display containers. In the display phase, 
		 the flow composer updates the display object children of its containers. The <codeph>updateAllControllers()</codeph>
		 method initiates both phases in sequence. The StandardFlowComposer keeps track of changes to content
		 so that a full cycle of composition and display is only performed when necessary.</p>
		 
		 <p>This method updates all the text lines and the display list immediately and synchronously.</p>
		 
		 <p>If the contents of any container is changed, the method returns <codeph>true</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:updateToController"><apiName>updateToController</apiName><shortdesc> 
		 Composes and updates the display up to and including the container at the specified index.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph>, if anything changed.
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiData>unknown</apiData><apiDesc>index of the last container to update (by default updates all containers)
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Composes and updates the display up to and including the container at the specified index.
		 
		 <p>The <codeph>updateToController()</codeph> method composes the content and 
		 updates the display of all containers up to and including the container at the specified index.
		 For example, if you have a chain of 20 containers and specify an index of 10, 
		 <codeph>updateToController()</codeph> ensures that the first through the tenth (indexes 0-9) 
		 containers are composed and displayed. Composition stops at that point. If <codeph>controllerIndex</codeph> 
		 is -1 (or not specified), then all containers are updated.</p>
		 
		 <p>This method updates all the text lines and the display list immediately and synchronously.</p>
		 
		 <p>If the contents of any container is changed, the method returns <codeph>true</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.compose:StandardFlowComposer:composing:get"><apiName>composing</apiName><shortdesc> 
		 True, if the flow composer is currently performing a composition operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc> 
		 True, if the flow composer is currently performing a composition operation. 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:StandardFlowComposer:numControllers:get"><apiName>numControllers</apiName><shortdesc conref="IFlowComposer#numControllers"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="IFlowComposer#numControllers"> </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:StandardFlowComposer:rootElement:get"><apiName>rootElement</apiName><shortdesc conref="IFlowComposer#rootElement"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:ContainerFormattedElement</apiValueClassifier></apiValueDef><apiDesc conref="IFlowComposer#rootElement"> </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.compose:TextFlowLineLocation"><apiName>TextFlowLineLocation</apiName><shortdesc> 
	 The TextFlowLineLocation class is an enumeration class that defines constants for specifying the location
	 of a line within a paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 The TextFlowLineLocation class is an enumeration class that defines constants for specifying the location
	 of a line within a paragraph.
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="flashx.textLayout.compose.ParagraphElement.xml"><linktext>ParagraphElement</linktext></link><link href="" invalidHref="flashx.textLayout.compose.TextFlow.xml"><linktext>TextFlow</linktext></link></related-links><apiValue id="flashx.textLayout.compose:TextFlowLineLocation:FIRST"><apiName>FIRST</apiName><shortdesc> Specifies the first line in a paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1</apiData><apiType value="uint"/></apiValueDef><apiDesc> Specifies the first line in a paragraph. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLineLocation:LAST"><apiName>LAST</apiName><shortdesc> Specifies the last line in a paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>4</apiData><apiType value="uint"/></apiValueDef><apiDesc> Specifies the last line in a paragraph.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLineLocation:MIDDLE"><apiName>MIDDLE</apiName><shortdesc> Specifies a middle line in a paragraph - neither the first nor the last line.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2</apiData><apiType value="uint"/></apiValueDef><apiDesc> Specifies a middle line in a paragraph - neither the first nor the last line. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLineLocation:ONLY"><apiName>ONLY</apiName><shortdesc> Specifies both the first and last lines in a paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>5</apiData><apiType value="uint"/></apiValueDef><apiDesc> Specifies both the first and last lines in a paragraph.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.compose:FlowComposerBase"><apiName>FlowComposerBase</apiName><shortdesc> 
	 The FlowComposerBase class is the base class for Text Layout Framework flow composer classes, which control the 
	 composition of text lines in ContainerController objects.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><Exclude kind="method" name="checkFirstDamage"/><Exclude kind="method" name="debugCheckTextFlowLines"/><Exclude kind="property" name="lines"/><Exclude kind="method" name="addLine"/><Exclude kind="method" name="initializeLines"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 The FlowComposerBase class is the base class for Text Layout Framework flow composer classes, which control the 
	 composition of text lines in ContainerController objects.
	 
	 <p>FlowComposerBase is a utility class that implements methods and properties that are common
	 to several types of flow composer. Application code would not typically instantiate or use this class
	 (unless extending it to create a custom flow composer).</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow/flowComposer"><linktext>flashx.textLayout.elements.TextFlow.flowComposer</linktext></link></related-links><apiConstructor id="flashx.textLayout.compose:FlowComposerBase:FlowComposerBase"><apiName>FlowComposerBase</apiName><shortdesc> Constructor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> Constructor. 
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flashx.textLayout.compose:FlowComposerBase:damage"><apiName>damage</apiName><shortdesc conref="IFlowComposer#damage()"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>startPosition</apiItemName><apiType value="int"/><apiDesc>beginning of range to damage
		 </apiDesc></apiParam><apiParam><apiItemName>damageLength</apiItemName><apiType value="int"/><apiDesc>number of characters to damage
		 </apiDesc></apiParam><apiParam><apiItemName>damageType</apiItemName><apiType value="String"/><apiDesc>type of damage.  One of flashx.textLayout.compose.FlowDamageType
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="IFlowComposer#damage()"> 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:FlowComposerBase:findLineAtPosition"><apiName>findLineAtPosition</apiName><shortdesc conref="IFlowComposer#findLineAtPosition()">
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.compose:TextFlowLine</apiOperationClassifier><apiDesc>the TextFlowLine containing the content at the specified position, or null if not found.
		
		</apiDesc></apiReturn><apiParam><apiItemName>absolutePosition</apiItemName><apiType value="int"/><apiDesc>The position of the content for which you want the TextFlowLine object.
		</apiDesc></apiParam><apiParam><apiItemName>preferPrevious</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>	Specifies which line to return when the position is between the last element of 
		one line and the first element of the next.
		
		</apiDesc></apiParam></apiOperationDef><apiDesc conref="IFlowComposer#findLineAtPosition()">
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:FlowComposerBase:findLineIndexAtPosition"><apiName>findLineIndexAtPosition</apiName><shortdesc conref="IFlowComposer#findLineIndexAtPosition()"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/><apiDesc>the index of the text line at the specified position. If not found, treats as past the end and returns the
		 number of lines.
		 	 
		 </apiDesc></apiReturn><apiParam><apiItemName>absolutePosition</apiItemName><apiType value="int"/><apiDesc>The position of the content for which you want the text line.
		 </apiDesc></apiParam><apiParam><apiItemName>preferPrevious</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Specifies which container index to return when the position is between the last line in 
		 one container and the first line in the next.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="IFlowComposer#findLineIndexAtPosition()"> 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:FlowComposerBase:getLineAt"><apiName>getLineAt</apiName><shortdesc conref="IFlowComposer#getLineAt()"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.compose:TextFlowLine</apiOperationClassifier><apiDesc>the TextFlowLine with the specified line number, or <codeph>null</codeph>, if not found.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	The line number of the TextFlowLine object to return.
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="IFlowComposer#getLineAt()"> 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:FlowComposerBase:isDamaged"><apiName>isDamaged</apiName><shortdesc conref="IFlowComposer#isDamaged()">
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>true if any of the TextFlowLine objects from the start of the flow up to the line containing the content at
		 <codeph>absolutePosition</codeph> are marked as damaged.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>absolutePosition</apiItemName><apiType value="int"/><apiDesc>the last position in the area of interest
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="IFlowComposer#isDamaged()">
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:FlowComposerBase:updateLengths"><apiName>updateLengths</apiName><shortdesc conref="IFlowComposer#updateLengths()"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>startPosition</apiItemName><apiType value="int"/><apiDesc>beginning of change in length
		 </apiDesc></apiParam><apiParam><apiItemName>deltaLength</apiItemName><apiType value="int"/><apiDesc>change in number of characters.
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="IFlowComposer#updateLengths()"> 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.compose:FlowComposerBase:damageAbsoluteStart:get"><apiName>damageAbsoluteStart</apiName><shortdesc>
		 The absolute position immediately preceding the first element in the text
		 flow that requires composition and updating.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 The absolute position immediately preceding the first element in the text
		 flow that requires composition and updating.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:FlowComposerBase:numLines:get"><apiName>numLines</apiName><shortdesc conref="IFlowComposer#numLines"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="IFlowComposer#numLines"> </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:FlowComposerBase:swfContext:get"><apiName>swfContext</apiName><shortdesc> 
		The ISWFContext instance used to make FTE calls as needed.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.compose:ISWFContext</apiValueClassifier></apiValueDef><apiDesc> 
		The ISWFContext instance used to make FTE calls as needed. 
		
		<p>By default, the ISWFContext implementation is this FlowComposerBase object.
		Applications can provide a custom implementation to use fonts
		embedded in a different SWF file or to cache and reuse text lines.</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#ISWFContext"><linktext>flashx.textLayout.compose.ISWFContext</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.compose:FlowComposerBase:textFlow:get"><apiName>textFlow</apiName><shortdesc> 
		The TextFlow object to which this flow composer is attached.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:TextFlow</apiValueClassifier></apiValueDef><apiDesc> 
		The TextFlow object to which this flow composer is attached. 
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>flashx.textLayout.elements.TextFlow</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.compose:TextLineRecycler"><apiName>TextLineRecycler</apiName><shortdesc> 
	 The TextLineRecycler class provides support for recycling of TextLines.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 The TextLineRecycler class provides support for recycling of TextLines.  Some player versions support a recreateTextLine.  Passing TextLines
	 to the recycler makes them available for reuse.  This improves Player performance.
	 
	 </apiDesc></apiClassifierDetail><apiOperation id="flashx.textLayout.compose:TextLineRecycler:addLineForReuse"><apiName>addLineForReuse</apiName><shortdesc>
		 Add a TextLine to the pool for reuse.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>textLine</apiItemName><apiType value="flash.text.engine:TextLine"/></apiParam></apiOperationDef><apiDesc>
		 Add a TextLine to the pool for reuse. TextLines for reuse should have null userData and null parent. 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:TextLineRecycler:getLineForReuse"><apiName>getLineForReuse</apiName><shortdesc>
		 Return a TextLine from the pool for reuse.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="flash.text.engine:TextLine"/></apiReturn></apiOperationDef><apiDesc>
		 Return a TextLine from the pool for reuse. 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.compose:TextLineRecycler:textLineRecyclerEnabled:get"><apiName>textLineRecyclerEnabled</apiName><shortdesc> Controls if the TLF recycler enabled.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc> Controls if the TLF recycler enabled.   It can only be enabled in 10.1 or later players.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.compose:TextFlowLine"><apiName>TextFlowLine</apiName><shortdesc> 
	 The TextFlowLine class represents a single line of text in a text flow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseInterface>flashx.textLayout.compose:IVerticalJustificationLine</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 The TextFlowLine class represents a single line of text in a text flow.
	 
	 <p>Use this class to access information about how a line of text has been composed: its position, 
	 height, width, and so on. When the text flow (TextFlow) is modified, the lines immediately before and at the  
	 site of the modification are marked as invalid because they need to be recomposed. Lines after
	 the site of the modification might not be damaged immediately, but they might be regenerated once the
	 text is composed. You can access a TextFlowLine that has been damaged, but any values you access
	 reflect the old state of the TextFlow. When the TextFlow is recomposed, it generates new lines and you can 
	 get the new line for a given position by calling <codeph>TextFlow.flowComposer.findLineAtPosition()</codeph>.</p>
	 
	 </apiDesc></apiClassifierDetail><apiConstructor id="flashx.textLayout.compose:TextFlowLine:TextFlowLine"><apiName>TextFlowLine</apiName><shortdesc> Constructor - creates a new TextFlowLine instance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>textLine</apiItemName><apiType value="flash.text.engine:TextLine"/><apiDesc>The TextLine display object to use for this line.
		 </apiDesc></apiParam><apiParam><apiItemName>paragraph</apiItemName><apiOperationClassifier>flashx.textLayout.elements:ParagraphElement</apiOperationClassifier><apiDesc>The paragraph (ParagraphElement) in which to place the line.
		 </apiDesc></apiParam><apiParam><apiItemName>outerTargetWidth</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc>The width the line is composed to, excluding indents.
		 </apiDesc></apiParam><apiParam><apiItemName>lineOffset</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc>The line's offset in pixels from the appropriate container inset (as dictated by paragraph direction and container block progression), prior to alignment of lines in the paragraph. 
		 </apiDesc></apiParam><apiParam><apiItemName>absoluteStart</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>The character position in the text flow at which the line begins.
		 </apiDesc></apiParam><apiParam><apiItemName>numChars</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>The number of characters in the line.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> Constructor - creates a new TextFlowLine instance. 
		  <p><b>Note</b>: No client should call this. It's exposed for writing your own composer.</p>
		 
		 </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.text.engine.TextLine.xml"><linktext>flash.text.engine.TextLine</linktext></link><link href="flashx.textLayout.elements.xml#ParagraphElement"><linktext>flashx.textLayout.elements.ParagraphElement</linktext></link><link href="flashx.textLayout.compose.xml#TextFlowLine/absoluteStart"><linktext>absoluteStart</linktext></link></related-links></apiConstructor><apiOperation id="flashx.textLayout.compose:TextFlowLine:getBounds"><apiName>getBounds</apiName><shortdesc> 
		 Returns the bounds of the line as a rectangle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>a rectangle that represents the boundaries of the line.
		 
		 </apiDesc><apiType value="flash.geom:Rectangle"/></apiReturn></apiOperationDef><apiDesc> 
		 Returns the bounds of the line as a rectangle.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:TextFlowLine:getTextLine"><apiName>getTextLine</apiName><shortdesc> 
		 Returns the flash.text.engine.TextLine object for this line, which might be recreated 
		 if it does not exist due to garbage collection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>object for this line or <codeph>null</codeph> if the TextLine object cannot be 
		 recreated.
		 
		 </apiDesc><apiType value="flash.text.engine:TextLine"/></apiReturn><apiParam><apiItemName>forceValid</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>if true, the TextLine is regenerated, if it exists but is invalid.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Returns the <codeph>flash.text.engine.TextLine</codeph> object for this line, which might be recreated 
		 if it does not exist due to garbage collection. Set <codeph>forceValid</codeph> to <codeph>true</codeph>
		 to cause the TextLine to be regenerated. Returns null if the TextLine cannot be recreated.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.text.engine.TextLine.xml"><linktext>TextLine</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.compose:TextFlowLine:tlf_internal:oldTestLineVisible"><apiName>oldTestLineVisible</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="tlf_internal"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>wmode</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>x</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>w</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>h</apiItemName><apiType value="int"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.compose:TextFlowLine:absoluteStart:get"><apiName>absoluteStart</apiName><shortdesc> 
		 The location of the line as an absolute character position in the TextFlow object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 
		 The location of the line as an absolute character position in the TextFlow object.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>flashx.textLayout.elements.TextFlow</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:ascent:get"><apiName>ascent</apiName><shortdesc conref="flash.text.engine.TextLine#ascent"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.text.engine.TextLine#ascent"> 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:columnIndex:get"><apiName>columnIndex</apiName><shortdesc> The number of the column in which the line has been placed, with the first column being 0.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> The number of the column in which the line has been placed, with the first column being 0.
		 	
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:controller:get"><apiName>controller</apiName><shortdesc> 
		 The controller (ContainerController object) for the container in which the line has been placed.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.container:ContainerController</apiValueClassifier></apiValueDef><apiDesc> 
		 The controller (ContainerController object) for the container in which the line has been placed.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.container.xml#ContainerController"><linktext>flashx.textLayout.container.ContainerController</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:descent:get"><apiName>descent</apiName><shortdesc conref="flash.text.engine.TextLine#descent"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.text.engine.TextLine#descent"> 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:height:get"><apiName>height</apiName><shortdesc> The height of the line in pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> The height of the line in pixels.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:lineOffset:get"><apiName>lineOffset</apiName><shortdesc> 
		 The line's offset in pixels from the appropriate container inset (as dictated by paragraph direction and container block progression), 
		 prior to alignment of lines in the paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> 
		 The line's offset in pixels from the appropriate container inset (as dictated by paragraph direction and container block progression), 
		 prior to alignment of lines in the paragraph.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:location:get"><apiName>location</apiName><shortdesc> 
		 One of the values from TextFlowLineLocation for specifying a line's location within a paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 
		 One of the values from TextFlowLineLocation for specifying a line's location within a paragraph.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#ParagraphElement"><linktext>flashx.textLayout.elements.ParagraphElement</linktext></link><link href="flashx.textLayout.compose.xml#TextFlowLineLocation"><linktext>TextFlowLineLocation</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:paragraph:get"><apiName>paragraph</apiName><shortdesc> 
		 The paragraph (ParagraphElement) in which the line resides.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:ParagraphElement</apiValueClassifier></apiValueDef><apiDesc> 
		 The paragraph (ParagraphElement) in which the line resides.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#ParagraphElement"><linktext>flashx.textLayout.elements.ParagraphElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:spaceAfter:get"><apiName>spaceAfter</apiName><shortdesc> 
		 The amount of space to leave after the line.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> 
		 The amount of space to leave after the line.
		 <p>If the line is the last line of a paragraph that has a space-after, the line will have
		 a <codeph>spaceAfter</codeph> value. If the line comes at the bottom of a column, then the <codeph>spaceAfter</codeph>
		 is ignored. Otherwise, the line comes before another line in the column, and the following line must be positioned vertically to
		 insure that there is at least this much space left between this last line of the paragraph and the first
		 line of the following paragraph.</p> 
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/paragraphSpaceAfter"><linktext>TextLayoutFormat.paragraphSpaceAfter</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:spaceBefore:get"><apiName>spaceBefore</apiName><shortdesc> 
		 The amount of space to leave before the line.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> 
		 The amount of space to leave before the line.
		 <p>If the line is the first line of a paragraph that has a space-before applied, the line will have
		 a <codeph>spaceBefore</codeph> value. If the line comes at the top of a column, <codeph>spaceBefore</codeph> is ignored. 
		 Otherwise, the line follows another line in the column, and it is positioned vertically to insure that there is
		 at least this much space left between this line and the last line of the preceding paragraph.</p> 
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/paragraphSpaceBefore"><linktext>TextLayoutFormat.paragraphSpaceBefore</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:textHeight:get"><apiName>textHeight</apiName><shortdesc>
		 The height of the text line, which is equal to ascent plus descent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 The height of the text line, which is equal to <codeph>ascent</codeph> plus <codeph>descent</codeph>. The 
		 value is calculated based on the difference between the baselines that bound the line, either 
		 ideographic top and bottom or ascent and descent depending on whether the baseline at y=0 
		 is ideographic (for example, TextBaseline.IDEOGRAPHIC_TOP) or not. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextBaseline.xml"><linktext>TextBaseline</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:textLength:get"><apiName>textLength</apiName><shortdesc> 
		 The number of characters to the next line, including trailing spaces.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 
		 The number of characters to the next line, including trailing spaces. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:textLineExists:get"><apiName>textLineExists</apiName><shortdesc> 
		 Indicates whether the flash.text.engine.TextLine object for this TextFlowLine exists.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc> 
		 Indicates whether the <codeph>flash.text.engine.TextLine</codeph> object for this TextFlowLine exists.  
		 The value is <codeph>true</codeph> if the TextLine object has <i>not</i> been garbage collected and 
		 <codeph>false</codeph> if it has been.
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextLine.xml"><linktext>TextLine</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:unjustifiedTextWidth:get"><apiName>unjustifiedTextWidth</apiName><shortdesc> 
		 The width of the line if it was not justified.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata><asCustoms><internal>TBD: add graphic of justified line
		 
		 </internal></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> 
		 The width of the line if it was not justified. For unjustified text, this value is the same as <codeph>textLength</codeph>. 
		 For justified text, this value is what the length would have been without justification, and <codeph>textLength</codeph> 
		 represents the actual line width. For example, when the following String is justified and assigned a width of 500, it 
		 has an actual width of 500 but an unjustified width of 268.9921875. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:validity:get"><apiName>validity</apiName><shortdesc> The validity of the line.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc> The validity of the line. 
		 <p>A line can be invalid if the text, the attributes applied to it, or the controller settings have
		 changed since the line was created. An invalid line can still be displayed, and you can use it, but the values
		 used will be the values at the time it was created. The line returned by <codeph>getTextLine()</codeph> also will be in an
		 invalid state. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#TextFlowLine/getTextLine()"><linktext>getTextLine()</linktext></link><link href="" invalidHref="flash.text.engine.xml#TextLine/validity"><linktext>TextLine.validity</linktext></link><link href="flashx.textLayout.compose.xml#FlowDamageType/GEOMETRY"><linktext>FlowDamageType.GEOMETRY</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:x:get"><apiName>x</apiName><shortdesc> 
		 The horizontal position of the line relative to its container, expressed as the offset in pixels from the 
		 left of the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc> 
		 The horizontal position of the line relative to its container, expressed as the offset in pixels from the 
		 left of the container.
		 <p><b>Note: </b>Although this property is technically <codeph>read-write</codeph>, 
		 you should treat it as <codeph>read-only</codeph>. The setter exists only to satisfy the
		 requirements of the IVerticalJustificationLine interface that defines both a getter and setter for this property.
		 Use of the setter, though possible, will lead to unpredictable results.
		 </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#TextFlowLine/y"><linktext>y</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:y:get"><apiName>y</apiName><shortdesc> 
		 The vertical position of the line relative to its container, expressed as the offset in pixels from the top 
		 of the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc> 
		 The vertical position of the line relative to its container, expressed as the offset in pixels from the top 
		 of the container.
		 <p><b>Note: </b>Although this property is technically <codeph>read-write</codeph>, 
		 you should treat it as <codeph>read-only</codeph>. The setter exists only to satisfy the
		 requirements of the IVerticalJustificationLine interface that defines both a getter and setter for this property.
		 Use of the setter, though possible, will lead to unpredictable results.
		 </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#TextFlowLine/x"><linktext>x</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.compose:FlowDamageType"><apiName>FlowDamageType</apiName><shortdesc>
	  The FlowDamageType class is an enumeration class that defines types of damage for damage methods and events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  The FlowDamageType class is an enumeration class that defines types of damage for damage methods and events.
	 When the text content is updated, these changes are reflected in the TextLines after an update. TextLines are 
	 marked with a flag that specifies whether or not they are valid, or up to date with all text
	 changes. When the text is first updated, all lines are marked valid or static. After the text has been changed,
	 and before the next update, lines will be marked with a FlowDamageType that specifies what about the line
	 is invalid. Once the update is done, lines will again be marked as valid or static.
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.compose:FlowDamageType:GEOMETRY"><apiName>GEOMETRY</apiName><shortdesc>
		 Value is used to set the validity property if the line has been invalidated by other lines 
		 moving around.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>geometry</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 Value is used to set the <codeph>validity</codeph> property if the line has been invalidated by other lines 
		 moving around. For instance, a line above may have been created, so this line needs to be moved down.
		 The text line might or might not need recreating at the next compose operation. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#TextFlowLine/validity"><linktext>flashx.textLayout.compose.TextFlowLine.validity</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.compose:FlowDamageType:INVALID"><apiName>INVALID</apiName><shortdesc> 
		 Value is used to set the validity property if the text content has changed since the
		 line was originally created.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>invalid</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		 Value is used to set the <codeph>validity</codeph> property if the text content has changed since the
		 line was originally created. Invalid lines needs to be recreated before they are used for selection
		 or to display the text content changes.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#TextFlowLine/validity"><linktext>flashx.textLayout.compose.TextFlowLine.validity</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.compose:IFlowComposer"><apiName>IFlowComposer</apiName><shortdesc>
	 IFlowComposer defines the interface for managing the layout and display of a text flow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 IFlowComposer defines the interface for managing the layout and display of a text flow.
	 
	 <p>Text flows displayed with a flow composer implementation can be dynamic and interactive.
	 A flow composer manages one or more display controller. Each controller is associated with
	 a display object container (such as a Sprite) through which the lines created for the text
	 flow are ultimately displayed. The following diagram illustrates the relationship between TextFlow,
	 IFlowComposer, ContainerController, and DisplayObjectContainer objects:</p>
	 
	 <p><adobeimage alt="IFlowComposer" href="../../../images/textLayout_singleController.gif"/></p>
	 
	 <p>A flow composer calculates which portion of a text flow fits in each container and 
	 adds the appropriate text lines to the container's display object. The IFlowComposer interface 
	 defines separate methods for layout calculations and for updating the display. IFlowComposer also 
	 defines methods for incrementally composing and updating a text flow. These methods can be used 
	 to avoid blocking the user interface when updating long text flows.</p>
	 
	 <p>In addition to managing text composition and display, a flow composer controls which container has focus, 
	 manages the display of the selection highlight (which can cross container boundaries), and provides
	 direct access to all the TextLine objects in the flow.</p>
	 
	 <p>To use an IFlowComposer implementation, assign an instance of that implementation to the
	 <codeph>flowComposer</codeph> property of a TextFlow object. Call the <codeph>updateAllControllers()</codeph>
	 method to lay out and display the text in the containers attached to the flow composer.</p>
	 
	 <p><b>Note:</b> For simple, static text flows, you can also use the one of the text line factory classes.
	 These factory classes will typically create lines with less overhead than a flow composer, but do not
	 support editing, dynamic changes, or user interaction.</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.container.xml#ContainerController"><linktext>ContainerController</linktext></link><link href="flashx.textLayout.compose.xml#FlowComposerBase"><linktext>FlowComposerBase</linktext></link><link href="flashx.textLayout.compose.xml#StandardFlowComposer"><linktext>StandardFlowComposer</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link><link href="flashx.textLayout.factory.xml#StringTextLineFactory"><linktext>StringTextLineFactory</linktext></link><link href="flashx.textLayout.factory.xml#TextFlowTextLineFactory"><linktext>TextFlowTextLineFactory</linktext></link></related-links><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:addControllerAt"><apiName>addControllerAt</apiName><shortdesc> 
		 Adds a controller to this IFlowComposer instance at the specified index.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>controller</apiItemName><apiOperationClassifier>flashx.textLayout.container:ContainerController</apiOperationClassifier><apiDesc>The ContainerController object to add.
		 </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>A numeric index that specifies the position in the controller list at which to insert the ContainerController object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Adds a controller to this IFlowComposer instance at the specified index.
		 
		 <p>The list of controllers is 0-based (the first controller has an index of 0).</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:addController"><apiName>addController</apiName><shortdesc> 
		 Adds a controller to this IFlowComposer instance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>controller</apiItemName><apiOperationClassifier>flashx.textLayout.container:ContainerController</apiOperationClassifier><apiDesc>The ContainerController object to add.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Adds a controller to this IFlowComposer instance.
		 
		 <p>The container is added to the end of the container list.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:composeToController"><apiName>composeToController</apiName><shortdesc> 
		 Composes the content of the root element up to and including the container at the specified index.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>true if anything changed.
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiData>unknown</apiData><apiDesc>compose at least up to this container in the TextFlow. If controllerIndex is greater than the number of controllers, compose to the end of the last container.
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Composes the content of the root element up to and including the container at the specified index.
		 
		 <p>If the contents of any container up to and including the container at the specified
		 index has changed, the method returns <codeph>true</codeph>. If <codeph>index</codeph> is greater than the number of controllers
		 (or not specified), then all containers are composed.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.compose.xml#IFlowComposer/updateAllControllers()"><linktext>updateAllControllers()</linktext></link><link href="flashx.textLayout.compose.xml#IFlowComposer/updateToController()"><linktext>updateToController()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:composeToPosition"><apiName>composeToPosition</apiName><shortdesc> 
		 Composes the content of the root element up to the specified position.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>true if anything changed.
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>absolutePosition</apiItemName><apiType value="int"/><apiData>unknown</apiData><apiDesc>compose at least up to this position in the TextFlow. By default or if absolutePosition is past the end of the flow compose to the end of the flow.
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Composes the content of the root element up to the specified position.
		 
		 <p>If the contents of any container up to and including the container holding the content at the specified
		 position has changed, the method returns <codeph>true</codeph>. If <codeph>absolutePosition</codeph> is greater than the length of the TextFlow 
		 (or not specified), then the entire flow is composed.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.compose.xml#IFlowComposer/updateAllControllers()"><linktext>updateAllControllers()</linktext></link><link href="flashx.textLayout.compose.xml#IFlowComposer/updateToController()"><linktext>updateToController()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:compose"><apiName>compose</apiName><shortdesc> 
		 Calculates how many lines are necessary to display the content in the root element of the flow and the positions of these 
		 lines in the flow's display containers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>true if anything changed.
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc> 
		 Calculates how many lines are necessary to display the content in the root element of the flow and the positions of these 
		 lines in the flow's display containers.
		 
		 <p>Implementations of this method should not update the display, but should save the results so that subsequent
		 calls to <codeph>compose()</codeph> or <codeph>updateAllControllers()</codeph> do not perform an additional recomposition
		 if the flow content has not changed.</p>
		 
		 <p>If the contents of any container have changed, the method must return <codeph>true</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.compose.xml#IFlowComposer/updateAllControllers()"><linktext>updateAllControllers()</linktext></link><link href="flashx.textLayout.compose.xml#IFlowComposer/updateToController()"><linktext>updateToController()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:damage"><apiName>damage</apiName><shortdesc> Mark lines as damaged and needing a recompose.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>startPosition</apiItemName><apiType value="int"/><apiDesc>beginning of range to damage
		 </apiDesc></apiParam><apiParam><apiItemName>damageLength</apiItemName><apiType value="int"/><apiDesc>number of characters to damage
		 </apiDesc></apiParam><apiParam><apiItemName>damageType</apiItemName><apiType value="String"/><apiDesc>type of damage.  One of flashx.textLayout.compose.FlowDamageType
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Mark lines as damaged and needing a recompose.
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.compose.xml#FlowDamageType"><linktext>flashx.textLayout.compose.FlowDamageType</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:findControllerIndexAtPosition"><apiName>findControllerIndexAtPosition</apiName><shortdesc> 
		 Returns the index of the controller containing the content at the specified position.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the index of the container controller or -1 if not found.
		 
		 </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>absolutePosition</apiItemName><apiType value="int"/><apiDesc>The position of the content for which the container index is sought.
		 </apiDesc></apiParam><apiParam><apiItemName>preferPrevious</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Specifies which container index to return when the position is between the last element in 
		 one container and the first element in the next.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Returns the index of the controller containing the content at the specified position. 
		 
		 <p>A position can be considered to be the division between two characters or other elements of a text flow. If 
		 the value in <codeph>absolutePosition</codeph> is a position between the last character of one 
		 container and the first character of the next, then the preceding container is returned if
		 the <codeph>preferPrevious</codeph> parameter is set to <codeph>true</codeph> and the later container is returned if
		 the <codeph>preferPrevious</codeph> parameter is set to <codeph>false</codeph>.</p>
		 
		 <p>The method must return -1 if the content at the specified position is not in any container or is outside
		 the range of positions in the text flow.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:findLineAtPosition"><apiName>findLineAtPosition</apiName><shortdesc> 
		Returns the TextFlowLine object containing the content at the specified position.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the TextFlowLine containing the content at the specified position, or null if not found.
		
		</apiDesc><apiOperationClassifier>flashx.textLayout.compose:TextFlowLine</apiOperationClassifier></apiReturn><apiParam><apiItemName>absolutePosition</apiItemName><apiType value="int"/><apiDesc>The position of the content for which you want the TextFlowLine object.
		</apiDesc></apiParam><apiParam><apiItemName>preferPrevious</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>	Specifies which line to return when the position is between the last element of 
		one line and the first element of the next.
		
		</apiDesc></apiParam></apiOperationDef><apiDesc> 
		Returns the TextFlowLine object containing the content at the specified position.
		
		<p>A position can be considered to be the division between two characters or other elements of a text flow. If 
		the value in <codeph>absolutePosition</codeph> is a position between the last element of one 
		line and the first element of the next, then the preceding line is returned if
		the <codeph>preferPrevious</codeph> parameter is set to <codeph>true</codeph> and the later line is returned if
		the <codeph>preferPrevious</codeph> parameter is set to <codeph>false</codeph>.</p>
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:findLineIndexAtPosition"><apiName>findLineIndexAtPosition</apiName><shortdesc> 
		 Returns the sequential line number of the TextFlowLine object that contains the content at the specified position.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the index of the text line at the specified position. If not found, treats as past the end and returns the
		 number of lines.
		 	 
		 </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>absolutePosition</apiItemName><apiType value="int"/><apiDesc>The position of the content for which you want the text line.
		 </apiDesc></apiParam><apiParam><apiItemName>preferPrevious</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Specifies which container index to return when the position is between the last line in 
		 one container and the first line in the next.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Returns the sequential line number of the TextFlowLine object that contains the content at the specified position. 
		 
		 <p>The number of the first line is 0 and the number of the last line is equal to the number of lines minus one.
		 If the position specified in <codeph>absolutePosition</codeph> is past the end of the text flow, this method must return
		 the number that will be assigned to the next new line added to the text flow (which is equal to the number of current lines).</p>
		 
		 <p>A position can be considered to be the division between two characters or other elements of a text flow. If 
		 the value in <codeph>absolutePosition</codeph> is a position between the last line of one 
		 container and the first line of the next, then the preceding container is returned if
		 the <codeph>preferPrevious</codeph> parameter is set to <codeph>true</codeph> and the later container is returned if
		 the <codeph>preferPrevious</codeph> parameter is set to <codeph>false</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:getControllerAt"><apiName>getControllerAt</apiName><shortdesc> 
		 Returns the ContainerController object at the specified index.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the ContainerController object at the specified position.
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.container:ContainerController</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>The index of the ContainerController object to return.
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Returns the ContainerController object at the specified index. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:getControllerIndex"><apiName>getControllerIndex</apiName><shortdesc> 
		 Returns the index of the specified ContainerController object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the index of the specified ContainerController object or -1 if the controller is not attached to this flow composer.
		 
		 </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>controller</apiItemName><apiOperationClassifier>flashx.textLayout.container:ContainerController</apiOperationClassifier><apiDesc>A reference to the ContainerController object to find.
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Returns the index of the specified ContainerController object. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:getLineAt"><apiName>getLineAt</apiName><shortdesc> 
		 Returns the line with the specified line number.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the TextFlowLine with the specified line number, or <codeph>null</codeph>, if not found.
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.compose:TextFlowLine</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	The line number of the TextFlowLine object to return.
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Returns the line with the specified line number. 
		 
		 <p>The list of lines is numbered from zero to the number of lines minus one. If the value in <codeph>index</codeph>
		 is outside the bounds of the list of lines, then this function returns <codeph>null</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:interactionManagerChanged"><apiName>interactionManagerChanged</apiName><shortdesc>
		 Called by the TextFlow when the interaction manager changes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newInteractionManager</apiItemName><apiOperationClassifier>flashx.textLayout.edit:ISelectionManager</apiOperationClassifier><apiDesc>The new ISelectionManager instance.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Called by the TextFlow when the interaction manager changes. 
		 
		 <p>Implementations of IFlowComposer should update event listeners and properties
		 that reference the interaction manager.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:isDamaged"><apiName>isDamaged</apiName><shortdesc> 
		 Indicates whether any TextFlowLine objects between the beginning of the flow and the line containing the content at 
		 the specified position are marked as damaged.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>true if any of the TextFlowLine objects from the start of the flow up to the line containing the content at
		 <codeph>absolutePosition</codeph> are marked as damaged.
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>absolutePosition</apiItemName><apiType value="int"/><apiDesc>the last position in the area of interest
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Indicates whether any TextFlowLine objects between the beginning of the flow and the line containing the content at 
		 the specified position are marked as damaged. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:removeAllControllers"><apiName>removeAllControllers</apiName><shortdesc> 
		 Removes all controllers from this IFlowComposer instance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Removes all controllers from this IFlowComposer instance. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:removeControllerAt"><apiName>removeControllerAt</apiName><shortdesc> 
		 Removes the controller at the specified index from this IFlowComposer instance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>The index of the ContainerController object to remove.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Removes the controller at the specified index from this IFlowComposer instance.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:removeController"><apiName>removeController</apiName><shortdesc> 
		 Removes a controller from this IFlowComposer instance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>controller</apiItemName><apiOperationClassifier>flashx.textLayout.container:ContainerController</apiOperationClassifier><apiDesc>The ContainerController instance to remove.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Removes a controller from this IFlowComposer instance. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:setFocus"><apiName>setFocus</apiName><shortdesc> 
		 Sets the focus to the container that contains the location specified by the absolutePosition
		 parameter.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>absolutePosition</apiItemName><apiType value="int"/><apiDesc>Specifies the position in the text flow of the container to receive focus.
		 </apiDesc></apiParam><apiParam><apiItemName>preferPrevious</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>If true and the position is the before the first character in a container, sets focus to the end of 
		  the previous container.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Sets the focus to the container that contains the location specified by the <codeph>absolutePosition</codeph>
		 parameter. 
		 
		 <p>It is the responsibility of the implementation to define what setting the focus means. For example, an 
		 implementation could use the built-in <codeph>focus</codeph> property of the Stage object (as long as the
		 containers were InteractiveObjects) or the implementation could manage the focus some other way.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#Stage/focus"><linktext>flash.display.Stage.focus</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:setRootElement"><apiName>setRootElement</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newRootElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:ContainerFormattedElement</apiOperationClassifier></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:updateAllControllers"><apiName>updateAllControllers</apiName><shortdesc> 
		 Composes the content of the root element and updates the display.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>true if anything changed.
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc> 
		 Composes the content of the root element and updates the display.  
		 
		 <p>Text layout is typically conducted in two phases: composition and display. In the composition phase,
		 the flow composer calculates how many lines are necesary to display the content as well as the position of these 
		 lines in the flow's display containers. In the display phase, 
		 the flow composer updates the display object children of its containers. The <codeph>updateAllControllers()</codeph>
		 method is expected to carry out both phases. An efficient implementation will keep track of changes to content
		 so that a full cycle of composition and display is only performed when necessary.</p>
		 
		 <p>This method updates all the text lines and the display list immediately and synchronously.</p>
		 
		 <p>If the contents of any container is changed, the method must return <codeph>true</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:updateLengths"><apiName>updateLengths</apiName><shortdesc> Update the lengths in the lines to maintain mapping to the TextFlow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>startPosition</apiItemName><apiType value="int"/><apiDesc>beginning of change in length
		 </apiDesc></apiParam><apiParam><apiItemName>deltaLength</apiItemName><apiType value="int"/><apiDesc>change in number of characters.
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Update the lengths in the lines to maintain mapping to the TextFlow. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:updateToController"><apiName>updateToController</apiName><shortdesc> 
		 Composes and updates the display up to and including the container at the specified index.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>true if anything changed.
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiData>unknown</apiData><apiDesc>index of the last container to update, by default will update all containers
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Composes and updates the display up to and including the container at the specified index.
		 
		 <p>The <codeph>updateToController()</codeph> method is expected to both compose the content and 
		 update the display so that all containers up to and including the container at the specified index are current.
		 For example, if you have a chain of twenty containers and specify an index of 10, 
		 <codeph>updateToController()</codeph> must ensures that the first through the tenth (indexes 0-9) containers
		 are composed and displayed. Composition can stop at that point. If <codeph>controllerIndex</codeph> 
		 is -1 (or not specified), then all containers should be updated.</p>
		 
		 <p>This method updates all the text lines and the display list immediately and synchronously.</p>
		 
		 <p>If the contents of any container is changed, the method must return <codeph>true</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:composing:get"><apiName>composing</apiName><shortdesc> 
		 True, if the flow composer is currently performing a composition operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc> 
		 True, if the flow composer is currently performing a composition operation.
		  
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:damageAbsoluteStart:get"><apiName>damageAbsoluteStart</apiName><shortdesc> 
		 The first invalid position in the root element, as an absolute position from the start of the flow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 
		 The first invalid position in the root element, as an absolute position from the start of the flow.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:numControllers:get"><apiName>numControllers</apiName><shortdesc> 
		 The number of containers assigned to this IFlowComposer instance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 
		 The number of containers assigned to this IFlowComposer instance. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:numLines:get"><apiName>numLines</apiName><shortdesc> 
		 The total number of lines composed in the flow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 
		 The total number of lines composed in the flow.  By default TLF does not compose the entire flow and this value may be innacruate.
		 Use composeToPosition to get all lines composed.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:rootElement:get"><apiName>rootElement</apiName><shortdesc> 
		 The root element associated with this IFlowComposer instance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:ContainerFormattedElement</apiValueClassifier></apiValueDef><apiDesc> 
		 The root element associated with this IFlowComposer instance. 
		 
		 <p>Only a TextFlow object can be a root element.</p>
		  
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#ContainerFormattedElement"><linktext>ContainerFormattedElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:swfContext:get"><apiName>swfContext</apiName><shortdesc> 
		 The ISWFContext instance to be used for calls that must be made in a specific SWF context  
		 
		 Implementations of IFlowComposer should allow this property to be set so that users
		 of the interface can create lines in a different SWF context than the one containing the 
		 implementation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.compose:ISWFContext</apiValueClassifier></apiValueDef><apiDesc> 
		 The ISWFContext instance to be used for calls that must be made in a specific SWF context  
		 
		 <p>Implementations of IFlowComposer should allow this property to be set so that users
		 of the interface can create lines in a different SWF context than the one containing the 
		 implementation.  A default implementation of ISWFContext should also be supplied.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flashx.elements.ISWFContext.xml"><linktext>ISWFContext</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.compose:ISWFContext"><apiName>ISWFContext</apiName><shortdesc> 
	 The ISWFContext interface allows a SWF file to share its context with other SWF files that load it.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc> 
	 The ISWFContext interface allows a SWF file to share its context with other SWF files that load it.
	 An application that loads a SWF file of type ISWFContext can call methods in the context of the loaded SWF file.
	 The main usage is for calling the FTE TextLine creation methods.
	 
	 <p>There are two reasons for an application to use 
	 this interface to control TextLine creation: </p>
	 <ul>
	   <li><b>Reuse an embedded font: </b> if an application wants to use a font embedded in a loaded SWF file,
	 the application can access the font if a TextLine
	 is created in the context of the loaded SWF file.</li>
	   <li><b>Reuse existing TextLine instances</b>: reusing existing TextLine instances can result in faster recompose times. 
	 TLF reuses existing TextLine instances internally. TLF reuses 
	 a TextLine by calling <codeph>TextBlock.recreateTextLine()</codeph>
	 instead of <codeph>TextBlock.createTextLine()</codeph> when TLF recognizes that a TextLine is extant.</li>
	 </ul>
	 
	 
	 <p>Your application may have additional TextLine instances that can be reused. 
	 To manually reuse existing TextLine instances:</p>
	 <ol>
	   <li>trap calls to <codeph>TextBlock.createTextLine()</codeph>, then</li>
	   <li>call <codeph>TextBlock.recreateTextLine()</codeph> with the extant TextLine instance instead 
	 of <codeph>TextBlock.createTextLine()</codeph>.</li>
	 </ol>
	 <p>Please note, however, that the <codeph>TextBlock.recreateTextLine()</codeph> is available
	 only in Flash Player 10.1 and later.</p>
	 
	 </apiDesc><example conref="examples\EmbeddedFontLineCreator.as"/><example conref="examples\FontConsumer.as"/></apiClassifierDetail><related-links><link href="" invalidHref="flash.text.engine.xml#TextBlock/createTextLine()"><linktext>flash.text.engine.TextBlock.createTextLine()</linktext></link><link href="" invalidHref="flash.text.engine.xml#TextBlock/recreateTextLine()"><linktext>flash.text.engine.TextBlock.recreateTextLine()</linktext></link></related-links><apiOperation id="flashx.textLayout.compose:ISWFContext:flashx.textLayout.compose:ISWFContext:callInContext"><apiName>callInContext</apiName><shortdesc>
	      A way to call a method in a client controlled context.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Whatever the function returns, if anything.
	     
	      </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>fn</apiItemName><apiType value="Function"/><apiDesc>The function or method to call
	      </apiDesc></apiParam><apiParam><apiItemName>thisArg</apiItemName><apiType value="Object"/><apiDesc>The this pointer for the function
	      </apiDesc></apiParam><apiParam><apiItemName>argArray</apiItemName><apiType value="Array"/><apiDesc>The arguments for the function
	      </apiDesc></apiParam><apiParam><apiItemName>returns</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>If true, the function returns a value
	     
	      </apiDesc></apiParam></apiOperationDef><apiDesc>
	      A way to call a method in a client controlled context.
	     
	      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flashx.textLayout.compose.xml#Function/apply()"><linktext>Function.apply()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="flashx.textLayout.compose:IVerticalJustificationLine"><apiName>IVerticalJustificationLine</apiName><shortdesc> 
	 The IVerticalJustificationLine interface defines the methods and properties required to allow
	 the vertical justification of text lines.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc> 
	 The IVerticalJustificationLine interface defines the methods and properties required to allow
	 the vertical justification of text lines.
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.compose:IVerticalJustificationLine:flashx.textLayout.compose:IVerticalJustificationLine:ascent:get"><apiName>ascent</apiName><shortdesc conref="flash.text.engine.TextLine#ascent"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.text.engine.TextLine#ascent"> 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:IVerticalJustificationLine:flashx.textLayout.compose:IVerticalJustificationLine:descent:get"><apiName>descent</apiName><shortdesc conref="flash.text.engine.TextLine#descent"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.text.engine.TextLine#descent"> 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:IVerticalJustificationLine:flashx.textLayout.compose:IVerticalJustificationLine:height:get"><apiName>height</apiName><shortdesc> The height of the line in pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> The height of the line in pixels.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:IVerticalJustificationLine:flashx.textLayout.compose:IVerticalJustificationLine:x:get"><apiName>x</apiName><shortdesc> 
		 The horizontal position of the line relative to its container, expressed as the offset in pixels from the 
		 left of the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc> 
		 The horizontal position of the line relative to its container, expressed as the offset in pixels from the 
		 left of the container.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#IVerticalJustificationLine/y"><linktext>y</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.compose:IVerticalJustificationLine:flashx.textLayout.compose:IVerticalJustificationLine:y:get"><apiName>y</apiName><shortdesc> 
		 The vertical position of the line relative to its container, expressed as the offset in pixels from the top 
		 of the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc> 
		 The vertical position of the line relative to its container, expressed as the offset in pixels from the top 
		 of the container.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#IVerticalJustificationLine/x"><linktext>x</linktext></link></related-links></apiValue></apiClassifier></apiPackage><apiPackage id="flashx.textLayout.container"><apiName>flashx.textLayout.container</apiName><apiDetail/><apiClassifier id="flashx.textLayout.container:ColumnState"><apiName>ColumnState</apiName><shortdesc> 
	 The ColumnState class calculates the sizes and locations of columns using
	 the width of the container and the container attributes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 The ColumnState class calculates the sizes and locations of columns using
	 the width of the container and the container attributes. You can create instances of this class 
	 independently to calculate column values, or you can get the column values that 
	 were used for the text after the container has been composed or updated (redrawn).
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.container.xml#ContainerController"><linktext>ContainerController</linktext></link></related-links><apiConstructor id="flashx.textLayout.container:ColumnState:ColumnState"><apiName>ColumnState</apiName><shortdesc>
		 Constructor function - creates a ColumnState object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>blockProgression</apiItemName><apiType value="String"/><apiDesc>The direction of lines for the textflow, either BlockProgression.TB (top-to-bottom) or 
		 		BlockProgression.RL (right-to-left).
		 </apiDesc></apiParam><apiParam><apiItemName>columnDirection</apiItemName><apiType value="String"/><apiDesc>The direction of column layout for the text flow, either Direction.RTL (right-to-left) or 
		 		Direction.LTR (left-to-right).
		 </apiDesc></apiParam><apiParam><apiItemName>controller</apiItemName><apiOperationClassifier>flashx.textLayout.container:ContainerController</apiOperationClassifier><apiDesc>A ContainerController instance whose attributes are used to calculate the column values.
		 </apiDesc></apiParam><apiParam><apiItemName>compositionWidth</apiItemName><apiType value="Number"/><apiDesc>The horizontal extent, in pixels, allowed for text inside the container.
		 </apiDesc></apiParam><apiParam><apiItemName>compositionHeight</apiItemName><apiType value="Number"/><apiDesc>The vertical extent, in pixels, allowed for text inside the container.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor function - creates a ColumnState object.
		 
		 If the values of <codeph>controller.compositionWidth</codeph> and <codeph>controller.compositionHeight</codeph> equal
		 <codeph>NaN</codeph> (not a number), the constructor measures the container's contents to determine the actual 
		 composition width and height that feed into ColumnState.
		 
		 Use the constants defined by the <codeph>flashx.textLayout.formats.BlockProgression</codeph> class to 
		 specify the value of the <codeph>blockProgression</codeph> parameter. Use the constants defined by
		 <codeph>flashx.textLayout.formats.Direction</codeph> to specify the value of the <codeph>columnDirection</codeph> 
		 parameter.
		 
		 </apiDesc></apiConstructorDetail><related-links><link href="flashx.textLayout.formats.xml#BlockProgression"><linktext>BlockProgression</linktext></link><link href="flashx.textLayout.formats.xml#Direction"><linktext>Direction</linktext></link></related-links></apiConstructor><apiOperation id="flashx.textLayout.container:ColumnState:getColumnAt"><apiName>getColumnAt</apiName><shortdesc> 
		 Returns the area that a column takes within the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The area of the specified column.
		 
		 </apiDesc><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>The relative position of the column among all columns in the container, with the first
		 	column at position 0.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Returns the area that a column takes within the container. Allows you to access the area for a 
		 specific column.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.container:ColumnState:columnCount:get"><apiName>columnCount</apiName><shortdesc> 
		 The number of columns in the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 
		 The number of columns in the container. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ColumnState:columnGap:get"><apiName>columnGap</apiName><shortdesc> 
		 The amount of space, in pixels, left between columns in the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> 
		 The amount of space, in pixels, left between columns in the container.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ColumnState:columnWidth:get"><apiName>columnWidth</apiName><shortdesc> 
		 The width of columns, in pixels, in the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> 
		 The width of columns, in pixels, in the container. 
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.container:ContainerController"><apiName>ContainerController</apiName><shortdesc> 
	 The ContainerController class defines the relationship between a TextFlow object and a container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.edit:IInteractionEventHandler</apiBaseInterface><apiBaseInterface>flashx.textLayout.formats:ITextLayoutFormat</apiBaseInterface><apiBaseInterface>flashx.textLayout.container:ISandboxSupport</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 The ContainerController class defines the relationship between a TextFlow object and a container.
	 A TextFlow may have one or more rectangular areas that can hold text; the text is said to be flowing
	 through the containers. Each container is a Sprite that is the parent DisplayObject for the TextLines.
	 Each container has a ContainerController that manages the container; the controller holds the target 
	 width and height for the text area, populates the container with TextLines, and handles scrolling. A
	 controller also has a format associated with it that allows some formatting attributes to be applied 
	 to the text in the container. This allows, for instance, a TextFlow to have one container where the
	 text appears in a single column, and a second container in the same TextFlow with two column text. Not
	 all formatting attributes that can be applied to the container will affect the text; only the ones that
	 affect container-level layout. The diagram below illustrates the relationship between the TextFlow,
	 its flowComposer, and the display list.
	 
	 <p><adobeimage alt="IContainerController" href="../../../images/textLayout_multiController.gif"/></p>
	 
	 </apiDesc><example conref="examples\ContainerControllerExample1.as"/><example conref="examples\ContainerControllerExample2.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.compose.xml#IFlowComposer"><linktext>flashx.textLayout.compose.IFlowComposer</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>flashx.textLayout.elements.TextFlow</linktext></link><link href="" invalidHref="flash.text.engine.TextLine.xml"><linktext>flash.text.engine.TextLine</linktext></link></related-links><apiConstructor id="flashx.textLayout.container:ContainerController:ContainerController"><apiName>ContainerController</apiName><shortdesc> 
		 Constructor - creates a ContainerController instance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>container</apiItemName><apiType value="flash.display:Sprite"/><apiDesc>The DisplayObjectContainer in which to manage the text lines.
		 </apiDesc></apiParam><apiParam><apiItemName>compositionWidth</apiItemName><apiType value="Number"/><apiData>100</apiData><apiDesc>The initial width for composing text in the container.
		 </apiDesc></apiParam><apiParam><apiItemName>compositionHeight</apiItemName><apiType value="Number"/><apiData>100</apiData><apiDesc>The initial height for composing text in the container.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Constructor - creates a ContainerController instance. The ContainerController has a default <codeph>compositionWidth</codeph>
		 and <codeph>compositionHeight</codeph> so that some text appears in the container if you don't specify its width
		 height.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flashx.textLayout.container:ContainerController:activateHandler"><apiName>activateHandler</apiName><shortdesc> Processes the Event.ACTIVATE event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>The Event object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Processes the <codeph>Event.ACTIVATE</codeph> event when the client manages events.
		 
		 </apiDesc><example conref="examples\ContainerController_activateHandlerExample.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#Event/ACTIVATE"><linktext>Event.ACTIVATE</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:protected:addBackgroundShape"><apiName>addBackgroundShape</apiName><shortdesc>
		 Adds a flash.display.Shape object on which background shapes (such as background color) are drawn.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>shape</apiItemName><apiType value="flash.display:Shape"/><apiDesc><codeph>flash.display.Shape</codeph> object to add
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Adds a <codeph>flash.display.Shape</codeph> object on which background shapes (such as background color) are drawn.
		 The default implementation of this method, which may be overriden, adds the object to <codeph>container</codeph>
		 just before the first <codeph>flash.text.engine.TextLine</codeph> child, if one exists, and after the last exisiting
		 child otherwise. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.Shape.xml"><linktext>flash.display.Shape</linktext></link><link href="" invalidHref="flash.text.engine.TextLine.xml"><linktext>flash.text.engine.TextLine</linktext></link><link href="flashx.textLayout.container.xml#ContainerController/container"><linktext>container</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:protected:addInlineGraphicElement"><apiName>addInlineGraphicElement</apiName><shortdesc>
		 Adds a flash.display.DisplayObject object as a descendant of parent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>parent</apiItemName><apiType value="flash.display:DisplayObjectContainer"/><apiDesc>the <codeph>flash.display.DisplayObjectContainer</codeph> object to add the inlineGraphicElement to
		 </apiDesc></apiParam><apiParam><apiItemName>inlineGraphicElement</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>the <codeph>flash.display.DisplayObject</codeph> object to add
		 </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>insertion index of the float in its parent 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Adds a <codeph>flash.display.DisplayObject</codeph> object as a descendant of <codeph>parent</codeph>.
		 The default implementation of this method, which may be overriden, adds the object
		 as a direct child of <codeph>parent</codeph> at the specified index. This is called to add 
		 InlineGraphicElements to the TextLine or container.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.DisplayObjectContainer.xml"><linktext>flash.display.DisplayObjectContainer</linktext></link><link href="" invalidHref="flash.display.DisplayObject.xml"><linktext>flash.display.DisplayObject</linktext></link><link href="flashx.textLayout.container.xml#ContainerController/container"><linktext>container</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:protected:addSelectionContainer"><apiName>addSelectionContainer</apiName><shortdesc>
		 Adds a flash.display.DisplayObjectContainer object to which selection shapes (such as block selection highlight, cursor etc.) are added.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>selectionContainer</apiItemName><apiType value="flash.display:DisplayObjectContainer"/><apiDesc><codeph>flash.display.DisplayObjectContainer</codeph> object to add
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Adds a <codeph>flash.display.DisplayObjectContainer</codeph> object to which selection shapes (such as block selection highlight, cursor etc.) are added.
		 The default implementation of this method, which may be overriden, has the following behavior:
		 The object is added just before first <codeph>flash.text.engine.TextLine</codeph> child of <codeph>container</codeph> if one exists 
		 and the object is opaque and has normal blend mode. 
		 In all other cases, it is added as the last child of <codeph>container</codeph>.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.DisplayObjectContainer.xml"><linktext>flash.display.DisplayObjectContainer</linktext></link><link href="" invalidHref="flash.text.engine.TextLine.xml"><linktext>flash.text.engine.TextLine</linktext></link><link href="flashx.textLayout.container.xml#ContainerController/container"><linktext>container</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:protected:addTextLine"><apiName>addTextLine</apiName><shortdesc>
		 Adds a flash.text.engine.TextLine object as a descendant of container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>textLine</apiItemName><apiType value="flash.text.engine:TextLine"/><apiDesc>the <codeph>flash.text.engine.TextLine</codeph> object to add
		 </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>insertion index of the text line in its parent 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Adds a <codeph>flash.text.engine.TextLine</codeph> object as a descendant of <codeph>container</codeph>.
		 The default implementation of this method, which may be overriden, adds the object
		 as a direct child of <codeph>container</codeph> at the specified index.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.text.engine.TextLine.xml"><linktext>flash.text.engine.TextLine</linktext></link><link href="flashx.textLayout.container.xml#ContainerController/container"><linktext>container</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:autoScrollIfNecessary"><apiName>autoScrollIfNecessary</apiName><shortdesc> 
		 Handle a scroll event during a "drag" selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>mouseX</apiItemName><apiType value="int"/><apiDesc>The horizontal position of the mouse cursor on the stage.
		 </apiDesc></apiParam><apiParam><apiItemName>mouseY</apiItemName><apiType value="int"/><apiDesc>The vertical position of the mouse cursor  on the stage.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Handle a scroll event during a "drag" selection. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:beginMouseCapture"><apiName>beginMouseCapture</apiName><shortdesc> 
		 Called to request clients to begin the forwarding of mouseup and mousemove events from outside a security sandbox.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Called to request clients to begin the forwarding of mouseup and mousemove events from outside a security sandbox.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:clearStyle"><apiName>clearStyle</apiName><shortdesc> Clears the style specified by styleProp from this FlowElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc> Clears the style specified by <codeph>styleProp</codeph> from this FlowElement. Sets the value to
		 <codeph>undefined</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:protected:createContextMenu"><apiName>createContextMenu</apiName><shortdesc> 
		 Creates a context menu for the ContainerController.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="flash.ui:ContextMenu"/></apiReturn></apiOperationDef><apiDesc> 
		 Creates a context menu for the ContainerController. Use the methods of the ContextMenu class to 
		 add items to the menu.
		 <p>You can override this method to define a custom context menu.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.ui.ContextMenu.xml"><linktext>ContextMenu</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:deactivateHandler"><apiName>deactivateHandler</apiName><shortdesc> Processes the Event.DEACTIVATE event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>The Event object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Processes the <codeph>Event.DEACTIVATE</codeph> event when the client manages events. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#Event/DEACTIVATE"><linktext>Event.DEACTIVATE</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:editHandler"><apiName>editHandler</apiName><shortdesc>
		 Processes an edit event (CUT, COPY, PASTE, SELECT_ALL) when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Event object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Processes an edit event (CUT, COPY, PASTE, SELECT_ALL) when the client manages events.
		 
		 </apiDesc><example conref="examples\ContainerController_editHandlerExample.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.events.Event.xml"><linktext>Event</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:endMouseCapture"><apiName>endMouseCapture</apiName><shortdesc> 
		 Called to inform clients that the the forwarding of mouseup and mousemove events from outside a security sandbox is no longer needed.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Called to inform clients that the the forwarding of mouseup and mousemove events from outside a security sandbox is no longer needed.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:focusChangeHandler"><apiName>focusChangeHandler</apiName><shortdesc> 
		 Processes the FocusEvent.KEY_FOCUS_CHANGE and FocusEvent.MOUSE_FOCUS_CHANGE events
		 when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/><apiDesc>The FocusEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Processes the <codeph>FocusEvent.KEY_FOCUS_CHANGE</codeph> and <codeph>FocusEvent.MOUSE_FOCUS_CHANGE</codeph> events
		 when the client manages events.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#FocusEvent/KEY_FOCUS_CHANGE"><linktext>FocusEvent.KEY_FOCUS_CHANGE</linktext></link><link href="" invalidHref="flash.events.xml#FocusEvent/MOUSE_FOCUS_CHANGE"><linktext>FocusEvent.MOUSE_FOCUS_CHANGE</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:focusInHandler"><apiName>focusInHandler</apiName><shortdesc> Processes the FocusEvent.FOCUS_IN event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/><apiDesc>The FocusEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Processes the <codeph>FocusEvent.FOCUS_IN</codeph> event when the client manages events.
		 
		 </apiDesc><example conref="examples\ContainerController_focusInHandlerExample.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#FocusEvent/FOCUS_IN"><linktext>FocusEvent.FOCUS_IN</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:focusOutHandler"><apiName>focusOutHandler</apiName><shortdesc> Processes the FocusEvent.FOCUS_OUT event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/><apiDesc>The FocusEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Processes the <codeph>FocusEvent.FOCUS_OUT</codeph> event when the client manages events.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#FocusEvent/FOCUS_OUT"><linktext>FocusEvent.FOCUS_OUT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:getContentBounds"><apiName>getContentBounds</apiName><shortdesc> 
		 Returns the area that the text occupies, as reflected by the last compose or update operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>describes the area that the text occupies.
		 
		 </apiDesc><apiType value="flash.geom:Rectangle"/></apiReturn></apiOperationDef><apiDesc> 
		 Returns the area that the text occupies, as reflected by the last compose or update operation. 
		 The width and the height might be estimated, if the container is scrollable and the text exceeds the 
		 visible area.
		 
		 </apiDesc><example conref="examples\ContainerController_getContentBoundsExample.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.geom.Rectangle.xml"><linktext>Rectangle</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:protected:getFirstTextLineChildIndex"><apiName>getFirstTextLineChildIndex</apiName><shortdesc>
		 Gets the index at which the first text line must appear in its parent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>the index at which the first text line must appear in its parent.
		 
		 </apiDesc><apiType value="int"/></apiReturn></apiOperationDef><apiDesc>
		 Gets the index at which the first text line must appear in its parent.
		 The default implementation of this method, which may be overriden, returns the child index 
		 of the first <codeph>flash.text.engine.TextLine</codeph> child of <codeph>container</codeph>
		 if one exists, and that of the last child of <codeph>container</codeph> otherwise. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.text.engine.TextLine.xml"><linktext>flash.text.engine.TextLine</linktext></link><link href="flashx.textLayout.container.xml#ContainerController/container"><linktext>container</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:getScrollDelta"><apiName>getScrollDelta</apiName><shortdesc> 
		 Figure out the scroll distance required to scroll up or down by the specified number of lines.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the delta amount of space to scroll
		 
		 </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>numLines</apiItemName><apiType value="int"/><apiDesc>The number of lines to scroll.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Figure out the scroll distance required to scroll up or down by the specified number of lines.
		 Negative numbers scroll upward, bringing more of the top of the TextFlow into view. Positive numbers 
		 scroll downward, bringing the next line from the bottom into full view.
		 
		 <p>When scrolling up, for example, the method makes the next line fully visible. If the next line is partially
		 obscured and the number of lines specified is 1, the partially obscured line becomes fully visible.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:getStyle"><apiName>getStyle</apiName><shortdesc> Returns the value of the style specified by the styleProp parameter.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The current value for the specified style.
		 
		 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>The name of the style property whose value you want.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Returns the value of the style specified by the <codeph>styleProp</codeph> parameter.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:imeStartCompositionHandler"><apiName>imeStartCompositionHandler</apiName><shortdesc> Processes the IMEEvent.IME_START_COMPOSITION event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:IMEEvent"/><apiDesc> The IMEEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Processes the <codeph>IMEEvent.IME_START_COMPOSITION</codeph> event when the client manages events.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.IMEEvent.IME_START_COMPOSITION.xml"><linktext>flash.events.IMEEvent.IME_START_COMPOSITION</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:invalidateContents"><apiName>invalidateContents</apiName><shortdesc> 
		 Marks all the text in this container as needing composing.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Marks all the text in this container as needing composing. 
		 
		 </apiDesc><example conref="examples\ContainerController_invalidateContentsExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:isDamaged"><apiName>isDamaged</apiName><shortdesc> 
		 Determines whether the container has text that requires composing.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>true if the container requires composing.
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc> 
		 Determines whether the container has text that requires composing. 
		 
		 </apiDesc><example conref="examples\ContainerController_isDamagedExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:keyDownHandler"><apiName>keyDownHandler</apiName><shortdesc> Processes the KeyboardEvent.KEY_DOWN event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:KeyboardEvent"/><apiDesc>KeyboardEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Processes the <codeph>KeyboardEvent.KEY_DOWN</codeph> event when the client manages events.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#KeyboardEvent/KEY_DOWN"><linktext>KeyboardEvent.KEY_DOWN</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:keyFocusChangeHandler"><apiName>keyFocusChangeHandler</apiName><shortdesc> Processes the FocusEvent.KEY_FOCUS_CHANGE event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/><apiDesc>The FocusEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Processes the <codeph>FocusEvent.KEY_FOCUS_CHANGE</codeph> event when the client manages events.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#FocusEvent/KEY_FOCUS_CHANGE"><linktext>FocusEvent.KEY_FOCUS_CHANGE</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:keyUpHandler"><apiName>keyUpHandler</apiName><shortdesc> Processes the Keyboard.KEY_UP event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:KeyboardEvent"/><apiDesc>The KeyboardEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Processes the <codeph>Keyboard.KEY_UP</codeph> event when the client manages events.
		 
		 </apiDesc><example conref="examples\ContainerController_keyUpHandlerExample.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#KeyboardEvent/KEY_UP"><linktext>KeyboardEvent.KEY_UP</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:menuSelectHandler"><apiName>menuSelectHandler</apiName><shortdesc> 
		 Processes the ContextMenuEvent.MENU_SELECT event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:ContextMenuEvent"/><apiDesc>ContextMenuEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Processes the <codeph>ContextMenuEvent.MENU_SELECT</codeph> event when the client manages events.
		 
		 </apiDesc><example conref="examples\ContainerController_menuSelectHandlerExample.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#ContextMenuEvent/MENU_SELECT"><linktext>ContextMenuEvent.MENU_SELECT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:mouseDoubleClickHandler"><apiName>mouseDoubleClickHandler</apiName><shortdesc> Processes the MouseEvent.DOUBLE_CLICK event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>The MouseEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Processes the <codeph>MouseEvent.DOUBLE_CLICK</codeph> event when the client manages events.
		 
		 </apiDesc><example conref="examples\ContainerController_mouseDoubleClickHandlerExample.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/DOUBLE_CLICK"><linktext>MouseEvent.DOUBLE_CLICK</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:mouseDownHandler"><apiName>mouseDownHandler</apiName><shortdesc> Processes the MouseEvent.MOUSE_DOWN event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>The MouseEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Processes the <codeph>MouseEvent.MOUSE_DOWN</codeph> event when the client manages events. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_DOWN"><linktext>MouseEvent.MOUSE_DOWN</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:mouseMoveHandler"><apiName>mouseMoveHandler</apiName><shortdesc> 
		 Processes the MouseEvent.MOUSE_MOVE event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>The MouseEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Processes the <codeph>MouseEvent.MOUSE_MOVE</codeph> event when the client manages events.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_MOVE"><linktext>MouseEvent.MOUSE_MOVE</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:mouseMoveSomewhere"><apiName>mouseMoveSomewhere</apiName><shortdesc> Client call to forward a mouseMove event from outside a security sandbox.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc> Client call to forward a mouseMove event from outside a security sandbox.  Coordinates of the mouse move are not needed.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:mouseOutHandler"><apiName>mouseOutHandler</apiName><shortdesc> Processes the MouseEvent.MOUSE_OUT event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>The MouseEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Processes the <codeph>MouseEvent.MOUSE_OUT</codeph> event when the client manages events.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_OUT"><linktext>MouseEvent.MOUSE_OUT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:mouseOverHandler"><apiName>mouseOverHandler</apiName><shortdesc> 
		 Processes the MouseEvent.MOUSE_OVER event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>The MouseEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Processes the <codeph>MouseEvent.MOUSE_OVER</codeph> event when the client manages events. 
		 
		 </apiDesc><example conref="examples\ContainerController_mouseOverHandlerExample.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_OVER"><linktext>MouseEvent.MOUSE_OVER</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:mouseUpHandler"><apiName>mouseUpHandler</apiName><shortdesc> 
		 Processes the MouseEvent.MOUSE_UP event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>The MouseEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Processes the <codeph>MouseEvent.MOUSE_UP</codeph> event when the client manages events.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_UP"><linktext>MouseEvent.MOUSE_UP</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:mouseUpSomewhere"><apiName>mouseUpSomewhere</apiName><shortdesc> Client call to forward a mouseUp event from outside a security sandbox.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc> Client call to forward a mouseUp event from outside a security sandbox.  Coordinates of the mouse up are not needed.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:mouseWheelHandler"><apiName>mouseWheelHandler</apiName><shortdesc> Processes the MouseEvent.MOUSE_WHEEL event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>The MouseEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Processes the <codeph>MouseEvent.MOUSE_WHEEL</codeph> event when the client manages events.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_WHEEL"><linktext>MouseEvent.MOUSE_WHEEL</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:protected:removeBackgroundShape"><apiName>removeBackgroundShape</apiName><shortdesc>
		 Removes a flash.display.Shape object on which background shapes (such as background color) are drawn.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>shape</apiItemName><apiType value="flash.display:Shape"/><apiDesc><codeph>flash.display.Shape</codeph> object to remove
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a <codeph>flash.display.Shape</codeph> object on which background shapes (such as background color) are drawn.
		 The default implementation of this method, which may be overriden, removes the object from its <codeph>parent</codeph>.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.Shape.xml"><linktext>flash.display.Shape</linktext></link><link href="" invalidHref="flash.text.engine.TextLine.xml"><linktext>flash.text.engine.TextLine</linktext></link><link href="flashx.textLayout.container.xml#ContainerController/container"><linktext>container</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:protected:removeInlineGraphicElement"><apiName>removeInlineGraphicElement</apiName><shortdesc>
		 Removes a flash.display.DisplayObject object from its parent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>parent</apiItemName><apiType value="flash.display:DisplayObjectContainer"/><apiDesc>the <codeph>flash.display.DisplayObject</codeph> object to remove 
		 
		 </apiDesc></apiParam><apiParam><apiItemName>inlineGraphicElement</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam></apiOperationDef><apiDesc>
		 Removes a <codeph>flash.display.DisplayObject</codeph> object from its parent. 
		 The default implementation of this method, which may be overriden, removes the object
		 from <codeph>container</codeph> if it is a direct child of the latter.
		 
		 This method may be called even if the object is not a descendant of <codeph>parent</codeph>.
		 Any implementation of this method must ensure that no action is taken in this case.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.DisplayObjectContainer.xml"><linktext>flash.display.DisplayObjectContainer</linktext></link><link href="" invalidHref="flash.display.DisplayObject.xml"><linktext>flash.display.DisplayObject</linktext></link><link href="flashx.textLayout.container.xml#ContainerController/container"><linktext>container</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:protected:removeSelectionContainer"><apiName>removeSelectionContainer</apiName><shortdesc>
		 Removes the flash.display.DisplayObjectContainer object which contains selection shapes (such as block selection highlight, cursor etc.).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>selectionContainer</apiItemName><apiType value="flash.display:DisplayObjectContainer"/><apiDesc><codeph>flash.display.DisplayObjectContainer</codeph> object to remove
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes the <codeph>flash.display.DisplayObjectContainer</codeph> object which contains selection shapes (such as block selection highlight, cursor etc.).
		 The default implementation of this method, which may be overriden, removes the object from its parent if one exists.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.DisplayObjectContainer.xml"><linktext>flash.display.DisplayObjectContainer</linktext></link><link href="flashx.textLayout.container.xml#ContainerController/container"><linktext>container</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:protected:removeTextLine"><apiName>removeTextLine</apiName><shortdesc>
		 Removes a flash.text.engine.TextLine object from its parent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>textLine</apiItemName><apiType value="flash.text.engine:TextLine"/><apiDesc>the <codeph>flash.text.engine.TextLine</codeph> object to remove 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a <codeph>flash.text.engine.TextLine</codeph> object from its parent. 
		 The default implementation of this method, which may be overriden, removes the object
		 from <codeph>container</codeph> if it is a direct child of the latter.
		 
		 This method may be called even if the object is not a descendant of <codeph>container</codeph>.
		 Any implementation of this method must ensure that no action is taken in this case.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.text.engine.TextLine.xml"><linktext>flash.text.engine.TextLine</linktext></link><link href="flashx.textLayout.container.xml#ContainerController/container"><linktext>container</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:scrollToRange"><apiName>scrollToRange</apiName><shortdesc> 
		 Scrolls so that the text range is visible in the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/><apiDesc>The end of the selection that is changed when you extend the selection. It can be
		 	either the start or the end of the selection, expressed as an offset from the start of the text flow.
		 </apiDesc></apiParam><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/><apiDesc>  	The stable end of the selection when you extend the selection. It can be either 
		 	the start or the end of the selection.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Scrolls so that the text range is visible in the container.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:selectRange"><apiName>selectRange</apiName><shortdesc> 
		 Sets the range of selected text in a component implementing ITextSupport.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>anchorIndex</apiItemName><apiType value="int"/><apiDesc>The zero-based index value of the character at the anchor end of the selection
		 
		 </apiDesc></apiParam><apiParam><apiItemName>activeIndex</apiItemName><apiType value="int"/><apiDesc>The zero-based index value of the character at the active end of the selection.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Sets the range of selected text in a component implementing ITextSupport.
		 If either of the arguments is out of bounds the selection should not be changed.
		 Components which wish to support inline IME should call into this method.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:setCompositionSize"><apiName>setCompositionSize</apiName><shortdesc> 
		 Sets the width and height allowed for text in the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>w</apiItemName><apiType value="Number"/><apiDesc>The width in pixels that's available for text in the container.  <codeph>NaN</codeph> indicates no specified width.  
		 </apiDesc></apiParam><apiParam><apiItemName>h</apiItemName><apiType value="Number"/><apiDesc>The height in pixels that's available for text in the container.   <codeph>NaN</codeph> indicates no specified height.  
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Sets the width and height allowed for text in the container. Width and height can be specified in pixels or <codeph>NaN</codeph> can be used for either value.  <codeph>NaN</codeph> indicates measure that value. 
		 This can be used to find the widest line and/or the total height of all the content.  When NaN is specified as the width lines are broken with a maximum width of <codeph>TextLine.MAX_LINE_WIDTH</codeph>. 
		 When <codeph>NaN</codeph> is specified as the height the container is assumed to have unlimited height.  The actual measured values can be ready back in <codeph>getContentBounds</codeph>.  
		 When the computed <codeph>blockProgression</codeph> property of <codeph>TextFlow</codeph>
		 is <codeph>BlockProgression.RL</codeph> the meanings of width and height are exchanged.
		 
		 </apiDesc><example conref="examples\ContainerController_setCompositionSizeExample.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.text.engine.xml#TextLine/MAX_LINE_WIDTH"><linktext>flash.text.engine.TextLine.MAX_LINE_WIDTH</linktext></link><link href="flashx.textLayout.formats.xml#BlockProgression"><linktext>flashx.textLayout.formats.BlockProgression</linktext></link><link href="flashx.textLayout.container.xml#ContainerController/getContentBounds()"><linktext>getContentBounds()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:setStyle"><apiName>setStyle</apiName><shortdesc> 
		 Sets the value of the style specified by the styleProp parameter to the value
		 specified by the newValue parameter.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>The name of the style property whose value you want to set.
		 </apiDesc></apiParam><apiParam><apiItemName>newValue</apiItemName><apiType value="any"/><apiDesc>The value that you want to assign to the style.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Sets the value of the style specified by the <codeph>styleProp</codeph> parameter to the value
		 specified by the <codeph>newValue</codeph> parameter.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:softKeyboardActivatingHandler"><apiName>softKeyboardActivatingHandler</apiName><shortdesc> Processes the SoftKeyboardEvent.SOFT_KEYBOARD_ACTIVATING event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc> The SoftKeyboardEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Processes the <codeph>SoftKeyboardEvent.SOFT_KEYBOARD_ACTIVATING</codeph> event when the client manages events.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#SoftKeyboardEvent/SOFT_KEYBOARD_ACTIVATING"><linktext>SoftKeyboardEvent.SOFT_KEYBOARD_ACTIVATING</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:textInputHandler"><apiName>textInputHandler</apiName><shortdesc> Processes the TextEvent.TEXT_INPUT event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:TextEvent"/><apiDesc> The TextEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Processes the <codeph>TextEvent.TEXT_INPUT</codeph> event when the client manages events.
		 
		 </apiDesc><example conref="examples\ContainerController_textInputHandlerExample.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#TextEvent/TEXT_INPUT"><linktext>TextEvent.TEXT_INPUT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:tlf_internal:updateGraphics"><apiName>updateGraphics</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="tlf_internal"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>updateStart</apiItemName><apiType value="int"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:protected:updateVisibleRectangle"><apiName>updateVisibleRectangle</apiName><shortdesc> 
		 If scrolling, sets the scroll rectangle to the container rectangle so that any lines that are 
		 halfway in view are clipped to the scrollable region.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 If scrolling, sets the scroll rectangle to the container rectangle so that any lines that are 
		 halfway in view are clipped to the scrollable region. If not scrolling, clear the
		 scroll rectangle so that no clipping occurs.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.container:ContainerController:tlf_internal:_mouseWheelListenerAttached"><apiName>_mouseWheelListenerAttached</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="tlf_internal"/><apiDynamic/><apiData>false</apiData><apiType value="Boolean"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:absoluteStart:get"><apiName>absoluteStart</apiName><shortdesc> 
		 Returns the first character in the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 
		 Returns the first character in the container. If this is not the first container in the flow,
		 this value is updated when the text is composed, that is when the IFlowComposer's <codeph>compose()</codeph> or 
		 <codeph>updateAllControllers()</codeph> methods are called.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#IFlowComposer"><linktext>flashx.textLayout.compose.IFlowComposer</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:alignmentBaseline:get"><apiName>alignmentBaseline</apiName><shortdesc>
		 TextLayoutFormat:
		 Specifies the baseline to which the dominant baseline aligns.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Specifies the baseline to which the dominant baseline aligns. For example, if you set <codeph>dominantBaseline</codeph> to ASCENT, setting <codeph>alignmentBaseline</codeph> to DESCENT aligns the top of the text with the DESCENT baseline, or below the line.  The largest element in the line generally determines the baselines.<p><adobeimage alt="baselines" href="../../../images/textLayout_baselines.jpg"/></p>
		 <p>Legal values are TextBaseline.ROMAN, TextBaseline.ASCENT, TextBaseline.DESCENT, TextBaseline.IDEOGRAPHIC_TOP, TextBaseline.IDEOGRAPHIC_CENTER, TextBaseline.IDEOGRAPHIC_BOTTOM, TextBaseline.USE_DOMINANT_BASELINE, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of TextBaseline.USE_DOMINANT_BASELINE.</p>
		 </apiDesc><example conref="examples\TextLayoutFormat_alignmentBaselineExample.as"/></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextBaseline.xml"><linktext>flash.text.engine.TextBaseline</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:backgroundAlpha:get"><apiName>backgroundAlpha</apiName><shortdesc>
		 TextLayoutFormat:
		 Alpha (transparency) value for the background (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Alpha (transparency) value for the background (adopts default value if undefined during cascade). A value of 0 is fully transparent, and a value of 1 is fully opaque. Display objects with alpha set to 0 are active, even though they are invisible.
		 <p>Legal values are numbers from 0 to 1 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of 1.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:backgroundColor:get"><apiName>backgroundColor</apiName><shortdesc>
		 TextLayoutFormat:
		 Background color of the text (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Background color of the text (adopts default value if undefined during cascade). Can be either the constant value  <codeph>BackgroundColor.TRANSPARENT</codeph>, or a hexadecimal value that specifies the three 8-bit RGB (red, green, blue) values; for example, 0xFF0000 is red and 0x00FF00 is green.
		 <p>Legal values as a string are BackgroundColor.TRANSPARENT, FormatValue.INHERIT and uints from 0x0 to 0xffffffff.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of BackgroundColor.TRANSPARENT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BackgroundColor"><linktext>flashx.textLayout.formats.BackgroundColor</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:baselineShift:get"><apiName>baselineShift</apiName><shortdesc>
		 TextLayoutFormat:
		 Amount to shift the baseline from the dominantBaseline value.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Amount to shift the baseline from the <codeph>dominantBaseline</codeph> value. Units are in pixels, or a percentage of <codeph>fontSize</codeph> (in which case, enter a string value, like 140%).  Positive values shift the line up for horizontal text (right for vertical) and negative values shift it down for horizontal (left for vertical). 
		 <p>Legal values are BaselineShift.SUPERSCRIPT, BaselineShift.SUBSCRIPT, FormatValue.INHERIT.</p>
		 <p>Legal values as a number are from -1000 to 1000.</p>
		 <p>Legal values as a percent are numbers from -1000 to 1000.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.0.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BaselineShift"><linktext>flashx.textLayout.formats.BaselineShift</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:blockProgression:get"><apiName>blockProgression</apiName><shortdesc>
		 TextLayoutFormat:
		 Specifies a vertical or horizontal progression of line placement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Specifies a vertical or horizontal progression of line placement.
		 Lines are either placed top-to-bottom (<codeph>BlockProgression.TB</codeph>, used for horizontal text) or right-to-left (<codeph>BlockProgression.RL</codeph>, used for vertical text).
		 <p>Legal values are BlockProgression.RL, BlockProgression.TB, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of BlockProgression.TB.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BlockProgression"><linktext>flashx.textLayout.formats.BlockProgression</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:breakOpportunity:get"><apiName>breakOpportunity</apiName><shortdesc>
		 TextLayoutFormat:
		 Controls where lines are allowed to break when breaking wrapping text into multiple lines.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Controls where lines are allowed to break when breaking wrapping text into multiple lines. Set to <codeph>BreakOpportunity.AUTO</codeph> to break text normally. Set to <codeph>BreakOpportunity.NONE</codeph> to <i>not</i> break the text unless the text would overrun the measure and there are no other places to break the line. Set to <codeph>BreakOpportunity.ANY</codeph> to allow the line to break anywhere, rather than just between words. Set to <codeph>BreakOpportunity.ALL</codeph> to have each typographic cluster put on a separate line (useful for text on a path).
		 <p>Legal values are BreakOpportunity.ALL, BreakOpportunity.ANY, BreakOpportunity.AUTO, BreakOpportunity.NONE, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of BreakOpportunity.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.BreakOpportunity.xml"><linktext>flash.text.engine.BreakOpportunity</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:cffHinting:get"><apiName>cffHinting</apiName><shortdesc>
		 TextLayoutFormat:
		 The type of CFF hinting used for this text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 The type of CFF hinting used for this text. CFF hinting determines whether the Flash runtime forces strong horizontal stems to fit to a sub pixel grid or not. This property applies only if the <codeph>renderingMode</codeph> property is set to <codeph>RenderingMode.CFF</codeph>, and the font is embedded (<codeph>fontLookup</codeph> property is set to <codeph>FontLookup.EMBEDDED_CFF</codeph>). At small screen sizes, hinting produces a clear, legible text for human readers.
		 <p>Legal values are CFFHinting.NONE, CFFHinting.HORIZONTAL_STEM, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of CFFHinting.HORIZONTAL_STEM.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.CFFHinting.xml"><linktext>flash.text.engine.CFFHinting</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:clearFloats:get"><apiName>clearFloats</apiName><shortdesc>
		 TextLayoutFormat:
		 Controls how text wraps around a float.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Controls how text wraps around a float. A value of none allows the text to wrap most closely around a float. A value of left causes the text to skip over any portion of the container that has a left float, and a value of right causes the text to skip over any portion of the container that has a right float. A value of both causes the text to skip over any floats.
		 <p>Legal values are ClearFloats.START, ClearFloats.END, ClearFloats.LEFT, ClearFloats.RIGHT, ClearFloats.BOTH, ClearFloats.NONE, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of ClearFloats.NONE.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#ClearFloats"><linktext>flashx.textLayout.formats.ClearFloats</linktext></link><link href="flashx.textLayout.formats.xml#ClearFloats"><linktext>flashx.textLayout.formats.ClearFloats</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:color:get"><apiName>color</apiName><shortdesc>
		 TextLayoutFormat:
		 Color of the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Color of the text. A hexadecimal number that specifies three 8-bit RGB (red, green, blue) values; for example, 0xFF0000 is red and 0x00FF00 is green. It can also be enum value {BLACK, GREEN, GRAY, BLUE, SILVER, LIME, OLIVE, WHITE, YELLOW, MAROON, NAVY, RED, PURPLE, TEAL, FUCHSIA, AQUA, MAGENTA, CYAN}
		 <p>Legal values as a string are ColorName.BLACK, ColorName.GREEN, ColorName.GRAY, ColorName.BLUE, ColorName.SILVER, ColorName.LIME, ColorName.OLIVE, ColorName.WHITE, ColorName.YELLOW, ColorName.MAROON, ColorName.NAVY, ColorName.RED, ColorName.PURPLE, ColorName.TEAL, ColorName.FUCHSIA, ColorName.AQUA, ColorName.MAGENTA, ColorName.CYAN, FormatValue.INHERIT and uints from 0x0 to 0xffffffff.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#ColorName"><linktext>flashx.textLayout.formats.ColorName</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:columnBreakAfter:get"><apiName>columnBreakAfter</apiName><shortdesc>
		 TextLayoutFormat:
		 Controls column after before the element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Controls column after before the element.
		 <p>Legal values are BreakStyle.AUTO, BreakStyle.ALWAYS, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of BreakStyle.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BreakStyle"><linktext>flashx.textLayout.formats.BreakStyle</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:columnBreakBefore:get"><apiName>columnBreakBefore</apiName><shortdesc>
		 TextLayoutFormat:
		 Controls column break before the element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Controls column break before the element.
		 <p>Legal values are BreakStyle.AUTO, BreakStyle.ALWAYS, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of BreakStyle.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BreakStyle"><linktext>flashx.textLayout.formats.BreakStyle</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:columnCount:get"><apiName>columnCount</apiName><shortdesc>
		 TextLayoutFormat:
		 Number of text columns (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Number of text columns (adopts default value if undefined during cascade).
		 The column number overrides the  other column settings. Value is an integer, or <codeph>FormatValue.AUTO</codeph> if unspecified. If <codeph>columnCount</codeph> is not specified,<codeph>columnWidth</codeph> is used to create as many columns as can fit in the container.
		 <p>Legal values as a string are FormatValue.AUTO, FormatValue.INHERIT and from ints from 1 to 50.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of FormatValue.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:columnGap:get"><apiName>columnGap</apiName><shortdesc>
		 TextLayoutFormat:
		 Specifies the amount of gutter space, in pixels, to leave between the columns (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Specifies the amount of gutter space, in pixels, to leave between the columns (adopts default value if undefined during cascade).
		 Value is a Number
		 <p>Legal values are numbers from 0 to 1000 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of 20.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:columnState:get"><apiName>columnState</apiName><shortdesc> 
		 Returns a ColumnState object, which describes the number and characteristics of columns in
		 the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.container:ColumnState</apiValueClassifier></apiValueDef><apiDesc> 
		 Returns a ColumnState object, which describes the number and characteristics of columns in
		 the container. These values are updated when the text is recomposed, either as a result
		 of <codeph>IFlowComposer.compose()</codeph> or <codeph>IFlowComposer.updateAllControllers()</codeph>.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.container.xml#ColumnState"><linktext>ColumnState</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:columnWidth:get"><apiName>columnWidth</apiName><shortdesc>
		 TextLayoutFormat:
		 Column width in pixels (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Column width in pixels (adopts default value if undefined during cascade).
		 If you specify the width of the columns, but not the count, TextLayout will create as many columns of that width as possible, given the  container width and <codeph>columnGap</codeph> settings. Any remainder space is left after the last column. Value is a Number.
		 <p>Legal values as a string are FormatValue.AUTO, FormatValue.INHERIT and numbers from 0 to 8000.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of FormatValue.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:compositionHeight:get"><apiName>compositionHeight</apiName><shortdesc> 
		 Returns the vertical extent allowed for text inside the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> 
		 Returns the vertical extent allowed for text inside the container. The value is specified in pixels.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.container.xml#ContainerController/setCompositionSize()"><linktext>setCompositionSize()</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:compositionWidth:get"><apiName>compositionWidth</apiName><shortdesc> 
		 Returns the horizontal extent allowed for text inside the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> 
		 Returns the horizontal extent allowed for text inside the container. The value is specified in pixels.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.container.xml#ContainerController/setCompositionSize()"><linktext>setCompositionSize()</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:computedFormat:get"><apiName>computedFormat</apiName><shortdesc> 
		 Returns an ITextLayoutFormat instance with the attributes applied to this container, including the attributes inherited from its
		 root element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		 Returns an ITextLayoutFormat instance with the attributes applied to this container, including the attributes inherited from its
		 root element.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.container.xml#ContainerController/rootElement"><linktext>rootElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:containerBreakAfter:get"><apiName>containerBreakAfter</apiName><shortdesc>
		 TextLayoutFormat:
		 Controls container after before the element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Controls container after before the element.
		 <p>Legal values are BreakStyle.AUTO, BreakStyle.ALWAYS, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of BreakStyle.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BreakStyle"><linktext>flashx.textLayout.formats.BreakStyle</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:containerBreakBefore:get"><apiName>containerBreakBefore</apiName><shortdesc>
		 TextLayoutFormat:
		 Controls container break before the element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Controls container break before the element.
		 <p>Legal values are BreakStyle.AUTO, BreakStyle.ALWAYS, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of BreakStyle.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BreakStyle"><linktext>flashx.textLayout.formats.BreakStyle</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:container:get"><apiName>container</apiName><shortdesc> 
		 Returns the container display object that holds the text lines for this ContainerController instance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:Sprite"/></apiValueDef><apiDesc> 
		 Returns the container display object that holds the text lines for this ContainerController instance. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.container.xml#ContainerController/ContainerController()"><linktext>ContainerController()</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:coreStyles:get"><apiName>coreStyles</apiName><shortdesc> Returns the coreStyles on this ContainerController.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc> Returns the <codeph>coreStyles</codeph> on this ContainerController.  Note that the getter makes a copy of the core 
		 styles dictionary. The returned object includes the formats that are defined by TextLayoutFormat and are in TextLayoutFormat.description. The
		 returned object consists of an array of <i>stylename-value</i> pairs.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat"><linktext>flashx.textLayout.formats.TextLayoutFormat</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:digitCase:get"><apiName>digitCase</apiName><shortdesc>
		 TextLayoutFormat:
		 The type of digit case used for this text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 The type of digit case used for this text. Setting the value to <codeph>DigitCase.OLD_STYLE</codeph> approximates lowercase letterforms with varying ascenders and descenders. The figures are proportionally spaced. This style is only available in selected typefaces, most commonly in a supplemental or expert font. The <codeph>DigitCase.LINING</codeph> setting has all-cap height and is typically monospaced to line up in charts.<p><adobeimage alt="digitCase" href="../../../images/textLayout_digitcase.gif"/></p>
		 <p>Legal values are DigitCase.DEFAULT, DigitCase.LINING, DigitCase.OLD_STYLE, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of DigitCase.DEFAULT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.DigitCase.xml"><linktext>flash.text.engine.DigitCase</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:digitWidth:get"><apiName>digitWidth</apiName><shortdesc>
		 TextLayoutFormat:
		 Type of digit width used for this text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Type of digit width used for this text. This can be <codeph>DigitWidth.PROPORTIONAL</codeph>, which looks best for individual numbers, or <codeph>DigitWidth.TABULAR</codeph>, which works best for numbers in tables, charts, and vertical rows.<p><adobeimage alt="digitWidth" href="../../../images/textLayout_digitwidth.gif"/></p>
		 <p>Legal values are DigitWidth.DEFAULT, DigitWidth.PROPORTIONAL, DigitWidth.TABULAR, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of DigitWidth.DEFAULT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.DigitWidth.xml"><linktext>flash.text.engine.DigitWidth</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:direction:get"><apiName>direction</apiName><shortdesc>
		 TextLayoutFormat:
		 Specifies the default bidirectional embedding level of the text in the text block.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Specifies the default bidirectional embedding level of the text in the text block. 
		 Left-to-right reading order, as in Latin-style scripts, or right-to-left reading order, as in Arabic or Hebrew. This property also affects column direction when it is applied at the container level. Columns can be either left-to-right or right-to-left, just like text. Below are some examples:<p><adobeimage alt="direction" href="../../../images/textLayout_direction.gif"/></p>
		 <p>Legal values are Direction.LTR, Direction.RTL, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of Direction.LTR.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#Direction"><linktext>flashx.textLayout.formats.Direction</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:dominantBaseline:get"><apiName>dominantBaseline</apiName><shortdesc>
		 TextLayoutFormat:
		 Specifies which element baseline snaps to the alignmentBaseline to determine the vertical position of the element on the line.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Specifies which element baseline snaps to the <codeph>alignmentBaseline</codeph> to determine the vertical position of the element on the line. A value of <codeph>TextBaseline.AUTO</codeph> selects the dominant baseline based on the <codeph>locale</codeph> property of the parent paragraph.  For Japanese and Chinese, the selected baseline value is <codeph>TextBaseline.IDEOGRAPHIC_CENTER</codeph>; for all others it is <codeph>TextBaseline.ROMAN</codeph>. These baseline choices are determined by the choice of font and the font size.<p><adobeimage alt="baselines" href="../../../images/textLayout_baselines.jpg"/></p>
		 <p>Legal values are FormatValue.AUTO, TextBaseline.ROMAN, TextBaseline.ASCENT, TextBaseline.DESCENT, TextBaseline.IDEOGRAPHIC_TOP, TextBaseline.IDEOGRAPHIC_CENTER, TextBaseline.IDEOGRAPHIC_BOTTOM, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of FormatValue.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextBaseline.xml"><linktext>flash.text.engine.TextBaseline</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:firstBaselineOffset:get"><apiName>firstBaselineOffset</apiName><shortdesc>
		 TextLayoutFormat:
		 Specifies the baseline position of the first line in the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Specifies the baseline position of the first line in the container. Which baseline this property refers to depends on the container-level locale.  For Japanese and Chinese, it is <codeph>TextBaseline.IDEOGRAPHIC_BOTTOM</codeph>; for all others it is <codeph>TextBaseline.ROMAN</codeph>.
		 The offset from the top inset (or right inset if <codeph>blockProgression</codeph> is RL) of the container to the baseline of the first line can be either <codeph>BaselineOffset.ASCENT</codeph>, meaning equal to the ascent of the line, <codeph>BaselineOffset.LINE_HEIGHT</codeph>, meaning equal to the height of that first line, or any fixed-value number to specify an absolute distance. <codeph>BaselineOffset.AUTO</codeph> aligns the ascent of the line with the container top inset.<p><adobeimage alt="firstBaselineOffset1" href="../../../images/textLayout_FBO1.png"/><adobeimage alt="firstBaselineOffset2" href="../../../images/textLayout_FBO2.png"/><adobeimage alt="firstBaselineOffset3" href="../../../images/textLayout_FBO3.png"/><adobeimage alt="firstBaselineOffset4" href="../../../images/textLayout_FBO4.png"/></p>
		 <p>Legal values as a string are BaselineOffset.AUTO, BaselineOffset.ASCENT, BaselineOffset.LINE_HEIGHT, FormatValue.INHERIT and numbers from 0 to 1000.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of BaselineOffset.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BaselineOffset"><linktext>flashx.textLayout.formats.BaselineOffset</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:flowComposer:get"><apiName>flowComposer</apiName><shortdesc> 
		 Returns the flow composer object that composes and highlights text into the container that this 
		 controller manages.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.compose:IFlowComposer</apiValueClassifier></apiValueDef><apiDesc> 
		 Returns the flow composer object that composes and highlights text into the container that this 
		 controller manages. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#IFlowComposer"><linktext>flashx.textLayout.compose.IFlowComposer</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:fontFamily:get"><apiName>fontFamily</apiName><shortdesc>
		 TextLayoutFormat:
		  The name of the font to use, or a comma-separated list of font names.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		  The name of the font to use, or a comma-separated list of font names. The Flash runtime renders the element with the first available font in the list. For example Arial, Helvetica, _sans causes the player to search for Arial, then Helvetica if Arial is not found, then _sans if neither is found.
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of Arial.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:fontLookup:get"><apiName>fontLookup</apiName><shortdesc>
		 TextLayoutFormat:
		 Font lookup to use.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Font lookup to use. Specifying <codeph>FontLookup.DEVICE</codeph> uses the fonts installed on the system that is running the SWF file. Device fonts result in a smaller movie size, but text is not always rendered the same across different systems and platforms. Specifying <codeph>FontLookup.EMBEDDED_CFF</codeph> uses font outlines embedded in the published SWF file. Embedded fonts increase the size of the SWF file (sometimes dramatically), but text is consistently displayed in the chosen font.
		 <p>Legal values are FontLookup.DEVICE, FontLookup.EMBEDDED_CFF, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of FontLookup.DEVICE.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontLookup.xml"><linktext>flash.text.engine.FontLookup</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:fontSize:get"><apiName>fontSize</apiName><shortdesc>
		 TextLayoutFormat:
		 The size of the text in pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 The size of the text in pixels.
		 <p>Legal values are numbers from 1 to 720 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 12.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:fontStyle:get"><apiName>fontStyle</apiName><shortdesc>
		 TextLayoutFormat:
		 Style of text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Style of text. May be <codeph>FontPosture.NORMAL</codeph>, for use in plain text, or <codeph>FontPosture.ITALIC</codeph> for italic. This property applies only to device fonts (<codeph>fontLookup</codeph> property is set to flash.text.engine.FontLookup.DEVICE).
		 <p>Legal values are FontPosture.NORMAL, FontPosture.ITALIC, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of FontPosture.NORMAL.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontPosture.xml"><linktext>flash.text.engine.FontPosture</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:fontWeight:get"><apiName>fontWeight</apiName><shortdesc>
		 TextLayoutFormat:
		 Weight of text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Weight of text. May be <codeph>FontWeight.NORMAL</codeph> for use in plain text, or <codeph>FontWeight.BOLD</codeph>. Applies only to device fonts (<codeph>fontLookup</codeph> property is set to flash.text.engine.FontLookup.DEVICE).
		 <p>Legal values are FontWeight.NORMAL, FontWeight.BOLD, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of FontWeight.NORMAL.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontWeight.xml"><linktext>flash.text.engine.FontWeight</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:format:get"><apiName>format</apiName><shortdesc> 
		 Stores the ITextLayoutFormat object that contains the attributes for this container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		 Stores the ITextLayoutFormat object that contains the attributes for this container. 
		 The controller inherits the container properties from the TextFlow of which it is part. 
		 This property allows different controllers in the same text flow to have, for example, 
		 different column settings or padding.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>flashx.textLayout.formats.ITextLayoutFormat</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:horizontalScrollPolicy:get"><apiName>horizontalScrollPolicy</apiName><shortdesc> 
		 Specifies the horizontal scrolling policy, which you can set by assigning one of the constants of
		 the ScrollPolicy class: ON, OFF, or AUTO.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc> 
		 Specifies the horizontal scrolling policy, which you can set by assigning one of the constants of
		 the ScrollPolicy class: ON, OFF, or AUTO.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.container.xml#ScrollPolicy"><linktext>ScrollPolicy</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:horizontalScrollPosition:get"><apiName>horizontalScrollPosition</apiName><shortdesc> Specifies the current horizontal scroll location on the stage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc> Specifies the current horizontal scroll location on the stage. The value specifies the number of
		 pixels from the left.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:interactionManager:get"><apiName>interactionManager</apiName><shortdesc conref="flashx.textLayout.elements.TextFlow#interactionManager"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.edit:ISelectionManager</apiValueClassifier></apiValueDef><apiDesc conref="flashx.textLayout.elements.TextFlow#interactionManager"> 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow/interactionManager"><linktext>flashx.textLayout.elements.TextFlow.interactionManager</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:tlf_internal:interactiveObjects:get"><apiName>interactiveObjects</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="tlf_internal"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.utils:Dictionary"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:justificationRule:get"><apiName>justificationRule</apiName><shortdesc>
		 TextLayoutFormat:
		 Rule used to justify text in a paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Rule used to justify text in a paragraph.
		 Default value is <codeph>FormatValue.AUTO</codeph>, which justifies text based on the paragraph's <codeph>locale</codeph> property. For all languages except Japanese and Chinese, <codeph>FormatValue.AUTO</codeph> becomes <codeph>JustificationRule.SPACE</codeph>, which adds extra space to the space characters.  For Japanese and Chinese, <codeph>FormatValue.AUTO</codeph> becomes <codeph>JustficationRule.EAST_ASIAN</codeph>. In part, justification changes the spacing of punctuation. In Roman text the comma and Japanese periods take a full character's width but in East Asian text only half of a character's width. Also, in the East Asian text the spacing between sequential punctuation marks becomes tighter, obeying traditional East Asian typographic conventions. Note, too, in the example below the leading that is applied to the second line of the paragraphs. In the East Asian version, the last two lines push left. In the Roman version, the second and following lines push left.<p><adobeimage alt="justificationRule" href="../../../images/textLayout_justificationrule.png"/></p>
		 <p>Legal values are JustificationRule.EAST_ASIAN, JustificationRule.SPACE, FormatValue.AUTO, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of FormatValue.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#JustificationRule"><linktext>flashx.textLayout.formats.JustificationRule</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:justificationStyle:get"><apiName>justificationStyle</apiName><shortdesc>
		 TextLayoutFormat:
		 The style used for justification of the paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 The style used for justification of the paragraph. Used only in conjunction with a <codeph>justificationRule</codeph> setting of <codeph>JustificationRule.EAST_ASIAN</codeph>.
		 Default value of <codeph>FormatValue.AUTO</codeph> is resolved to <codeph>JustificationStyle.PUSH_IN_KINSOKU</codeph> for all locales.  The constants defined by the JustificationStyle class specify options for handling kinsoku characters, which are Japanese characters that cannot appear at either the beginning or end of a line. If you want looser text, specify <codeph>JustificationStyle.PUSH-OUT-ONLY</codeph>. If you want behavior that is like what you get with the  <codeph>justificationRule</codeph> of <codeph>JustificationRule.SPACE</codeph>, use <codeph>JustificationStyle.PRIORITIZE-LEAST-ADJUSTMENT</codeph>.
		 <p>Legal values are JustificationStyle.PRIORITIZE_LEAST_ADJUSTMENT, JustificationStyle.PUSH_IN_KINSOKU, JustificationStyle.PUSH_OUT_ONLY, FormatValue.AUTO, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of FormatValue.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.JustificationStyle.xml"><linktext>flash.text.engine.JustificationStyle</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:kerning:get"><apiName>kerning</apiName><shortdesc>
		 TextLayoutFormat:
		 Kerning adjusts the pixels between certain character pairs to improve readability.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Kerning adjusts the pixels between certain character pairs to improve readability. Kerning is supported for all fonts with kerning tables.
		 <p>Legal values are Kerning.ON, Kerning.OFF, Kerning.AUTO, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of Kerning.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.Kerning.xml"><linktext>flash.text.engine.Kerning</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:leadingModel:get"><apiName>leadingModel</apiName><shortdesc>
		 TextLayoutFormat:
		 Specifies the leading model, which is a combination of leading basis and leading direction.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Specifies the leading model, which is a combination of leading basis and leading direction.
		 Leading basis is the baseline to which the <codeph>lineHeight</codeph> property refers. Leading direction determines whether the <codeph>lineHeight</codeph> property refers to the distance of a line's baseline from that of the line before it or the line after it. The default value of <codeph>FormatValue.AUTO</codeph> is resolved based on the paragraph's <codeph>locale</codeph> property.  For Japanese and Chinese, it is <codeph>LeadingModel.IDEOGRAPHIC_TOP_DOWN</codeph> and for all others it is <codeph>LeadingModel.ROMAN_UP</codeph>.<p><b>Leading Basis:</b></p><p><adobeimage alt="leadingBasis1" href="../../../images/textLayout_LB1.png"/>    <adobeimage alt="leadingBasis2" href="../../../images/textLayout_LB2.png"/>    <adobeimage alt="leadingBasis3" href="../../../images/textLayout_LB3.png"/></p><p><b>Leading Direction:</b></p><p><adobeimage alt="leadingDirection1" href="../../../images/textLayout_LD1.png"/>    <adobeimage alt="leadingDirection2" href="../../../images/textLayout_LD2.png"/>    <adobeimage alt="leadingDirection3" href="../../../images/textLayout_LD3.png"/></p>
		 <p>Legal values are LeadingModel.ROMAN_UP, LeadingModel.IDEOGRAPHIC_TOP_UP, LeadingModel.IDEOGRAPHIC_CENTER_UP, LeadingModel.IDEOGRAPHIC_TOP_DOWN, LeadingModel.IDEOGRAPHIC_CENTER_DOWN, LeadingModel.APPROXIMATE_TEXT_FIELD, LeadingModel.ASCENT_DESCENT_UP, LeadingModel.BOX, LeadingModel.AUTO, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of LeadingModel.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#LeadingModel"><linktext>flashx.textLayout.formats.LeadingModel</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:ligatureLevel:get"><apiName>ligatureLevel</apiName><shortdesc>
		 TextLayoutFormat:
		 Controls which of the ligatures that are defined in the font may be used in the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Controls which of the ligatures that are defined in the font may be used in the text. The ligatures that appear for each of these settings is dependent on the font. A ligature occurs where two or more letter-forms are joined as a single glyph. Ligatures usually replace consecutive characters sharing common components, such as the letter pairs 'fi', 'fl', or 'ae'. They are used with both Latin and Non-Latin character sets. The ligatures enabled by the values of the LigatureLevel class - <codeph>MINIMUM</codeph>, <codeph>COMMON</codeph>, <codeph>UNCOMMON</codeph>, and <codeph>EXOTIC</codeph> - are additive. Each value enables a new set of ligatures, but also includes those of the previous types.<p><b>Note: </b>When working with Arabic or Syriac fonts, <codeph>ligatureLevel</codeph> must be set to MINIMUM or above.</p><p><adobeimage alt="ligatureLevel" href="../../../images/textLayout_ligatures.png"/></p>
		 <p>Legal values are LigatureLevel.MINIMUM, LigatureLevel.COMMON, LigatureLevel.UNCOMMON, LigatureLevel.EXOTIC, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of LigatureLevel.COMMON.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.LigatureLevel.xml"><linktext>flash.text.engine.LigatureLevel</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:lineBreak:get"><apiName>lineBreak</apiName><shortdesc>
		 TextLayoutFormat:
		 Controls word wrapping within the container (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Controls word wrapping within the container (adopts default value if undefined during cascade).
		 Text in the container may be set to fit the width of the container (<codeph>LineBreak.TO_FIT</codeph>), or can be set to break only at explicit return or line feed characters (<codeph>LineBreak.EXPLICIT</codeph>).
		 <p>Legal values are LineBreak.EXPLICIT, LineBreak.TO_FIT, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of LineBreak.TO_FIT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#LineBreak"><linktext>flashx.textLayout.formats.LineBreak</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:lineHeight:get"><apiName>lineHeight</apiName><shortdesc>
		 TextLayoutFormat:
		 Leading controls for the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Leading controls for the text. The distance from the baseline of the previous or the next line (based on <codeph>LeadingModel</codeph>) to the baseline of the current line is equal to the maximum amount of the leading applied to any character in the line. This is either a number or a percent.  If specifying a percent, enter a string value, like 140%.<p><adobeimage alt="lineHeight1" href="../../../images/textLayout_lineHeight1.jpg"/><adobeimage alt="lineHeight2" href="../../../images/textLayout_lineHeight2.jpg"/></p>
		 <p>Legal values as a number are from -720 to 720.</p>
		 <p>Legal values as a percent are numbers from -1000% to 1000%.</p>
		 <p>Legal values include FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 120%.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:lineThrough:get"><apiName>lineThrough</apiName><shortdesc>
		 TextLayoutFormat:
		 If true, applies strikethrough, a line drawn through the middle of the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 If <codeph>true</codeph>, applies strikethrough, a line drawn through the middle of the text.
		 <p>Legal values are true, false and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of false.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:linkActiveFormat:get"><apiName>linkActiveFormat</apiName><shortdesc>
		 TextLayoutFormat:
		 Defines the formatting attributes used for links in normal state.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Defines the formatting attributes used for links in normal state. This value will cascade down the hierarchy and apply to any links that are descendants.
		 Accepts <codeph>inherit</codeph>, an <codeph>ITextLayoutFormat</codeph> or converts an array of objects with key and value as members to a TextLayoutFormat.
		 <p>Legal values include FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of null.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:linkHoverFormat:get"><apiName>linkHoverFormat</apiName><shortdesc>
		 TextLayoutFormat:
		 Defines the formatting attributes used for links in hover state, when the mouse is within the bounds (rolling over) a link.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Defines the formatting attributes used for links in hover state, when the mouse is within the bounds (rolling over) a link. This value will cascade down the hierarchy and apply to any links that are descendants.
		 Accepts <codeph>inherit</codeph>, an <codeph>ITextLayoutFormat</codeph> or converts an array of objects with key and value as members to a TextLayoutFormat.
		 <p>Legal values include FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of null.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:linkNormalFormat:get"><apiName>linkNormalFormat</apiName><shortdesc>
		 TextLayoutFormat:
		 Defines the formatting attributes used for links in normal state.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Defines the formatting attributes used for links in normal state. This value will cascade down the hierarchy and apply to any links that are descendants.
		 Accepts <codeph>inherit</codeph>, an <codeph>ITextLayoutFormat</codeph> or converts an array of objects with key and value as members to a TextLayoutFormat.
		 <p>Legal values include FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of null.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:listAutoPadding:get"><apiName>listAutoPadding</apiName><shortdesc>
		 TextLayoutFormat:
		 This specifies an auto indent for the start edge of lists when the padding value of the list on that side is auto.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 This specifies an auto indent for the start edge of lists when the padding value of the list on that side is <codeph>auto</codeph>.
		 <p>Legal values are numbers from -1000 to 1000 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 40.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:listMarkerFormat:get"><apiName>listMarkerFormat</apiName><shortdesc>
		 TextLayoutFormat:
		 Defines the formatting attributes list markers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Defines the formatting attributes list markers. This value will cascade down the hierarchy and apply to any links that are descendants.
		 Accepts <codeph>inherit</codeph>, an <codeph>IListMarkerFormat</codeph> or converts an array of objects with key and value as members to a ListMarkerFormat.
		 <p>Legal values include FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of null.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:listStylePosition:get"><apiName>listStylePosition</apiName><shortdesc>
		 TextLayoutFormat:
		 Legal values are ListStylePosition.INSIDE, ListStylePosition.OUTSIDE, FormatValue.INHERIT.
		 Default value is undefined indicating not set.
		 If undefined during the cascade this property will inherit its value from an ancestor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 <p>Legal values are ListStylePosition.INSIDE, ListStylePosition.OUTSIDE, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of ListStylePosition.OUTSIDE.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#ListStylePosition"><linktext>flashx.textLayout.formats.ListStylePosition</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:listStyleType:get"><apiName>listStyleType</apiName><shortdesc>
		 TextLayoutFormat:
		 Legal values are ListStyleType.UPPER_ALPHA, ListStyleType.LOWER_ALPHA, ListStyleType.UPPER_ROMAN, ListStyleType.LOWER_ROMAN, ListStyleType.NONE, ListStyleType.DISC, ListStyleType.CIRCLE, ListStyleType.SQUARE, ListStyleType.BOX, ListStyleType.CHECK, ListStyleType.DIAMOND, ListStyleType.HYPHEN, ListStyleType.ARABIC_INDIC, ListStyleType.BENGALI, ListStyleType.DECIMAL, ListStyleType.DECIMAL_LEADING_ZERO, ListStyleType.DEVANAGARI, ListStyleType.GUJARATI, ListStyleType.GURMUKHI, ListStyleType.KANNADA, ListStyleType.PERSIAN, ListStyleType.THAI, ListStyleType.URDU, ListStyleType.CJK_EARTHLY_BRANCH, ListStyleType.CJK_HEAVENLY_STEM, ListStyleType.HANGUL, ListStyleType.HANGUL_CONSTANT, ListStyleType.HIRAGANA, ListStyleType.HIRAGANA_IROHA, ListStyleType.KATAKANA, ListStyleType.KATAKANA_IROHA, ListStyleType.LOWER_ALPHA, ListStyleType.LOWER_GREEK, ListStyleType.LOWER_LATIN, ListStyleType.UPPER_ALPHA, ListStyleType.UPPER_GREEK, ListStyleType.UPPER_LATIN, FormatValue.INHERIT.
		 Default value is undefined indicating not set.
		 If undefined during the cascade this property will inherit its value from an ancestor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 <p>Legal values are ListStyleType.UPPER_ALPHA, ListStyleType.LOWER_ALPHA, ListStyleType.UPPER_ROMAN, ListStyleType.LOWER_ROMAN, ListStyleType.NONE, ListStyleType.DISC, ListStyleType.CIRCLE, ListStyleType.SQUARE, ListStyleType.BOX, ListStyleType.CHECK, ListStyleType.DIAMOND, ListStyleType.HYPHEN, ListStyleType.ARABIC_INDIC, ListStyleType.BENGALI, ListStyleType.DECIMAL, ListStyleType.DECIMAL_LEADING_ZERO, ListStyleType.DEVANAGARI, ListStyleType.GUJARATI, ListStyleType.GURMUKHI, ListStyleType.KANNADA, ListStyleType.PERSIAN, ListStyleType.THAI, ListStyleType.URDU, ListStyleType.CJK_EARTHLY_BRANCH, ListStyleType.CJK_HEAVENLY_STEM, ListStyleType.HANGUL, ListStyleType.HANGUL_CONSTANT, ListStyleType.HIRAGANA, ListStyleType.HIRAGANA_IROHA, ListStyleType.KATAKANA, ListStyleType.KATAKANA_IROHA, ListStyleType.LOWER_ALPHA, ListStyleType.LOWER_GREEK, ListStyleType.LOWER_LATIN, ListStyleType.UPPER_ALPHA, ListStyleType.UPPER_GREEK, ListStyleType.UPPER_LATIN, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of ListStyleType.DISC.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#ListStyleType"><linktext>flashx.textLayout.formats.ListStyleType</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:locale:get"><apiName>locale</apiName><shortdesc>
		 TextLayoutFormat:
		 The locale of the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 The locale of the text. Controls case transformations and shaping. Standard locale identifiers as described in Unicode Technical Standard #35 are used. For example en, en_US and en-US are all English, ja is Japanese. 
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of en.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:tlf_internal:oldInteractiveObjects:get"><apiName>oldInteractiveObjects</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="tlf_internal"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:paddingBottom:get"><apiName>paddingBottom</apiName><shortdesc>
		 TextLayoutFormat:
		 Bottom inset in pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Bottom inset in pixels.  Default of auto is zero except in lists which get a start side padding of 45.  (adopts default value if undefined during cascade).
		 Space between the bottom edge of the container and the text.  Value is a Number  or auto. <p> With horizontal text, in scrollable containers with multiple columns, the first and following columns will show the padding as blank space at the bottom of the container, but for the last column, if the text doesn't all fit, you may have to scroll in order to see the padding.</p>
		 <p>Legal values as a string are FormatValue.AUTO, FormatValue.INHERIT and numbers from -8000 to 8000.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of FormatValue.AUTO.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#Configuration/autoListElementStartPadding"><linktext>flashx.textLayout.elements.Configuration.autoListElementStartPadding</linktext></link><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:paddingLeft:get"><apiName>paddingLeft</apiName><shortdesc>
		 TextLayoutFormat:
		 Left inset in pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Left inset in pixels.  Default of auto is zero except in lists which get a start side padding of 45. (adopts default value if undefined during cascade).
		 Space between the left edge of the container and the text.  Value is a Number or auto.<p> With vertical text, in scrollable containers with multiple columns, the first and following columns will show the padding as blank space at the end of the container, but for the last column, if the text doesn't all fit, you may have to scroll in order to see the padding.</p>
		 <p>Legal values as a string are FormatValue.AUTO, FormatValue.INHERIT and numbers from -8000 to 8000.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of FormatValue.AUTO.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#Configuration/autoListElementStartPadding"><linktext>flashx.textLayout.elements.Configuration.autoListElementStartPadding</linktext></link><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:paddingRight:get"><apiName>paddingRight</apiName><shortdesc>
		 TextLayoutFormat:
		 Right inset in pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Right inset in pixels.  Default of auto is zero except in lists which get a start side padding of 45. (adopts default value if undefined during cascade).
		 Space between the right edge of the container and the text.  Value is a Number or auto. 
		 <p>Legal values as a string are FormatValue.AUTO, FormatValue.INHERIT and numbers from -8000 to 8000.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of FormatValue.AUTO.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#Configuration/autoListElementStartPadding"><linktext>flashx.textLayout.elements.Configuration.autoListElementStartPadding</linktext></link><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:paddingTop:get"><apiName>paddingTop</apiName><shortdesc>
		 TextLayoutFormat:
		 Top inset in pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Top inset in pixels.  Default of auto is zero except in lists which get a start side padding of 45. (adopts default value if undefined during cascade).
		 Space between the top edge of the container and the text.  Value is a Number or auto.
		 <p>Legal values as a string are FormatValue.AUTO, FormatValue.INHERIT and numbers from -8000 to 8000.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of FormatValue.AUTO.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#Configuration/autoListElementStartPadding"><linktext>flashx.textLayout.elements.Configuration.autoListElementStartPadding</linktext></link><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:paragraphEndIndent:get"><apiName>paragraphEndIndent</apiName><shortdesc>
		 TextLayoutFormat:
		 A Number that specifies, in pixels, the amount to indent the paragraph's end edge.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 A Number that specifies, in pixels, the amount to indent the paragraph's end edge. Refers to the right edge in left-to-right text and the left edge in right-to-left text. 
		 <p>Legal values are numbers from 0 to 8000 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:paragraphSpaceAfter:get"><apiName>paragraphSpaceAfter</apiName><shortdesc>
		 TextLayoutFormat:
		 A Number that specifies the amount of space, in pixels, to leave after the paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 A Number that specifies the amount of space, in pixels, to leave after the paragraph.
		 Collapses in tandem with  <codeph>paragraphSpaceBefore</codeph>.
		 <p>Legal values are numbers from 0 to 8000 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:paragraphSpaceBefore:get"><apiName>paragraphSpaceBefore</apiName><shortdesc>
		 TextLayoutFormat:
		 A Number that specifies the amount of space, in pixels, to leave before the paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 A Number that specifies the amount of space, in pixels, to leave before the paragraph. 
		 Collapses in tandem with <codeph>paragraphSpaceAfter</codeph>.
		 <p>Legal values are numbers from 0 to 8000 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:paragraphStartIndent:get"><apiName>paragraphStartIndent</apiName><shortdesc>
		 TextLayoutFormat:
		 A Number that specifies, in pixels, the amount to indent the paragraph's start edge.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 A Number that specifies, in pixels, the amount to indent the paragraph's start edge. Refers to the left edge in left-to-right text and the right edge in right-to-left text. 
		 <p>Legal values are numbers from 0 to 8000 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:renderingMode:get"><apiName>renderingMode</apiName><shortdesc>
		 TextLayoutFormat:
		 The rendering mode used for this text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 The rendering mode used for this text.  Applies only to embedded fonts (<codeph>fontLookup</codeph> property is set to <codeph>FontLookup.EMBEDDED_CFF</codeph>).
		 <p>Legal values are RenderingMode.NORMAL, RenderingMode.CFF, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of RenderingMode.CFF.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.RenderingMode.xml"><linktext>flash.text.engine.RenderingMode</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:rootElement:get"><apiName>rootElement</apiName><shortdesc> 
		 Returns the root element that appears in the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:ContainerFormattedElement</apiValueClassifier></apiValueDef><apiDesc> 
		 Returns the root element that appears in the container. The root element could be a DivElement or TextFlow
		 instance, for example.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#ContainerFormattedElement"><linktext>flashx.textLayout.elements.ContainerFormattedElement</linktext></link><link href="flashx.textLayout.elements.xml#DivElement"><linktext>flashx.textLayout.elements.DivElement</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>flashx.textLayout.elements.TextFlow</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:styleName:get"><apiName>styleName</apiName><shortdesc>
		 TextLayoutFormat:
		 Assigns an identifying class to the element, making it possible to set a style for the element by referencing the styleName.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Assigns an identifying class to the element, making it possible to set a style for the element by referencing the <codeph>styleName</codeph>.
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of null.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:styles:get"><apiName>styles</apiName><shortdesc> Returns the styles on this ContainerController.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc> Returns the styles on this ContainerController.  Note that the getter makes a copy of the  
		 styles dictionary. The returned object includes all styles set in the format property including core and user styles. The
		 returned object consists of an array of <i>stylename-value</i> pairs.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat"><linktext>flashx.textLayout.formats.TextLayoutFormat</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:tabStops:get"><apiName>tabStops</apiName><shortdesc>
		 TextLayoutFormat:
		 Specifies the tab stops associated with the paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Specifies the tab stops associated with the paragraph.
		 Setters can take an array of TabStopFormat, a condensed string representation, undefined, or <codeph>FormatValue.INHERIT</codeph>. The condensed string representation is always converted into an array of TabStopFormat. <p>The string-based format is a list of tab stops, where each tab stop is delimited by one or more spaces.</p><p>A tab stop takes the following form: &lt;alignment type&gt;&lt;alignment position&gt;|&lt;alignment token&gt;.</p><p>The alignment type is a single character, and can be S, E, C, or D (or lower-case equivalents). S or s for start, E or e for end, C or c for center, D or d for decimal. The alignment type is optional, and if its not specified will default to S.</p><p>The alignment position is a Number, and is specified according to FXG spec for Numbers (decimal or scientific notation). The alignment position is required.</p><p>The vertical bar is used to separate the alignment position from the alignment token, and should only be present if the alignment token is present.</p><p> The alignment token is optional if the alignment type is D, and should not be present if the alignment type is anything other than D. The alignment token may be any sequence of characters terminated by the space that ends the tab stop (for the last tab stop, the terminating space is optional; end of alignment token is implied). A space may be part of the alignment token if it is escaped with a backslash (\ ). A backslash may be part of the alignment token if it is escaped with another backslash (\\). If the alignment type is D, and the alignment token is not specified, it will take on the default value of null.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of null.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TabStopFormat"><linktext>flashx.textLayout.formats.TabStopFormat</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:textAlignLast:get"><apiName>textAlignLast</apiName><shortdesc>
		 TextLayoutFormat:
		 Alignment of the last (or only) line in the paragraph relative to the container in justified text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Alignment of the last (or only) line in the paragraph relative to the container in justified text.
		 If <codeph>textAlign</codeph> is set to <codeph>TextAlign.JUSTIFY</codeph>, <codeph>textAlignLast</codeph> specifies how the last line (or only line, if this is a one line block) is aligned. Values are similar to <codeph>textAlign</codeph>.
		 <p>Legal values are TextAlign.LEFT, TextAlign.RIGHT, TextAlign.CENTER, TextAlign.JUSTIFY, TextAlign.START, TextAlign.END, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of TextAlign.START.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextAlign"><linktext>flashx.textLayout.formats.TextAlign</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:textAlign:get"><apiName>textAlign</apiName><shortdesc>
		 TextLayoutFormat:
		 Alignment of lines in the paragraph relative to the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Alignment of lines in the paragraph relative to the container.
		 <codeph>TextAlign.LEFT</codeph> aligns lines along the left edge of the container. <codeph>TextAlign.RIGHT</codeph> aligns on the right edge. <codeph>TextAlign.CENTER</codeph> positions the line equidistant from the left and right edges. <codeph>TextAlign.JUSTIFY</codeph> spreads the lines out so they fill the space. <codeph>TextAlign.START</codeph> is equivalent to setting left in left-to-right text, or right in right-to-left text. <codeph>TextAlign.END</codeph> is equivalent to setting right in left-to-right text, or left in right-to-left text.
		 <p>Legal values are TextAlign.LEFT, TextAlign.RIGHT, TextAlign.CENTER, TextAlign.JUSTIFY, TextAlign.START, TextAlign.END, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of TextAlign.START.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextAlign"><linktext>flashx.textLayout.formats.TextAlign</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:textAlpha:get"><apiName>textAlpha</apiName><shortdesc>
		 TextLayoutFormat:
		 Alpha (transparency) value for the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Alpha (transparency) value for the text. A value of 0 is fully transparent, and a value of 1 is fully opaque. Display objects with <codeph>textAlpha</codeph> set to 0 are active, even though they are invisible.
		 <p>Legal values are numbers from 0 to 1 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 1.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:textDecoration:get"><apiName>textDecoration</apiName><shortdesc>
		 TextLayoutFormat:
		 Decoration on text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Decoration on text. Use to apply underlining; default is none.
		 <p>Legal values are TextDecoration.NONE, TextDecoration.UNDERLINE, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of TextDecoration.NONE.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextDecoration"><linktext>flashx.textLayout.formats.TextDecoration</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:textFlow:get"><apiName>textFlow</apiName><shortdesc> 
		 Returns the TextFlow object whose content appears in the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:TextFlow</apiValueClassifier></apiValueDef><apiDesc> 
		 Returns the TextFlow object whose content appears in the container. Either the <codeph>textFlow</codeph> and  
		 <codeph>rootElement</codeph> values are the same, or this is the root element's TextFlow object. For example,
		 if the container's root element is a DivElement, the value would be the TextFlow object to which the
		 DivElement belongs.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:textIndent:get"><apiName>textIndent</apiName><shortdesc>
		 TextLayoutFormat:
		 A Number that specifies, in pixels, the amount to indent the first line of the paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 A Number that specifies, in pixels, the amount to indent the first line of the paragraph.
		 A negative indent will push the line into the margin, and possibly out of the container.
		 <p>Legal values are numbers from -8000 to 8000 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:textJustify:get"><apiName>textJustify</apiName><shortdesc>
		 TextLayoutFormat:
		 Specifies options for justifying text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Specifies options for justifying text.
		 Default value is <codeph>TextJustify.INTER_WORD</codeph>, meaning that extra space is added to the space characters. <codeph>TextJustify.DISTRIBUTE</codeph> adds extra space to space characters and between individual letters. Used only in conjunction with a <codeph>justificationRule</codeph> value of <codeph>JustificationRule.SPACE</codeph>.
		 <p>Legal values are TextJustify.INTER_WORD, TextJustify.DISTRIBUTE, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of TextJustify.INTER_WORD.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextJustify"><linktext>flashx.textLayout.formats.TextJustify</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:textLength:get"><apiName>textLength</apiName><shortdesc> Returns the total number of characters in the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> Returns the total number of characters in the container. This can include text that is not currently in view,
		 if the container is scrollable. This value is updated when the text is composed (when the IFlowComposer's <codeph>compose()</codeph> 
		 or <codeph>updateAllControllers()</codeph> methods are called).
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#IFlowComposer"><linktext>flashx.textLayout.compose.IFlowComposer</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:textRotation:get"><apiName>textRotation</apiName><shortdesc>
		 TextLayoutFormat:
		 Determines the number of degrees to rotate this text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Determines the number of degrees to rotate this text.
		 <p>Legal values are TextRotation.ROTATE_0, TextRotation.ROTATE_180, TextRotation.ROTATE_270, TextRotation.ROTATE_90, TextRotation.AUTO, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of TextRotation.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextRotation.xml"><linktext>flash.text.engine.TextRotation</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:trackingLeft:get"><apiName>trackingLeft</apiName><shortdesc>
		 TextLayoutFormat:
		 Number in pixels (or percent of fontSize, like 120%) indicating the amount of tracking (manual kerning) to be applied to the left of each character.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Number in pixels (or percent of <codeph>fontSize</codeph>, like 120%) indicating the amount of tracking (manual kerning) to be applied to the left of each character. If kerning is enabled, the <codeph>trackingLeft</codeph> value is added to the values in the kerning table for the font. If kerning is disabled, the <codeph>trackingLeft</codeph> value is used as a manual kerning value. Supports both positive and negative values. 
		 <p>Legal values as a number are from -1000 to 1000.</p>
		 <p>Legal values as a percent are numbers from -1000% to 1000%.</p>
		 <p>Legal values include FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:trackingRight:get"><apiName>trackingRight</apiName><shortdesc>
		 TextLayoutFormat:
		 Number in pixels (or percent of fontSize, like 120%) indicating the amount of tracking (manual kerning) to be applied to the right of each character.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Number in pixels (or percent of <codeph>fontSize</codeph>, like 120%) indicating the amount of tracking (manual kerning) to be applied to the right of each character.  If kerning is enabled, the <codeph>trackingRight</codeph> value is added to the values in the kerning table for the font. If kerning is disabled, the <codeph>trackingRight</codeph> value is used as a manual kerning value. Supports both positive and negative values. 
		 <p>Legal values as a number are from -1000 to 1000.</p>
		 <p>Legal values as a percent are numbers from -1000% to 1000%.</p>
		 <p>Legal values include FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:typographicCase:get"><apiName>typographicCase</apiName><shortdesc>
		 TextLayoutFormat:
		 The type of typographic case used for this text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 The type of typographic case used for this text. Here are some examples:<p><adobeimage alt="typographicCase" href="../../../images/textLayout_typographiccase.png"/></p>
		 <p>Legal values are TLFTypographicCase.DEFAULT, TLFTypographicCase.CAPS_TO_SMALL_CAPS, TLFTypographicCase.UPPERCASE, TLFTypographicCase.LOWERCASE, TLFTypographicCase.LOWERCASE_TO_SMALL_CAPS, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of TLFTypographicCase.DEFAULT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TLFTypographicCase"><linktext>flashx.textLayout.formats.TLFTypographicCase</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:userStyles:get"><apiName>userStyles</apiName><shortdesc> Allows you to read and write user styles on a ContainerController object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc> Allows you to read and write user styles on a ContainerController object.  Note that reading this property
		 makes a copy of the userStyles set in the format of this element. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:verticalAlign:get"><apiName>verticalAlign</apiName><shortdesc>
		 TextLayoutFormat:
		 Vertical alignment or justification (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Vertical alignment or justification (adopts default value if undefined during cascade).
		 Determines how TextFlow elements align within the container.
		 <p>Legal values are VerticalAlign.TOP, VerticalAlign.MIDDLE, VerticalAlign.BOTTOM, VerticalAlign.JUSTIFY, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of VerticalAlign.TOP.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#VerticalAlign"><linktext>flashx.textLayout.formats.VerticalAlign</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:verticalScrollPolicy:get"><apiName>verticalScrollPolicy</apiName><shortdesc> Specifies the vertical scrolling policy, which you can set by assigning one of the constants of the ScrollPolicy
		 class: ON, OFF, or, AUTO.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc> Specifies the vertical scrolling policy, which you can set by assigning one of the constants of the ScrollPolicy
		 class: ON, OFF, or, AUTO.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.container.xml#ScrollPolicy"><linktext>ScrollPolicy</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:verticalScrollPosition:get"><apiName>verticalScrollPosition</apiName><shortdesc> Specifies the current vertical scroll location on the stage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc> Specifies the current vertical scroll location on the stage. The value specifies the number of 
		 pixels from the top.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:whiteSpaceCollapse:get"><apiName>whiteSpaceCollapse</apiName><shortdesc>
		 TextLayoutFormat:
		 Collapses or preserves whitespace when importing text into a TextFlow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Collapses or preserves whitespace when importing text into a TextFlow. <codeph>WhiteSpaceCollapse.PRESERVE</codeph> retains all whitespace characters. <codeph>WhiteSpaceCollapse.COLLAPSE</codeph> removes newlines, tabs, and leading or trailing spaces within a block of imported text. Line break tags () and Unicode line separator characters are retained.
		 <p>Legal values are WhiteSpaceCollapse.PRESERVE, WhiteSpaceCollapse.COLLAPSE, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of WhiteSpaceCollapse.COLLAPSE.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#WhiteSpaceCollapse"><linktext>flashx.textLayout.formats.WhiteSpaceCollapse</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:wordSpacing:get"><apiName>wordSpacing</apiName><shortdesc>
		 TextLayoutFormat:
		 Specifies the optimum, minimum, and maximum spacing (as a multiplier of the width of a normal space) between words to use during justification.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Specifies the optimum, minimum, and maximum spacing (as a multiplier of the width of a normal space) between words to use during justification.
		 The optimum space is used to indicate the desired size of a space, as a fraction of the value defined in the font. The minimum and maximum values are the used when textJustify is distribute to determine how wide or narrow the spaces between the words may grow before letter spacing is used to justify the line.
		 <p>Legal values as a percent are numbers from -1000% to 1000%.</p>
		 <p>Legal values include FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 100%, 50%, 150%.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:containerControllerInitialFormat:set"><apiName>containerControllerInitialFormat</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.container:TextContainerManager"><apiName>TextContainerManager</apiName><shortdesc> Manages text in a container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><Exclude kind="method" name="callInContext"/><Exclude kind="method" name="getBaseSWFContext"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.compose:ISWFContext</apiBaseInterface><apiBaseInterface>flashx.textLayout.edit:IInteractionEventHandler</apiBaseInterface><apiBaseInterface>flashx.textLayout.container:ISandboxSupport</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc> Manages text in a container. Assumes that it manages all children of the container. 
	 Consider using TextContainerManager for better performance in cases where there is a 
	 one container per TextFlow, and the TextFlow is not the main focus, is static text, or
	 is infrequently selected. Good for text in form fields, for example.
	 
	 </apiDesc><example conref="examples\TextContainerManager.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.container.xml#ContainerController"><linktext>ContainerController</linktext></link></related-links><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.UpdateCompleteEvent_updateComplete"><apiName>updateComplete</apiName><shortdesc> Dispatched by a TextFlow object each time a container has had new DisplayObjects added or updated as a result of composition.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.UpdateCompleteEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched by a TextFlow object each time a container has had new DisplayObjects added or updated as a result of composition.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.DamageEvent_damage"><apiName>damage</apiName><shortdesc> Dispatched by a TextFlow object each time it is damaged 
	 
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.DamageEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched by a TextFlow object each time it is damaged 
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.TextLayoutEvent_scroll"><apiName>scroll</apiName><shortdesc> Dispatched by a TextFlow object after text is scrolled within a controller container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.TextLayoutEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched by a TextFlow object after text is scrolled within a controller container.  
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.StatusChangeEvent_inlineGraphicStatusChanged"><apiName>inlineGraphicStatusChanged</apiName><shortdesc> Dispatched when a InlineGraphicElement is resized due to having width or height as auto or percent 
	 and the graphic has finished loading.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.StatusChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched when a InlineGraphicElement is resized due to having width or height as auto or percent 
	 and the graphic has finished loading. 
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.FlowElementMouseEvent_click"><apiName>click</apiName><shortdesc> Dispatched when any link is clicked.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched when any link is clicked. 
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.FlowElementMouseEvent_rollOut"><apiName>rollOut</apiName><shortdesc> Dispatched when the mouse goes out of any link.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched when the mouse goes out of any link. 
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.FlowElementMouseEvent_rollOver"><apiName>rollOver</apiName><shortdesc> Dispatched when the mouse first enters any link.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched when the mouse first enters any link. 
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.FlowElementMouseEvent_mouseMove"><apiName>mouseMove</apiName><shortdesc> Dispatched when the mouse passes over any link.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched when the mouse passes over any link. 
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.FlowElementMouseEvent_mouseUp"><apiName>mouseUp</apiName><shortdesc> Dispatched when the mouse is released over any link.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched when the mouse is released over any link. 
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.FlowElementMouseEvent_mouseDown"><apiName>mouseDown</apiName><shortdesc> Dispatched when the mouse is pressed down over any link.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched when the mouse is pressed down over any link. 
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.CompositionCompleteEvent_compositionComplete"><apiName>compositionComplete</apiName><shortdesc> Dispatched after every recompose.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.CompositionCompleteEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched after every recompose. 
	
	</apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.SelectionEvent_selectionChange"><apiName>selectionChange</apiName><shortdesc> Dispatched whenever the selection is changed.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.SelectionEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched whenever the selection is changed.  Primarily used to update selection-dependent user interface. 
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_COMPLETE_flowOperationComplete"><apiName>flowOperationComplete</apiName><shortdesc>
	 
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_COMPLETE</apiEventType><adobeApiEventClassifier>flashx.textLayout.events.FlowOperationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_END_flowOperationEnd"><apiName>flowOperationEnd</apiName><shortdesc>
	 
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_END</apiEventType><adobeApiEventClassifier>flashx.textLayout.events.FlowOperationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_BEGIN_flowOperationBegin"><apiName>flowOperationBegin</apiName><shortdesc>
	 
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_BEGIN</apiEventType><adobeApiEventClassifier>flashx.textLayout.events.FlowOperationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 
	  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flashx.textLayout.container:TextContainerManager:TextContainerManager"><apiName>TextContainerManager</apiName><shortdesc> Constructor function - creates a TextContainerManager instance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>container</apiItemName><apiType value="flash.display:Sprite"/><apiDesc>The DisplayObjectContainer in which to manage the text lines.
		 </apiDesc></apiParam><apiParam><apiItemName>configuration</apiItemName><apiOperationClassifier>flashx.textLayout.elements:IConfiguration</apiOperationClassifier><apiData>null</apiData><apiDesc>- The IConfiguration instance to use with this TextContainerManager instance. 
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> Constructor function - creates a TextContainerManager instance.
		 
		 For best results:
		 <ol>
		 <li>Start with TextContainerManager.defaultConfiguration and modify it</li>   
		 <li>Share the same Configuration among many InputManagers</li>
		 </ol>
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flashx.textLayout.container:TextContainerManager:activateHandler"><apiName>activateHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#activateHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>The Event object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#activateHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#Event/ACTIVATE"><linktext>Event.ACTIVATE</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:beginInteraction"><apiName>beginInteraction</apiName><shortdesc> Returns the current ISelectionManager instance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the interaction manager for this TextContainerManager instance.
		 </apiDesc><apiOperationClassifier>flashx.textLayout.edit:ISelectionManager</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> Returns the current ISelectionManager instance. Converts to TextFlow instance and creates one if necessary. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.edit.xml#ISelectionManager"><linktext>ISelectionManager</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:beginMouseCapture"><apiName>beginMouseCapture</apiName><shortdesc> 
		 Called to request clients to begin the forwarding of mouseup and mousemove events from outside a security sandbox.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Called to request clients to begin the forwarding of mouseup and mousemove events from outside a security sandbox.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:compose"><apiName>compose</apiName><shortdesc> Composes the container text; calls either the factory or updateAllControllers().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> Composes the container text; calls either the factory or <codeph>updateAllControllers()</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:protected:createContextMenu"><apiName>createContextMenu</apiName><shortdesc> Creates a ContextMenu for the TextContainerManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>the created context menu.
		 
		 </apiDesc><apiType value="flash.ui:ContextMenu"/></apiReturn></apiOperationDef><apiDesc> Creates a ContextMenu for the TextContainerManager. Use the methods of the ContextMenu 
		  class to add items to the menu. 
		 <p>You can override this method to define a custom context menu.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.ui.ContextMenu.xml"><linktext>ContextMenu</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:protected:createEditManager"><apiName>createEditManager</apiName><shortdesc>Create an edit manager to use for editing.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>the editing manager for this TextContainerManager instance.
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.edit:IEditManager</apiOperationClassifier></apiReturn><apiParam><apiItemName>undoManager</apiItemName><apiOperationClassifier>flashx.undo:IUndoManager</apiOperationClassifier><apiDesc>IUndoManager instance for the EditManager being created.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>Create an edit manager to use for editing. Override this method if you have a custom EditManager that you
		 want to use in place of the default.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:protected:createSelectionManager"><apiName>createSelectionManager</apiName><shortdesc>Create a selection manager to use for selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>a new SelectionManager instance.
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.edit:ISelectionManager</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>Create a selection manager to use for selection. Override this method if you have a custom SelectionManager that you
		 want to use in place of the default.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:deactivateHandler"><apiName>deactivateHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#deactivateHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>The Event object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#deactivateHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#Event/DEACTIVATE"><linktext>Event.DEACTIVATE</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:drawBackgroundAndSetScrollRect"><apiName>drawBackgroundAndSetScrollRect</apiName><shortdesc>   
		 Returns true if it has filled in the container's scrollRect property.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> if it has created the <codeph>scrollRect</codeph> object.
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>scrollX</apiItemName><apiType value="Number"/><apiDesc>The starting horizontal position of the scroll rectangle.
		 </apiDesc></apiParam><apiParam><apiItemName>scrollY</apiItemName><apiType value="Number"/><apiDesc>The starting vertical position of the scroll rectangle.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>   
		 Returns <codeph>true</codeph> if it has filled in the container's scrollRect property.  
		 This method enables you to test whether <codeph>scrollRect</codeph> is set without actually accessing the <codeph>scrollRect</codeph> property 
		 which can possibly create a  performance issue. 
		 <p>Override this method to draw a background or a border.  Overriding this method can be tricky as the scrollRect <b>must</b> 
		 be set as specified.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:editHandler"><apiName>editHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#editHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Event object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#editHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.Event.xml"><linktext>Event</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:endInteraction"><apiName>endInteraction</apiName><shortdesc> Terminates interaction.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> Terminates interaction. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.edit.xml#ISelectionManager"><linktext>ISelectionManager</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:endMouseCapture"><apiName>endMouseCapture</apiName><shortdesc> 
		 Called to inform clients that the the forwarding of mouseup and mousemove events from outside a security sandbox is no longer needed.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Called to inform clients that the the forwarding of mouseup and mousemove events from outside a security sandbox is no longer needed.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:focusChangeHandler"><apiName>focusChangeHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#focusChangeHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/><apiDesc>The FocusEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#focusChangeHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#FocusEvent/KEY_FOCUS_CHANGE"><linktext>FocusEvent.KEY_FOCUS_CHANGE</linktext></link><link href="" invalidHref="flash.events.xml#FocusEvent/MOUSE_FOCUS_CHANGE"><linktext>FocusEvent.MOUSE_FOCUS_CHANGE</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:focusInHandler"><apiName>focusInHandler</apiName><shortdesc> Process a focusIn event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/></apiParam></apiOperationDef><apiDesc> Process a focusIn event.
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:focusOutHandler"><apiName>focusOutHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#focusOutHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/><apiDesc>The FocusEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#focusOutHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#FocusEvent/FOCUS_OUT"><linktext>FocusEvent.FOCUS_OUT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:getContentBounds"><apiName>getContentBounds</apiName><shortdesc> Creates a rectangle that shows where the last call to either the compose() 
		 method or the updateContainer() method placed the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the bounds of the content
		 </apiDesc><apiType value="flash.geom:Rectangle"/></apiReturn></apiOperationDef><apiDesc> Creates a rectangle that shows where the last call to either the <codeph>compose()</codeph> 
		 method or the <codeph>updateContainer()</codeph> method placed the text.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.container.xml#TextContainerManager/compose()"><linktext>compose()</linktext></link><link href="flashx.textLayout.container.xml#TextContainerManager/updateContainer()"><linktext>updateContainer()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:protected:getFocusedSelectionFormat"><apiName>getFocusedSelectionFormat</apiName><shortdesc> Returns the focusedSelectionFormat - by default get it from the configuration.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiOperationClassifier>flashx.textLayout.edit:SelectionFormat</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> Returns the focusedSelectionFormat - by default get it from the configuration.
		 This can be overridden in the subclass to supply a different SelectionFormat
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:protected:getInactiveSelectionFormat"><apiName>getInactiveSelectionFormat</apiName><shortdesc> Returns the inactiveSelectionFormat - by default get it from the configuration 
		 This can be overridden in the subclass to supply a different SelectionFormat
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiOperationClassifier>flashx.textLayout.edit:SelectionFormat</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> Returns the inactiveSelectionFormat - by default get it from the configuration 
		 This can be overridden in the subclass to supply a different SelectionFormat
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:getLineAt"><apiName>getLineAt</apiName><shortdesc> Return the TextLine at the index from array of composed lines.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the TextLine that occurs at the specified index.
		 
		 </apiDesc><apiType value="flash.text.engine:TextLine"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Finds the line at this index position in the text.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Return the TextLine at the index from array of composed lines.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:getScrollDelta"><apiName>getScrollDelta</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#getScrollDelta()"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>the delta amount of space to scroll
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>numLines</apiItemName><apiType value="int"/><apiDesc>The number of lines to scroll.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#getScrollDelta()"> 
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:getTextFlow"><apiName>getTextFlow</apiName><shortdesc> The current TextFlow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the current TextFlow object
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> The current TextFlow. Converts this to a full TextFlow representation if it 
		 isn't already one. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:getText"><apiName>getText</apiName><shortdesc>
		 Returns the current text using a separator between paragraphs.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/></apiReturn><apiParam><apiItemName>separator</apiItemName><apiType value="String"/><apiData> </apiData><apiDesc>String to set between paragraphs.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the current text using a separator between paragraphs.
		 The separator can be specified with the <codeph>separator</codeph>
		 argument. The default value of the <codeph>separator</codeph> argument
		 is the Unicode character <codeph>'PARAGRAPH SEPARATOR' (U+2029)</codeph>.
		 
		 <p>Calling the setter discards any attached TextFlow. Any selection is lost.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:protected:getUndoManager"><apiName>getUndoManager</apiName><shortdesc> 
		 Returns the undo manager to use.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>new IUndoManager instance.
		 
		 </apiDesc><apiOperationClassifier>flashx.undo:IUndoManager</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> 
		 Returns the undo manager to use. By default, creates a unique undo manager. 
		 You can override this method in the subclass if you want to customize the undo manager
		 (for example, to use a shared undo manager for multiple TextContainerManager instances).
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:protected:getUnfocusedSelectionFormat"><apiName>getUnfocusedSelectionFormat</apiName><shortdesc> Returns the unfocusedSelectionFormat - by default get it from the configuration 
		 You can override this method in the subclass to supply a different SelectionFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiOperationClassifier>flashx.textLayout.edit:SelectionFormat</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> Returns the unfocusedSelectionFormat - by default get it from the configuration 
		 You can override this method in the subclass to supply a different SelectionFormat.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:imeStartCompositionHandler"><apiName>imeStartCompositionHandler</apiName><shortdesc> Processes the IME_START_COMPOSITION event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:IMEEvent"/><apiDesc> The IMEEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Processes the <codeph>IME_START_COMPOSITION</codeph> event when the client manages events.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#IMEEvent/IME_START_COMPOSITION"><linktext>IMEEvent.IME_START_COMPOSITION</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:invalidateSelectionFormats"><apiName>invalidateSelectionFormats</apiName><shortdesc> Call this if you change the selection formats (SelectionFormat) and want the interactionManager 
		 to update.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> Call this if you change the selection formats (SelectionFormat) and want the interactionManager 
		 to update. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:invalidateUndoManager"><apiName>invalidateUndoManager</apiName><shortdesc> Call this if you are editing, and want to reset the undo manager used for editing.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> Call this if you are editing, and want to reset the undo manager used for editing.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:isDamaged"><apiName>isDamaged</apiName><shortdesc> Returns true if the content needs composing.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> if the content needs composing; <codeph>false</codeph> otherwise.
		 </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc> Returns <codeph>true</codeph> if the content needs composing. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:keyDownHandler"><apiName>keyDownHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#keyDownHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:KeyboardEvent"/><apiDesc>KeyboardEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#keyDownHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#KeyboardEvent/KEY_DOWN"><linktext>KeyboardEvent.KEY_DOWN</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:keyFocusChangeHandler"><apiName>keyFocusChangeHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#keyFocusChangeHandler()."> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/><apiDesc>The FocusEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#keyFocusChangeHandler()."> </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:keyUpHandler"><apiName>keyUpHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#keyUpHandler()."> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:KeyboardEvent"/><apiDesc>The KeyboardEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#keyUpHandler()."> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#KeyboardEvent/KEY_UP"><linktext>KeyboardEvent.KEY_UP</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:menuSelectHandler"><apiName>menuSelectHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#menuSelectHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:ContextMenuEvent"/><apiDesc>ContextMenuEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#menuSelectHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#ContextMenuEvent/MENU_SELECT"><linktext>ContextMenuEvent.MENU_SELECT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:mouseDoubleClickHandler"><apiName>mouseDoubleClickHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#mouseDoubleClickHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>The MouseEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#mouseDoubleClickHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/DOUBLE_CLICK"><linktext>MouseEvent.DOUBLE_CLICK</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:mouseDownHandler"><apiName>mouseDownHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#mouseDownHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>The MouseEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#mouseDownHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_DOWN"><linktext>MouseEvent.MOUSE_DOWN</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:mouseMoveHandler"><apiName>mouseMoveHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#mouseMoveHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>The MouseEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#mouseMoveHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_MOVE"><linktext>MouseEvent.MOUSE_MOVE</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:mouseMoveSomewhere"><apiName>mouseMoveSomewhere</apiName><shortdesc> Client call to forward a mouseMove event from outside a security sandbox.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>e</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc> Client call to forward a mouseMove event from outside a security sandbox.  Coordinates of the mouse move are not needed.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:mouseOutHandler"><apiName>mouseOutHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#mouseOutHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>The MouseEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#mouseOutHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_OUT"><linktext>MouseEvent.MOUSE_OUT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:mouseOverHandler"><apiName>mouseOverHandler</apiName><shortdesc> Process a mouseOver event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/></apiParam></apiOperationDef><apiDesc> Process a mouseOver event.
		</apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_OVER"><linktext>MouseEvent.MOUSE_OVER</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:mouseUpHandler"><apiName>mouseUpHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#mouseUpHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>The MouseEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#mouseUpHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_UP"><linktext>MouseEvent.MOUSE_UP</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:mouseUpSomewhere"><apiName>mouseUpSomewhere</apiName><shortdesc> Client call to forward a mouseUp event from outside a security sandbox.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>e</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc> Client call to forward a mouseUp event from outside a security sandbox.  Coordinates of the mouse up are not needed.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:mouseWheelHandler"><apiName>mouseWheelHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#mouseWheelHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>The MouseEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#mouseWheelHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_WHEEL"><linktext>MouseEvent.MOUSE_WHEEL</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:resetLine"><apiName>resetLine</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>textLine</apiItemName><apiType value="flash.text.engine:TextLine"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:scrollToRange"><apiName>scrollToRange</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#scrollToRange()"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/><apiDesc>The end of the selection that is changed when you extend the selection. It can be
		 	either the start or the end of the selection, expressed as an offset from the start of the text flow.
		 </apiDesc></apiParam><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/><apiDesc>  	The stable end of the selection when you extend the selection. It can be either 
		 	the start or the end of the selection.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#scrollToRange()"> 
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:setTextFlow"><apiName>setTextFlow</apiName><shortdesc> Sets a TextFlow into this TextContainerManager replacing any existing TextFlow and discarding the 
		 current text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>textFlow</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier></apiParam></apiOperationDef><apiDesc> Sets a TextFlow into this TextContainerManager replacing any existing TextFlow and discarding the 
		 current text. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:setText"><apiName>setText</apiName><shortdesc>
		 Sets the text property to the specified String.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiDesc>the String to set
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Sets the <codeph>text</codeph> property to the specified String.
		 
		 Discards any attached TextFlow. Any selection is lost.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:softKeyboardActivatingHandler"><apiName>softKeyboardActivatingHandler</apiName><shortdesc> Processes the SOFT_KEYBOARD_ACTIVATING event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc> The SoftKeyboardEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Processes the <codeph>SOFT_KEYBOARD_ACTIVATING</codeph> event when the client manages events.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#SoftKeyboardEvent/SOFT_KEYBOARD_ACTIVATING"><linktext>SoftKeyboardEvent.SOFT_KEYBOARD_ACTIVATING</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:textInputHandler"><apiName>textInputHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#textInputHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:TextEvent"/><apiDesc> The TextEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#textInputHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#TextEvent/TEXT_INPUT"><linktext>TextEvent.TEXT_INPUT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:updateContainer"><apiName>updateContainer</apiName><shortdesc> Updates the display; calls either the factory or updateAllControllers().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>true if anything changed.
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc> Updates the display; calls either the factory or updateAllControllers().
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.container:TextContainerManager:compositionHeight:get"><apiName>compositionHeight</apiName><shortdesc> Returns the vertical extent allowed for text inside the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc> Returns the vertical extent allowed for text inside the container. The value is specified in pixels. 
		 <p>After setting this property, the text in the container is damaged and requires composing.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:compositionWidth:get"><apiName>compositionWidth</apiName><shortdesc> Returns the horizontal extent allowed for text inside the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc> Returns the horizontal extent allowed for text inside the container. The value is specified in pixels.
		 
		 <p>After setting this property, the text in the container is damaged and requires composing.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:configuration:get"><apiName>configuration</apiName><shortdesc> The Configuration object for this TextContainerManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:IConfiguration</apiValueClassifier></apiValueDef><apiDesc> The Configuration object for this TextContainerManager. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flashx.textLayout.IConfiguration.xml"><linktext>IConfiguration</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:container:get"><apiName>container</apiName><shortdesc> Returns the container (DisplayObjectContainer) that holds the text that this TextContainerManager manages.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:Sprite"/></apiValueDef><apiDesc> Returns the container (DisplayObjectContainer) that holds the text that this TextContainerManager manages.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.container.xml#ContainerController/container"><linktext>ContainerController.container</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:defaultConfiguration:get"><apiName>defaultConfiguration</apiName><shortdesc> The default configuration for this TextContainerManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:IConfiguration</apiValueClassifier></apiValueDef><apiDesc> The default configuration for this TextContainerManager. Column and padding attributes
		 are set to <codeph>FormatValue.INHERIT</codeph>.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#IConfiguration"><linktext>IConfiguration</linktext></link><link href="flashx.textLayout.formats.xml#FormatValue/INHERIT"><linktext>FormatValue.INHERIT</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:editingMode:get"><apiName>editingMode</apiName><shortdesc> Editing mode of this TextContainerManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc> Editing mode of this TextContainerManager. Modes are reading only, reading and selection permitted, 
		 and editing (reading, selection, and writing)  permitted. Use the constant values of the EditingMode
		 class to set this property. 
		 <p>Default value is READ_WRITE.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.edit.xml#EditingMode"><linktext>EditingMode</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:horizontalScrollPolicy:get"><apiName>horizontalScrollPolicy</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#horizontalScrollPolicy"> 
		 Controls whether the factory generates all text lines or stops when the container bounds are filled.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="flashx.textLayout.container.ContainerController#horizontalScrollPolicy"> 
		 Controls whether the factory generates all text lines or stops when the container bounds are filled.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:horizontalScrollPosition:get"><apiName>horizontalScrollPosition</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#horizontalScrollPosition"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flashx.textLayout.container.ContainerController#horizontalScrollPosition"> 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:hostFormat:get"><apiName>hostFormat</apiName><shortdesc> Sets the format when display just a string.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> Sets the format when display just a string.  If displaying a TextFlow this has no immediate effect.  The supplied ITextLayoutFormat is not copied.  Modifying it without calling this setter has indeterminate effects. </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:numLines:get"><apiName>numLines</apiName><shortdesc conref="flashx.textLayout.compose.IFlowComposer#numLines"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="flashx.textLayout.compose.IFlowComposer#numLines"> </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:preserveSelectionOnSetText:get"><apiName>preserveSelectionOnSetText</apiName><shortdesc> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata><asCustoms><public>
		 It's <code>_preserveSelectionOnSetText</code> to decide whether or not TLF preserve selection state during setText().
		 
		 The default value is false, which means <code>setText()</code> does not preserve original selection state, 
		 <code>setText()</code> acts as what it was. If <code>_preserveSelectionOnSetText</code> is true, 
		 the original selection state is preserved during <code>setText()</code>.  
		 
		 </public></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc> </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:swfContext:get"><apiName>swfContext</apiName><shortdesc> 
		Optional ISWFContext instance used to make FTE calls as needed in the proper swf context.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.compose:ISWFContext</apiValueClassifier></apiValueDef><apiDesc> 
		Optional ISWFContext instance used to make FTE calls as needed in the proper swf context. 
		
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#ISWFContext"><linktext>flashx.textLayout.compose.ISWFContext</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:verticalScrollPolicy:get"><apiName>verticalScrollPolicy</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#verticalScrollPolicy"> 
		 Controls whether the factory generates all text lines or stops when the container bounds are filled.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="flashx.textLayout.container.ContainerController#verticalScrollPolicy"> 
		 Controls whether the factory generates all text lines or stops when the container bounds are filled.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:verticalScrollPosition:get"><apiName>verticalScrollPosition</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#verticalScrollPosition"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flashx.textLayout.container.ContainerController#verticalScrollPosition"> 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.container:ISandboxSupport"><apiName>ISandboxSupport</apiName><shortdesc> Interface to support TLF content in a sub-application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc> Interface to support TLF content in a sub-application. When an application is loaded in an untrusted context,
	 mouse events that occur outside of the untrusted application's bounds are not delivered. Clients can handle this
	 by implementing ISandboxSupport. 
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.container.xml#ContainerController"><linktext>flashx.textLayout.container.ContainerController</linktext></link><link href="flashx.textLayout.container.xml#TextContainerManager"><linktext>flashx.textLayout.container.TextContainerManager</linktext></link><link href="flashx.textLayout.edit.xml#SelectionManager"><linktext>flashx.textLayout.edit.SelectionManager</linktext></link><link href="" invalidHref="flash.system.SecurityDomain.xml"><linktext>flash.system.SecurityDomain</linktext></link></related-links><apiOperation id="flashx.textLayout.container:ISandboxSupport:flashx.textLayout.container:ISandboxSupport:beginMouseCapture"><apiName>beginMouseCapture</apiName><shortdesc> 
		 Called to request clients to begin the forwarding of mouseup and mousemove events from outside a security sandbox.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Called to request clients to begin the forwarding of mouseup and mousemove events from outside a security sandbox.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ISandboxSupport:flashx.textLayout.container:ISandboxSupport:endMouseCapture"><apiName>endMouseCapture</apiName><shortdesc> 
		 Called to inform clients that the the forwarding of mouseup and mousemove events from outside a security sandbox is no longer needed.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Called to inform clients that the the forwarding of mouseup and mousemove events from outside a security sandbox is no longer needed.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ISandboxSupport:flashx.textLayout.container:ISandboxSupport:mouseMoveSomewhere"><apiName>mouseMoveSomewhere</apiName><shortdesc> Client call to forward a mouseMove event from outside a security sandbox.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc> Client call to forward a mouseMove event from outside a security sandbox.  Coordinates of the mouse move are not needed.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ISandboxSupport:flashx.textLayout.container:ISandboxSupport:mouseUpSomewhere"><apiName>mouseUpSomewhere</apiName><shortdesc> Client call to forward a mouseUp event from outside a security sandbox.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc> Client call to forward a mouseUp event from outside a security sandbox.  Coordinates of the mouse up are not needed.
		 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="flashx.textLayout.container:ScrollPolicy"><apiName>ScrollPolicy</apiName><shortdesc>
	  The ScrollPolicy class is an enumeration class that defines values for setting the horizontalScrollPolicy and 
	  verticalScrollPolicy properties of the ContainerController class, which defines a text flow 
	  container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  The ScrollPolicy class is an enumeration class that defines values for setting the <codeph>horizontalScrollPolicy</codeph> and 
	  <codeph>verticalScrollPolicy</codeph> properties of the ContainerController class, which defines a text flow 
	  container. 
	 
	  </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.container.xml#ContainerController/horizontalScrollPolicy"><linktext>ContainerController.horizontalScrollPolicy</linktext></link><link href="flashx.textLayout.container.xml#ContainerController/verticalScrollPolicy"><linktext>ContainerController.verticalScrollPolicy</linktext></link></related-links><apiValue id="flashx.textLayout.container:ScrollPolicy:AUTO"><apiName>AUTO</apiName><shortdesc> 
		 Specifies that scrolling is to occur if the content exceeds the container's dimension.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>auto</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		 Specifies that scrolling is to occur if the content exceeds the container's dimension. The runtime calculates 
		 the number of lines that overflow the container and the user can navigate to them with cursor keys, by drag selecting,
		 or by rotating the mouse wheel. You can also cause scrolling to occur by setting the corresponding position value, 
		 either <codeph>ContainerController.horizontalScrollPosition</codeph> or <codeph>ContainerController.verticalScrollPosition</codeph>. Also, the runtime can automatically 
		 scroll the contents of the container during editing.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ScrollPolicy:OFF"><apiName>OFF</apiName><shortdesc> 
		 Causes the runtime to not display overflow lines, which means that the user cannot navigate to them.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>off</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		 Causes the runtime to not display overflow lines, which means that the user cannot navigate to them. 
		 In this case, setting the corresponding <codeph>ContainerController.horizontalScrollPosition</codeph> and 
		 <codeph>ContainerController.verticalScrollPosition</codeph> properties have no effect. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ScrollPolicy:ON"><apiName>ON</apiName><shortdesc> 
		 Specifies that scrolling is available to access content that exceeds the container's dimension.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>on</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		 Specifies that scrolling is available to access content that exceeds the container's dimension. The runtime calculates the 
		 number of lines that overflow the container and allows the user to scroll them into view with the cursor keys, by drag selecting, 
		 or by rotating the mouse wheel. You can also scroll by setting the corresponding position value, either 
		 <codeph>ContainerController.horizontalScrollPosition</codeph> or <codeph>ContainerController.verticalScrollPosition</codeph>. Also, the runtime can automatically scroll the contents 
		 of the container during editing.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage><apiPackage id="flashx.textLayout.conversion"><apiName>flashx.textLayout.conversion</apiName><apiDetail/><apiClassifier id="flashx.textLayout.conversion:IPlainTextExporter"><apiName>IPlainTextExporter</apiName><shortdesc> This interface should be implemented by converters that export plain text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.0"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.conversion:ITextExporter</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc> This interface should be implemented by converters that export plain text. Clients that have explicitly
	 created an exporter using TextConverter.getExporter may control the export process by calling into these methods on the 
	 exporter.
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.conversion:IPlainTextExporter:flashx.textLayout.conversion:IPlainTextExporter:paragraphSeparator:get"><apiName>paragraphSeparator</apiName><shortdesc> Specifies the character sequence used (in a text flow's plain-text equivalent) to separate paragraphs.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc> Specifies the character sequence used (in a text flow's plain-text equivalent) to separate paragraphs.
		 The paragraph separator is not added after the last paragraph. 
		 
		 <p>This property applies to the <codeph>PLAIN_TEXT_FORMAT</codeph> exporter.</p>
		 
		 <p>The default value is "\n".</p> 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.conversion:IPlainTextExporter:flashx.textLayout.conversion:IPlainTextExporter:stripDiscretionaryHyphens:get"><apiName>stripDiscretionaryHyphens</apiName><shortdesc> This property indicates whether discretionary hyphens in the text should be stripped during the export process.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc> This property indicates whether discretionary hyphens in the text should be stripped during the export process.
		 Discretionary hyphens, also known as "soft hyphens", indicate where to break a word in case the word must be
		 split between two lines. The Unicode character for discretionary hyphens is <codeph>\u00AD</codeph>.
		 <p>If this property is set to <codeph>true</codeph>, discretionary hyphens that are in the original text will not be in the exported text, 
		 even if they are part of the original text. If <codeph>false</codeph>, discretionary hyphens will be in the exported text.</p>
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.conversion:TextConverter"><apiName>TextConverter</apiName><shortdesc> 
	 This is the gateway class for handling import and export.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 This is the gateway class for handling import and export. It serves as a unified access point to the 
	 conversion functionality in the Text Layout Framework. It contains a registry for predefined as well
	 as user defined input and/or output converters, plus a set of conversion methods.
	 <p>
	 The format of the converted data is not predefined; user written converters are free to accept and return
	 any format of their choice. Common formats are strings, XML, and ByteArray instances. Converter authors 
	 should document which formats are supported.
	 </p>
	 </apiDesc><example conref="examples\TextConverter_example.as"/></apiClassifierDetail><apiOperation id="flashx.textLayout.conversion:TextConverter:addFormatAt"><apiName>addFormatAt</apiName><shortdesc>
		 Register a new format for import/export, at the specified location.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>   The import converter class to register or null
		 </apiDesc></apiParam><apiParam><apiItemName>format</apiItemName><apiType value="String"/><apiDesc>   The export converter class to register or null
		 </apiDesc></apiParam><apiParam><apiItemName>importerClass</apiItemName><apiType value="Class"/><apiDesc>        The format string tagging the converter classes
		 </apiDesc></apiParam><apiParam><apiItemName>exporterClass</apiItemName><apiType value="Class"/><apiData>null</apiData><apiDesc>The string used as the clipboard format when converting to/from the clipboard. Make this null if the format doesn't support clipboard access.
		 </apiDesc></apiParam><apiParam><apiItemName>clipboardFormat</apiItemName><apiType value="String"/><apiData>null</apiData></apiParam></apiOperationDef><apiDesc>
		 Register a new format for import/export, at the specified location.
		 Location can be significant for clients that have multiple 
		 choices for which format to use, such as when importing from the external clipboard. 
		 Lower numbers indicate higher priority; these converters will be tried first.
		 The new format may support importing and/or exporting.
		 If the format has already been added, then it will be present in multiple locations. The 
		 first one found will be used.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.conversion:TextConverter:addFormat"><apiName>addFormat</apiName><shortdesc>
		 Register a new format for import/export.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>format</apiItemName><apiType value="String"/><apiDesc>   The import converter class to register or null
		 </apiDesc></apiParam><apiParam><apiItemName>importerClass</apiItemName><apiType value="Class"/><apiDesc>   The export converter class to register or null
		 </apiDesc></apiParam><apiParam><apiItemName>exporterClass</apiItemName><apiType value="Class"/><apiDesc>        The format string tagging the converter classes. Formats can be any name, but must be unique. 
		 </apiDesc></apiParam><apiParam><apiItemName>clipboardFormat</apiItemName><apiType value="String"/><apiDesc>The string used as the clipboard format when converting to/from the clipboard. Make this null if the format doesn't support clipboard access.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Register a new format for import/export. The new format will be added at the end,
		 as the lowest priority. Location can be significant for clients that have multiple 
		 choices for which format to use, such as when importing from the external clipboard. 
		 The new format may support importing and/or exporting.
		 If the format has already been added, then it will be present in multiple locations. The 
		 first one found will be used.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.conversion:TextConverter:export"><apiName>export</apiName><shortdesc> 
		 Exports a TextFlow to a specified format.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Object	Exported form of the TextFlow, or null on errors
		 </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>source</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier><apiDesc>Source content
		 </apiDesc></apiParam><apiParam><apiItemName>format</apiItemName><apiType value="String"/><apiDesc>Output format
		 </apiDesc></apiParam><apiParam><apiItemName>conversionType</apiItemName><apiType value="String"/><apiDesc>Type of exported data
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Exports a TextFlow to a specified format. 
		 <p>Use one of the static constants supplied with this class, a MIME type,
		 or a user defined format for user defined exporters to specify 
		 the <codeph>format</codeph> parameter:
		 <ul>
		 <li>TextConverter.TEXT_FIELD_HTML_FORMAT</li>
		 <li>TextConverter.PLAIN_TEXT_FORMAT</li>
		 <li>TextConverter.TEXT_LAYOUT_FORMAT</li>
		 </ul>
		 </p>
		 <p>Specify the type of the exported data in the <codeph>conversionType</codeph> parameter 
		 with one of the static constants supplied by the ConversionType class, or a user defined
		 data type for user defined exporters:
		 <ul>
		 <li>ConversionType.STRING_TYPE</li>
		 <li>ConversionType.XML_TYPE</li>
		 </ul>
		 </p>
		 
		 Returns a representation of the TextFlow in the specified format, or null on errors.
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.conversion.xml#TextConverter/TEXT_FIELD_HTML_FORMAT"><linktext>TEXT_FIELD_HTML_FORMAT</linktext></link><link href="flashx.textLayout.conversion.xml#TextConverter/PLAIN_TEXT_FORMAT"><linktext>PLAIN_TEXT_FORMAT</linktext></link><link href="flashx.textLayout.conversion.xml#TextConverter/TEXT_LAYOUT_FORMAT"><linktext>TEXT_LAYOUT_FORMAT</linktext></link><link href="flashx.textLayout.conversion.xml#ConversionType"><linktext>flashx.textLayout.conversion.ConversionType</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.conversion:TextConverter:getExporter"><apiName>getExporter</apiName><shortdesc> 
		 Creates and returns an export converter, which you can then use to export from 
		 a TextFlow to a source string or XML object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>ITextExporter	Text exporter that can export in the specified format
		 </apiDesc><apiOperationClassifier>flashx.textLayout.conversion:ITextExporter</apiOperationClassifier></apiReturn><apiParam><apiItemName>format</apiItemName><apiType value="String"/><apiDesc>Target format for exported data
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Creates and returns an export converter, which you can then use to export from 
		 a TextFlow to a source string or XML object. Use this function if 
		 you have many separate exports to perform. It is equivalent to calling 
		 <codeph>flashx.textLayout.conversion.TextConverter.export()</codeph>.
		 <p>Use one of the static constants supplied with this class
		 to specify the <codeph>format</codeph> parameter:
		 <ul>
		 <li>TextConverter.TEXT_FIELD_HTML_FORMAT</li>
		 <li>TextConverter.PLAIN_TEXT_FORMAT</li>
		 <li>TextConverter.TEXT_LAYOUT_FORMAT</li>
		 </ul>
		 </p>
		 <p>If the format has been added multiple times, the first one found will be used.</p>
		 </apiDesc><example conref="examples\getExporter_example.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.conversion.xml#TextConverter/TEXT_FIELD_HTML_FORMAT"><linktext>TEXT_FIELD_HTML_FORMAT</linktext></link><link href="flashx.textLayout.conversion.xml#TextConverter/PLAIN_TEXT_FORMAT"><linktext>PLAIN_TEXT_FORMAT</linktext></link><link href="flashx.textLayout.conversion.xml#TextConverter/TEXT_LAYOUT_FORMAT"><linktext>TEXT_LAYOUT_FORMAT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.conversion:TextConverter:getFormatAt"><apiName>getFormatAt</apiName><shortdesc> Returns the format name for the index'th format.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="String"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc> Returns the format name for the index'th format.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.conversion:TextConverter:getFormatDescriptorAt"><apiName>getFormatDescriptorAt</apiName><shortdesc> Returns the FormatDescriptor for the index'th format.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiOperationClassifier>flashx.textLayout.conversion:FormatDescriptor</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc> Returns the FormatDescriptor for the index'th format. 
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.conversion:TextConverter:getImporter"><apiName>getImporter</apiName><shortdesc> 
		 Creates and returns an import converter, which you can then use to import from a 
		 source string, an XML object, or any user defined data formats to a TextFlow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>ITextImporter	Text importer that can import the source data
		 </apiDesc><apiOperationClassifier>flashx.textLayout.conversion:ITextImporter</apiOperationClassifier></apiReturn><apiParam><apiItemName>format</apiItemName><apiType value="String"/><apiDesc>Format of source content. Use constants from 
		 					flashx.textLayout.conversion.TextConverter.TEXT_LAYOUT_FORMAT, PLAIN_TEXT_FORMAT, TEXT_FIELD_HTML_FORMAT etc,
		 					a MIME type, or a user defined format.
		 </apiDesc></apiParam><apiParam><apiItemName>config</apiItemName><apiOperationClassifier>flashx.textLayout.elements:IConfiguration</apiOperationClassifier><apiData>null</apiData><apiDesc>   configuration to use during this import. null means take the current default.
		 					You can also set the configuration via the <codeph>ITextImporter.configuration</codeph>
		 					property.
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Creates and returns an import converter, which you can then use to import from a 
		 source string, an XML object, or any user defined data formats to a TextFlow. 
		 Use this method if you have many separate imports to perform, or if you want to 
		 handle errors during import. It is equivalent to calling 
		 <codeph>flashx.textLayout.conversion.TextConverter.importToFlow()</codeph>.
		 <p>Use one of the static constants supplied with this class
		 to specify the <codeph>format</codeph> parameter, a MIME type, or a user defined
		 data format.
		 <ul>
		 <li>TextConverter.TEXT_FIELD_HTML_FORMAT</li>
		 <li>TextConverter.PLAIN_TEXT_FORMAT</li>
		 <li>TextConverter.TEXT_LAYOUT_FORMAT</li>
		 </ul>
		 </p>
		 <p>If the format has been added multiple times, the first one found will be used.</p>
		 </apiDesc><example conref="examples\getImporter_example.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.conversion.xml#TextConverter/TEXT_FIELD_HTML_FORMAT"><linktext>TEXT_FIELD_HTML_FORMAT</linktext></link><link href="flashx.textLayout.conversion.xml#TextConverter/PLAIN_TEXT_FORMAT"><linktext>PLAIN_TEXT_FORMAT</linktext></link><link href="flashx.textLayout.conversion.xml#TextConverter/TEXT_LAYOUT_FORMAT"><linktext>TEXT_LAYOUT_FORMAT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.conversion:TextConverter:importToFlow"><apiName>importToFlow</apiName><shortdesc> 
		 Creates a TextFlow from source content in a specified format.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>TextFlow that was created from the source, or null on errors.
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier></apiReturn><apiParam><apiItemName>source</apiItemName><apiType value="Object"/><apiDesc>Source content
		 </apiDesc></apiParam><apiParam><apiItemName>format</apiItemName><apiType value="String"/><apiDesc>Format of source content
		 </apiDesc></apiParam><apiParam><apiItemName>config</apiItemName><apiOperationClassifier>flashx.textLayout.elements:IConfiguration</apiOperationClassifier><apiData>null</apiData><apiDesc>   IConfiguration to use when creating new TextFlows
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Creates a TextFlow from source content in a specified format.
		 <p>Use one of the static constants supplied with this class, a MIME type,
		 to specify the <codeph>format</codeph> parameter, or use a user defined
		 value for user-registered importers:
		 <ul>
		 <li>TextConverter.TEXT_FIELD_HTML_FORMAT</li>
		 <li>TextConverter.PLAIN_TEXT_FORMAT</li>
		 <li>TextConverter.TEXT_LAYOUT_FORMAT</li>
		 </ul>
		 </p>
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.conversion.xml#TextConverter/TEXT_FIELD_HTML_FORMAT"><linktext>TEXT_FIELD_HTML_FORMAT</linktext></link><link href="flashx.textLayout.conversion.xml#TextConverter/PLAIN_TEXT_FORMAT"><linktext>PLAIN_TEXT_FORMAT</linktext></link><link href="flashx.textLayout.conversion.xml#TextConverter/TEXT_LAYOUT_FORMAT"><linktext>TEXT_LAYOUT_FORMAT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.conversion:TextConverter:removeFormatAt"><apiName>removeFormatAt</apiName><shortdesc>
		 Remove the format at the index location.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>    The format to remove
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Remove the format at the index location. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.conversion:TextConverter:removeFormat"><apiName>removeFormat</apiName><shortdesc>
		 Remove the format.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>format</apiItemName><apiType value="String"/><apiDesc>    The converter format string to remove
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Remove the format. 
		 If a format was added multiple times, only the first one found is removed.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.conversion:TextConverter:PLAIN_TEXT_FORMAT"><apiName>PLAIN_TEXT_FORMAT</apiName><shortdesc> 
		 Plain text format.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>plainTextFormat</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		 Plain text format.
		 Use this for creating a TextFlow from a simple, unformatted String, 
		 or for creating a simple, unformatted String from a TextFlow.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.conversion:TextConverter:TEXT_FIELD_HTML_FORMAT"><apiName>TEXT_FIELD_HTML_FORMAT</apiName><shortdesc> 
		 HTML format.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>textFieldHTMLFormat</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		 HTML format.
		 Use this for importing from, or exporting to, a TextFlow using the HTML fomat.
		 The Text Layout Framework HTML supports a subset of the tags and attributes supported by
		 the TextField class in the <codeph>flash.text</codeph> package.
		 <p>The following table lists the HTML tags and attributes supported for the import
		 and export process (tags and attributes supported by TextField, but not supported by 
		 the Text Layout Framework are specifically described as not supported):</p>
		 
		 
		 <adobetable class="innertable">
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 <tgroup cols="2"><thead><row><entry>
		 Tag
		 </entry><entry>
		 Description
		 </entry></row></thead><tbody><row>
		 
		 <entry>
		 Anchor tag
		 </entry>
		 
		 <entry>
		 The <codeph>&lt;a&gt;</codeph> tag creates a hypertext link and supports the following attributes:
		 <ul>
		 
		 <li>
		 <codeph>target</codeph>: Specifies the name of the target window where you load the page. 
		 Options include <codeph>_self</codeph>, <codeph>_blank</codeph>, <codeph>_parent</codeph>, and 
		 <codeph>_top</codeph>. The <codeph>_self</codeph> option specifies the current frame in the current window, 
		 <codeph>_blank</codeph> specifies a new window, <codeph>_parent</codeph> specifies the parent of the 
		 current frame, and <codeph>_top</codeph> specifies the top-level frame in the current window. 
		 </li>
		 
		 <li>
		 <codeph>href</codeph>: Specifies a URL. The URL can 
		 be either absolute or relative to the location of the SWF file that 
		 is loading the page. An example of an absolute reference to a URL is 
		 <codeph>http://www.adobe.com</codeph>; an example of a relative reference is 
		 <codeph>/index.html</codeph>. Absolute URLs must be prefixed with 
		 http://; otherwise, Flash treats them as relative URLs. 
		 <b>Note: Unlike the TextField class, </b>ActionScript <codeph>link</codeph> events 
		 are not supported. Neither are
		 <codeph>a:link</codeph>, <codeph>a:hover</codeph>, and <codeph>a:active</codeph> styles.
		 </li>
		 
		 </ul>
		 
		 </entry>
		 </row><row>
		 
		 <entry>
		 Bold tag
		 </entry>
		 
		 <entry>
		 The <codeph>&lt;b&gt;</codeph> tag renders text as bold. A bold typeface must be available for the font used.
		 </entry>
		 </row><row>
		 
		 <entry>
		 Break tag
		 </entry>
		 <entry>
		 The <codeph>&lt;br&gt;</codeph> tag creates a line break in the text.
		 </entry>
		 </row><row>
		 
		 <entry>
		 Font tag
		 </entry>
		 
		 <entry>
		 The <codeph>&lt;font&gt;</codeph> tag specifies a font or list of fonts to display the text.The font tag 
		 supports the following attributes:
		 <ul>
		 
		 <li>
		 <codeph>color</codeph>: Only hexadecimal color (<codeph>#FFFFFF</codeph>) values are supported. 
		 </li>
		 
		 <li>
		 <codeph>face</codeph>: Specifies the name of the font to use. As shown in the following example, 
		 you can specify a list of comma-delimited font names, in which case Flash Player selects the first available 
		 font. If the specified font is not installed on the local computer system or isn't embedded in the SWF file, 
		 Flash Player selects a substitute font. 
		 </li>
		 
		 <li>
		 <codeph>size</codeph>: Specifies the size of the font. You can use absolute pixel sizes, such as 16 or 18 
		 or relative point sizes, such as +2 or -4. 
		 </li>
		 
		 <li>
		 <codeph>letterspacing</codeph>: Specifies the tracking (manual kerning) in pixels to be applied to the right of each character. 
		 </li>
		 
		 <li>
		 <codeph>kerning</codeph>: Specifies whether kerning is enabled or disabled. A non-zero value enables kerning, while zero disables it.  
		 </li>
		 
		 </ul>
		 
		 </entry>
		 </row><row>
		 
		 <entry>
		 Image tag
		 </entry>
		 
		 <entry>
		 The <codeph>&lt;img&gt;</codeph> tag lets you embed external image files (JPEG, GIF, PNG), SWF files, and 
		 movie clips inside text.  
		 
		  <p>The <codeph>&lt;img&gt;</codeph> tag supports the following attributes: </p>
		 
		 <ul>
		 
		 <li>
		 <codeph>src</codeph>: Specifies the URL to an image or SWF file, or the linkage identifier for a movie clip 
		 symbol in the library. This attribute is required; all other attributes are optional. External files (JPEG, GIF, PNG, 
		 and SWF files) do not show until they are downloaded completely. 
		 </li>
		 
		 <li>
		 <codeph>width</codeph>: The width of the image, SWF file, or movie clip being inserted, in pixels. 
		 </li>
		 
		 <li>
		 <codeph>height</codeph>: The height of the image, SWF file, or movie clip being inserted, in pixels. 
		 </li>
		 </ul>
		 <p><b>Note: </b> Unlike the TextField class, the following attributes are not supported:
		 <codeph>align</codeph>, <codeph>hspace</codeph>, <codeph>vspace</codeph>,  <codeph>id</codeph>, and <codeph>checkPolicyFile</codeph>.</p>
		 
		 </entry>
		 </row><row>
		 
		 <entry>
		 Italic tag
		 </entry>
		 
		 <entry>
		 The <codeph>&lt;i&gt;</codeph> tag displays the tagged text in italics. An italic typeface must be available 
		 for the font used.
		 </entry>
		 </row><row>
		 
		 <entry>
		 <i>List item tag</i>
		 </entry>
		 
		 <entry>
		 <b>Note: </b> Unlike the TextField class, the List item tag is not supported.
		 </entry>
		 </row><row>
		 
		 <entry>
		 Paragraph tag
		 </entry>
		 
		 <entry>
		 The <codeph>&lt;p&gt;</codeph> tag creates a new paragraph. 
		 
		 The <codeph>&lt;p&gt;</codeph> tag supports the following attributes:
		 <ul>
		 
		 <li>
		 align: Specifies alignment of text within the paragraph; valid values are <codeph>left</codeph>, <codeph>right</codeph>, <codeph>justify</codeph>, and <codeph>center</codeph>. 
		 </li>
		 
		 <li>
		 class: Specifies a class name that can be used for styling 
		 </li>
		 
		 </ul>
		 
		 </entry>
		 </row><row>
		 
		 <entry>
		 Span tag
		 </entry>
		 
		 <entry>
		 
		 The <codeph>&lt;span&gt;</codeph> tag supports the following attributes:
		 
		 <ul>
		 
		 <li>
		 class: Specifies a class name that can be used for styling. While span tags are often used to set a style defined in a style sheet,
		 TLFTextField instances do not support style sheets. The span tag is available for TLFTextField instances to refer to a class with 
		 style properties.</li>
		 <li> You can also put properties directly in the span tag: 
		 <codeph>&lt;span fontFamily="Arial"&gt;Hi there&lt;/span&gt;</codeph>. However, nested span tags are not supported.
		 </li>
		 
		 </ul>
		 
		 </entry>
		 </row><row>
		 
		 <entry>
		 Text format tag
		 </entry>
		 
		 <entry>
		  <p>The <codeph>&lt;textformat&gt;</codeph> tag lets you use a subset of paragraph formatting 
		 properties of the TextFormat class within text fields, including line leading, indentation, 
		 margins, and tab stops. You can combine <codeph>&lt;textformat&gt;</codeph> tags with the 
		 built-in HTML tags. </p>
		 
		  <p>The <codeph>&lt;textformat&gt;</codeph> tag has the following attributes: </p>
		 <ul>
		 
		 
		 <li>
		 <codeph>indent</codeph>: Specifies the indentation from the left margin to the first character 
		 in the paragraph; corresponds to <codeph>TextFormat.indent</codeph>. Both positive and negative 
		 numbers are acceptable. 
		 </li>
		 
		 <li>
		 <codeph>blockindent</codeph>: Specifies the indentation applied to all lines of the paragraph.
		 </li>
		 
		 <li>
		 <codeph>leftmargin</codeph>: Specifies the left margin of the paragraph, in points; corresponds 
		 to <codeph>TextFormat.leftMargin</codeph>. 
		 </li>
		 
		 <li>
		 <codeph>rightmargin</codeph>: Specifies the right margin of the paragraph, in points; corresponds 
		 to <codeph>TextFormat.rightMargin</codeph>. 
		 </li>
		 
		 	<li>
		 <codeph>leading</codeph>: Specifies the leading (line height) measured in pixels between a line's ascent and the previous line's descent
		 </li>
		 
		 	<li>
		 <codeph>tabstops</codeph>: Specifies a comma-separated list of tab stop positions for the paragraph. 
		 </li>
		 </ul>
		 
		 </entry>
		 </row><row>
		 
		 <entry>
		 Underline tag
		 </entry>
		 
		 <entry>
		 The <codeph>&lt;u&gt;</codeph> tag underlines the tagged text.
		 </entry>
		 </row></tbody></tgroup></adobetable>
		 
		 <p>When an unknown tag is imported the <codeph>textFieldHTMLFormat</codeph> importer will either set a single FlowElement's typeName property to that tag name
		 or create a DivElement or a SubParagraphGroupElement with its typeName property set to the tag name.</p>
		 <p>The <codeph>textFieldHTMLFormat</codeph> exporter will export <codeph>typeName</codeph> as the XML tag when it is different from the default.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/typeName"><linktext>flashx.textLayout.elements.FlowElement.typeName</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.conversion:TextConverter:TEXT_LAYOUT_FORMAT"><apiName>TEXT_LAYOUT_FORMAT</apiName><shortdesc> 
		 TextLayout Format.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>textLayoutFormat</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		 TextLayout Format.
		 Use this for importing from, or exporting to, a TextFlow using the TextLayout markup format.
		 Text Layout format will detect the following errors:
		 <ul>
		 <li>Unexpected namespace</li>
		 <li>Unknown element</li>
		 <li>Unknown attribute</li>
		 </ul>
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.conversion:TextConverter:numFormats:get"><apiName>numFormats</apiName><shortdesc> Number of formats.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> Number of formats.
		</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.conversion:ITextLayoutImporter"><apiName>ITextLayoutImporter</apiName><shortdesc> This interface should be implemented by converters that import TextLayout structured data.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.0"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.conversion:ITextImporter</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc> This interface should be implemented by converters that import TextLayout structured data. Clients that have explicitly
	 created an importer using TextConverter.getImporter may control the import process by calling into these methods on the 
	 importer.
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.conversion:ITextLayoutImporter:flashx.textLayout.conversion:ITextLayoutImporter:imageSourceResolveFunction:get"><apiName>imageSourceResolveFunction</apiName><shortdesc> This property allows specification of a function to modify the source property supplied to an &amp;lt;img&amp;gt; element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.0"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc> This property allows specification of a function to modify the source property supplied to an <codeph>&lt;img&gt;</codeph> element. 
		 Sample use would be to modify relative paths to some caller specified root path.  The function takes the string set in the markup and returns the actual string
		 to be used.  
		 
		 <p>Note that by default relative paths are relative to the loaded SWF.  One use of this function is to make relative paths relative to some other location.</p>
		 
		 <p>The resolver function should look like this:</p>
		 <codeph>function resolver(src:String):String</codeph>
		 <p>It takes as an input parameter the value of src on the incoming img element, and returns the adjusted value.</p>
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.conversion:ITextImporter"><apiName>ITextImporter</apiName><shortdesc> 
     Interface for importing text content into a TextFlow from an external source.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc> 
     Interface for importing text content into a TextFlow from an external source. 
     The TextConverter class creates importers with no constructor arguments.
     
     </apiDesc><example conref="examples\ITextImporterExample.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>flashx.textLayout.elements.TextFlow</linktext></link></related-links><apiOperation id="flashx.textLayout.conversion:ITextImporter:flashx.textLayout.conversion:ITextImporter:importToFlow"><apiName>importToFlow</apiName><shortdesc> 
         Import text content from an external source and convert it into a TextFlow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>TextFlow Created from the source.
         
         </apiDesc><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier></apiReturn><apiParam><apiItemName>source</apiItemName><apiType value="Object"/><apiDesc>       The data to convert.
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Import text content from an external source and convert it into a TextFlow.
         </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.conversion:ITextImporter:flashx.textLayout.conversion:ITextImporter:configuration:get"><apiName>configuration</apiName><shortdesc>
         The configuration property contains the IConfiguration instance that
         the importer needs when creating new TextFlow instances.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.elements:IConfiguration</apiValueClassifier></apiValueDef><apiDesc>
         The <codeph>configuration</codeph> property contains the IConfiguration instance that
         the importer needs when creating new TextFlow instances. This property
         is initially set to <codeph>null</codeph>.
         
         </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>flashx.textLayout.elements.TextFlow</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.conversion:ITextImporter:flashx.textLayout.conversion:ITextImporter:errors:get"><apiName>errors</apiName><shortdesc> 
         This property contains a vector of error messages as strings after a call
         to an importer method is the throwOnError property is set to
         false, which is the default.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Vector$String"/></apiValueDef><apiDesc> 
         This property contains a vector of error messages as strings after a call
         to an importer method is the <codeph>throwOnError</codeph> property is set to
         <codeph>false</codeph>, which is the default. If there were no errors, the
         property returns <codeph>null</codeph>. The property is reset on each method
         call.
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.conversion:ITextImporter:flashx.textLayout.conversion:ITextImporter:throwOnError:get"><apiName>throwOnError</apiName><shortdesc> 
         The throwOnError property controls how the importer handles errors.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc> 
         The <codeph>throwOnError</codeph> property controls how the importer handles errors.
         If set to <codeph>true</codeph>, methods throw an Error instance on errors. 
         If set to <codeph>false</codeph>, which is the default, errors are collected
         into a vector of strings and stored in the <codeph>errors</codeph> property, 
         and the importer does not throw. 
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.conversion:ITextImporter:flashx.textLayout.conversion:ITextImporter:useClipboardAnnotations:get"><apiName>useClipboardAnnotations</apiName><shortdesc> 
         Controls whether or not the 
         importer should handle the extra information necessary for the clipboard.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc> 
         Controls whether or not the 
         importer should handle the extra information necessary for the clipboard. 
         When data comes in from the clipboard, it might contain partial paragraphs; 
         paragraphs that are missing the terminator or newline character. If <codeph>useClipboardAnnotations</codeph> 
         is <codeph>true</codeph>, the importer marks these partial paragraphs with a 
         <codeph>ConverterBase.MERGE_TO_NEXT_ON_PASTE</codeph> attribute. This causes the paste
         operation to correctly handle merging of the pasted paragraph (and any list or div elements
         that may include the paragraph) into the text.
          
         </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flashx.textLayout.conversion.ConverterBase.MERGE_TO_NEXT_ON_PASTE.xml"><linktext>flashx.textLayout.conversion.ConverterBase.MERGE_TO_NEXT_ON_PASTE</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.conversion:PlainTextExporter"><apiName>PlainTextExporter</apiName><shortdesc> 
	 Export converter for plain text format.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.conversion:IPlainTextExporter</apiBaseInterface><apiBaseClassifier>flashx.textLayout.conversion:ConverterBase</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 Export converter for plain text format. This class provides an alternative to
	 the <codeph>TextConverter.export()</codeph> static method for exporting plain text.
	  The PlainTextExporter class's <codeph>export()</codeph> method results in the 
	 same output string as the <codeph>TextConverter.export()</codeph> static method 
	 if the two properties of the PlainTextExporter class, the <codeph>PARAGRAPH_SEPARATOR_PROPERTY</codeph>
	 and the <codeph>STRIP_DISCRETIONARY_HYPHENS_PROPERTY</codeph> properties, contain their
	 default values of <codeph>"\n"</codeph> and <codeph>true</codeph>, respectively.
	 </apiDesc><example conref="examples\PlainTextExporter_example.as"/></apiClassifierDetail><apiConstructor id="flashx.textLayout.conversion:PlainTextExporter:PlainTextExporter"><apiName>PlainTextExporter</apiName><shortdesc>
		 Constructor 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
		 Constructor 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flashx.textLayout.conversion:PlainTextExporter:export"><apiName>export</apiName><shortdesc conref="ITextExporter#export()"> </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Object"/><apiDesc>Object	The exported content
		 </apiDesc></apiReturn><apiParam><apiItemName>source</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier><apiDesc>The TextFlow to export
		 </apiDesc></apiParam><apiParam><apiItemName>conversionType</apiItemName><apiType value="String"/><apiDesc>	Return a String (STRING_TYPE) or XML (XML_TYPE), or any user defined format.
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="ITextExporter#export()"> </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.conversion:PlainTextExporter:paragraphSeparator:get"><apiName>paragraphSeparator</apiName><shortdesc conref="IPlainTextExporter#paragraphSeparator"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="IPlainTextExporter#paragraphSeparator"> </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.conversion:PlainTextExporter:stripDiscretionaryHyphens:get"><apiName>stripDiscretionaryHyphens</apiName><shortdesc conref="IPlainTextExporter#stripDiscretionaryHyphens"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0-"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="IPlainTextExporter#stripDiscretionaryHyphens"> </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.conversion:IHTMLImporter"><apiName>IHTMLImporter</apiName><shortdesc> This interface should be implemented by converters that import HTML or HTML-structured data.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.0"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.conversion:ITextImporter</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc> This interface should be implemented by converters that import HTML or HTML-structured data. Clients that have explicitly
	 created an importer using TextConverter.getImporter may control the import process by calling into these methods on the 
	 importer.
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.conversion:IHTMLImporter:flashx.textLayout.conversion:IHTMLImporter:imageSourceResolveFunction:get"><apiName>imageSourceResolveFunction</apiName><shortdesc> This property allows specification of a function to modify the source property supplied to an &amp;lt;img&amp;gt; element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.0"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc> This property allows specification of a function to modify the source property supplied to an <codeph>&lt;img&gt;</codeph> element. 
		 Sample use would be to modify relative paths to some caller specified root path.  The function takes the string set in the markup and returns the actual string
		 to be used.  
		 
		 <p>Note that by default relative paths are relative to the loaded SWF.  One use of this function is to make relative paths relative to some other location.</p>
		 
		 <p>The resolver function should look like this:</p>
		 <codeph>function resolver(src:String):String</codeph>
		 <p>It takes as an input parameter the value of src on the incoming img element, and returns the adjusted value.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.conversion:IHTMLImporter:flashx.textLayout.conversion:IHTMLImporter:preserveBodyElement:get"><apiName>preserveBodyElement</apiName><shortdesc> This property tells the importer to create an element for the BODY tag in HTML markup.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.0"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc> This property tells the importer to create an element for the <codeph>BODY</codeph> tag in HTML markup.
		 
		 <p>The element will normally be a <codeph>DivElement</codeph> with <codeph>typeName</codeph> set to <codeph>BODY</codeph>.</p>
		 <p>This will also trigger parsing of <codeph>class</codeph> and <codeph>id</codeph> on the element.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.conversion:IHTMLImporter:flashx.textLayout.conversion:IHTMLImporter:preserveHTMLElement:get"><apiName>preserveHTMLElement</apiName><shortdesc> This property tells the importer to create an element for the HTML tag in HTML markup.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.0"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc> This property tells the importer to create an element for the <codeph>HTML</codeph> tag in HTML markup.
		 
		 <p>The element will normally be the top-level <codeph>TextFlow</codeph> element with <codeph>typeName</codeph> set to <codeph>HTML</codeph>.</p>
		 <p>This will also trigger parsing of <codeph>class</codeph> and <codeph>id</codeph> on the element.</p>
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.conversion:ConversionType"><apiName>ConversionType</apiName><shortdesc>
	 Values for the format of exported text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Values for the format of exported text.
	 The values <codeph>STRING_TYPE</codeph> and <codeph>XML_TYPE</codeph> 
	 can be used for the <codeph>conversionType</codeph> parameter for 
	 the export() method in the ITextExporter interface and the
	 TextConverter class.
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.conversion.xml#ITextExporter/export()"><linktext>flashx.textLayout.conversion.ITextExporter.export()</linktext></link><link href="flashx.textLayout.conversion.xml#TextConverter/export()"><linktext>flashx.textLayout.conversion.TextConverter.export()</linktext></link></related-links><apiValue id="flashx.textLayout.conversion:ConversionType:STRING_TYPE"><apiName>STRING_TYPE</apiName><shortdesc> 
		 Export as type String.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>stringType</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		 Export as type String. 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.conversion:ConversionType:XML_TYPE"><apiName>XML_TYPE</apiName><shortdesc> 
		 Export as type XML.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>xmlType</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		 Export as type XML.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.conversion:ITextExporter"><apiName>ITextExporter</apiName><shortdesc> 
	 Interface for exporting text content from a TextFlow instance to a given format, 
	 which may for example be String or XML format, or a user-defined format.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc> 
	 Interface for exporting text content from a TextFlow instance to a given format, 
	 which may for example be String or XML format, or a user-defined format. Exporters support the getting
	 and setting of properties to control the export of data. These properties are implemented
	 as public properties, but the direct access of these properties should be avoided, since
	 a user might replace the converter class in the TextConverter registry, causing a downcast
	 to fail.
	 </apiDesc></apiClassifierDetail><apiOperation id="flashx.textLayout.conversion:ITextExporter:flashx.textLayout.conversion:ITextExporter:export"><apiName>export</apiName><shortdesc> 
		 Export text content from a TextFlow instance in String, or XML, or a user defined format.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Object	The exported content
		 </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>source</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier><apiDesc>The TextFlow to export
		 </apiDesc></apiParam><apiParam><apiItemName>conversionType</apiItemName><apiType value="String"/><apiDesc>	Return a String (STRING_TYPE) or XML (XML_TYPE), or any user defined format.
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Export text content from a TextFlow instance in String, or XML, or a user defined format.
		 <p>Set the <codeph>conversionType</codeph> parameter to either of the following values,
		 or a user defined format in user-defined exporters.
		 <ul>
		   <li><codeph>flashx.textLayout.conversion.ConversionType.STRING_TYPE</codeph>;</li>
		   <li><codeph>flashx.textLayout.conversion.ConversionType.XML_TYPE</codeph>.</li>
		 </ul>
		 </p>
		 </apiDesc><example conref="examples\ITextExporterExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.conversion.xml#ConversionType"><linktext>flashx.textLayout.conversion.ConversionType</linktext></link></related-links></apiOperation><apiValue id="flashx.textLayout.conversion:ITextExporter:flashx.textLayout.conversion:ITextExporter:errors:get"><apiName>errors</apiName><shortdesc> 
		 This property contains a vector of error messages as strings after a call
		 to an exporter method is the throwOnError property is set to
		 false, which is the default.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Vector$String"/></apiValueDef><apiDesc> 
		 This property contains a vector of error messages as strings after a call
		 to an exporter method is the <codeph>throwOnError</codeph> property is set to
		 <codeph>false</codeph>, which is the default. If there were no errors, the
		 property returns <codeph>null</codeph>. The property is reset on each method
		 call.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.conversion:ITextExporter:flashx.textLayout.conversion:ITextExporter:throwOnError:get"><apiName>throwOnError</apiName><shortdesc> 
		 The throwOnError property controls how the exporter handles errors.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc> 
		 The throwOnError property controls how the exporter handles errors.
		 If set to <codeph>true</codeph>, methods throw an Error instance on errors. 
		 If set to <codeph>false</codeph>, which is the default, errors are collected
		 into a vector of strings and stored in the <codeph>errors</codeph> property, 
		 and the exporter does not throw.	
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.conversion:ITextExporter:flashx.textLayout.conversion:ITextExporter:useClipboardAnnotations:get"><apiName>useClipboardAnnotations</apiName><shortdesc> 
		 The useClipboardAnnotations property controls whether or not the 
		 importer should handle the extra information necessary for the clipboard.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc> 
		 The <codeph>useClipboardAnnotations</codeph> property controls whether or not the 
		 importer should handle the extra information necessary for the clipboard. 
		 When data is in a TextFlow, paragraphs are always complete, and include a 
		 terminator character. When a range of text is pasted to the clipboard, it
		 will form paragraphs, but the range may not include in the final terminator.
		 In this case, the paragraph needs to be marked as a partial paragraph if it
		 is intended for the clipboard, so that if it is later pasted it will merge
		 into the new text correctly. If the content is intended for the clipboard, 
		 useClipboardAnnotations will be true.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.conversion:FormatDescriptor"><apiName>FormatDescriptor</apiName><shortdesc> Contains information about a format.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.0"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> Contains information about a format.
     
     </apiDesc></apiClassifierDetail><apiConstructor id="flashx.textLayout.conversion:FormatDescriptor:FormatDescriptor"><apiName>FormatDescriptor</apiName><shortdesc> Constructor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.0"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>format</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>importerClass</apiItemName><apiType value="Class"/></apiParam><apiParam><apiItemName>exporterClass</apiItemName><apiType value="Class"/></apiParam><apiParam><apiItemName>clipboardFormat</apiItemName><apiType value="String"/></apiParam></apiConstructorDef><apiDesc> Constructor.
         
         </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flashx.textLayout.conversion:FormatDescriptor:clipboardFormat:get"><apiName>clipboardFormat</apiName><shortdesc> Descriptor used when matching this format to the formats posted on the external clipboard.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.0"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc> Descriptor used when matching this format to the formats posted on the external clipboard. If the format supports importing, 
         (it's importerClass is not null), it will be called when pasting from the clipboard, if the clipboard contents include data 
         in this format. If the format supports exporting, it will be called when copying to the clipboard, and the output it creates 
         will be posted to the clipboard with this clipboardFormat.
         
         </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.desktop.Clipboard.xml"><linktext>flash.desktop.Clipboard</linktext></link><link href="" invalidHref="flash.desktop.ClipboardFormats.xml"><linktext>flash.desktop.ClipboardFormats</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.conversion:FormatDescriptor:exporterClass:get"><apiName>exporterClass</apiName><shortdesc> Returns the class used for converting to the format.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.0"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc> Returns the class used for converting to the format. 
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.conversion:FormatDescriptor:format:get"><apiName>format</apiName><shortdesc> Returns the data format used by the converter.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.0"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc> Returns the data format used by the converter.
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.conversion:FormatDescriptor:importerClass:get"><apiName>importerClass</apiName><shortdesc> Returns the class used for converting data from the format.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.0"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc> Returns the class used for converting data from the format. 
         
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.conversion:ConverterBase"><apiName>ConverterBase</apiName><shortdesc>
	 This is a base class for importers as well as exporters.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 This is a base class for importers as well as exporters. It implements the error handling
	 plus property getters and setters that generate an error when invoked.
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.conversion:ConverterBase:MERGE_TO_NEXT_ON_PASTE"><apiName>MERGE_TO_NEXT_ON_PASTE</apiName><shortdesc> A converter that converts clipboard data into a TextFlow should use the MERGE_TO_NEXT_ON_PASTE property
		 to control how the elements are treated when they are merged into an existing TextFlow on paste.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mergeToNextOnPaste</apiData><apiType value="String"/></apiValueDef><apiDesc> A converter that converts clipboard data into a TextFlow should use the MERGE_TO_NEXT_ON_PASTE property
		 to control how the elements are treated when they are merged into an existing TextFlow on paste. This is useful
		 if you want special handling for the case where only part of the element is copied. For instance, wheh a list
		 is copied, if only part of the list is copied, and you paste it into another list, it merges into the list as
		 additional items. If the entire list is copied, it appears as a nested list. When TLF creates a TextFlow for use
		 on the clipboard, it decorates any partial elements with user properties that control whether the end of the element 
		 should be merged with the one after it. This user property is never pasted into the final TextFlow, but it may go 
		 on the elements in the TextScrap.textFlow. When copying text, the converter has the option to look for these properties 
		 to propagate them into the format that is posted on the clipboard. For instance, the plain text exporter checks the 
		 "mergeToNextOnPaste" property on paragraphs and supresses the paragraph terminator if it is found set to true. 
		 Likewise on import if the incoming String has no terminator, and useClipboardAnnotations is true, then it calls 
		 <codeph>setStyle(MERGE_TO_NEXT_ON_PASTE, "true")</codeph> on the corresponding paragraph so that when it is pasted 
		 it will blend into the paragraph where its pasted. This property should only be set on elements in a TextScrap, and
		 only on the last element in the scrap.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.conversion:ConverterBase:errors:get"><apiName>errors</apiName><shortdesc> Errors encountered while parsing.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Vector$String"/></apiValueDef><apiDesc> Errors encountered while parsing. 
		 Value is a vector of Strings.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.conversion:ConverterBase:throwOnError:get"><apiName>throwOnError</apiName><shortdesc conref="ITextImporter#throwOnError()"> </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="ITextImporter#throwOnError()"> </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.conversion:ConverterBase:useClipboardAnnotations:get"><apiName>useClipboardAnnotations</apiName><shortdesc conref="ITextImporter#useClipboardAnnotations()"> </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="ITextImporter#useClipboardAnnotations()"> </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage><apiPackage id="flashx.textLayout.edit"><apiName>flashx.textLayout.edit</apiName><apiDetail/><apiClassifier id="flashx.textLayout.edit:SelectionManager"><apiName>SelectionManager</apiName><shortdesc> 
     The SelectionManager class manages text selection in a text flow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.edit:ISelectionManager</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> 
     The SelectionManager class manages text selection in a text flow.
     
     <p>The selection manager keeps track of the selected text range, manages its formatting, 
     and can handle events affecting the selection. To allow a user to make selections in
     a text flow, assign a SelectionManager object to the <codeph>interactionManager</codeph>
     property of the flow. (To allow editing, assign an instance of the EditManager class,
     which extends SelectionManager.)</p>
     
     <p>The following table describes how the SelectionManager class handles keyboard shortcuts:</p>
     
     <adobetable class="innertable">
     
     
     
     
     
     
     
     
     
     <tgroup cols="13"><thead><row><row><entry/><entry/><entry align="center">TB,LTR</entry><entry align="right"/><entry/><entry align="center">TB,RTL</entry><entry/><entry/><entry align="center">TL,LTR</entry><entry/><entry/><entry align="center">RL,RTL</entry><entry/></row><row><entry/><entry>none</entry><entry>ctrl</entry><entry>alt|ctrl+alt</entry><entry>none</entry><entry>ctrl</entry><entry>alt|ctrl+alt</entry><entry>none</entry><entry>ctrl</entry><entry>alt|ctrl+alt</entry><entry>none</entry><entry>ctrl</entry><entry>alt|ctrl+alt</entry></row></row></thead><tbody><row><entry>leftarrow</entry><entry>previousCharacter</entry><entry>previousWord</entry><entry>previousWord</entry><entry>nextCharacter</entry><entry>nextWord</entry><entry>nextWord</entry><entry>nextLine</entry><entry>endOfDocument</entry><entry>endOfParagraph</entry><entry>nextLine</entry><entry>endOfDocument</entry><entry>endOfParagraph</entry></row><row><entry>uparrow</entry><entry>previousLine</entry><entry>startOfDocument</entry><entry>startOfParagraph</entry><entry>previousLine</entry><entry>startOfDocument</entry><entry>startOfParagraph</entry><entry>previousCharacter</entry><entry>previousWord</entry><entry>previousWord</entry><entry>nextCharacter</entry><entry>nextWord</entry><entry>nextWord</entry></row><row><entry>rightarrow</entry><entry>nextCharacter</entry><entry>nextWord</entry><entry>nextWord</entry><entry>previousCharacter</entry><entry>previousWord</entry><entry>previousWord</entry><entry>previousLine</entry><entry>startOfDocument</entry><entry>startOfParagraph</entry><entry>previousLine</entry><entry>startOfDocument</entry><entry>startOfParagraph</entry></row><row><entry>downarrow</entry><entry>nextLine</entry><entry>endOfDocument</entry><entry>endOfParagraph</entry><entry>nextLine</entry><entry>endOfDocument</entry><entry>endOfParagraph</entry><entry>nextCharacter</entry><entry>nextWord</entry><entry>nextWord</entry><entry>previousCharacter</entry><entry>previousWord</entry><entry>previousWord</entry></row><row><entry>home</entry><entry>startOfLine</entry><entry>startOfDocument</entry><entry>startOfLine</entry><entry>startOfLine</entry><entry>startOfDocument</entry><entry>startOfLine</entry><entry>startOfLine</entry><entry>startOfDocument</entry><entry>startOfLine</entry><entry>startOfLine</entry><entry>startOfDocument</entry><entry>startOfLine</entry></row><row><entry>end</entry><entry>endOfLine</entry><entry>endOfDocument</entry><entry>endOfLine</entry><entry>endOfLine</entry><entry>endOfDocument</entry><entry>endOfLine</entry><entry>endOfLine</entry><entry>endOfDocument</entry><entry>endOfLine</entry><entry>endOfLine</entry><entry>endOfDocument</entry><entry>endOfLine</entry></row><row><entry>pagedown</entry><entry>nextPage</entry><entry>nextPage</entry><entry>nextPage</entry><entry>nextPage</entry><entry>nextPage</entry><entry>nextPage</entry><entry>nextPage</entry><entry>nextPage</entry><entry>nextPage</entry><entry>nextPage</entry><entry>nextPage</entry><entry>nextPage</entry></row><row><entry>pageup</entry><entry>previousPage</entry><entry>previousPage</entry><entry>previousPage</entry><entry>previousPage</entry><entry>previousPage</entry><entry>previousPage</entry><entry>previousPage</entry><entry>previousPage</entry><entry>previousPage</entry><entry>previousPage</entry><entry>previousPage</entry><entry>previousPage</entry></row></tbody></tgroup></adobetable>
     
     <p><b>Key:</b>
     <ul>
      <li>none = no modifier</li>
      <li>ctrl, shift, alt = modifiers</li>
      <li>alt-key and ctrl+alt-key are the same on all platforms (on some platforms alt-key does not get to the Text Layout Framework (TLF)</li>
      <li>shift key modifes to extend the active end of the selection in the specified manner</li>            
      <li>TB (top-to-bottom),RL (right-to-left) are textFlow level <codeph>blockProgression</codeph> settings</li>                        
      <li>LTR (left-to-right),RTL (right-to-left) are textFlow level <codeph>direction</codeph> settings</li>                 
      <li>next and prev in logical order in the textFlow - the effect in RTL text is that the selection moves in the physical direction</li>
     </ul></p>
     
     </apiDesc><example conref="examples\SelectionManager_example.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.edit.xml#EditManager"><linktext>EditManager</linktext></link><link href="" invalidHref="flashx.elements.TextFlow.xml"><linktext>flashx.elements.TextFlow</linktext></link></related-links><apiConstructor id="flashx.textLayout.edit:SelectionManager:SelectionManager"><apiName>SelectionManager</apiName><shortdesc> 
         
         Creates a SelectionManager object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> 
         
         Creates a SelectionManager object.
         
         <p>Assign a SelectionManager object to the <codeph>interactionManager</codeph> property of
         a text flow to enable text selection.</p>
         
         </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flashx.textLayout.edit:SelectionManager:activateHandler"><apiName>activateHandler</apiName><shortdesc conref="IInteractionEventHandler#activateHandler()"> 
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc conref="IInteractionEventHandler#activateHandler()"> 
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:deactivateHandler"><apiName>deactivateHandler</apiName><shortdesc conref="IInteractionEventHandler#deactivateHandler()"> 
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc conref="IInteractionEventHandler#deactivateHandler()"> 
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:doOperation"><apiName>doOperation</apiName><shortdesc> Perform a SelectionManager operation - these may never modify the flow but clients still are able to cancel them.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>op</apiItemName><apiOperationClassifier>flashx.textLayout.operations:FlowOperation</apiOperationClassifier></apiParam></apiOperationDef><apiDesc> Perform a SelectionManager operation - these may never modify the flow but clients still are able to cancel them. 
          
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:editHandler"><apiName>editHandler</apiName><shortdesc conref="IInteractionEventHandler#editHandler()"> 
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc conref="IInteractionEventHandler#editHandler()"> 
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:flushPendingOperations"><apiName>flushPendingOperations</apiName><shortdesc conref="IInteractionEventHandler#flushPendingOperations()">
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="IInteractionEventHandler#flushPendingOperations()">
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:focusChangeHandler"><apiName>focusChangeHandler</apiName><shortdesc conref="IInteractionEventHandler#focusChangeHandler()">
         </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/></apiParam></apiOperationDef><apiDesc conref="IInteractionEventHandler#focusChangeHandler()">
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:focusInHandler"><apiName>focusInHandler</apiName><shortdesc conref="IInteractionEventHandler#focusInHandler()"> 
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/></apiParam></apiOperationDef><apiDesc conref="IInteractionEventHandler#focusInHandler()"> 
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:focusOutHandler"><apiName>focusOutHandler</apiName><shortdesc conref="IInteractionEventHandler#focusOutHandler()"> 
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/></apiParam></apiOperationDef><apiDesc conref="IInteractionEventHandler#focusOutHandler()"> 
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:getCommonCharacterFormat"><apiName>getCommonCharacterFormat</apiName><shortdesc conref="ISelectionManager#getCommonCharacterFormat()">
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.formats:TextLayoutFormat</apiOperationClassifier><apiDesc>The common character style settings
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>range</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextRange</apiOperationClassifier><apiData>null</apiData><apiDesc>The optional range of text for which common attributes are requested. If null, the current selection is used. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="ISelectionManager#getCommonCharacterFormat()">
         </apiDesc><example conref="examples\SelectionManager_getCommonCharacterFormat.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:getCommonContainerFormat"><apiName>getCommonContainerFormat</apiName><shortdesc conref="ISelectionManager#getCommonContainerFormat()">
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.formats:TextLayoutFormat</apiOperationClassifier><apiDesc>The common container style settings
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>range</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextRange</apiOperationClassifier><apiData>null</apiData><apiDesc>The optional range of text for which common attributes are requested. If null, the current selection is used. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="ISelectionManager#getCommonContainerFormat()">
         </apiDesc><example conref="examples\SelectionManager_getCommonContainerFormat.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:getCommonParagraphFormat"><apiName>getCommonParagraphFormat</apiName><shortdesc conref="ISelectionManager#getCommonParagraphFormat()">
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.formats:TextLayoutFormat</apiOperationClassifier><apiDesc>The common paragraph style settings
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>range</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextRange</apiOperationClassifier><apiData>null</apiData><apiDesc>The optional range of text for which common attributes are requested. If null, the current selection is used. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="ISelectionManager#getCommonParagraphFormat()">
         </apiDesc><example conref="examples\SelectionManager_getCommonParagraphFormat.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:getSelectionState"><apiName>getSelectionState</apiName><shortdesc conref="ISelectionManager#getSelectionState()">
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc conref="ISelectionManager#getSelectionState()">
         </apiDesc><example conref="examples\SelectionManager_getSelectionState.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.edit.xml#SelectionState"><linktext>flashx.textLayout.edit.SelectionState</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:hasSelection"><apiName>hasSelection</apiName><shortdesc conref="ISelectionManager#hasSelection()">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc conref="ISelectionManager#hasSelection()">
          </apiDesc><example conref="examples\SelectionManager_hasSelection.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:imeStartCompositionHandler"><apiName>imeStartCompositionHandler</apiName><shortdesc conref="IInteractionEventHandler#imeStartCompositionHandler()"> 
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:IMEEvent"/></apiParam></apiOperationDef><apiDesc conref="IInteractionEventHandler#imeStartCompositionHandler()"> 
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:isRangeSelection"><apiName>isRangeSelection</apiName><shortdesc conref="ISelectionManager#isRangeSelection()"> 
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc conref="ISelectionManager#isRangeSelection()"> 
          </apiDesc><example conref="examples\SelectionManager_isRangeSelection.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:keyDownHandler"><apiName>keyDownHandler</apiName><shortdesc conref="IInteractionEventHandler#keyDownHandler()"> 
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:KeyboardEvent"/></apiParam></apiOperationDef><apiDesc conref="IInteractionEventHandler#keyDownHandler()"> 
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:keyFocusChangeHandler"><apiName>keyFocusChangeHandler</apiName><shortdesc conref="IInteractionEventHandler#keyFocusChangeHandler()"> 
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/></apiParam></apiOperationDef><apiDesc conref="IInteractionEventHandler#keyFocusChangeHandler()"> 
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:keyUpHandler"><apiName>keyUpHandler</apiName><shortdesc conref="IInteractionEventHandler#keyUpHandler()"> 
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:KeyboardEvent"/></apiParam></apiOperationDef><apiDesc conref="IInteractionEventHandler#keyUpHandler()"> 
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:menuSelectHandler"><apiName>menuSelectHandler</apiName><shortdesc conref="IInteractionEventHandler#menuSelectHandler()">
         </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:ContextMenuEvent"/></apiParam></apiOperationDef><apiDesc conref="IInteractionEventHandler#menuSelectHandler()">
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:mouseDoubleClickHandler"><apiName>mouseDoubleClickHandler</apiName><shortdesc conref="IInteractionEventHandler#mouseDoubleClickHandler()"> 
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/></apiParam></apiOperationDef><apiDesc conref="IInteractionEventHandler#mouseDoubleClickHandler()"> 
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:mouseDownHandler"><apiName>mouseDownHandler</apiName><shortdesc conref="IInteractionEventHandler#mouseDownHandler()"> 
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/></apiParam></apiOperationDef><apiDesc conref="IInteractionEventHandler#mouseDownHandler()"> 
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:mouseMoveHandler"><apiName>mouseMoveHandler</apiName><shortdesc conref="IInteractionEventHandler#mouseMoveHandler()">
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/></apiParam></apiOperationDef><apiDesc conref="IInteractionEventHandler#mouseMoveHandler()">
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:mouseOutHandler"><apiName>mouseOutHandler</apiName><shortdesc conref="IInteractionEventHandler#mouseOutHandler()"> 
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/></apiParam></apiOperationDef><apiDesc conref="IInteractionEventHandler#mouseOutHandler()"> 
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:mouseOverHandler"><apiName>mouseOverHandler</apiName><shortdesc conref="IInteractionEventHandler#mouseOverHandler()"> 
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/></apiParam></apiOperationDef><apiDesc conref="IInteractionEventHandler#mouseOverHandler()"> 
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:mouseUpHandler"><apiName>mouseUpHandler</apiName><shortdesc conref="IInteractionEventHandler#mouseUpHandler()"> 
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/></apiParam></apiOperationDef><apiDesc conref="IInteractionEventHandler#mouseUpHandler()"> 
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:mouseWheelHandler"><apiName>mouseWheelHandler</apiName><shortdesc conref="IInteractionEventHandler#mouseWheelHandler()">
         </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/></apiParam></apiOperationDef><apiDesc conref="IInteractionEventHandler#mouseWheelHandler()">
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:notifyInsertOrDelete"><apiName>notifyInsertOrDelete</apiName><shortdesc conref="ISelectionManager#notifyInsertOrDelete()"> 
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>absolutePosition</apiItemName><apiType value="int"/><apiDesc>The point in the text where the change was made.
		 </apiDesc></apiParam><apiParam><apiItemName>length</apiItemName><apiType value="int"/><apiDesc>A positive or negative number indicating how many characters were inserted or deleted.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="ISelectionManager#notifyInsertOrDelete()"> 
         </apiDesc><example conref="examples\SelectionManager_notifyInsertOrDelete.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:refreshSelection"><apiName>refreshSelection</apiName><shortdesc conref="ISelectionManager#refreshSelection()"> 
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="ISelectionManager#refreshSelection()"> 
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:selectAll"><apiName>selectAll</apiName><shortdesc conref="ISelectionManager#selectAll"> 
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="ISelectionManager#selectAll"> 
          </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.compose.xml#IFlowComposer"><linktext>flashx.textLayout.compose.IFlowComposer</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:selectRange"><apiName>selectRange</apiName><shortdesc conref="ISelectionManager#selectRange"> 
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="ISelectionManager#selectRange"> 
          </apiDesc><example conref="examples\SelectionManager_selectRange.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.compose.xml#IFlowComposer"><linktext>flashx.textLayout.compose.IFlowComposer</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:setFocus"><apiName>setFocus</apiName><shortdesc conref="ISelectionManager#setFocus()"> 
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="ISelectionManager#setFocus()"> 
          </apiDesc><example conref="examples\SelectionManager_setFocus.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:protected:setMouseCursor"><apiName>setMouseCursor</apiName><shortdesc> 
         Set the Mouse cursor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cursor</apiItemName><apiType value="String"/><apiDesc>   New cursor value, MouseCursor.AUTO if mouse is going off text, MouseCursor.IBEAM if mouse is going into text
         
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Set the Mouse cursor. 
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:setSelectionState"><apiName>setSelectionState</apiName><shortdesc conref="ISelectionManager#setSelectionState()">
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>sel</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier></apiParam></apiOperationDef><apiDesc conref="ISelectionManager#setSelectionState()">
         </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.edit.xml#SelectionState"><linktext>flashx.textLayout.edit.SelectionState</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:softKeyboardActivatingHandler"><apiName>softKeyboardActivatingHandler</apiName><shortdesc conref="IInteractionEventHandler#softKeyboardActivatingHandler()"> 
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc conref="IInteractionEventHandler#softKeyboardActivatingHandler()"> 
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:textInputHandler"><apiName>textInputHandler</apiName><shortdesc conref="IInteractionEventHandler#textInputHandler()"> 
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:TextEvent"/></apiParam></apiOperationDef><apiDesc conref="IInteractionEventHandler#textInputHandler()"> 
         </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.edit:SelectionManager:absoluteEnd:get"><apiName>absoluteEnd</apiName><shortdesc conref="ISelectionManager#absoluteEnd">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="ISelectionManager#absoluteEnd">
          </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:SelectionManager:absoluteStart:get"><apiName>absoluteStart</apiName><shortdesc conref="ISelectionManager#absoluteStart">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="ISelectionManager#absoluteStart">
          </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:SelectionManager:activePosition:get"><apiName>activePosition</apiName><shortdesc conref="ISelectionManager#activePosition">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="ISelectionManager#activePosition">
          </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:SelectionManager:anchorPosition:get"><apiName>anchorPosition</apiName><shortdesc conref="ISelectionManager#anchorPosition">
          </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="ISelectionManager#anchorPosition">
          </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:SelectionManager:currentSelectionFormat:get"><apiName>currentSelectionFormat</apiName><shortdesc conref="ISelectionManager#currentSelectionFormat">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.edit:SelectionFormat</apiValueClassifier></apiValueDef><apiDesc conref="ISelectionManager#currentSelectionFormat">
          </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.edit.xml#SelectionFormat"><linktext>flashx.textLayout.edit.SelectionFormat</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.edit:SelectionManager:editingMode:get"><apiName>editingMode</apiName><shortdesc conref="ISelectionManager#editingMode">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc conref="ISelectionManager#editingMode">
          </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.edit.xml#EditingMode"><linktext>flashx.textLayout.edit.EditingMode</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.edit:SelectionManager:focused:get"><apiName>focused</apiName><shortdesc conref="ISelectionManager#focused"> 
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="ISelectionManager#focused"> 
          </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:SelectionManager:protected:pointFormat:get"><apiName>pointFormat</apiName><shortdesc> 
         The format that will be applied to inserted text.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
         The format that will be applied to inserted text. 
         
         TBD: pointFormat needs to be extended to remember user styles and "undefine" of formats from calls to IEditManager.undefineFormat with leafFormat values on a point selection.
         </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:SelectionManager:textFlow:get"><apiName>textFlow</apiName><shortdesc>
         The TextFlow object managed by this selection manager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.elements:TextFlow</apiValueClassifier></apiValueDef><apiDesc>
         The TextFlow object managed by this selection manager. 
         
         <p>A selection manager manages a single text flow. A selection manager can also be
         assigned to a text flow by setting the <codeph>interactionManager</codeph> property of the
         TextFlow object.</p>
         
         </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow/interactionManager"><linktext>flashx.textLayout.elements.TextFlow.interactionManager</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.edit:SelectionManager:windowActive:get"><apiName>windowActive</apiName><shortdesc conref="ISelectionManager#windowActive"> 
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="ISelectionManager#windowActive"> 
          </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:SelectionManager:focusedSelectionFormat:set"><apiName>focusedSelectionFormat</apiName><shortdesc conref="ISelectionManager#focusedSelectionFormat">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.edit:SelectionFormat</apiValueClassifier></apiValueDef><apiDesc conref="ISelectionManager#focusedSelectionFormat">
          </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.edit.xml#SelectionFormat"><linktext>flashx.textLayout.edit.SelectionFormat</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.edit:SelectionManager:inactiveSelectionFormat:set"><apiName>inactiveSelectionFormat</apiName><shortdesc conref="ISelectionManager#inactiveSelectionFormat">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.edit:SelectionFormat</apiValueClassifier></apiValueDef><apiDesc conref="ISelectionManager#inactiveSelectionFormat">
          </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.edit.xml#SelectionFormat"><linktext>flashx.textLayout.edit.SelectionFormat</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.edit:SelectionManager:unfocusedSelectionFormat:set"><apiName>unfocusedSelectionFormat</apiName><shortdesc conref="ISelectionManager#unfocusedSelectionFormat">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.edit:SelectionFormat</apiValueClassifier></apiValueDef><apiDesc conref="ISelectionManager#unfocusedSelectionFormat">
          </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.edit.xml#SelectionFormat"><linktext>flashx.textLayout.edit.SelectionFormat</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.edit:TextScrap"><apiName>TextScrap</apiName><shortdesc>
	 The TextScrap class represents a fragment of a text flow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The TextScrap class represents a fragment of a text flow.
	 
	 <p>A TextScrap is a holding place for all or part of a TextFlow. A range of text can be copied 
	 from a TextFlow into a TextScrap, and pasted from the TextScrap into another TextFlow.</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>flashx.textLayout.elements.TextFlow</linktext></link><link href="flashx.textLayout.edit.xml#SelectionManager"><linktext>flashx.textLayout.edit.SelectionManager</linktext></link></related-links><apiConstructor id="flashx.textLayout.edit:TextScrap:TextScrap"><apiName>TextScrap</apiName><shortdesc>
		 Creates a TextScrap object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>textFlow</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier><apiData>null</apiData><apiDesc>if set, the new TextScrap object contains the entire text flow.
		 Otherwise, the TextScrap object is empty.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Creates a TextScrap object.
		 
		 <p>Use the <codeph>createTextScrap()</codeph> method to create a TextScrap object from
		 a range of text represented by a TextRange object.</p>
		  
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flashx.textLayout.edit:TextScrap:clone"><apiName>clone</apiName><shortdesc>
		 Creates a duplicate copy of this TextScrap object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>TextScrap A copy of this TextScrap.
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.edit:TextScrap</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Creates a duplicate copy of this TextScrap object.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:TextScrap:createTextScrap"><apiName>createTextScrap</apiName><shortdesc>
		 Creates a TextScrap object from a range of text represented by a TextRange object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiOperationClassifier>flashx.textLayout.edit:TextScrap</apiOperationClassifier></apiReturn><apiParam><apiItemName>range</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextRange</apiOperationClassifier><apiDesc>the TextRange object representing the range of text to copy.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Creates a TextScrap object from a range of text represented by a TextRange object.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:TextScrap:tlf_internal:isPlainText"><apiName>isPlainText</apiName><shortdesc> 
		 Returns true if the text is plain text (not formatted)
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="tlf_internal"/><apiReturn><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc> 
		 Returns true if the text is plain text (not formatted)
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:TextScrap:tlf_internal:setPlainText"><apiName>setPlainText</apiName><shortdesc> Marks the TextScrap's content as being either plain or formatted </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="tlf_internal"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>plainText</apiItemName><apiType value="Boolean"/></apiParam></apiOperationDef><apiDesc> Marks the TextScrap's content as being either plain or formatted </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.edit:TextScrap:tlf_internal:MERGE_TO_NEXT_ON_PASTE"><apiName>MERGE_TO_NEXT_ON_PASTE</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="tlf_internal"/><apiStatic/><apiData>mergeToNextOnPaste</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:TextScrap:textFlow:get"><apiName>textFlow</apiName><shortdesc> 
		 Gets the TextFlow that is currently in the TextScrap.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:TextFlow</apiValueClassifier></apiValueDef><apiDesc> 
		 Gets the TextFlow that is currently in the TextScrap.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.edit:ElementRange"><apiName>ElementRange</apiName><shortdesc>
 The ElementRange class represents the range of objects selected within a text flow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 The ElementRange class represents the range of objects selected within a text flow.
 
 <p>The beginning elements 
 (such as <codeph>firstLeaf</codeph>) are always less than or equal to the end elements (in this case, <codeph>lastLeaf</codeph>)
 for each pair of values in an element range.</p>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>flashx.textLayout.elements.TextFlow</linktext></link></related-links><apiOperation id="flashx.textLayout.edit:ElementRange:createElementRange"><apiName>createElementRange</apiName><shortdesc> 
	 Creates an ElementRange object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiOperationClassifier>flashx.textLayout.edit:ElementRange</apiOperationClassifier></apiReturn><apiParam><apiItemName>textFlow</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier><apiDesc>the text flow
	 </apiDesc></apiParam><apiParam><apiItemName>absoluteStart</apiItemName><apiType value="int"/><apiDesc>absolute text position of the first character in the text range
	 </apiDesc></apiParam><apiParam><apiItemName>absoluteEnd</apiItemName><apiType value="int"/><apiDesc>one beyond the absolute text position of the last character in the text range
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc> 
	 Creates an ElementRange object.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:ElementRange:getCommonCharacterFormat"><apiName>getCommonCharacterFormat</apiName><shortdesc>
	 Gets the character format attributes that are common to all characters in the text range or current selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The common character style settings
	 
	 </apiDesc><apiOperationClassifier>flashx.textLayout.formats:TextLayoutFormat</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Gets the character format attributes that are common to all characters in the text range or current selection.
	 
	 <p>Format attributes that do not have the same value for all characters in the element range are set to 
	 <codeph>null</codeph> in the returned TextLayoutFormat instance.</p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:ElementRange:getCommonContainerFormat"><apiName>getCommonContainerFormat</apiName><shortdesc>
		 Gets the container format attributes that are common to all containers in the element range.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The common paragraph style settings
	 
	 </apiDesc><apiOperationClassifier>flashx.textLayout.formats:TextLayoutFormat</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Gets the container format attributes that are common to all containers in the element range.
	 
	 <p>Format attributes that do not have the same value for all containers in the element range are set to 
	 <codeph>null</codeph> in the returned TextLayoutFormat instance.</p>
	 	 
	 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.edit.xml#ISelectionManager/getCommonParagraphFormat"><linktext>flashx.textLayout.edit.ISelectionManager.getCommonParagraphFormat</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.edit:ElementRange:getCommonParagraphFormat"><apiName>getCommonParagraphFormat</apiName><shortdesc>
	 Gets the paragraph format attributes that are common to all paragraphs in the element range.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The common paragraph style settings
	 
	 </apiDesc><apiOperationClassifier>flashx.textLayout.formats:TextLayoutFormat</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Gets the paragraph format attributes that are common to all paragraphs in the element range.
	 
	 <p>Format attributes that do not have the same value for all paragraphs in the element range are set to 
	 <codeph>null</codeph> in the returned TextLayoutFormat instance.</p>
	 	 
	 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.edit.xml#ISelectionManager/getCommonParagraphFormat"><linktext>flashx.textLayout.edit.ISelectionManager.getCommonParagraphFormat</linktext></link></related-links></apiOperation><apiValue id="flashx.textLayout.edit:ElementRange:absoluteEnd:get"><apiName>absoluteEnd</apiName><shortdesc> 
	 The absolute text position of the FlowLeafElement object that contains the end of the range.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc> 
	 The absolute text position of the FlowLeafElement object that contains the end of the range. 
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:ElementRange:absoluteStart:get"><apiName>absoluteStart</apiName><shortdesc> 
	 The absolute text position of the FlowLeafElement object that contains the start of the range.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc> 
	 The absolute text position of the FlowLeafElement object that contains the start of the range.
	  
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:ElementRange:characterFormat:get"><apiName>characterFormat</apiName><shortdesc> 
	 The format attributes of the characters in the range.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
	 The format attributes of the characters in the range. 
	 
	 <p>If the range spans more than one FlowElement object, which means that more than one
	 character format may exist within the range, the format of the first FlowElement object is returned.</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:ElementRange:containerFormat:get"><apiName>containerFormat</apiName><shortdesc> 
	 The format attributes of the container displaying the range.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
	 The format attributes of the container displaying the range. 
	 
	 <p>If the range spans more than one container, the format of the first container is returned.</p>
	  
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:ElementRange:firstLeaf:get"><apiName>firstLeaf</apiName><shortdesc> 
	 The FlowLeafElement object that contains the start of the range.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.elements:FlowLeafElement</apiValueClassifier></apiValueDef><apiDesc> 
	 The FlowLeafElement object that contains the start of the range. 
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:ElementRange:firstParagraph:get"><apiName>firstParagraph</apiName><shortdesc> 
	 The ParagraphElement object that contains the start of the range.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.elements:ParagraphElement</apiValueClassifier></apiValueDef><apiDesc> 
	 The ParagraphElement object that contains the start of the range. 
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:ElementRange:lastLeaf:get"><apiName>lastLeaf</apiName><shortdesc> 
	 The FlowLeafElement object that contains the end of the range.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.elements:FlowLeafElement</apiValueClassifier></apiValueDef><apiDesc> 
	 The FlowLeafElement object that contains the end of the range. 
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:ElementRange:lastParagraph:get"><apiName>lastParagraph</apiName><shortdesc> 
	 The ParagraphElement object that contains the end of the range.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.elements:ParagraphElement</apiValueClassifier></apiValueDef><apiDesc> 
	 The ParagraphElement object that contains the end of the range. 
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:ElementRange:paragraphFormat:get"><apiName>paragraphFormat</apiName><shortdesc> 
	 The format attributes of the paragraph containing the range.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
	 The format attributes of the paragraph containing the range. 
	 
	 <p>If the range spans more than one paragraph, the format of the first paragraph is returned.</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:ElementRange:textFlow:get"><apiName>textFlow</apiName><shortdesc> 
	 The TextFlow object that contains the range.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.elements:TextFlow</apiValueClassifier></apiValueDef><apiDesc> 
	 The TextFlow object that contains the range. 
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.edit:SelectionState"><apiName>SelectionState</apiName><shortdesc>
	 The SelectionState class represents a selection in a text flow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.elements:TextRange</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The SelectionState class represents a selection in a text flow.  
	 
	 <p>A selection range has an anchor point, representing the point at which the selection of text began, and an
	 active point, representing the point to which the selection is extended. The active point can be before or after 
	 the anchor point in the text. If a selection is modified (for example, by a user shift-clicking with the mouse),
	 the active point changes while the anchor point always remains in the same position.</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.edit.xml#ISelectionManager/getSelectionState()"><linktext>flashx.textLayout.edit.ISelectionManager.getSelectionState()</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>flashx.textLayout.elements.TextFlow</linktext></link><link href="flashx.textLayout.elements.xml#TextRange"><linktext>flashx.textLayout.elements.TextRange</linktext></link></related-links><apiConstructor id="flashx.textLayout.edit:SelectionState:SelectionState"><apiName>SelectionState</apiName><shortdesc> 
		 Creates a SelectionState object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>root</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier><apiDesc>The TextFlow associated with the selection.
		 </apiDesc></apiParam><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/><apiDesc>The anchor index of the selection.
		 </apiDesc></apiParam><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/><apiDesc>The active index of the selection.
		 </apiDesc></apiParam><apiParam><apiItemName>format</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiData>null</apiData><apiDesc>The TextLayoutFormat to be applied on next character typed when a point selection
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Creates a SelectionState object.
		 
		 <p><b>Note:</b> Do not construct a SelectionState object in order to create a selection. To
		 create a selection in a text flow, call the <codeph>setSelection()</codeph> method of the relevant
		 ISelectionManager instance (which is the SelectionManager or EditManager object assigned 
		 to the <codeph>interactionManager</codeph> property of the text flow).</p>
		 
		 </apiDesc></apiConstructorDetail><related-links><link href="flashx.textLayout.edit.xml#ISelectionManager/getSelectionState()"><linktext>flashx.textLayout.edit.ISelectionManager.getSelectionState()</linktext></link><link href="flashx.textLayout.edit.xml#SelectionManager"><linktext>flashx.textLayout.edit.SelectionManager</linktext></link><link href="flashx.textLayout.edit.xml#EditManager"><linktext>flashx.textLayout.edit.EditManager</linktext></link></related-links></apiConstructor><apiOperation id="flashx.textLayout.edit:SelectionState:updateRange"><apiName>updateRange</apiName><shortdesc> 
		 Updates the selection range with new anchor or active position values.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>true if selection is changed
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>newAnchorPosition</apiItemName><apiType value="int"/><apiDesc>the anchor index of the selection.
		 </apiDesc></apiParam><apiParam><apiItemName>newActivePosition</apiItemName><apiType value="int"/><apiDesc>the active index of the selection.
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Updates the selection range with new anchor or active position values.  
		 
		 <p>The <codeph>pointFormat</codeph> styles are cleared if the selection is changed.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.edit:SelectionState:pointFormat:get"><apiName>pointFormat</apiName><shortdesc> 
		 The format attributes applied to inserted text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		 The format attributes applied to inserted text. 
		 
		 <p><b>Note:</b> The <codeph>pointFormat</codeph> object does not include inherited styles. To
		 get all the applicable style definitions, use the <codeph>getCommonCharacterFormat()</codeph>
		 method of the ISelectionManager class.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.edit.xml#ISelectionManager/getCommonCharacterFormat()"><linktext>ISelectionManager.getCommonCharacterFormat()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.edit:IEditManager"><apiName>IEditManager</apiName><shortdesc> 
     IEditManager defines the interface for handling edit operations of a text flow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><Exclude kind="property" name="delayedOperations"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.edit:ISelectionManager</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc> 
     IEditManager defines the interface for handling edit operations of a text flow.
     
     <p>To enable text flow editing, assign an IEditManager instance to the <codeph>interactionManager</codeph> 
     property of the TextFlow object. The edit manager handles changes to the text (such as insertions, 
     deletions, and format changes). Changes are reversible if the edit manager has an undo manager. The edit
     manager triggers the recomposition and display of the text flow, as necessary.</p>
     
     </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.edit.xml#EditManager"><linktext>EditManager</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>flashx.textLayout.elements.TextFlow</linktext></link><link href="flashx.undo.xml#UndoManager"><linktext>flashx.undo.UndoManager</linktext></link></related-links><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:applyContainerFormat"><apiName>applyContainerFormat</apiName><shortdesc> 
         Applies container styles to any containers in the selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>format</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>   The format to apply to the containers in the range
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiData>null</apiData><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Applies container styles to any containers in the selection.
         
         <p>Any style properties in the format object that are <codeph>null</codeph> are left unchanged.</p> 
         
         </apiDesc><example conref="examples\EditManager_applyContainerFormat.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:applyFormatToElement"><apiName>applyFormatToElement</apiName><shortdesc> 
         Applies styles to the specified element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>targetElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>The element to which the styles are applied.
         </apiDesc></apiParam><apiParam><apiItemName>format</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc> The format containing the styles to apply.
         </apiDesc></apiParam><apiParam><apiItemName>relativeStart</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>An offset from the beginning of the element at which to split the element when assigning the new formatting.
         </apiDesc></apiParam><apiParam><apiItemName>relativeEnd</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>An offset from the beginning of the element at which to split the element when applying the new formatting.
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiData>null</apiData><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Applies styles to the specified element.
         
         <p>Any style properties in the format object that are <codeph>null</codeph> are left unchanged.
         Only styles that are relevant to the specified element are applied.</p> 
         
         </apiDesc><example conref="examples\EditManager_applyFormatToElement.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:applyFormat"><apiName>applyFormat</apiName><shortdesc> 
         Changes the formats of the specified (or current) selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>leafFormat</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>   The format to apply to leaf elements such as spans and inline graphics.
         </apiDesc></apiParam><apiParam><apiItemName>paragraphFormat</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>  The format to apply to paragraph elements.
         </apiDesc></apiParam><apiParam><apiItemName>containerFormat</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>  The format to apply to the containers.
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiData>null</apiData><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Changes the formats of the specified (or current) selection.
         
         <p>Executes an undoable operation that applies the new formats.
         Only style attributes set for the TextLayoutFormat objects are applied.
         Undefined attributes in the format objects are not changed.
         </p>
         
         </apiDesc><example conref="examples\EditManager_applyFormat.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:applyLeafFormat"><apiName>applyLeafFormat</apiName><shortdesc> 
         Changes the format applied to the leaf elements in the 
         specified (or current) selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>format</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>   The format to apply.
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiData>null</apiData><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Changes the format applied to the leaf elements in the 
         specified (or current) selection.
         
         <p>Executes an undoable operation that applies the new format to leaf elements such as
         SpanElement and InlineGraphicElement objects.
         Only style attributes set for the TextLayoutFormat objects are applied.
         Undefined attributes in the format object are changed.</p>
         
         </apiDesc><example conref="examples\EditManager_applyLeafFormat.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:applyLink"><apiName>applyLink</apiName><shortdesc> 
         Transforms a selection into a link, or a link into normal text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The LinkElement that was created.
         
         </apiDesc><apiOperationClassifier>flashx.textLayout.elements:LinkElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>href</apiItemName><apiType value="String"/><apiDesc>The uri referenced by the link.
         </apiDesc></apiParam><apiParam><apiItemName>target</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>The target browser window of the link.
         </apiDesc></apiParam><apiParam><apiItemName>extendToLinkBoundary</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Specifies whether to consolidate selection with any overlapping existing links, and then apply the change.
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiData>null</apiData><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Transforms a selection into a link, or a link into normal text.
         
         <p>Executes an undoable operation that creates or removes the link.</p>
         
          <p>If a <codeph>target</codeph> parameter is specified, it must be one of the following values:</p>
         <ul>
          <li>"_self"</li>
          <li>"_blank"</li>
          <li>"_parent"</li>
          <li>"_top"</li>
         </ul>
         <p>In browser-hosted runtimes, a target of "_self" replaces the current html page.  
         So, if the SWF content containing the link is in a page within
         a frame or frameset, the linked content loads within that frame.  If the page 
         is at the top level, the linked content opens to replace the original page.  
         A target of "_blank" opens a new browser window with no name.  
         A target of "_parent" replaces the parent of the html page containing the SWF content.  
         A target of "_top" replaces the top-level page in the current browser window.</p>
         
         <p>In other runtimes, such as Adobe AIR, the link opens in the user's default browser and the
         <codeph>target</codeph> parameter is ignored.</p>
         
         <p>The <codeph>extendToLinkBoundary</codeph> parameter determines how the edit manager 
         treats a selection that intersects with one or more existing links. If the parameter is 
         <codeph>true</codeph>, then the operation is applied as a unit to the selection and the
         whole text of the existing links. Thus, a single link is created that spans from
         the beginning of the first link intersected to the end of the last link intersected.
         In contrast, if <codeph>extendToLinkBoundary</codeph> were <codeph>false</codeph> in this situation, 
         the existing partially selected links would be split into two links.</p>
         
         </apiDesc><example conref="examples\EditManager_applyLink.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#LinkElement"><linktext>flashx.textLayout.elements.LinkElement</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:applyParagraphFormat"><apiName>applyParagraphFormat</apiName><shortdesc> 
         Applies paragraph styles to any paragraphs in the selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>format</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>The format to apply to the selected paragraphs.
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiData>null</apiData><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Applies paragraph styles to any paragraphs in the selection.
         
         <p>Any style properties in the format object that are <codeph>null</codeph> are left unchanged.</p> 
         
         </apiDesc><example conref="examples\EditManager_applyParagraphFormat.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:applyTCY"><apiName>applyTCY</apiName><shortdesc> 
         Transforms text into a TCY run, or a TCY run into non-TCY text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The TCYElement that was created.
         
         </apiDesc><apiOperationClassifier>flashx.textLayout.elements:TCYElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>tcyOn</apiItemName><apiType value="Boolean"/><apiDesc>Set to <codeph>true</codeph> to apply TCY to a text range, <codeph>false</codeph> to remove TCY. 
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiData>null</apiData><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Transforms text into a TCY run, or a TCY run into non-TCY text. 
         
         <p>TCY, or tate-chu-yoko, causes text to draw horizontally within a vertical line, and is 
         used to make small blocks of non-Japanese text or numbers, such as dates, more readable in vertical text.</p>
         
         </apiDesc><example conref="examples\EditManager_applyTCY.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#TCYElement"><linktext>flashx.textLayout.elements.TCYElement</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:beginCompositeOperation"><apiName>beginCompositeOperation</apiName><shortdesc> 
         Begins a new group of operations.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
         Begins a new group of operations. 
         
         <p>All operations executed after the call to <codeph>beginCompositeOperation()</codeph>, and before the 
         matching call to <codeph>endCompositeOperation()</codeph> are executed and grouped together as a single 
         operation that can be undone as a unit.</p> 
         
         <p>A <codeph>beginCompositeOperation</codeph>/<codeph>endCompositeOperation</codeph> block can be nested inside another 
         <codeph>beginCompositeOperation</codeph>/<codeph>endCompositeOperation</codeph> block.</p>
         
         </apiDesc><example conref="examples\EditManager_beginCompositeOperation.as"/></apiOperationDetail><related-links><link href="" invalidHref="flashx.textLayout.edit.IEditManager.endCompositeOperation.xml"><linktext>flashx.textLayout.edit.IEditManager.endCompositeOperation</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:changeElementID"><apiName>changeElementID</apiName><shortdesc>
        Changes the ID of an element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newID</apiItemName><apiType value="String"/><apiDesc>The new ID value.
        </apiDesc></apiParam><apiParam><apiItemName>targetElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>The element to modify.
        </apiDesc></apiParam><apiParam><apiItemName>relativeStart</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>An offset from the beginning of the element at which to split the element when assigning the new ID.
        </apiDesc></apiParam><apiParam><apiItemName>relativeEnd</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>An offset from the beginning of the element at which to split the element when assigning the new ID.
        </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiData>null</apiData><apiDesc>Specifies the selection to restore when undoing this operation; 
        if <codeph>null</codeph>, the operation saves the current selection.
        
         </apiDesc></apiParam></apiOperationDef><apiDesc>
        Changes the ID of an element.
        
         <p>If the <codeph>relativeStart</codeph> or <codeph>relativeEnd</codeph> parameters are set (to
         anything other than the default values), then the element is split. The parts of the element
         outside this range retain the original ID. Setting both the <codeph>relativeStart</codeph> and 
         <codeph>relativeEnd</codeph> parameters creates elements with duplicate IDs.</p>
         
        </apiDesc><example conref="examples\EditManager_changeElementID.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:changeStyleName"><apiName>changeStyleName</apiName><shortdesc>
        Changes the styleName of an element or part of an element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newName</apiItemName><apiType value="String"/><apiDesc>The name of the new style.
        </apiDesc></apiParam><apiParam><apiItemName>targetElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>Specifies the element to change.
        </apiDesc></apiParam><apiParam><apiItemName>relativeStart</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>An offset from the beginning of the element at which to split the element when assigning the new style.
        </apiDesc></apiParam><apiParam><apiItemName>relativeEnd</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>An offset from the end of the element at which to split the element when assigning the new style.
        </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiData>null</apiData><apiDesc>Specifies the selection to restore when undoing this operation; 
        if <codeph>null</codeph>, the operation saves the current selection.
        
         </apiDesc></apiParam><apiDeprecated replacement="applyFormatToElement" sinceVersion="2.0"/></apiOperationDef><apiDesc>
        Changes the styleName of an element or part of an element.
         
         <p>If the <codeph>relativeStart</codeph> or <codeph>relativeEnd</codeph> parameters are set (to
         anything other than the default values), then the element is split. The parts of the element
         outside this range retain the original style.</p>
         
        </apiDesc><example conref="examples\EditManager_changeStyleName.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:changeTypeName"><apiName>changeTypeName</apiName><shortdesc>
         Changes the typeName of an element or part of an element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newName</apiItemName><apiType value="String"/><apiDesc>The name of the new type.
         </apiDesc></apiParam><apiParam><apiItemName>targetElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>Specifies the element to change.
         </apiDesc></apiParam><apiParam><apiItemName>relativeStart</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>An offset from the beginning of the element at which to split the element when assigning the new style
         </apiDesc></apiParam><apiParam><apiItemName>relativeEnd</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>An offset from the end of the element at which to split the element when assigning the new style
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiData>null</apiData><apiDesc>   Specifies the selection to restore when undoing this operation; 
         if <codeph>null</codeph>, the operation saves the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc>
         Changes the typeName of an element or part of an element.
         
         <p>If the <codeph>relativeStart</codeph> or <codeph>relativeEnd</codeph> parameters are set (to
         anything other than the default values), then the element is split. The parts of the element
         outside this range retain the original style.</p>
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:clearFormatOnElement"><apiName>clearFormatOnElement</apiName><shortdesc> 
         Undefines styles to the specified element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>targetElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>The element to which the styles are applied.
         </apiDesc></apiParam><apiParam><apiItemName>format</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc> The format containing the styles to undefine.
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiData>null</apiData><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Undefines styles to the specified element.
         
         <p>Any style properties in the format object that are <codeph>undefined</codeph> are left unchanged.
         Any styles that are defined in the specififed format are undefined on the specified element.</p> 
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:clearFormat"><apiName>clearFormat</apiName><shortdesc> 
         Undefines formats of the specified (or current) selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>leafFormat</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>    The format whose set values indicate properties to undefine to LeafFlowElement objects in the selected range.
         </apiDesc></apiParam><apiParam><apiItemName>paragraphFormat</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>The format whose set values indicate properties to undefine to ParagraphElement objects in the selected range.
         </apiDesc></apiParam><apiParam><apiItemName>containerFormat</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>The format whose set values indicate properties to undefine to ContainerController objects in the selected range.
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiData>null</apiData><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Undefines formats of the specified (or current) selection.
         
         <p>Executes an undoable operation that undefines the specified formats.
         Only style attributes set for the TextLayoutFormat objects are applied.
         Undefined attributes in the format objects are not changed.
         </p>
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:createDiv"><apiName>createDiv</apiName><shortdesc> Creates a new DivElement that contains the entire range specified in the operationState at the lowest
         common parent element that contains both the start and end points of the range.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The new DivElement that was created.
         
         </apiDesc><apiOperationClassifier>flashx.textLayout.elements:DivElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>parent</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowGroupElement</apiOperationClassifier><apiData>null</apiData><apiDesc>   Specifies a parent element for the new DivElement.
         If <codeph>null</codeph> the new parent will be lowest level that contains the SelectionState.
         </apiDesc></apiParam><apiParam><apiItemName>format</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiData>null</apiData><apiDesc>   Formatting attributes to apply to the new DivElement.
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiData>null</apiData><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         </apiDesc></apiParam></apiOperationDef><apiDesc> Creates a new DivElement that contains the entire range specified in the operationState at the lowest
         common parent element that contains both the start and end points of the range. If the start and end
         points are the same, a new DivElement is created at that position with a single child paragraph.
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:createList"><apiName>createList</apiName><shortdesc> Creates a new ListElement that contains the entire range specified in the operationState at the lowest
         common parent element that contains both the start and end points of the range.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The new ListElement that was created.
         
         </apiDesc><apiOperationClassifier>flashx.textLayout.elements:ListElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>parent</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowGroupElement</apiOperationClassifier><apiData>null</apiData><apiDesc>Optionally specifies a parent element for the new ListElement.  
         If <codeph>null</codeph> the new parent will be lowest level that contains the SelectionState.
         </apiDesc></apiParam><apiParam><apiItemName>format</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiData>null</apiData><apiDesc>Formatting attributes to apply to the new ListElement.
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiData>null</apiData><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         </apiDesc></apiParam></apiOperationDef><apiDesc> Creates a new ListElement that contains the entire range specified in the operationState at the lowest
         common parent element that contains both the start and end points of the range. Each paragraph within the 
         range will become a ListItemElement in the new ListElement. If the start and end
         points are the same, a new ListElement is created at that position with a single ListItemElement child.
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:createSubParagraphGroup"><apiName>createSubParagraphGroup</apiName><shortdesc> Creates a new SubParagraphGroupElement that contains the entire range specified in the operationState at the lowest
         common parent element that contains both the start and end points of the range.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The new SubParagraphGroupElement that was created.
         
         </apiDesc><apiOperationClassifier>flashx.textLayout.elements:SubParagraphGroupElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>parent</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowGroupElement</apiOperationClassifier><apiData>null</apiData><apiDesc>Specifies a parent element for the new SubParagraphGroupElement element.
         If <codeph>null</codeph> the new parent will be lowest level that contains the SelectionState.
         </apiDesc></apiParam><apiParam><apiItemName>format</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiData>null</apiData><apiDesc>   Formatting attributes to apply to the new SubParagraphGroupElement
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiData>null</apiData><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         </apiDesc></apiParam></apiOperationDef><apiDesc> Creates a new SubParagraphGroupElement that contains the entire range specified in the operationState at the lowest
         common parent element that contains both the start and end points of the range. If the start and end
         points are the same, nothing is done.
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:cutTextScrap"><apiName>cutTextScrap</apiName><shortdesc> 
         Deletes the selected area and returns the deleted area in a TextScrap object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The TextScrap that was cut.
         
         </apiDesc><apiOperationClassifier>flashx.textLayout.edit:TextScrap</apiOperationClassifier></apiReturn><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiData>null</apiData><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Deletes the selected area and returns the deleted area in a TextScrap object. 
         
         <p>The resulting TextScrap can be posted to the system clipboard or used in a 
         subsequent <codeph>pasteTextOperation()</codeph> operation.</p>
         
         </apiDesc><example conref="examples\EditManager_cutTextScrap.as"/></apiOperationDetail><related-links><link href="" invalidHref="flashx.textLayout.edit.IEditManager.pasteTextScrap.xml"><linktext>flashx.textLayout.edit.IEditManager.pasteTextScrap</linktext></link><link href="" invalidHref="flashx.textLayout.edit.TextClipboard.setContents.xml"><linktext>flashx.textLayout.edit.TextClipboard.setContents</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:deleteNextCharacter"><apiName>deleteNextCharacter</apiName><shortdesc> 
         Deletes a range of text, or, if a point selection is given, deletes the next character.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiData>null</apiData><apiDesc>   specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Deletes a range of text, or, if a point selection is given, deletes the next character.
         
         </apiDesc><example conref="examples\EditManager_deleteNextCharacter.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:deleteNextWord"><apiName>deleteNextWord</apiName><shortdesc> 
         Deletes the next word.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiData>null</apiData><apiDesc>Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Deletes the next word.
         
         <p>If a range is selected, the first word of the range is deleted.</p>
         
         </apiDesc><example conref="examples\EditManager_deleteNextWord.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:deletePreviousCharacter"><apiName>deletePreviousCharacter</apiName><shortdesc> 
         Deletes a range of text, or, if a point selection is given, deletes the previous character.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiData>null</apiData><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Deletes a range of text, or, if a point selection is given, deletes the previous character.
         
         </apiDesc><example conref="examples\EditManager_deletePreviousCharacter.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:deletePreviousWord"><apiName>deletePreviousWord</apiName><shortdesc> 
         Deletes the previous word.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiData>null</apiData><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Deletes the previous word.
         
         <p>If a range is selected, the first word of the range is deleted.</p>
         
         </apiDesc><example conref="examples\EditManager_deletePreviousWord.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:deleteText"><apiName>deleteText</apiName><shortdesc> 
         Deletes a range of text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiData>null</apiData><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Deletes a range of text.
         
         </apiDesc><example conref="examples\EditManager_deleteText.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:doOperation"><apiName>doOperation</apiName><shortdesc> 
         Executes a FlowOperation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>operation</apiItemName><apiOperationClassifier>flashx.textLayout.operations:FlowOperation</apiOperationClassifier><apiDesc>a FlowOperation object
          
          </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Executes a FlowOperation.  
          
          <p>The <codeph>doOperation()</codeph> method is called by IEditManager functions that 
          update the text flow. You do not typically need to call this function directly unless 
          you create your own custom operations.</p>
          
          <p>This function proceeds in the following steps:</p>
          <ol>
          <li>Flush any pending operations before performing this operation.</li>
          <li>Send a cancelable flowOperationBegin event.  If canceled this method returns immediately.</li>
          <li>Execute the operation.  The operation returns <codeph>true</codeph> or <codeph>false</codeph>.  
          <codeph>False</codeph> indicates that no changes were made.</li>
          <li>Push the operation onto the undo stack.</li>
          <li>Clear the redo stack.</li>
          <li>Update the display.</li>
          <li>Send a cancelable flowOperationEnd event.</li>
          </ol>
          <p>Exception handling:  If the operation throws an exception, it is caught and the error is 
          attached to the flowOperationEnd event.  If the event is not canceled the error is rethrown.</p>
          
          </apiDesc><example conref="examples\EditManager_doOperation.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:endCompositeOperation"><apiName>endCompositeOperation</apiName><shortdesc> 
         Ends a group of operations.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
         Ends a group of operations. 
         
         <p>All operations executed since the last call to <codeph>beginCompositeOperation()</codeph> are 
         grouped as a CompositeOperation that is then completed. This CompositeOperation object is added 
         to the undo stack or, if this composite operation is nested inside another composite operation, 
         added to the parent operation.</p>
         
         </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flashx.textLayout.edit.IEditManager.beginCompositeOperation.xml"><linktext>flashx.textLayout.edit.IEditManager.beginCompositeOperation</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:insertInlineGraphic"><apiName>insertInlineGraphic</apiName><shortdesc> 
         Inserts an image.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.elements:InlineGraphicElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>source</apiItemName><apiType value="Object"/><apiDesc> Can be either a String interpreted as a uri, a Class interpreted as the class of an Embed DisplayObject, 
                          a DisplayObject instance or a URLRequest. 
          </apiDesc></apiParam><apiParam><apiItemName>width</apiItemName><apiType value="Object"/><apiDesc>  The width of the image to insert (number, percent, or 'auto').
          </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Object"/><apiDesc> The height of the image to insert (number, percent, or 'auto').
          </apiDesc></apiParam><apiParam><apiItemName>options</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>None supported.
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiData>null</apiData><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Inserts an image.
         
         <p>The source of the image can be a string containing a URI, URLRequest object, a Class object representing an embedded asset,
         or a DisplayObject instance.</p>
          
         <p>The width and height values can be the number of pixels, a percent, or the string, 'auto', 
         in which case the actual dimension of the graphic is used.</p>
         
         <p>Set the <codeph>float</codeph> to one of the constants defined in the Float class to specify whether
         the image should be displayed to the left or right of any text or inline with the text.</p>
         
          </apiDesc><example conref="examples\EditManager_insertInlineGraphic.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElement"><linktext>flashx.textLayout.elements.InlineGraphicElement</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:insertText"><apiName>insertText</apiName><shortdesc> 
         Inserts text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiDesc>       The string to insert.
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiData>null</apiData><apiDesc>   Specifies the text in the flow to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Inserts text.
         
         <p>Inserts the text at a position or range in the text. If the location supplied in the 
         <codeph>operationState</codeph> parameter is a range (or the parameter is <codeph>null</codeph> and the
         current selection is a range), then the text currently in the range 
         is replaced by the inserted text.</p>
         
         </apiDesc><example conref="examples\EditManager_insertText.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:modifyInlineGraphic"><apiName>modifyInlineGraphic</apiName><shortdesc> 
         Modifies an existing inline graphic.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>source</apiItemName><apiType value="Object"/><apiDesc> Can be either a String interpreted as a uri, a Class interpreted as the class of an Embed DisplayObject, 
                          a DisplayObject instance or a URLRequest. 
          </apiDesc></apiParam><apiParam><apiItemName>width</apiItemName><apiType value="Object"/><apiDesc>  The new width for the image (number or percent).
          </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Object"/><apiDesc> The new height for the image (number or percent).
          </apiDesc></apiParam><apiParam><apiItemName>options</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>None supported.
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiData>null</apiData><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Modifies an existing inline graphic.
         
         <p>Set unchanging properties to the values in the original graphic. (Modifying an existing graphic object
         is typically more efficient than deleting and recreating one.)</p>
         
          </apiDesc><example conref="examples\EditManager_modifyInlineGraphic.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElement"><linktext>flashx.textLayout.elements.InlineGraphicElement</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:moveChildren"><apiName>moveChildren</apiName><shortdesc> Move a set of FlowElements from one FlowGroupElement to another.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>source</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowGroupElement</apiOperationClassifier><apiDesc>   The orginal parent of the elements to be moved.
         </apiDesc></apiParam><apiParam><apiItemName>sourceIndex</apiItemName><apiType value="int"/><apiDesc>  The child index within the source of the first element to be moved.
         </apiDesc></apiParam><apiParam><apiItemName>numChildren</apiItemName><apiType value="int"/><apiDesc>  The number of children being moved.
         </apiDesc></apiParam><apiParam><apiItemName>destination</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowGroupElement</apiOperationClassifier><apiDesc>  The new parent of elements after move.
         </apiDesc></apiParam><apiParam><apiItemName>destinationIndex</apiItemName><apiType value="int"/><apiDesc> The child index within the destination to where elements are moved to.
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiData>null</apiData><apiDesc>   Specifies the text to which this operation applies, and to which selection returns to upon undo.  
         If <codeph>null</codeph>, the operation applies to the current selection.  If there is no current selection, this parameter must be non-null.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc> Move a set of FlowElements from one FlowGroupElement to another. The desinationElement must be a legal parent type for the children being moved,
         or an exception is thrown.
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:overwriteText"><apiName>overwriteText</apiName><shortdesc> 
         Overwrites the selected text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiDesc>The string to insert.
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiData>null</apiData><apiDesc>Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Overwrites the selected text.
         
         <p>If the selection is a point selection, the first character is overwritten by the new text.</p>
         
         </apiDesc><example conref="examples\EditManager_overwriteText.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:pasteTextScrap"><apiName>pasteTextScrap</apiName><shortdesc> 
         Pastes the TextScrap into the selected area.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>scrapToPaste</apiItemName><apiOperationClassifier>flashx.textLayout.edit:TextScrap</apiOperationClassifier><apiDesc> The TextScrap to paste.
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiData>null</apiData><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Pastes the TextScrap into the selected area.
         
         <p>If a range of text is specified, the text 
         in the range is deleted.</p>
         
         </apiDesc><example conref="examples\EditManager_pasteTextScrap.as"/></apiOperationDetail><related-links><link href="" invalidHref="flashx.textLayout.edit.IEditManager.cutTextScrap.xml"><linktext>flashx.textLayout.edit.IEditManager.cutTextScrap</linktext></link><link href="" invalidHref="flashx.textLayout.edit.TextClipboard.getContents.xml"><linktext>flashx.textLayout.edit.TextClipboard.getContents</linktext></link><link href="flashx.textLayout.edit.xml#TextScrap"><linktext>flashx.textLayout.edit.TextScrap</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:redo"><apiName>redo</apiName><shortdesc> 
         Reperforms the previous undone operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
         Reperforms the previous undone operation.
         
         <p><b>Note:</b> If the IUndoManager associated with this IEditManager is also associated with 
         another IEditManager, then it is possible that the redo operation associated with the other 
         IEditManager is the one redone. This can happen if the FlowOperation of another IEditManager 
         is on top of the redo stack.</p>  
         
         <p>This function does nothing if undo is not turned on.</p>
         
         </apiDesc><example conref="examples\EditManager_redo.as"/></apiOperationDetail><related-links><link href="flashx.undo.xml#IUndoManager/redo()"><linktext>flashx.undo.IUndoManager.redo()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:splitElement"><apiName>splitElement</apiName><shortdesc> Splits the target element at the location specified, creating a new element after the current one.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The new paragraph that was created.
         
         </apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowGroupElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>target</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowGroupElement</apiOperationClassifier><apiDesc> The element to be split.
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiData>null</apiData><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         </apiDesc></apiParam></apiOperationDef><apiDesc> Splits the target element at the location specified, creating a new element after the current one.
         If the operationState is a range, the text within the range is deleted. The new element is created 
         after the text position specified by operationState. Note that splitting a SubParagraphGroupElement 
         will have no effect because they will automatically remerge with the adejacent elements.
         
         <p>An example where you might want to use this is if you have a list, and you want to divide it into two lists.</p>
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:splitParagraph"><apiName>splitParagraph</apiName><shortdesc> 
         Splits the paragraph at the current position, creating a new paragraph after the current one.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The new paragraph that was created.
         
         </apiDesc><apiOperationClassifier>flashx.textLayout.elements:ParagraphElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiData>null</apiData><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Splits the paragraph at the current position, creating a new paragraph after the current one.
           
         <p>If a range of text is specified, the text 
         in the range is deleted.</p>
         
         </apiDesc><example conref="examples\EditManager_splitParagraph.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:undo"><apiName>undo</apiName><shortdesc> 
         Reverses the previous operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
         Reverses the previous operation. 
         
         <p><b>Note:</b> If the IUndoManager associated with this IEditManager is also associated with 
         another IEditManager, then it is possible that the undo operation associated with the other 
         IEditManager is the one undone.  This can happen if the FlowOperation of another IEditManager 
         is on top of the undo stack.</p>  
         
         <p>This function does nothing if undo is not turned on.</p>
         
         </apiDesc><example conref="examples\EditManager_undo.as"/></apiOperationDetail><related-links><link href="flashx.undo.xml#IUndoManager/undo()"><linktext>flashx.undo.IUndoManager.undo()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:updateAllControllers"><apiName>updateAllControllers</apiName><shortdesc> Updates the display after an operation has modified it.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> Updates the display after an operation has modified it. Normally this is handled automatically, but call
         this method if <codeph>delayUpdates</codeph> is on, and the display should be updated before the next <codeph>enter_frame</codeph> event. 
         
         </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:allowDelayedOperations:get"><apiName>allowDelayedOperations</apiName><shortdesc> Controls whether operations can be queued up for later execution.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc> Controls whether operations can be queued up for later execution.
         
         <p>Execution of some operations might be delayed as a performance optimization. For example, it is 
         convenient to be able to combine multiple keystrokes into a single insert operation. If 
         <codeph>allowDelayedOperations</codeph> is <codeph>true</codeph>, then operations may be queued up. If <codeph>false</codeph>, all operations are
         executed immediately. By default, it is <codeph>true</codeph>.</p>
         
         </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flashx.edit.xml#ISelectionManager/flushPendingOperations"><linktext>flashx.edit.ISelectionManager.flushPendingOperations</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:delayUpdates:get"><apiName>delayUpdates</apiName><shortdesc>
         By default, calls into IEditManager handle updates synchronously, so the requested change is made and the text recomposed 
         and added to the display list within the IEditManager method.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
         By default, calls into IEditManager handle updates synchronously, so the requested change is made and the text recomposed 
         and added to the display list within the IEditManager method. To get a delayed redraw, set <codeph>delayUpdates</codeph> to <codeph>true</codeph>. This 
         causes the IEditManager to only update the model, and recompose and redraw on the next <codeph>enter_frame</codeph> event. 
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:undoManager:get"><apiName>undoManager</apiName><shortdesc> 
         The UndoManager object assigned to this EditManager instance, if there is one.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.undo:IUndoManager</apiValueClassifier></apiValueDef><apiDesc> 
         The UndoManager object assigned to this EditManager instance, if there is one.
         
         <p>An undo manager handles undo and redo operations.</p>
         
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.edit:ISelectionManager"><apiName>ISelectionManager</apiName><shortdesc> 
	 The ISelectionManager interface defines the interface for handling text selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.edit:IInteractionEventHandler</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc> 
	 The ISelectionManager interface defines the interface for handling text selection.
	 
	 <p>A SelectionManager keeps track of the selected text range and handles events for a TextFlow.</p>
	 
	 <p>A selection can be either a point selection or a range selection. A point selection is the insertion point
	 and is indicated visually by drawing a cursor. A range
	 selection includes the text between an anchor point and an active point.</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.edit.xml#SelectionManager"><linktext>flashx.textLayout.edit.SelectionManager</linktext></link><link href="flashx.textLayout.edit.xml#TextScrap"><linktext>flashx.textLayout.edit.TextScrap</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>flashx.textLayout.elements.TextFlow</linktext></link></related-links><apiOperation id="flashx.textLayout.edit:ISelectionManager:flashx.textLayout.edit:ISelectionManager:flushPendingOperations"><apiName>flushPendingOperations</apiName><shortdesc>
		 Executes any pending FlowOperations.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Executes any pending FlowOperations. 
		 
		 <p>The execution of some editing operations, such as text insertion, is delayed 
		 until the next enterFrame event. Calling <codeph>flushPendingOperations()</codeph> causes any deferred operations to be executed 
		 immediately.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:ISelectionManager:flashx.textLayout.edit:ISelectionManager:getCommonCharacterFormat"><apiName>getCommonCharacterFormat</apiName><shortdesc>
		 Gets the character format attributes that are common to all characters in the specified text range or current selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The common character style settings
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.formats:TextLayoutFormat</apiOperationClassifier></apiReturn><apiParam><apiItemName>range</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextRange</apiOperationClassifier><apiData>null</apiData><apiDesc>The optional range of text for which common attributes are requested. If null, the current selection is used. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Gets the character format attributes that are common to all characters in the specified text range or current selection.
		 
		 <p>Format attributes that do not have the same value for all characters in the specified element range or selection are set to 
		 <codeph>null</codeph> in the returned TextLayoutFormat instance.</p>
		 
		 </apiDesc><example conref="examples\SelectionManager_getCommonCharacterFormat.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:ISelectionManager:flashx.textLayout.edit:ISelectionManager:getCommonContainerFormat"><apiName>getCommonContainerFormat</apiName><shortdesc>
		 Gets the container format attributes that are common to all containers in the specified text range or current selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The common container style settings
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.formats:TextLayoutFormat</apiOperationClassifier></apiReturn><apiParam><apiItemName>range</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextRange</apiOperationClassifier><apiData>null</apiData><apiDesc>The optional range of text for which common attributes are requested. If null, the current selection is used. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Gets the container format attributes that are common to all containers in the specified text range or current selection.
		 
		 <p>Format attributes that do not have the same value for all containers in the specified element range or selection are set to 
		 <codeph>null</codeph> in the returned TextLayoutFormat instance.</p>
		 
		 </apiDesc><example conref="examples\SelectionManager_getCommonContainerFormat.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:ISelectionManager:flashx.textLayout.edit:ISelectionManager:getCommonParagraphFormat"><apiName>getCommonParagraphFormat</apiName><shortdesc>
		 Gets the paragraph format attributes that are common to all paragraphs in the specified text range or current selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The common paragraph style settings
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.formats:TextLayoutFormat</apiOperationClassifier></apiReturn><apiParam><apiItemName>range</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextRange</apiOperationClassifier><apiData>null</apiData><apiDesc>The optional range of text for which common attributes are requested. If null, the current selection is used. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Gets the paragraph format attributes that are common to all paragraphs in the specified text range or current selection.
		 
		 <p>Format attributes that do not have the same value for all paragraphs in the specified element range or selection are set to 
		 <codeph>null</codeph> in the returned TextLayoutFormat instance.</p>
		 
		 </apiDesc><example conref="examples\SelectionManager_getCommonParagraphFormat.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:ISelectionManager:flashx.textLayout.edit:ISelectionManager:getSelectionState"><apiName>getSelectionState</apiName><shortdesc>
		 Gets the SelectionState object of the current selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Gets the SelectionState object of the current selection.
		 
		 </apiDesc><example conref="examples\SelectionManager_getSelectionState.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.edit.xml#SelectionState"><linktext>flashx.textLayout.edit.SelectionState</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.edit:ISelectionManager:flashx.textLayout.edit:ISelectionManager:hasSelection"><apiName>hasSelection</apiName><shortdesc>
		 Indicates whether there is a selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
		 Indicates whether there is a selection. 
		 
		 <p>Returns <codeph>true</codeph> if there is either a range selection or a point selection. 
		 By default, when a selection manager is first set up, there is no selection (the start and end are -1).</p>
		 
		 </apiDesc><example conref="examples\SelectionManager_hasSelection.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:ISelectionManager:flashx.textLayout.edit:ISelectionManager:isRangeSelection"><apiName>isRangeSelection</apiName><shortdesc>
		 Indicates whether the selection covers a range of text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
		 Indicates whether the selection covers a range of text.
		 
		 <p>Returns <codeph>true</codeph> if there is a selection that extends past a single position.</p> 
		 
		 </apiDesc><example conref="examples\SelectionManager_isRangeSelection.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:ISelectionManager:flashx.textLayout.edit:ISelectionManager:notifyInsertOrDelete"><apiName>notifyInsertOrDelete</apiName><shortdesc> 
		 Updates the selection manager when text is inserted or deleted.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>absolutePosition</apiItemName><apiType value="int"/><apiDesc>The point in the text where the change was made.
		 </apiDesc></apiParam><apiParam><apiItemName>length</apiItemName><apiType value="int"/><apiDesc>A positive or negative number indicating how many characters were inserted or deleted.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Updates the selection manager when text is inserted or deleted.
		 
		 <p>Operations must call <codeph>notifyInsertOrDelete</codeph> when changing the text in the text flow. 
		 The selection manager adjusts index-based position indicators accordingly. If you create a new Operation
		 class that changes text in a text flow directly (not using another operation) your operation must call this function 
		 to keep the selection up to date.</p>
		 
		 </apiDesc><example conref="examples\SelectionManager_notifyInsertOrDelete.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:ISelectionManager:flashx.textLayout.edit:ISelectionManager:refreshSelection"><apiName>refreshSelection</apiName><shortdesc> 
		 Redisplays the selection shapes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Redisplays the selection shapes. 
		 
		 <p><b>Note:</b> You do not need to call this method directly. It is called automatically.</p>	
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:ISelectionManager:flashx.textLayout.edit:ISelectionManager:selectAll"><apiName>selectAll</apiName><shortdesc>
		 Selects the entire flow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Selects the entire flow.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:ISelectionManager:flashx.textLayout.edit:ISelectionManager:selectRange"><apiName>selectRange</apiName><shortdesc>
		 Selects a range of text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/><apiDesc>The anchor point for the new selection, as an absolute position in the TextFlow 
		 </apiDesc></apiParam><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/><apiDesc>The active end of the new selection, as an absolute position in the TextFlow
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Selects a range of text.
		 
		 <p>If a negative number is passed as either of the parameters, then any existing selection is
		 removed.</p>
		 
		 </apiDesc><example conref="examples\SelectionManager_setSelection.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:ISelectionManager:flashx.textLayout.edit:ISelectionManager:setFocus"><apiName>setFocus</apiName><shortdesc> 
		 Gives the focus to the first container in the selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Gives the focus to the first container in the selection.
		  
		 </apiDesc><example conref="examples\SelectionManager_setFocus.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:ISelectionManager:flashx.textLayout.edit:ISelectionManager:setSelectionState"><apiName>setSelectionState</apiName><shortdesc>
		 Sets the SelectionState object of the current selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>state</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier></apiParam></apiOperationDef><apiDesc>
		 Sets the SelectionState object of the current selection.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.edit.xml#SelectionState"><linktext>flashx.textLayout.edit.SelectionState</linktext></link></related-links></apiOperation><apiValue id="flashx.textLayout.edit:ISelectionManager:flashx.textLayout.edit:ISelectionManager:absoluteEnd:get"><apiName>absoluteEnd</apiName><shortdesc> 
		 The text position of the end of the selection, as an offset from the start of the text flow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 
		 The text position of the end of the selection, as an offset from the start of the text flow.
		  
		 <p>The absolute end is the same as either the active or the anchor point of the selection, whichever comes
		 last in the text flow.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:ISelectionManager:flashx.textLayout.edit:ISelectionManager:absoluteStart:get"><apiName>absoluteStart</apiName><shortdesc> 
		 The text position of the start of the selection, as an offset from the start of the text flow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 
		 The text position of the start of the selection, as an offset from the start of the text flow.
		  
		 <p>The absolute start is the same as either the active or the anchor point of the selection, whichever comes
		 first in the text flow.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:ISelectionManager:flashx.textLayout.edit:ISelectionManager:activePosition:get"><apiName>activePosition</apiName><shortdesc> 
		 The active point of the selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 
		 The active point of the selection.
		 
		 <p>The <i>active</i> point is the volatile end of the selection. The active point is changed 
		 when the selection is modified. The active point can be at either the beginning 
		 or the end of the selection.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:ISelectionManager:flashx.textLayout.edit:ISelectionManager:anchorPosition:get"><apiName>anchorPosition</apiName><shortdesc> 
		 The anchor point of the selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 
		 The anchor point of the selection. 
		 
		 <p>An <i>anchor</i> point is the stable end of the selection. When the selection
		 is extended, the anchor point does not change. The anchor point can be at either the beginning 
		 or the end of the selection.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:ISelectionManager:flashx.textLayout.edit:ISelectionManager:currentSelectionFormat:get"><apiName>currentSelectionFormat</apiName><shortdesc> 
		 The current SelectionFormat object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.edit:SelectionFormat</apiValueClassifier></apiValueDef><apiDesc> 
		 The current SelectionFormat object.
		 
		 <p>The current SelectionFormat object is chosen from the SelectionFormat objects assigned to the 
		 <codeph>unfocusedSelectionFormat</codeph>, <codeph>inactiveSelectionFormat</codeph> and <codeph>focusedSelectionFormat</codeph> 
		 properties based on the current state of the <codeph>windowActive</codeph> and <codeph>focused</codeph> properties.</p> 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:ISelectionManager:flashx.textLayout.edit:ISelectionManager:editingMode:get"><apiName>editingMode</apiName><shortdesc>
		 The editing mode.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
		 The editing mode. 
		 
		 <p>The editing mode indicates whether the text flow supports selection, editing, or only reading.
		 A text flow is made selectable by assigning a selection manager and editable by assigning an edit manager.
		 Constants representing the editing modes are defined in the EditingMode class.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flashx.textLayout.EditingMode.xml"><linktext>flashx.textLayout.EditingMode</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.edit:ISelectionManager:flashx.textLayout.edit:ISelectionManager:focusedSelectionFormat:get"><apiName>focusedSelectionFormat</apiName><shortdesc>
		 The SelectionFormat object used to draw the selection in a focused container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.edit:SelectionFormat</apiValueClassifier></apiValueDef><apiDesc>
		 The SelectionFormat object used to draw the selection in a focused container. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:ISelectionManager:flashx.textLayout.edit:ISelectionManager:focused:get"><apiName>focused</apiName><shortdesc> 
		 Indicates whether a container in the text flow has the focus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc> 
		 Indicates whether a container in the text flow has the focus.
		 
		 <p>The <codeph>focused</codeph> property is <codeph>true</codeph> 
		 if any of the containers in the text flow has key focus.</p> 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:ISelectionManager:flashx.textLayout.edit:ISelectionManager:inactiveSelectionFormat:get"><apiName>inactiveSelectionFormat</apiName><shortdesc>
		 The SelectionFormat object used to draw the selection when it is not in the active window.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.edit:SelectionFormat</apiValueClassifier></apiValueDef><apiDesc>
		 The SelectionFormat object used to draw the selection when it is not in the active window.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:ISelectionManager:flashx.textLayout.edit:ISelectionManager:textFlow:get"><apiName>textFlow</apiName><shortdesc> 
		 The TextFlow object managed by this selection manager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.elements:TextFlow</apiValueClassifier></apiValueDef><apiDesc> 
		 The TextFlow object managed by this selection manager. 
		 
		 <p>A selection manager manages a single text flow. A selection manager can also be
		 assigned to a text flow by setting the <codeph>interactionManager</codeph> property of the
		 TextFlow object.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow/interactionManager"><linktext>flashx.textLayout.elements.TextFlow.interactionManager</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.edit:ISelectionManager:flashx.textLayout.edit:ISelectionManager:unfocusedSelectionFormat:get"><apiName>unfocusedSelectionFormat</apiName><shortdesc>
		 The SelectionFormat object used to draw the selection when it is not in a focused container, but is in
		 the active window.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.edit:SelectionFormat</apiValueClassifier></apiValueDef><apiDesc>
		 The SelectionFormat object used to draw the selection when it is not in a focused container, but is in
		 the active window.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:ISelectionManager:flashx.textLayout.edit:ISelectionManager:windowActive:get"><apiName>windowActive</apiName><shortdesc> 
		 Indicates whether the window associated with the text flow is active.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc> 
		 Indicates whether the window associated with the text flow is active.
		 
		 <p>The <codeph>windowActive</codeph> property is <codeph>true</codeph> if the window 
		 displaying with the text flow is the active window.</p>
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.edit:EditManager"><apiName>EditManager</apiName><shortdesc> 
	 The EditManager class manages editing changes to a TextFlow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.edit:IEditManager</apiBaseInterface><apiBaseClassifier>flashx.textLayout.edit:SelectionManager</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 The EditManager class manages editing changes to a TextFlow. 
	 
	 <p>To enable text flow editing, assign an EditManager object to the <codeph>interactionManager</codeph> 
	 property of the TextFlow object. The edit manager handles changes to the text (such as insertions, 
	 deletions, and format changes). Changes are reversible if the edit manager has an undo manager. The edit
	 manager triggers the recomposition and display of the text flow, as necessary.</p>
	 
	 <p>The EditManager class supports the following keyboard shortcuts:</p>
	 
	 <adobetable class="innertable">
	  
	  					
	 						
	 						
	 						
	 						
	 						
	 						
	 						
	 						
	 						
	 						
	 						
	 						
	 						
	 	    
	 	    
	 <tgroup cols="2"><thead><row><entry>Keys</entry><entry>Result</entry></row></thead><tbody><row><entry>ctrl-z</entry><entry>undo</entry></row><row><entry>ctrl-y</entry><entry>redo</entry></row><row><entry>ctrl-backspace</entry><entry>deletePreviousWord</entry></row><row><entry>ctrl-delete</entry><entry>deleteNextWord</entry></row><row><entry>alt+delete</entry><entry>deleteNextWord</entry></row><row><entry>ctrl+alt-delete</entry><entry>deleteNextWord</entry></row><row><entry>ctrl-shift-hyphen</entry><entry>insert discretionary hyphen</entry></row><row><entry>ctrl+backspace</entry><entry>deletePreviousWord</entry></row><row><entry>alt+backspace</entry><entry>deletePreviousWord</entry></row><row><entry>ctrl+alt-backspace</entry><entry>deletePreviousWord</entry></row><row><entry>INSERT</entry><entry>toggles overWriteMode</entry></row><row><entry>backspace</entry><entry>deletePreviousCharacter</entry></row><row><entry>ENTER</entry><entry>if textFlow.configuration.manageEnterKey in a list it creates a new list item, otherwise creates a new paragraph</entry></row><row><entry>shift-ENTER</entry><entry>if textFlow.configuration.manageEnterKey creates a new paragraph</entry></row><row><entry>TAB</entry><entry>if textFlow.configuration.manageTabKey in a list it creates nested list, otherwise inserts a TAB or overwrites next character with a TAB</entry></row><row><entry>shift-TAB</entry><entry>if textFlow.configuration.manageTabKey in the first item of a list it moves the item out of the list (promotes it)</entry></row></tbody></tgroup></adobetable>
	 
	 <p><b>Note:</b> The following keys do not work on Windows: alt-backspace, alt-delete, ctrl+alt-backspace,
	 and ctrl+alt-delete. These keys do not generate an event for the runtime.</p>						
 	 
 	 </apiDesc><example conref="examples\EditManager_example.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>flashx.textLayout.elements.TextFlow</linktext></link><link href="flashx.undo.xml#UndoManager"><linktext>flashx.undo.UndoManager</linktext></link></related-links><apiConstructor id="flashx.textLayout.edit:EditManager:EditManager"><apiName>EditManager</apiName><shortdesc> 
		 Creates an EditManager object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>undoManager</apiItemName><apiOperationClassifier>flashx.undo:IUndoManager</apiOperationClassifier><apiData>null</apiData><apiDesc>The UndoManager for the application
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Creates an EditManager object.
		 
		 <p>Assign an EditManager object to the <codeph>interactionManager</codeph> property
		 of a text flow to enable editing of that text flow. </p>
		 
		 <p>To enable support for undoing and redoing changes, pass an 
		 IUndoManager instance to the EditManager constructor. You can use
		 the <codeph>flashx.undo.UndoManager</codeph> class
		 or create a custom IUndoManager instance. Use a custom IUndoManager instance
		 to integrate Text Layout Framework changes with an existing
		 undo manager that is not an instance of the UndoManager class.
		 To create a custom IUndoManager instance, ensure that the class
		 you use to define the undo manager 
		 implements the IUndoManager interface.</p>
		 
		 
		 </apiDesc><example conref="examples\EditManager_constructor.as"/></apiConstructorDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow/interactionManager"><linktext>flashx.textLayout.elements.TextFlow.interactionManager</linktext></link><link href="flashx.undo.xml#IUndoManager"><linktext>flashx.undo.IUndoManager</linktext></link></related-links></apiConstructor><apiOperation id="flashx.textLayout.edit:EditManager:applyContainerFormat"><apiName>applyContainerFormat</apiName><shortdesc conref="IEditManager#applyContainerFormat()"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>containerFormat</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>   The format to apply to the containers in the range
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiData>null</apiData><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc conref="IEditManager#applyContainerFormat()"> 
		 </apiDesc><example conref="examples\EditManager_applyContainerFormat.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:applyFormatToElement"><apiName>applyFormatToElement</apiName><shortdesc conref="IEditManager#applyFormatToElement()"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>targetElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>The element to which the styles are applied.
         </apiDesc></apiParam><apiParam><apiItemName>format</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc> The format containing the styles to apply.
         </apiDesc></apiParam><apiParam><apiItemName>relativeStart</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>An offset from the beginning of the element at which to split the element when assigning the new formatting.
         </apiDesc></apiParam><apiParam><apiItemName>relativeEnd</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>An offset from the beginning of the element at which to split the element when applying the new formatting.
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiData>null</apiData><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc conref="IEditManager#applyFormatToElement()"> 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:applyFormat"><apiName>applyFormat</apiName><shortdesc conref="IEditManager#applyFormat()"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>leafFormat</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>   The format to apply to leaf elements such as spans and inline graphics.
         </apiDesc></apiParam><apiParam><apiItemName>paragraphFormat</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>  The format to apply to paragraph elements.
         </apiDesc></apiParam><apiParam><apiItemName>containerFormat</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>  The format to apply to the containers.
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiData>null</apiData><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc conref="IEditManager#applyFormat()"> 
		 </apiDesc><example conref="examples\EditManager_applyFormat.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:applyLeafFormat"><apiName>applyLeafFormat</apiName><shortdesc conref="IEditManager#applyLeafFormat()"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>characterFormat</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>   The format to apply.
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiData>null</apiData><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc conref="IEditManager#applyLeafFormat()"> 
		 </apiDesc><example conref="examples\EditManager_applyLeafFormat.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:applyLink"><apiName>applyLink</apiName><shortdesc conref="IEditManager#applyLink()ReturnsthenewLinkElementthatwascreated."> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="+ 10.2" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.elements:LinkElement</apiOperationClassifier><apiDesc>The LinkElement that was created.
         
         </apiDesc></apiReturn><apiParam><apiItemName>href</apiItemName><apiType value="String"/><apiDesc>The uri referenced by the link.
         </apiDesc></apiParam><apiParam><apiItemName>targetString</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>The target browser window of the link.
         </apiDesc></apiParam><apiParam><apiItemName>extendToLinkBoundary</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Specifies whether to consolidate selection with any overlapping existing links, and then apply the change.
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiData>null</apiData><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         </apiDesc></apiParam></apiOperationDef><apiDesc conref="IEditManager#applyLink()ReturnsthenewLinkElementthatwascreated."> 
		 </apiDesc><example conref="examples\EditManager_applyLink.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:applyParagraphFormat"><apiName>applyParagraphFormat</apiName><shortdesc conref="IEditManager#applyParagraphFormat()"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>paragraphFormat</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>The format to apply to the selected paragraphs.
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiData>null</apiData><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc conref="IEditManager#applyParagraphFormat()"> 
		 </apiDesc><example conref="examples\EditManager_applyParagraphFormat.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:applyTCY"><apiName>applyTCY</apiName><shortdesc conref="IEditManager#applyTCY()ReturnsthenewTCYElementthatwascreated."> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="+ 10.2" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.elements:TCYElement</apiOperationClassifier><apiDesc>The TCYElement that was created.
         
         </apiDesc></apiReturn><apiParam><apiItemName>tcyOn</apiItemName><apiType value="Boolean"/><apiDesc>Set to <codeph>true</codeph> to apply TCY to a text range, <codeph>false</codeph> to remove TCY. 
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiData>null</apiData><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         </apiDesc></apiParam></apiOperationDef><apiDesc conref="IEditManager#applyTCY()ReturnsthenewTCYElementthatwascreated."> 
		 </apiDesc><example conref="examples\EditManager_applyTCY.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:beginCompositeOperation"><apiName>beginCompositeOperation</apiName><shortdesc conref="IEditManager#beginCompositeOperation()"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="IEditManager#beginCompositeOperation()"> 
		 </apiDesc><example conref="examples\EditManager_beginCompositeOperation.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:changeElementID"><apiName>changeElementID</apiName><shortdesc conref="IEditManager#changeElementID()">
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newID</apiItemName><apiType value="String"/><apiDesc>The new ID value.
        </apiDesc></apiParam><apiParam><apiItemName>targetElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>The element to modify.
        </apiDesc></apiParam><apiParam><apiItemName>relativeStart</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>An offset from the beginning of the element at which to split the element when assigning the new ID.
        </apiDesc></apiParam><apiParam><apiItemName>relativeEnd</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>An offset from the beginning of the element at which to split the element when assigning the new ID.
        </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiData>null</apiData><apiDesc>Specifies the selection to restore when undoing this operation; 
        if <codeph>null</codeph>, the operation saves the current selection.
        
         </apiDesc></apiParam></apiOperationDef><apiDesc conref="IEditManager#changeElementID()">
		 </apiDesc><example conref="examples\EditManager_changeElementID.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:changeStyleName"><apiName>changeStyleName</apiName><shortdesc conref="IEditManager#changeStyleName()">
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newName</apiItemName><apiType value="String"/><apiDesc>The name of the new style.
        </apiDesc></apiParam><apiParam><apiItemName>targetElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>Specifies the element to change.
        </apiDesc></apiParam><apiParam><apiItemName>relativeStart</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>An offset from the beginning of the element at which to split the element when assigning the new style.
        </apiDesc></apiParam><apiParam><apiItemName>relativeEnd</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>An offset from the end of the element at which to split the element when assigning the new style.
        </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiData>null</apiData><apiDesc>Specifies the selection to restore when undoing this operation; 
        if <codeph>null</codeph>, the operation saves the current selection.
        
         </apiDesc></apiParam><apiDeprecated replacement="applyFormatToElement" sinceVersion="2.0"/></apiOperationDef><apiDesc conref="IEditManager#changeStyleName()">
		 </apiDesc><example conref="examples\EditManager_changeStyleName.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:changeTypeName"><apiName>changeTypeName</apiName><shortdesc conref="IEditManager#changeTypeName()">
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newName</apiItemName><apiType value="String"/><apiDesc>The name of the new type.
         </apiDesc></apiParam><apiParam><apiItemName>targetElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>Specifies the element to change.
         </apiDesc></apiParam><apiParam><apiItemName>relativeStart</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>An offset from the beginning of the element at which to split the element when assigning the new style
         </apiDesc></apiParam><apiParam><apiItemName>relativeEnd</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>An offset from the end of the element at which to split the element when assigning the new style
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiData>null</apiData><apiDesc>   Specifies the selection to restore when undoing this operation; 
         if <codeph>null</codeph>, the operation saves the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc conref="IEditManager#changeTypeName()">
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:clearFormatOnElement"><apiName>clearFormatOnElement</apiName><shortdesc conref="IEditManager#clearFormatOnElement()"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>targetElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>The element to which the styles are applied.
         </apiDesc></apiParam><apiParam><apiItemName>format</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc> The format containing the styles to undefine.
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiData>null</apiData><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc conref="IEditManager#clearFormatOnElement()"> 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:clearFormat"><apiName>clearFormat</apiName><shortdesc conref="IEditManager#clearFormat()KnownissueisthatundefinesofleafFormatvalueswithapointselectionarenotappliedatthenextinsertion."> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>leafFormat</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>    The format whose set values indicate properties to undefine to LeafFlowElement objects in the selected range.
         </apiDesc></apiParam><apiParam><apiItemName>paragraphFormat</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>The format whose set values indicate properties to undefine to ParagraphElement objects in the selected range.
         </apiDesc></apiParam><apiParam><apiItemName>containerFormat</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>The format whose set values indicate properties to undefine to ContainerController objects in the selected range.
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiData>null</apiData><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc conref="IEditManager#clearFormat()KnownissueisthatundefinesofleafFormatvalueswithapointselectionarenotappliedatthenextinsertion."> 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:createDiv"><apiName>createDiv</apiName><shortdesc conref="IEditManager#createDiv()"> </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.elements:DivElement</apiOperationClassifier><apiDesc>The new DivElement that was created.
         
         </apiDesc></apiReturn><apiParam><apiItemName>parent</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowGroupElement</apiOperationClassifier><apiData>null</apiData><apiDesc>   Specifies a parent element for the new DivElement.
         If <codeph>null</codeph> the new parent will be lowest level that contains the SelectionState.
         </apiDesc></apiParam><apiParam><apiItemName>format</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiData>null</apiData><apiDesc>   Formatting attributes to apply to the new DivElement.
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiData>null</apiData><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         </apiDesc></apiParam></apiOperationDef><apiDesc conref="IEditManager#createDiv()"> </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:createList"><apiName>createList</apiName><shortdesc conref="IEditManager#createList()"> </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.elements:ListElement</apiOperationClassifier><apiDesc>The new ListElement that was created.
         
         </apiDesc></apiReturn><apiParam><apiItemName>parent</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowGroupElement</apiOperationClassifier><apiData>null</apiData><apiDesc>Optionally specifies a parent element for the new ListElement.  
         If <codeph>null</codeph> the new parent will be lowest level that contains the SelectionState.
         </apiDesc></apiParam><apiParam><apiItemName>format</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiData>null</apiData><apiDesc>Formatting attributes to apply to the new ListElement.
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiData>null</apiData><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         </apiDesc></apiParam></apiOperationDef><apiDesc conref="IEditManager#createList()"> </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:createSubParagraphGroup"><apiName>createSubParagraphGroup</apiName><shortdesc conref="IEditManager#createSubParagraphGroup()"> </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.elements:SubParagraphGroupElement</apiOperationClassifier><apiDesc>The new SubParagraphGroupElement that was created.
         
         </apiDesc></apiReturn><apiParam><apiItemName>parent</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowGroupElement</apiOperationClassifier><apiData>null</apiData><apiDesc>Specifies a parent element for the new SubParagraphGroupElement element.
         If <codeph>null</codeph> the new parent will be lowest level that contains the SelectionState.
         </apiDesc></apiParam><apiParam><apiItemName>format</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiData>null</apiData><apiDesc>   Formatting attributes to apply to the new SubParagraphGroupElement
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiData>null</apiData><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         </apiDesc></apiParam></apiOperationDef><apiDesc conref="IEditManager#createSubParagraphGroup()"> </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:cutTextScrap"><apiName>cutTextScrap</apiName><shortdesc conref="IEditManager#cutTextScrap()"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.edit:TextScrap</apiOperationClassifier><apiDesc>The TextScrap that was cut.
         
         </apiDesc></apiReturn><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiData>null</apiData><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         </apiDesc></apiParam></apiOperationDef><apiDesc conref="IEditManager#cutTextScrap()"> 
		 </apiDesc><example conref="examples\EditManager_cutTextScrap.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.edit.xml#TextScrap"><linktext>flashx.textLayout.edit.TextScrap</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:deleteNextCharacter"><apiName>deleteNextCharacter</apiName><shortdesc conref="IEditManager#deleteNextCharacter()">
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiData>null</apiData><apiDesc>   specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc conref="IEditManager#deleteNextCharacter()">
		 </apiDesc><example conref="examples\EditManager_deleteNextCharacter.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:deleteNextWord"><apiName>deleteNextWord</apiName><shortdesc conref="IEditManager#deleteNextWord()"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiData>null</apiData><apiDesc>Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc conref="IEditManager#deleteNextWord()"> 
		 </apiDesc><example conref="examples\EditManager_deleteNextWord.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:deletePreviousCharacter"><apiName>deletePreviousCharacter</apiName><shortdesc conref="IEditManager#deletePreviousCharacter()">
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiData>null</apiData><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc conref="IEditManager#deletePreviousCharacter()">
		 </apiDesc><example conref="examples\EditManager_deletePreviousCharacter.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:deletePreviousWord"><apiName>deletePreviousWord</apiName><shortdesc conref="IEditManager#deletePreviousWord()"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiData>null</apiData><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc conref="IEditManager#deletePreviousWord()"> 
		 </apiDesc><example conref="examples\EditManager_deletePreviousWord.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:deleteText"><apiName>deleteText</apiName><shortdesc conref="IEditManager#deleteText()"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiData>null</apiData><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc conref="IEditManager#deleteText()"> 
		 </apiDesc><example conref="examples\EditManager_deleteText.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:doOperation"><apiName>doOperation</apiName><shortdesc conref="IEditManager#doOperation()"> 
		  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>operation</apiItemName><apiOperationClassifier>flashx.textLayout.operations:FlowOperation</apiOperationClassifier><apiDesc>a FlowOperation object
          
          </apiDesc></apiParam></apiOperationDef><apiDesc conref="IEditManager#doOperation()"> 
		  </apiDesc><example conref="examples\EditManager_doOperation.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:endCompositeOperation"><apiName>endCompositeOperation</apiName><shortdesc conref="IEditManager#endCompositeOperation()"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="IEditManager#endCompositeOperation()"> 
		 </apiDesc><example conref="examples\EditManager_beginCompositeOperation.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:insertInlineGraphic"><apiName>insertInlineGraphic</apiName><shortdesc conref="IEditManager#insertInlineGraphic()ReturnsthenewInlineGraphicElementthatwascreated."> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="+ 10.2" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.elements:InlineGraphicElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>source</apiItemName><apiType value="Object"/><apiDesc> Can be either a String interpreted as a uri, a Class interpreted as the class of an Embed DisplayObject, 
                          a DisplayObject instance or a URLRequest. 
          </apiDesc></apiParam><apiParam><apiItemName>width</apiItemName><apiType value="Object"/><apiDesc>  The width of the image to insert (number, percent, or 'auto').
          </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Object"/><apiDesc> The height of the image to insert (number, percent, or 'auto').
          </apiDesc></apiParam><apiParam><apiItemName>options</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>None supported.
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiData>null</apiData><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc conref="IEditManager#insertInlineGraphic()ReturnsthenewInlineGraphicElementthatwascreated."> 
		 </apiDesc><example conref="examples\EditManager_insertInlineGraphic.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.text.engine.TextRotation.xml"><linktext>flash.text.engine.TextRotation</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:insertText"><apiName>insertText</apiName><shortdesc conref="IEditManager#insertText()"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiDesc>       The string to insert.
         </apiDesc></apiParam><apiParam><apiItemName>origOperationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiData>null</apiData><apiDesc>   Specifies the text in the flow to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc conref="IEditManager#insertText()"> 
		 </apiDesc><example conref="examples\EditManager_insertText.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:modifyInlineGraphic"><apiName>modifyInlineGraphic</apiName><shortdesc conref="IEditManager#modifyInlineGraphic()"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>source</apiItemName><apiType value="Object"/><apiDesc> Can be either a String interpreted as a uri, a Class interpreted as the class of an Embed DisplayObject, 
                          a DisplayObject instance or a URLRequest. 
          </apiDesc></apiParam><apiParam><apiItemName>width</apiItemName><apiType value="Object"/><apiDesc>  The new width for the image (number or percent).
          </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Object"/><apiDesc> The new height for the image (number or percent).
          </apiDesc></apiParam><apiParam><apiItemName>options</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>None supported.
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiData>null</apiData><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc conref="IEditManager#modifyInlineGraphic()"> 
		 </apiDesc><example conref="examples\EditManager_modifyInlineGraphic.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:moveChildren"><apiName>moveChildren</apiName><shortdesc conref="IEditManager#moveChildren()"> </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>source</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowGroupElement</apiOperationClassifier><apiDesc>   The orginal parent of the elements to be moved.
         </apiDesc></apiParam><apiParam><apiItemName>sourceIndex</apiItemName><apiType value="int"/><apiDesc>  The child index within the source of the first element to be moved.
         </apiDesc></apiParam><apiParam><apiItemName>numChildren</apiItemName><apiType value="int"/><apiDesc>  The number of children being moved.
         </apiDesc></apiParam><apiParam><apiItemName>destination</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowGroupElement</apiOperationClassifier><apiDesc>  The new parent of elements after move.
         </apiDesc></apiParam><apiParam><apiItemName>destinationIndex</apiItemName><apiType value="int"/><apiDesc> The child index within the destination to where elements are moved to.
         </apiDesc></apiParam><apiParam><apiItemName>selectionState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiData>null</apiData><apiDesc>   Specifies the text to which this operation applies, and to which selection returns to upon undo.  
         If <codeph>null</codeph>, the operation applies to the current selection.  If there is no current selection, this parameter must be non-null.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc conref="IEditManager#moveChildren()"> </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:overwriteText"><apiName>overwriteText</apiName><shortdesc conref="IEditManager#overwriteText()"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiDesc>The string to insert.
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiData>null</apiData><apiDesc>Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc conref="IEditManager#overwriteText()"> 
		 </apiDesc><example conref="examples\EditManager_overwriteText.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:pasteTextScrap"><apiName>pasteTextScrap</apiName><shortdesc conref="IEditManager#pasteTextScrap()"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>scrapToPaste</apiItemName><apiOperationClassifier>flashx.textLayout.edit:TextScrap</apiOperationClassifier><apiDesc> The TextScrap to paste.
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiData>null</apiData><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc conref="IEditManager#pasteTextScrap()"> 
		 </apiDesc><example conref="examples\EditManager_pasteTextScrap.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.edit.xml#TextScrap"><linktext>flashx.textLayout.edit.TextScrap</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:redo"><apiName>redo</apiName><shortdesc conref="IEditManager#redo()"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="IEditManager#redo()"> 
		 </apiDesc><example conref="examples\EditManager_redo.as"/></apiOperationDetail><related-links><link href="flashx.undo.xml#IUndoManager/redo()"><linktext>flashx.undo.IUndoManager.redo()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:splitElement"><apiName>splitElement</apiName><shortdesc conref="IEditManager#splitElement()"> </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.elements:FlowGroupElement</apiOperationClassifier><apiDesc>The new paragraph that was created.
         
         </apiDesc></apiReturn><apiParam><apiItemName>target</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowGroupElement</apiOperationClassifier><apiDesc> The element to be split.
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiData>null</apiData><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         </apiDesc></apiParam></apiOperationDef><apiDesc conref="IEditManager#splitElement()"> </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:splitParagraph"><apiName>splitParagraph</apiName><shortdesc conref="IEditManager#splitParagraph()"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.elements:ParagraphElement</apiOperationClassifier><apiDesc>The new paragraph that was created.
         
         </apiDesc></apiReturn><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiData>null</apiData><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc conref="IEditManager#splitParagraph()"> 
		 </apiDesc><example conref="examples\EditManager_splitParagraph.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:undo"><apiName>undo</apiName><shortdesc conref="IEditManager#undo()"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="IEditManager#undo()"> 
		 </apiDesc><example conref="examples\EditManager_undo.as"/></apiOperationDetail><related-links><link href="flashx.undo.xml#IUndoManager/undo()"><linktext>flashx.undo.IUndoManager.undo()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:updateAllControllers"><apiName>updateAllControllers</apiName><shortdesc conref="IEditManager.updateAllControllers"> </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="IEditManager.updateAllControllers"> </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.edit:EditManager:overwriteMode"><apiName>overwriteMode</apiName><shortdesc> 
		 Indicates whether overwrite mode is on or off.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiData>false</apiData><apiType value="Boolean"/></apiValueDef><apiDesc> 
		 Indicates whether overwrite mode is on or off.
		 
		 <p>If <codeph>true</codeph>, then a keystroke overwrites the character following the cursor.
		 If <codeph>false</codeph>, then a keystroke is inserted at the cursor location.</p> 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:EditManager:allowDelayedOperations:get"><apiName>allowDelayedOperations</apiName><shortdesc conref="IEditManager#allowDelayedOperations()"> </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="IEditManager#allowDelayedOperations()"> </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:EditManager:delayUpdates:get"><apiName>delayUpdates</apiName><shortdesc conref="IEditManager.delayUpdates">
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="IEditManager.delayUpdates">
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:EditManager:undoManager:get"><apiName>undoManager</apiName><shortdesc>  
		 The IUndoManager assigned to this edit manager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.undo:IUndoManager</apiValueClassifier></apiValueDef><apiDesc>  
		 The IUndoManager assigned to this edit manager.
		 
		 <p>To allow edits to be undone (and redone), pass an IUndoManager instance to the EditManager
		 constructor. The undo manager maintains a stack of operations that have been executed, and it can 
		 undo or redo individual operations. </p>
		 
		 <p><b>Note:</b> If the TextFlow is modified directly (not via
		 calls to the EditManager, but directly via calls to the managed FlowElement objects), then the EditManager
		 clears the undo stack to prevent the stack from getting out of sync with the current state.</p>
		 
	 	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.edit:IInteractionEventHandler"><apiName>IInteractionEventHandler</apiName><shortdesc>
	 The IInteractionEventHandler interface defines the event handler functions that
	 are handled by a Text Layout Framework selection or edit manager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 The IInteractionEventHandler interface defines the event handler functions that
	 are handled by a Text Layout Framework selection or edit manager.
	 
	 </apiDesc></apiClassifierDetail><apiOperation id="flashx.textLayout.edit:IInteractionEventHandler:flashx.textLayout.edit:IInteractionEventHandler:activateHandler"><apiName>activateHandler</apiName><shortdesc> 
		 Processes an activate event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc> 
		 Processes an activate event.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IInteractionEventHandler:flashx.textLayout.edit:IInteractionEventHandler:deactivateHandler"><apiName>deactivateHandler</apiName><shortdesc> 
		 Processes a deactivate event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc> 
		 Processes a deactivate event.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IInteractionEventHandler:flashx.textLayout.edit:IInteractionEventHandler:editHandler"><apiName>editHandler</apiName><shortdesc> 
		 Processes an edit event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc> 
		 Processes an edit event.
		 
		 <p>Edit events are dispatched for cut, copy, paste, and selectAll commands.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IInteractionEventHandler:flashx.textLayout.edit:IInteractionEventHandler:focusChangeHandler"><apiName>focusChangeHandler</apiName><shortdesc> 
		 Processes a focusChange event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/></apiParam></apiOperationDef><apiDesc> 
		 Processes a focusChange event.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IInteractionEventHandler:flashx.textLayout.edit:IInteractionEventHandler:focusInHandler"><apiName>focusInHandler</apiName><shortdesc> 
		 Processes a focusIn event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/></apiParam></apiOperationDef><apiDesc> 
		 Processes a focusIn event.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IInteractionEventHandler:flashx.textLayout.edit:IInteractionEventHandler:focusOutHandler"><apiName>focusOutHandler</apiName><shortdesc> 
		 Processes a focusOut event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/></apiParam></apiOperationDef><apiDesc> 
		 Processes a focusOut event.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IInteractionEventHandler:flashx.textLayout.edit:IInteractionEventHandler:imeStartCompositionHandler"><apiName>imeStartCompositionHandler</apiName><shortdesc> 
		 Processes an imeStartComposition event
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:IMEEvent"/></apiParam></apiOperationDef><apiDesc> 
		 Processes an imeStartComposition event
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IInteractionEventHandler:flashx.textLayout.edit:IInteractionEventHandler:keyDownHandler"><apiName>keyDownHandler</apiName><shortdesc> 
		Processes a keyDown event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:KeyboardEvent"/></apiParam></apiOperationDef><apiDesc> 
		Processes a keyDown event.
		 
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IInteractionEventHandler:flashx.textLayout.edit:IInteractionEventHandler:keyFocusChangeHandler"><apiName>keyFocusChangeHandler</apiName><shortdesc> 
		Processes a keyFocusChange event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/></apiParam></apiOperationDef><apiDesc> 
		Processes a keyFocusChange event.
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IInteractionEventHandler:flashx.textLayout.edit:IInteractionEventHandler:keyUpHandler"><apiName>keyUpHandler</apiName><shortdesc> 
		Processes a keyUp event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:KeyboardEvent"/></apiParam></apiOperationDef><apiDesc> 
		Processes a keyUp event.
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IInteractionEventHandler:flashx.textLayout.edit:IInteractionEventHandler:menuSelectHandler"><apiName>menuSelectHandler</apiName><shortdesc> 
		 Processes a menuSelect event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:ContextMenuEvent"/></apiParam></apiOperationDef><apiDesc> 
		 Processes a menuSelect event.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IInteractionEventHandler:flashx.textLayout.edit:IInteractionEventHandler:mouseDoubleClickHandler"><apiName>mouseDoubleClickHandler</apiName><shortdesc> 
		 Processes a mouseDoubleClick event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/></apiParam></apiOperationDef><apiDesc> 
		 Processes a mouseDoubleClick event.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IInteractionEventHandler:flashx.textLayout.edit:IInteractionEventHandler:mouseDownHandler"><apiName>mouseDownHandler</apiName><shortdesc> 
		 Processes a mouseDown event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/></apiParam></apiOperationDef><apiDesc> 
		 Processes a mouseDown event.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IInteractionEventHandler:flashx.textLayout.edit:IInteractionEventHandler:mouseMoveHandler"><apiName>mouseMoveHandler</apiName><shortdesc> 
		 Processes a mouseMove event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/></apiParam></apiOperationDef><apiDesc> 
		 Processes a mouseMove event.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IInteractionEventHandler:flashx.textLayout.edit:IInteractionEventHandler:mouseOutHandler"><apiName>mouseOutHandler</apiName><shortdesc> 
		 Processes a mouseOut event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/></apiParam></apiOperationDef><apiDesc> 
		 Processes a mouseOut event.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IInteractionEventHandler:flashx.textLayout.edit:IInteractionEventHandler:mouseOverHandler"><apiName>mouseOverHandler</apiName><shortdesc> 
		 Processes a mouseOver event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/></apiParam></apiOperationDef><apiDesc> 
		 Processes a mouseOver event.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IInteractionEventHandler:flashx.textLayout.edit:IInteractionEventHandler:mouseUpHandler"><apiName>mouseUpHandler</apiName><shortdesc> 
		 Processes a mouseUp event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/></apiParam></apiOperationDef><apiDesc> 
		 Processes a mouseUp event.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IInteractionEventHandler:flashx.textLayout.edit:IInteractionEventHandler:mouseWheelHandler"><apiName>mouseWheelHandler</apiName><shortdesc> 
		 Processes a mouseWheel event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/></apiParam></apiOperationDef><apiDesc> 
		 Processes a mouseWheel event.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IInteractionEventHandler:flashx.textLayout.edit:IInteractionEventHandler:softKeyboardActivatingHandler"><apiName>softKeyboardActivatingHandler</apiName><shortdesc> 
		 Processes an softKeyboardActivating event
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc> 
		 Processes an softKeyboardActivating event
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IInteractionEventHandler:flashx.textLayout.edit:IInteractionEventHandler:textInputHandler"><apiName>textInputHandler</apiName><shortdesc> 
		 Processes a TextEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:TextEvent"/></apiParam></apiOperationDef><apiDesc> 
		 Processes a TextEvent.
		 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="flashx.textLayout.edit:SelectionFormat"><apiName>SelectionFormat</apiName><shortdesc>
	 The SelectionFormat class defines the properties of a selection highlight.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The SelectionFormat class defines the properties of a selection highlight.
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.edit.xml#ISelectionManager"><linktext>flashx.textLayout.edit.ISelectionManager</linktext></link><link href="flashx.textLayout.edit.xml#SelectionManager"><linktext>flashx.textLayout.edit.SelectionManager</linktext></link></related-links><apiConstructor id="flashx.textLayout.edit:SelectionFormat:SelectionFormat"><apiName>SelectionFormat</apiName><shortdesc> 
		 Creates a SelectionFormat object with the specified properties.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>rangeColor</apiItemName><apiType value="uint"/><apiData>0xffffff</apiData><apiDesc>The color for drawing the highlight.
		 </apiDesc></apiParam><apiParam><apiItemName>rangeAlpha</apiItemName><apiType value="Number"/><apiData>1.0</apiData><apiDesc>The transparency value for drawing the highlight. Valid values are between 0
		 (completely transparent) and 1 (completely opaque, which is the default).
		 </apiDesc></apiParam><apiParam><apiItemName>rangeBlendMode</apiItemName><apiType value="String"/><apiData>difference</apiData><apiDesc>The blend mode for drawing the highlight. Use constants defined in the BlendMode class
		 to set this parameter.
		 </apiDesc></apiParam><apiParam><apiItemName>pointColor</apiItemName><apiType value="uint"/><apiData>0xffffff</apiData><apiDesc>The color for the drawing cursor.
		 </apiDesc></apiParam><apiParam><apiItemName>pointAlpha</apiItemName><apiType value="Number"/><apiData>1.0</apiData><apiDesc>The transparency value for drawing the cursor. Valid values are between 0
		 (completely transparent) and 1 (completely opaque, which is the default).
		 </apiDesc></apiParam><apiParam><apiItemName>pointBlendMode</apiItemName><apiType value="String"/><apiData>difference</apiData><apiDesc>The blend mode for drawing the cursor. Use constants defined in the BlendMode class
		 to set this parameter.
		 </apiDesc></apiParam><apiParam><apiItemName>pointBlinkRate</apiItemName><apiType value="Number"/><apiData>500</apiData><apiDesc>The rate at which the cursor blinks, in milliseconds.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Creates a SelectionFormat object with the specified properties.
		 
		 <p>A SelectionFormat created with the default values will use black for
		 the highlight colors, 1.0 for the alphas, and BlendMode.DIFFERENCE for the blending modes.
		 The cursor blink rate is 500 milliseconds.</p>
		 
		 <p>Setting the <codeph>pointAlpha</codeph> and <codeph>rangeAlpha</codeph> properties to zero disables selection highlighting.</p>
		 
		 <p>Non-zero blink rate is only used when an EditManager is attached to the TextFlow.</p>
		 
		 </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.display.BlendMode.xml"><linktext>flash.display.BlendMode</linktext></link><link href="flashx.textLayout.edit.xml#SelectionFormat/pointAlpha"><linktext>pointAlpha</linktext></link><link href="flashx.textLayout.edit.xml#SelectionFormat/rangeAlpha"><linktext>rangeAlpha</linktext></link></related-links></apiConstructor><apiOperation id="flashx.textLayout.edit:SelectionFormat:equals"><apiName>equals</apiName><shortdesc>
		 Determines whether this SelectionFormat object has the same property values
		 as another SelectionFormat object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph>, if the property values are identical; <codeph>false</codeph>, otherwise.
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>selectionFormat</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionFormat</apiOperationClassifier><apiDesc>the SelectionFormat to compare against.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Determines whether this SelectionFormat object has the same property values
		 as another SelectionFormat object.
		  
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.edit:SelectionFormat:pointAlpha:get"><apiName>pointAlpha</apiName><shortdesc>
		 The alpha for drawing the cursor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 The alpha for drawing the cursor. Valid values are between 0
		 (completely transparent) and 1 (completely opaque, which is the default).
		 
		 <p>Setting the <codeph>pointAlpha</codeph> and <codeph>rangeAlpha</codeph> properties to zero disables selection highlighting.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.edit.xml#SelectionFormat/rangeAlpha"><linktext>rangeAlpha</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.edit:SelectionFormat:pointBlendMode:get"><apiName>pointBlendMode</apiName><shortdesc>
		 The blend mode for drawing the cursor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
		 The blend mode for drawing the cursor.
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.display.BlendMode.xml"><linktext>flash.display.BlendMode</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.edit:SelectionFormat:pointBlinkRate:get"><apiName>pointBlinkRate</apiName><shortdesc>
		 The rate at which the cursor blinks, in milliseconds.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 The rate at which the cursor blinks, in milliseconds.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:SelectionFormat:pointColor:get"><apiName>pointColor</apiName><shortdesc>
		 The color for drawing the cursor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="uint"/></apiValueDef><apiDesc>
		 The color for drawing the cursor.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:SelectionFormat:rangeAlpha:get"><apiName>rangeAlpha</apiName><shortdesc>
		 The alpha for drawing the highlight of a range selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 The alpha for drawing the highlight of a range selection. Valid values are between 0
		 (completely transparent) and 1 (completely opaque, which is the default).
		 
		 <p>Setting the <codeph>pointAlpha</codeph> and <codeph>rangeAlpha</codeph> properties to zero disables selection highlighting.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.edit.xml#SelectionFormat/pointAlpha"><linktext>pointAlpha</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.edit:SelectionFormat:rangeBlendMode:get"><apiName>rangeBlendMode</apiName><shortdesc>
		 The blending mode for drawing the highlight of a range selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
		 The blending mode for drawing the highlight of a range selection. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.display.BlendMode.xml"><linktext>flash.display.BlendMode</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.edit:SelectionFormat:rangeColor:get"><apiName>rangeColor</apiName><shortdesc>
		 The color for drawing the highlight of a range selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="uint"/></apiValueDef><apiDesc>
		 The color for drawing the highlight of a range selection. 
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.edit:TextClipboard"><apiName>TextClipboard</apiName><shortdesc>
	 The TextClipboard class copies and pastes TextScrap objects to and from the system clipboard.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The TextClipboard class copies and pastes TextScrap objects to and from the system clipboard.
	 
	 <p>When you copy a TextScrap to the TextClipboard, the information is copied to the
	 system clipboard in two clipboard formats. One format is an XML string expressing the copied 
	 TextScrap object in Text Layout Markup syntax. This clipboard object uses the format name: 
	 "TEXT_LAYOUT_MARKUP". The second format is a plain-text string, which uses the standard 
	 Clipboard.TEXT_FORMAT name.</p>
	 
	 <p>The methods of the TextClipboard class are static functions, you do not need to
	 create an instance of TextClipboard.</p>  
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="flash.desktop.Clipboard.xml"><linktext>flash.desktop.Clipboard</linktext></link></related-links><apiOperation id="flashx.textLayout.edit:TextClipboard:getContents"><apiName>getContents</apiName><shortdesc>
		 Gets any text on the system clipboard as a TextScrap object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiOperationClassifier>flashx.textLayout.edit:TextScrap</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Gets any text on the system clipboard as a TextScrap object.
		  
		 <p>If the "TEXT_LAYOUT_MARKUP" format is available, this method converts the formatted
		 string into a TextScrap and returns it. Otherwise, if the Clipboard.TEXT_Format is available,
		 this method converts the plain-text string into a TextScrap. If neither clipboard format
		 is available, this method returns <codeph>null</codeph>.</p>
		 
		 <p>Flash Player requires that the <codeph>getContents()</codeph> method be called in a paste event handler. In AIR, 
		 this restriction only applies to content outside of the application security sandbox.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#Event/PASTE"><linktext>flash.events.Event.PASTE</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.edit:TextClipboard:setContents"><apiName>setContents</apiName><shortdesc>
		 Puts a TextScrap onto the system clipboard.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>textScrap</apiItemName><apiOperationClassifier>flashx.textLayout.edit:TextScrap</apiOperationClassifier><apiDesc>The TextScrap to paste into the clipboard.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Puts a TextScrap onto the system clipboard.  
		 
		 <p>The TextScrap is placed onto the system clipboard as both a Text Layout Markup
		 representation and a plain text representation.</p>
		 
		 <p>Flash Player requires a user event (such as a key press or mouse click) before 
		 calling <codeph>setContents()</codeph>. In AIR, this restriction only applies to content outside of 
		 the application security sandbox. </p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#Event/COPY"><linktext>flash.events.Event.COPY</linktext></link><link href="" invalidHref="flash.events.xml#Event/CUT"><linktext>flash.events.Event.CUT</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="flashx.textLayout.edit:EditingMode"><apiName>EditingMode</apiName><shortdesc> 
	 The EditingMode class defines constants used with EditManager class to represent the 
	 read, select, and edit permissions of a document.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 The EditingMode class defines constants used with EditManager class to represent the 
	 read, select, and edit permissions of a document.
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.edit.xml#EditManager"><linktext>flashx.textLayout.edit.EditManager</linktext></link></related-links><apiValue id="flashx.textLayout.edit:EditingMode:READ_ONLY"><apiName>READ_ONLY</apiName><shortdesc> 
		 The document is read-only.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>readOnly</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		 The document is read-only.
		 
		 <p>Neither selection nor editing is allowed.</p> 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:EditingMode:READ_SELECT"><apiName>READ_SELECT</apiName><shortdesc> 
		 The text in the document can be selected and copied, but not edited.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>readSelect</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		 The text in the document can be selected and copied, but not edited. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:EditingMode:READ_WRITE"><apiName>READ_WRITE</apiName><shortdesc> 
		 The document can be edited.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>readWrite</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		 The document can be edited.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage><apiPackage id="flashx.textLayout.elements"><apiName>flashx.textLayout.elements</apiName><apiDetail/><apiClassifier id="flashx.textLayout.elements:SubParagraphGroupElementBase"><apiName>SubParagraphGroupElementBase</apiName><shortdesc> 
	 The SubParagraphGroupElementBase class groups FlowLeafElements together.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.elements:FlowGroupElement</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 The SubParagraphGroupElementBase class groups FlowLeafElements together. A SubParagraphGroupElementBase is a child of a 
	 ParagraphElement object and it can contain one or more FlowLeafElement objects as children.
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#FlowLeafElement"><linktext>FlowLeafElement</linktext></link><link href="flashx.textLayout.elements.xml#LinkElement"><linktext>LinkElement</linktext></link><link href="flashx.textLayout.elements.xml#ParagraphElement"><linktext>ParagraphElement</linktext></link><link href="flashx.textLayout.elements.xml#TCYElement"><linktext>TCYElement</linktext></link></related-links><apiConstructor id="flashx.textLayout.elements:SubParagraphGroupElementBase:SubParagraphGroupElementBase"><apiName>SubParagraphGroupElementBase</apiName><shortdesc> Constructor - creates a new SubParagraphGroupElementBase instance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> Constructor - creates a new SubParagraphGroupElementBase instance.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.elements:IConfiguration"><apiName>IConfiguration</apiName><shortdesc> Read-only interface to a configuration object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc> Read-only interface to a configuration object.  Used by TextFlow to guarantee it has an unchangeable 
	 configuration once its constructed.
	 </apiDesc></apiClassifierDetail><apiOperation id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:clone"><apiName>clone</apiName><shortdesc> Creates a writeable clone of the IConfiguration object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.elements:Configuration</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> Creates a writeable clone of the IConfiguration object.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:cursorFunction:get"><apiName>cursorFunction</apiName><shortdesc> Specifies the callback used for custom cursor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Function"/></apiValueDef><apiDesc> Specifies the callback used for custom cursor.
		 The callback takes a <codeph>String</codeph> object, string is cursor name and returns the value to
		 be used in MouseCursor.cursor.
		 
		 This callback provides the user to customize the cursor
		 
		 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:defaultLinkActiveFormat:get"><apiName>defaultLinkActiveFormat</apiName><shortdesc> 
		Specifies the active character format attributes that initially apply for all links (LinkElement objects) in the text 
		flow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		Specifies the active character format attributes that initially apply for all links (LinkElement objects) in the text 
		flow. These are defaults for new LinkElement objects that don't specify values for these attributes. 
		
		<p>Default is <codeph>null</codeph>.</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/linkActiveFormat"><linktext>FlowElement.linkActiveFormat</linktext></link><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>ITextLayoutFormat</linktext></link><link href="flashx.textLayout.elements.xml#LinkElement"><linktext>LinkElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:defaultLinkHoverFormat:get"><apiName>defaultLinkHoverFormat</apiName><shortdesc> 
		Specifies the initial character format attributes that apply to a link (LinkElement) in the text flow when
		the cursor hovers over it.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		Specifies the initial character format attributes that apply to a link (LinkElement) in the text flow when
		the cursor hovers over it. These are defaults for new LinkElement objects that don't specify values
		for these attributes.
		
		<p>Default is <codeph>null</codeph>.</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/linkHoverFormat"><linktext>FlowElement.linkHoverFormat</linktext></link><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>ITextLayoutFormat</linktext></link><link href="flashx.textLayout.elements.xml#LinkElement"><linktext>LinkElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:defaultLinkNormalFormat:get"><apiName>defaultLinkNormalFormat</apiName><shortdesc> 
		Specifies the initial link attributes for all LinkElement objects in the text flow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		Specifies the initial link attributes for all LinkElement objects in the text flow. These are default
		values for new LinkElement objects that don't specify values for these attributes.
		
		The default normal format displays the link in blue with underlining.
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/linkNormalFormat"><linktext>FlowElement.linkNormalFormat</linktext></link><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>ITextLayoutFormat</linktext></link><link href="flashx.textLayout.elements.xml#LinkElement"><linktext>LinkElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:defaultListMarkerFormat:get"><apiName>defaultListMarkerFormat</apiName><shortdesc> 
		 Specifies the active character format attributes that initially apply for all ListItems in the text 
		 flow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.formats:IListMarkerFormat</apiValueClassifier></apiValueDef><apiDesc> 
		 Specifies the active character format attributes that initially apply for all ListItems in the text 
		 flow. These are defaults for new ListItemElements objects that don't specify values for these attributes. 
		 
		 <p>Default is <codeph>null</codeph>.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/linkActiveFormat"><linktext>FlowElement.linkActiveFormat</linktext></link><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>ITextLayoutFormat</linktext></link><link href="flashx.textLayout.elements.xml#LinkElement"><linktext>LinkElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:enableAccessibility:get"><apiName>enableAccessibility</apiName><shortdesc> 
		Specifies whether accessibility support is turned on or not.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc> 
		Specifies whether accessibility support is turned on or not.  If <codeph>true</codeph>, screen readers can read the TextFlow contents.
		
		<p>Default value is <codeph>false</codeph>.</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:flowComposerClass:get"><apiName>flowComposerClass</apiName><shortdesc> Specifies the type of flow composer to attach to a new TextFlow object by default.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc> Specifies the type of flow composer to attach to a new TextFlow object by default. Default value is StandardFlowComposer.
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#StandardFlowComposer"><linktext>StandardFlowComposer</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:focusedSelectionFormat:get"><apiName>focusedSelectionFormat</apiName><shortdesc> 
		The initial selection format (SelectionFormat) for a text flow (TextFlow) when its window has focus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.edit:SelectionFormat</apiValueClassifier></apiValueDef><apiDesc> 
		The initial selection format (SelectionFormat) for a text flow (TextFlow) when its window has focus. 
		Text Layout Framework uses <codeph>focusedSelectionFormat</codeph> to draw the selection when the window is active and one of 
		the containers in the TextFlow has focus. You can override this format using 
		<codeph>SelectionManager.focusedSelectionFormat</codeph>, if desired.
		
		<p>The SelectionFormat class specifies the default values, which invert the color of the text and its background.</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.edit.xml#SelectionFormat"><linktext>SelectionFormat</linktext></link><link href="flashx.textLayout.edit.xml#SelectionManager/focusedSelectionFormat"><linktext>SelectionManager.focusedSelectionFormat</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:inactiveSelectionFormat:get"><apiName>inactiveSelectionFormat</apiName><shortdesc> 
		The initial selection format (SelectionFormat) for a text flow (TextFlow) when its window is inactive.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.edit:SelectionFormat</apiValueClassifier></apiValueDef><apiDesc> 
		The initial selection format (SelectionFormat) for a text flow (TextFlow) when its window is inactive. Text Layout Framework uses 
		<codeph>inactiveSelectionFormat</codeph> for drawing the selection when the window is inactive. You can override 
		this format using <codeph>SelectionManager.inactiveSelectionFormat</codeph>, if desired.
		
		<p>If you do not override <codeph>unfocusedSelectionFormat</codeph> the SelectionFormat values used are:</p> 
		<ul>
		  <li><codeph>color = 0xffffff</codeph> (white)</li>
		  <li><codeph>alpha = 0</codeph></li>
		  <li><codeph>blendMode = flash.display.BlendMode.DIFFERENCE</codeph></li>
		</ul>
		<p>The result is no selection is displayed.</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.edit.xml#SelectionFormat"><linktext>SelectionFormat</linktext></link><link href="flashx.textLayout.edit.xml#SelectionManager/inactiveSelectionFormat"><linktext>SelectionManager.inactiveSelectionFormat</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:inlineGraphicResolverFunction:get"><apiName>inlineGraphicResolverFunction</apiName><shortdesc> Specifies the callback used for resolving an inline graphic element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Function"/></apiValueDef><apiDesc> Specifies the callback used for resolving an inline graphic element.
		The callback takes a <codeph>flashx.textLayout.elements.InlineGraphicElement</codeph> object and returns
		the value to be used as the element's <codeph>flashx.textLayout.elements.InlineGraphicElement#source</codeph>.
		
		This callback provides the mechanism to delay providing an inline graphic element's source until just before it is composed.
		<p><b>Note:</b> this callback will be invoked only if a 
		placeholder source of String type is already set. Moreover, it may be invoked
		multiple times. </p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElement"><linktext>InlineGraphicElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:manageEnterKey:get"><apiName>manageEnterKey</apiName><shortdesc> 
		Specifies whether the Enter / Return key is entered as text by Text Layout Framework, to split a paragraph for example,
		or the client code handles it.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc> 
		Specifies whether the Enter / Return key is entered as text by Text Layout Framework, to split a paragraph for example,
		or the client code handles it. The client code might handle it by committing a form that has a default button 
		for that purpose, for example. 
		
		<p>Default value is <codeph>true</codeph>.</p>
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:manageTabKey:get"><apiName>manageTabKey</apiName><shortdesc> 
		Specifies whether the TAB key is entered as text by Text Layout Framework, or Flash Player or AIR handles it and 
		turns it into a tabbed panel event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc> 
		Specifies whether the TAB key is entered as text by Text Layout Framework, or Flash Player or AIR handles it and 
		turns it into a tabbed panel event. 
		
		<p>Default value is <codeph>false</codeph>.</p>
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:overflowPolicy:get"><apiName>overflowPolicy</apiName><shortdesc> 
		Policy used for deciding whether the last line of a container fits in the container, or whether it overflows.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc> 
		Policy used for deciding whether the last line of a container fits in the container, or whether it overflows.
		Use the constants of the OverflowPolicy class to set this property.
		
		<p>Default value is OverflowPolicy.FIT_DESCENDERS, which fits the line in the composition area if the area
		from the top to the baseline fits.</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#OverflowPolicy"><linktext>OverflowPolicy</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:releaseLineCreationData:get"><apiName>releaseLineCreationData</apiName><shortdesc> Requests that the process of composing text release line creation data after composing each paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc> Requests that the process of composing text release line creation data after composing each paragraph.  
		This request saves memory but slows down the composing process.
		
		<p>Default value is <codeph>false</codeph>.</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#StandardFlowComposer"><linktext>StandardFlowComposer</linktext></link><link href="" invalidHref="flash.text.engine.xml#TextBlock/releaseLineCreationData()"><linktext>TextBlock.releaseLineCreationData()</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:scrollDragDelay:get"><apiName>scrollDragDelay</apiName><shortdesc> 
		Specifies a timed delay between one scroll and the next to prevent scrolling from going 
		too fast.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> 
		Specifies a timed delay between one scroll and the next to prevent scrolling from going 
		too fast. This value specifies what the delay is in milliseconds. The default value is 35.
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:scrollDragPixels:get"><apiName>scrollDragPixels</apiName><shortdesc> Specifies the default number of pixels to scroll when the user initiates auto scrolling by dragging 
		the selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> Specifies the default number of pixels to scroll when the user initiates auto scrolling by dragging 
		the selection. Default value is 20.
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:scrollMouseWheelMultiplier:get"><apiName>scrollMouseWheelMultiplier</apiName><shortdesc> Specifies the default number of pixels to scroll for Mouse wheel events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> Specifies the default number of pixels to scroll for Mouse wheel events. Default value is 20.
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:scrollPagePercentage:get"><apiName>scrollPagePercentage</apiName><shortdesc>
		Specifies the default percentage of the text flow to scroll for page scrolls.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		Specifies the default percentage of the text flow to scroll for page scrolls. Default value is
		7.0 / 8.0, or .875.
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:textFlowInitialFormat:get"><apiName>textFlowInitialFormat</apiName><shortdesc> 
		Specifies the initial format TextLayoutFormat configuration for a text flow (TextFlow object).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		Specifies the initial format TextLayoutFormat configuration for a text flow (TextFlow object).
		
		<p>Default is <codeph>null</codeph>.</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>ITextLayoutFormat</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:unfocusedSelectionFormat:get"><apiName>unfocusedSelectionFormat</apiName><shortdesc> 
		The initial selection format that Text Layout Framework uses to draw the selection when the window is active but none of the containers
		in the TextFlow have focus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.edit:SelectionFormat</apiValueClassifier></apiValueDef><apiDesc> 
		The initial selection format that Text Layout Framework uses to draw the selection when the window is active but none of the containers
		in the TextFlow have focus. You can override this format using <codeph>SelectionManager.unfocusedSelectionFormat</codeph>, if desired.
		
		<p>If you do not override <codeph>unfocusedSelectionFormat</codeph> the SelectionFormat values used are:</p>
		
		<ul>
		  <li><codeph>color = 0xffffff</codeph> (white)</li>
		  <li><codeph>alpha = 0</codeph></li>
		  <li><codeph>blendMode = flash.display.BlendMode.DIFFERENCE</codeph></li>
		</ul>
		<p>The result is no selection is displayed.</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.edit.xml#SelectionFormat"><linktext>SelectionFormat</linktext></link><link href="flashx.textLayout.edit.xml#SelectionManager/unfocusedSelectionFormat"><linktext>SelectionManager.unfocusedSelectionFormat</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:ContainerFormattedElement"><apiName>ContainerFormattedElement</apiName><shortdesc> 
	ContainerFormattedElement is the root class for all container-level block elements, such as DivElement
	and TextFlow objects.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.elements:ParagraphFormattedElement</apiBaseClassifier></apiClassifierDef><apiDesc> 
	ContainerFormattedElement is the root class for all container-level block elements, such as DivElement
	and TextFlow objects. Container-level block elements are grouping elements for other FlowElement objects.
	
	</apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#DivElement"><linktext>DivElement</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links></apiClassifier><apiClassifier id="flashx.textLayout.elements:InlineGraphicElementStatus"><apiName>InlineGraphicElementStatus</apiName><shortdesc> The InlineGraphicElementStatus class defines a set of constants for checking the value of
     InlineGraphicElement.status.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> The InlineGraphicElementStatus class defines a set of constants for checking the value of
     <codeph>InlineGraphicElement.status</codeph>.
     
     </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElement/status"><linktext>InlineGraphicElement.status</linktext></link></related-links><apiValue id="flashx.textLayout.elements:InlineGraphicElementStatus:ERROR"><apiName>ERROR</apiName><shortdesc> An error occurred during loading of a referenced graphic.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>error</apiData><apiType value="String"/></apiValueDef><apiDesc> An error occurred during loading of a referenced graphic. 
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:InlineGraphicElementStatus:LOADING"><apiName>LOADING</apiName><shortdesc> Load has been initiated (but not completed) on a graphic element that is a URL.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>loading</apiData><apiType value="String"/></apiValueDef><apiDesc> Load has been initiated (but not completed) on a graphic element that is a URL.  
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:InlineGraphicElementStatus:LOAD_PENDING"><apiName>LOAD_PENDING</apiName><shortdesc> Graphic element is an URL that has not been loaded.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>loadPending</apiData><apiType value="String"/></apiValueDef><apiDesc> Graphic element is an URL that has not been loaded.  
    	 
    	 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:InlineGraphicElementStatus:READY"><apiName>READY</apiName><shortdesc> Graphic is completely loaded and properly sized.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ready</apiData><apiType value="String"/></apiValueDef><apiDesc> Graphic is completely loaded and properly sized. 
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:InlineGraphicElementStatus:SIZE_PENDING"><apiName>SIZE_PENDING</apiName><shortdesc> 
         Graphic element with auto or percentage width/height has completed loading but has not been recomposed.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>sizePending</apiData><apiType value="String"/></apiValueDef><apiDesc> 
         Graphic element with auto or percentage width/height has completed loading but has not been recomposed.  At the next 
         recompose the actual size of the graphic element is calculated. 
         
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:ParagraphElement"><apiName>ParagraphElement</apiName><shortdesc> 
	 The ParagraphElement class represents a paragraph in the text flow hierarchy.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flashx.textLayout.elements:ParagraphFormattedElement</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 The ParagraphElement class represents a paragraph in the text flow hierarchy. Its parent
	 is a ParagraphFormattedElement, and its children can include spans (SpanElement), images 
	 (inLineGraphicElement), links (LinkElement) and TCY (Tatechuuyoko - ta-tae-chu-yo-ko) elements (TCYElement). The 
	 paragraph text is stored in one or more SpanElement objects, which define ranges of text that share the same attributes. 
	 A TCYElement object defines a small run of Japanese text that runs perpendicular to the line, as in a horizontal run of text in a 
	 vertical line. A TCYElement can also contain multiple spans.
	 
	 </apiDesc><example conref="examples\ParagraphElementExample.as"/><example conref="examples\ParagraphElementExample2.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElement"><linktext>InlineGraphicElement</linktext></link><link href="flashx.textLayout.elements.xml#LinkElement"><linktext>LinkElement</linktext></link><link href="flashx.textLayout.elements.xml#SpanElement"><linktext>SpanElement</linktext></link><link href="flashx.textLayout.elements.xml#TCYElement"><linktext>TCYElement</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links><apiConstructor id="flashx.textLayout.elements:ParagraphElement:ParagraphElement"><apiName>ParagraphElement</apiName><shortdesc> Constructor - represents a paragraph in a text flow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> Constructor - represents a paragraph in a text flow. 
		
		</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flashx.textLayout.elements:ParagraphElement:tlf_internal:decInteractiveChildrenCount"><apiName>decInteractiveChildrenCount</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="tlf_internal"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:ParagraphElement:findNextAtomBoundary"><apiName>findNextAtomBoundary</apiName><shortdesc> 
		 Scans ahead from the supplied position to find the location
		 in the text of the next atom and returns the index.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>index in the text of the following atom
		 
		 </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>relativePosition</apiItemName><apiType value="int"/><apiDesc> position in the text to start from, counting from 0
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Scans ahead from the supplied position to find the location
		 in the text of the next atom and returns the index. The term atom refers to 
		 both graphic elements and characters (including groups of combining characters), the 
		 indivisible entities that make up a text line.
		 
		 </apiDesc><example conref="examples\ParagraphElement_findNextAtomBoundary.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.text.engine.TextLine.xml"><linktext>flash.text.engine.TextLine</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:ParagraphElement:findNextWordBoundary"><apiName>findNextWordBoundary</apiName><shortdesc> 
		 Returns the index of the next word boundary in the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>index in the text of the next word boundary
		 
		 </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>relativePosition</apiItemName><apiType value="int"/><apiDesc> position in the text to start from, counting from 0
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Returns the index of the next word boundary in the text.
		 
		 <p>Scans ahead from the supplied position to find the next position
		 in the text that starts or ends a word. </p>
		 
		 </apiDesc><example conref="examples\ParagraphElement_findNextWordBoundary.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:ParagraphElement:findPreviousAtomBoundary"><apiName>findPreviousAtomBoundary</apiName><shortdesc> 
		 Scans backward from the supplied position to find the location
		 in the text of the previous atom and returns the index.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>index in the text of the previous cluster
		 
		 </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>relativePosition</apiItemName><apiType value="int"/><apiDesc> position in the text to start from, counting from 0
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Scans backward from the supplied position to find the location
		 in the text of the previous atom and returns the index. The term atom refers to 
		 both graphic elements and characters (including groups of combining characters), the 
		 indivisible entities that make up a text line.
		 
		 </apiDesc><example conref="examples\ParagraphElement_findPreviousAtomBoundary.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.text.engine.TextLine.xml"><linktext>flash.text.engine.TextLine</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:ParagraphElement:findPreviousWordBoundary"><apiName>findPreviousWordBoundary</apiName><shortdesc> 
		 Returns the index of the previous word boundary in the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>index in the text of the previous word boundary
		 
		 </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>relativePosition</apiItemName><apiType value="int"/><apiDesc> position in the text to start from, counting from 0
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Returns the index of the previous word boundary in the text.
		 
		 <p>Scans backward from the supplied position to find the previous position
		 in the text that starts or ends a word. </p>
		 
		 </apiDesc><example conref="examples\ParagraphElement_findPreviousWordBoundary.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:ParagraphElement:getNextParagraph"><apiName>getNextParagraph</apiName><shortdesc> Returns the paragraph that follows this one, or null if there are no more paragraphs.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the next paragraph or null if there are no more paragraphs.
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:ParagraphElement</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> Returns the paragraph that follows this one, or null if there are no more paragraphs. 
		 
		 </apiDesc><example conref="examples\ParagraphElement_getNextParagraph.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#ParagraphElement/getPreviousParagraph()"><linktext>getPreviousParagraph()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:ParagraphElement:getPreviousParagraph"><apiName>getPreviousParagraph</apiName><shortdesc> Returns the paragraph that precedes this one, or null, if this paragraph is the first one 
		 in the TextFlow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.elements:ParagraphElement</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> Returns the paragraph that precedes this one, or null, if this paragraph is the first one 
		 in the TextFlow. 
		 
		 </apiDesc><example conref="examples\ParagraphElement_getPreviousParagraph.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#ParagraphElement/getNextParagraph()"><linktext>getNextParagraph()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:ParagraphElement:tlf_internal:hasInteractiveChildren"><apiName>hasInteractiveChildren</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="tlf_internal"/><apiReturn><apiType value="Boolean"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:ParagraphElement:tlf_internal:incInteractiveChildrenCount"><apiName>incInteractiveChildrenCount</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="tlf_internal"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.elements:ParagraphElement:tlf_internal:_interactiveChildrenCount:get"><apiName>_interactiveChildrenCount</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="tlf_internal"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:ParagraphFormattedElement"><apiName>ParagraphFormattedElement</apiName><shortdesc> The ParagraphFormattedElement class is an abstract base class for FlowElement classes that have paragraph properties.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.elements:FlowGroupElement</apiBaseClassifier></apiClassifierDef><apiDesc> The ParagraphFormattedElement class is an abstract base class for FlowElement classes that have paragraph properties.
	
	<p>You cannot create a ParagraphFormattedElement object directly. Invoking <codeph>new ParagraphFormattedElement()</codeph> 
	throws an error exception.</p> 
	
	</apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#ContainerFormattedElement"><linktext>ContainerFormattedElement</linktext></link><link href="flashx.textLayout.elements.xml#ParagraphElement"><linktext>ParagraphElement</linktext></link></related-links></apiClassifier><apiClassifier id="flashx.textLayout.elements:ListItemElement"><apiName>ListItemElement</apiName><shortdesc> 
	  ListItemElement is an item in a list.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flashx.textLayout.elements:ContainerFormattedElement</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 <p> ListItemElement is an item in a list. It most commonly contains one or more ParagraphElement objects, but could
	 also have children of type DivElement or ListElement. A ListItemElement always appears within a ListElement.</p>
	 
	 <p>A ListItemElement has automatically generated content that appears before the regular content of the list. This is called
	 the <i>marker</i>, and it is what visually distinguishes the list item. The listStyleType property governs how the marker
	 is generated and allows the user to control whether the list item is marked with a bullet, a number, or alphabetically.
	 The listStylePosition governs where the marker appears relative to the list item; specifically it may appear outside, in the 
	 margin of the list, or inside, beside the list item itself. The ListMarkerFormat defines the TextLayoutFormat of the marker
	 (by default this will be the same as the list item), as well as an optional suffix that goes at the end of the marker. For 
	 instance, for a numbered list, it is common to have a "." as a suffix that appears after the number. The ListMarkerFormat also
	 allows specification of text that goes at the start of the marker, and for numbered lists allows control over the numbering.</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#ParagraphElement"><linktext>ParagraphElement</linktext></link><link href="flashx.textLayout.formats.xml#ITextLayoutFormat/listStyleType"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStyleType</linktext></link><link href="flashx.textLayout.formats.xml#ITextLayoutFormat/listStylePosition"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStylePosition</linktext></link><link href="flashx.textLayout.formats.xml#ListMarkerFormat"><linktext>flashx.textLayout.formats.ListMarkerFormat</linktext></link></related-links></apiClassifier><apiClassifier id="flashx.textLayout.elements:LinkElement"><apiName>LinkElement</apiName><shortdesc> The LinkElement class defines a link to a URI (Universal Resource Identifier), which is executed when the user clicks it.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier>flashx.textLayout.elements:SubParagraphGroupElementBase</apiBaseClassifier></apiClassifierDef><apiDesc> The LinkElement class defines a link to a URI (Universal Resource Identifier), which is executed when the user clicks it.
	 The LinkElement class is a subclass of the SubParagraphGroupElementBase class and it can contain
	 one or more FlowElement objects, such as a SpanElement object that stores the link text. An empty
	 LinkElement, which does not contain a FlowElement object, is ignored. 
	 
	 <p>Normally when clicked the LinkElement will call the <codeph>flash.net.navigateToURL()</codeph> method.  A special URI scheme <codeph>event:</codeph>
	 is also supported.  This scheme will generate a TextFlow event that the user may listen to in order to execute AS3 code.  An example is included below.</p>
	 
	 <p>If you specify a target, it must be one of the following values:
	 <adobetable class="innertable">
	 
	 
	 
	 
	 
	 <tgroup cols="2"><thead><row><entry>Target value</entry><entry>description</entry></row></thead><tbody><row>
	   <entry>_self</entry>
	   <entry>Replaces the current HTML page. If it is in a frame or frameset, it will load within that frame. If it is
	       the full browser, it opens to replace the page from which it came.</entry>
	 </row><row>
	   <entry>_blank</entry>
	   <entry>Opens a new browser name with no name.</entry>
	 </row><row>
	   <entry>_parent</entry>
	   <entry>Replaces the HTML page from which it came.</entry>
	 </row><row>
	   <entry>_top</entry>
	   <entry>Loads in the current browser, replacing anything within it, such as a frameset.</entry>
	 </row></tbody></tgroup></adobetable>
	 </p>
	 
	 </apiDesc><example conref="examples\LinkElementExample.as"/><example conref="examples\LinkElementEventExample.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#LinkState"><linktext>LinkState</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement/linkActiveFormat"><linktext>FlowElement.linkActiveFormat</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement/linkHoverFormat"><linktext>FlowElement.linkHoverFormat</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement/linkNormalFormat"><linktext>FlowElement.linkNormalFormat</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links><adobeApiEvent id="flashx.textLayout.elements:LinkElement_flashx.textLayout.events.FlowElementMouseEvent.CLICK_click"><apiName>click</apiName><shortdesc> 
	 Dispatched when the link is clicked.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flashx.textLayout.events.FlowElementMouseEvent.CLICK</apiEventType><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> 
	 Dispatched when the link is clicked. 
	 Clients may override how the link handles the event by handling it themselves, and calling preventDefault().
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:LinkElement_flashx.textLayout.events.FlowElementMouseEvent.ROLL_OUT_rollOut"><apiName>rollOut</apiName><shortdesc> 
	 Dispatched when the mouse goes out of the link.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flashx.textLayout.events.FlowElementMouseEvent.ROLL_OUT</apiEventType><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> 
	 Dispatched when the mouse goes out of the link. 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:LinkElement_flashx.textLayout.events.FlowElementMouseEvent.ROLL_OVER_rollOver"><apiName>rollOver</apiName><shortdesc>
	 Dispatched when the mouse first enters the link.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flashx.textLayout.events.FlowElementMouseEvent.ROLL_OVER</apiEventType><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 Dispatched when the mouse first enters the link. 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:LinkElement_flashx.textLayout.events.FlowElementMouseEvent.MOUSE_MOVE_mouseMove"><apiName>mouseMove</apiName><shortdesc> 
	 Dispatched when the mouse passes over the link.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flashx.textLayout.events.FlowElementMouseEvent.MOUSE_MOVE</apiEventType><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> 
	 Dispatched when the mouse passes over the link. 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:LinkElement_flashx.textLayout.events.FlowElementMouseEvent.MOUSE_UP_mouseUp"><apiName>mouseUp</apiName><shortdesc> 
	 Dispatched when the mouse is released over a link.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flashx.textLayout.events.FlowElementMouseEvent.MOUSE_UP</apiEventType><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> 
	 Dispatched when the mouse is released over a link. 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:LinkElement_flashx.textLayout.events.FlowElementMouseEvent.MOUSE_DOWN_mouseDown"><apiName>mouseDown</apiName><shortdesc> 
	 Dispatched when the mouse is pressed down over a link.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flashx.textLayout.events.FlowElementMouseEvent.MOUSE_DOWN</apiEventType><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> 
	 Dispatched when the mouse is pressed down over a link.
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flashx.textLayout.elements:LinkElement:LinkElement"><apiName>LinkElement</apiName><shortdesc> Constructor - creates a new LinkElement instance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> Constructor - creates a new LinkElement instance.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flashx.textLayout.elements:LinkElement:addEventListener"><apiName>addEventListener</apiName><shortdesc conref="flash.events.IEventDispatcher#addEventListener()">
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>The type of event.
		 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc>The listener function that processes the event. This function must accept an event object 
		 as its only parameter and must return nothing, as this example shows:
		 <p><codeph>function(evt:Event):void</codeph></p>
		 The function can have any name.
		 </apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Determines whether the listener works in the capture phase or the target 
		 and bubbling phases. If <codeph>useCapture</codeph> is set to <codeph>true</codeph>, the  
		 listener processes the event only during the capture phase and not in the target or 
		 bubbling phase. If <codeph>useCapture</codeph> is <codeph>false</codeph>, the listener processes the event only
		 during the target or bubbling phase. To listen for the event in all three phases, call 
		 <codeph>addEventListener()</codeph> twice, once with <codeph>useCapture</codeph> set to <codeph>true</codeph>, 
		 then again with <codeph>useCapture</codeph> set to <codeph>false</codeph>.
		 </apiDesc></apiParam><apiParam><apiItemName>priority</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>	The priority level of the event listener. Priorities are designated by a 32-bit integer. 
		 					The higher the number, the higher the priority. All listeners with priority <i>n</i> 
		 					are processed before listeners of priority <i>n-1</i>. If two or more listeners share 
		 					the same priority, they are processed in the order in which they were added. The default priority is 0. 
		 </apiDesc></apiParam><apiParam><apiItemName>useWeakReference</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Determines whether the reference to the listener is strong or weak. A strong 
		 reference (the default) prevents your listener from being garbage-collected. A weak 
		 reference does not. <p>Class-level member functions are not subject to garbage 
		 collection, so you can set <codeph>useWeakReference</codeph> to <codeph>true</codeph> for 
		 class-level member functions without subjecting them to garbage collection. If you set
		 <codeph>useWeakReference</codeph> to <codeph>true</codeph> for a listener that is a nested inner 
		 function, the function will be garbge-collected and no longer persistent. If you create 
		 references to the inner function (save it in another variable) then it is not 
		 garbage-collected and stays persistent.</p>
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flash.events.IEventDispatcher#addEventListener()">
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:LinkElement:dispatchEvent"><apiName>dispatchEvent</apiName><shortdesc conref="flash.events.IEventDispatcher#dispatchEvent()">
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>evt</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc conref="flash.events.IEventDispatcher#dispatchEvent()">
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:LinkElement:hasEventListener"><apiName>hasEventListener</apiName><shortdesc conref="flash.events.IEventDispatcher#hasEventListener()">
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc conref="flash.events.IEventDispatcher#hasEventListener()">
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:LinkElement:removeEventListener"><apiName>removeEventListener</apiName><shortdesc conref="flash.events.IEventDispatcher#removeEventListener().">
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>The type of event.
		 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc>The listener object to remove.
		 </apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Specifies whether the listener was registered for the capture phase or the target and bubbling phases. If the listener was registered for both the capture phase and the target and bubbling phases, two calls to <codeph>removeEventListener()</codeph> are required to remove both: one call with <codeph>useCapture</codeph> set to <codeph>true</codeph>, and another call with <codeph>useCapture</codeph> set to <codeph>false</codeph>. 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flash.events.IEventDispatcher#removeEventListener().">
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:LinkElement:willTrigger"><apiName>willTrigger</apiName><shortdesc conref="flash.events.IEventDispatcher#willTrigger()">
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc conref="flash.events.IEventDispatcher#willTrigger()">
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.elements:LinkElement:href:get"><apiName>href</apiName><shortdesc>
		 The Uniform Resource Identifier (URI) associated with the LinkElement object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
		 The Uniform Resource Identifier (URI) associated with the LinkElement object.  The URI can be any URI 
		 supported by the <codeph>flash.net.navigateToURL()</codeph> method. This property maps
		 to the <codeph>request</codeph> parameter for that method.  
		 
		 The URI may also be of the form <codeph>event:eventType</codeph>.  When clicked the TextFlow will generate an event of type <codeph>eventType</codeph>.
		 
		 </apiDesc></apiValueDetail><related-links><link href="../../../flash/net/package.html#navigateToURL()"><linktext>flash.net.navigateToURL()</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:LinkElement:linkState:get"><apiName>linkState</apiName><shortdesc>
		 The current state of the link.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
		 The current state of the link.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#LinkState"><linktext>LinkState</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:LinkElement:target:get"><apiName>target</apiName><shortdesc>
		 The Target value associated with the LinkElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
		 The Target value associated with the LinkElement. Possible values are "_self", "_blank",
		 "_parent", and "_top". This value maps to the <codeph>window</codeph> parameter of the
		 <codeph>flash.net.navigateToURL()</codeph> method.
		 
		 </apiDesc></apiValueDetail><related-links><link href="../../../flash/net/package.html#navigateToURL()"><linktext>flash.net.navigateToURL()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:TCYElement"><apiName>TCYElement</apiName><shortdesc> 
	 The TCYElement (Tatechuuyoko - ta-tae-chu-yo-ko) class is a subclass of SubParagraphGroupElementBase that causes
	 text to draw horizontally within a vertical line.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flashx.textLayout.elements:SubParagraphGroupElementBase</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 The TCYElement (Tatechuuyoko - ta-tae-chu-yo-ko) class is a subclass of SubParagraphGroupElementBase that causes
	 text to draw horizontally within a vertical line.  Traditionally, it is used to make small
	 blocks of non-Japanese text or numbers, such as dates, more readable.  TCY can be applied to 
	 horizontal text, but has no effect on drawing style unless and until it is turned vertically.
	 
	 TCY blocks which contain no text will be removed from the text flow during the normalization process.
	 <p>
	 In the example below, the image on the right shows TCY applied to the number 57, while the
	 image on the left has no TCY formatting.</p>
	 <p><adobeimage alt="TCYElement" border="0" href="../../../images/textLayout_TCYElement.png"/>
	 </p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link><link href="flashx.textLayout.elements.xml#ParagraphElement"><linktext>ParagraphElement</linktext></link><link href="flashx.textLayout.elements.xml#SpanElement"><linktext>SpanElement</linktext></link></related-links><apiConstructor id="flashx.textLayout.elements:TCYElement:TCYElement"><apiName>TCYElement</apiName><shortdesc> Constructor - creates a new TCYElement instance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> Constructor - creates a new TCYElement instance.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.elements:SubParagraphGroupElement"><apiName>SubParagraphGroupElement</apiName><shortdesc> 
     The SubParagraphGroupElement is a grouping element for FlowLeafElements and other classes that extend SubParagraphGroupElementBase.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flashx.textLayout.elements:SubParagraphGroupElementBase</apiBaseClassifier></apiClassifierDef><apiDesc> 
     The SubParagraphGroupElement is a grouping element for FlowLeafElements and other classes that extend SubParagraphGroupElementBase.
	 
     </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#SubParagraphGroupElement"><linktext>flashx.textLayout.elements.SubParagraphGroupElement</linktext></link><link href="flashx.textLayout.elements.xml#SubParagraphGroupElementBase"><linktext>flashx.textLayout.elements.SubParagraphGroupElementBase</linktext></link><link href="flashx.textLayout.elements.xml#FlowLeafElement"><linktext>flashx.textLayout.elements.FlowLeafElement</linktext></link></related-links><apiConstructor id="flashx.textLayout.elements:SubParagraphGroupElement:SubParagraphGroupElement"><apiName>SubParagraphGroupElement</apiName><shortdesc> Constructor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> Constructor. 
         For information on using this class, see <xref href="http://blogs.adobe.com/tlf/2011/01/tlf-2-0-changes-subparagraphgroupelements-and-typename-applied-to-textfieldhtmlimporter-and-cssformatresolver.html">TLF 2.0 SubParagraphGroupElement and typeName</xref>.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.elements:IFormatResolver"><apiName>IFormatResolver</apiName><shortdesc> Interface to a format resolver.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc> Interface to a format resolver. An implementation allows you to attach a styling mechanism of your choosing, such as
	  Flex CSS styling and named styles, to a TextFlow.
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow/formatResolver"><linktext>TextFlow.formatResolver</linktext></link></related-links><apiOperation id="flashx.textLayout.elements:IFormatResolver:flashx.textLayout.elements:IFormatResolver:getResolverForNewFlow"><apiName>getResolverForNewFlow</apiName><shortdesc> Returns the format resolver when a TextFlow is copied.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the format resolver for the copy of the TextFlow.
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:IFormatResolver</apiOperationClassifier></apiReturn><apiParam><apiItemName>oldFlow</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier></apiParam><apiParam><apiItemName>newFlow</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier></apiParam></apiOperationDef><apiDesc> Returns the format resolver when a TextFlow is copied.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:IFormatResolver:flashx.textLayout.elements:IFormatResolver:invalidateAll"><apiName>invalidateAll</apiName><shortdesc> Invalidates any cached formatting information for a TextFlow so that formatting must be recomputed.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>textFlow</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier></apiParam></apiOperationDef><apiDesc> Invalidates any cached formatting information for a TextFlow so that formatting must be recomputed.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:IFormatResolver:flashx.textLayout.elements:IFormatResolver:invalidate"><apiName>invalidate</apiName><shortdesc> Invalidates cached formatting information on this element because, for example, the parent changed, 
		  or the id or the styleName changed or the typeName changed.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>target</apiItemName><apiType value="Object"/></apiParam></apiOperationDef><apiDesc> Invalidates cached formatting information on this element because, for example, the <codeph>parent</codeph> changed, 
		  or the <codeph>id</codeph> or the <codeph>styleName</codeph> changed or the <codeph>typeName</codeph> changed. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:IFormatResolver:flashx.textLayout.elements:IFormatResolver:resolveFormat"><apiName>resolveFormat</apiName><shortdesc> Given a FlowElement or ContainerController object, return any format settings for it.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>format settings for the specified object.
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier></apiReturn><apiParam><apiItemName>target</apiItemName><apiType value="Object"/></apiParam></apiOperationDef><apiDesc> Given a FlowElement or ContainerController object, return any format settings for it.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:IFormatResolver:flashx.textLayout.elements:IFormatResolver:resolveUserFormat"><apiName>resolveUserFormat</apiName><shortdesc> Given a FlowElement or ContainerController object and the name of a format property, return the format value
		 or undefined if the value is not found.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the value of the specified format for the specified object.
		 
		 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>target</apiItemName><apiType value="Object"/></apiParam><apiParam><apiItemName>userFormat</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc> Given a FlowElement or ContainerController object and the name of a format property, return the format value
		 or <codeph>undefined</codeph> if the value is not found.
		 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="flashx.textLayout.elements:TextFlow"><apiName>TextFlow</apiName><shortdesc>
	 The TextFlow class is responsible for managing all the text content of a story.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier>flashx.textLayout.elements:ContainerFormattedElement</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The TextFlow class is responsible for managing all the text content of a story. In TextLayout, text is stored in a 
	 hierarchical tree of elements. TextFlow is the root object of the element tree. All elements on the tree
	 derive from the base class, FlowElement. 
	 
	 <p>A TextFlow object can have ParagraphElement and DivElement objects as children. A div (DivElement object)
	 represents a group of paragraphs (ParagraphElement objects). A paragraph can have SpanElement, InlineGraphicElement, 
	 LinkElement, and TCYElement objects as children.</p>
	 
	 <p>A span (SpanElement) is a range of text in a paragraph that has the same attributes. An image 
	 (InlineGraphicElement) represents an arbitrary graphic that appears as a single character in a line of text. A 
	 LinkElement represents a hyperlink, or HTML <codeph>a</codeph> tag, and it can contain multiple spans. A TCYElement object
	 is used in Japanese text when there is a small run of text that appears perpendicular to the line, as in a horizontal
	 run within a vertical line. A TCYElement also can contain multiple spans.</p>
	 
	 <p>TextFlow also derives from the ContainerFormattedElement class, which is the root class for all container-level block 
	 elements.</p>
 	 <p>The following illustration shows the relationship of other elements, such as spans and paragraphs, to the TextFlow 
 	 object.</p>
 	 <p><adobeimage alt="example TextFlow hierarchy" href="../../../images/textLayout_textFlowHierarchy.gif"/></p>
 	 
 	 <p>Each TextFlow object has a corresponding Configuration object that allows you to specify initial character and 
 	 paragraph formats and the initial container format. It also allows you to specify attributes for selection, links, 
 	 focus, and scrolling. When you supply a Configuration object as parameter to the <codeph>TextFlow()</codeph>
 	 constructor, it creates a read-only snapshot that you can access through the <codeph>TextFlow.configuration</codeph>
 	 property. After creation, you can't change the TextFlow's configuration. If you do not specify a Configuration, you 
 	 can access the default configuration through the <codeph>TextFlow.defaultConfiguration</codeph> property.</p>
	 
	 </apiDesc><example conref="examples\TextFlowExample.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow/configuration"><linktext>configuration</linktext></link><link href="flashx.textLayout.elements.xml#IConfiguration"><linktext>IConfiguration</linktext></link><link href="flashx.textLayout.elements.xml#DivElement"><linktext>DivElement</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement"><linktext>FlowElement</linktext></link><link href="flashx.textLayout.elements.xml#FlowGroupElement"><linktext>FlowGroupElement</linktext></link><link href="flashx.textLayout.elements.xml#FlowLeafElement"><linktext>FlowLeafElement</linktext></link><link href="flashx.textLayout.compose.xml#IFlowComposer"><linktext>IFlowComposer</linktext></link><link href="flashx.textLayout.elements.xml#ParagraphElement"><linktext>ParagraphElement</linktext></link><link href="flashx.textLayout.elements.xml#SpanElement"><linktext>SpanElement</linktext></link></related-links><adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.UpdateCompleteEvent_updateComplete"><apiName>updateComplete</apiName><shortdesc> Dispatched by a TextFlow object each time a container has had new DisplayObjects added or updated as a result of composition.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.UpdateCompleteEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched by a TextFlow object each time a container has had new DisplayObjects added or updated as a result of composition.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.DamageEvent_damage"><apiName>damage</apiName><shortdesc> Dispatched by a TextFlow object each time it is damaged 
	 
	 You can use this event to find out that the TextFlow has changed, but do not access the TextFlow itself when this event 
	 is sent out.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.DamageEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched by a TextFlow object each time it is damaged 
	 
	 You can use this event to find out that the TextFlow has changed, but do not access the TextFlow itself when this event 
	 is sent out. This event is sent when TextFlow changes are partially complete, so it can be in an inconsistent state: 
	 some changes have been mad already, and other changes are still pending. Get the information you need from the event, and make 
	 required changes after control returns to your application.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.TextLayoutEvent_scroll"><apiName>scroll</apiName><shortdesc> Dispatched by a TextFlow object after text is scrolled within a controller container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.TextLayoutEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched by a TextFlow object after text is scrolled within a controller container.  
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.StatusChangeEvent_inlineGraphicStatusChanged"><apiName>inlineGraphicStatusChanged</apiName><shortdesc> Dispatched when a InlineGraphicElement is resized due to having width or height as auto or percent 
	 and the graphic has finished loading.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.StatusChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched when a InlineGraphicElement is resized due to having width or height as auto or percent 
	 and the graphic has finished loading. 
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.FlowElementMouseEvent_click"><apiName>click</apiName><shortdesc> Dispatched when any link is clicked.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched when any link is clicked. 
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.FlowElementMouseEvent_rollOut"><apiName>rollOut</apiName><shortdesc> Dispatched when the mouse goes out of any link.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched when the mouse goes out of any link. 
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.FlowElementMouseEvent_rollOver"><apiName>rollOver</apiName><shortdesc> Dispatched when the mouse first enters any link.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched when the mouse first enters any link. 
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.FlowElementMouseEvent_mouseMove"><apiName>mouseMove</apiName><shortdesc> Dispatched when the mouse passes over any link.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched when the mouse passes over any link. 
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.FlowElementMouseEvent_mouseUp"><apiName>mouseUp</apiName><shortdesc> Dispatched when the mouse is released over any link.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched when the mouse is released over any link. 
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.FlowElementMouseEvent_mouseDown"><apiName>mouseDown</apiName><shortdesc> Dispatched when the mouse is pressed down over any link.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched when the mouse is pressed down over any link. 
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.CompositionCompleteEvent_compositionComplete"><apiName>compositionComplete</apiName><shortdesc> Dispatched after every recompose.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.CompositionCompleteEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched after every recompose. 
	
	</apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.SelectionEvent_selectionChange"><apiName>selectionChange</apiName><shortdesc> Dispatched whenever the selection is changed.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.SelectionEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched whenever the selection is changed.  Primarily used to update selection-dependent user interface. 
	 It can also be used to alter the selection, but cannot be used to alter the TextFlow itself.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_COMPLETE_flowOperationComplete"><apiName>flowOperationComplete</apiName><shortdesc>
	 
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_COMPLETE</apiEventType><adobeApiEventClassifier>flashx.textLayout.events.FlowOperationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_END_flowOperationEnd"><apiName>flowOperationEnd</apiName><shortdesc>
	 
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_END</apiEventType><adobeApiEventClassifier>flashx.textLayout.events.FlowOperationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_BEGIN_flowOperationBegin"><apiName>flowOperationBegin</apiName><shortdesc>
	 
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_BEGIN</apiEventType><adobeApiEventClassifier>flashx.textLayout.events.FlowOperationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 
	  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flashx.textLayout.elements:TextFlow:TextFlow"><apiName>TextFlow</apiName><shortdesc> 
		 Constructor - creates a new TextFlow instance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>config</apiItemName><apiOperationClassifier>flashx.textLayout.elements:IConfiguration</apiOperationClassifier><apiData>null</apiData><apiDesc>Specifies the configuration to use for this TextFlow object. If it's null, use 
		 <codeph>TextFlow.defaultConfiguration</codeph> to access configuration values. 
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Constructor - creates a new TextFlow instance.
		 
		 <p>If you provide a <codeph>config</codeph> parameter, the contents of the Configuration object are copied and
		 you cannot make changes. You can access configuration settings, however, through the 
		 <codeph>configuration</codeph> property. If the <codeph>config</codeph> parameter is null, you can access the default
		 configuration settings through the <codeph>defaultConfiguration</codeph> property.</p> 
		 
		 <p>The Configuration object provides a mechanism for setting configurable default attributes on a TextFlow.  
		 While you can't make changes to the Configuration object, you can override default attributes, if necessary, 
		 by setting the attributes of TextFlow and its children.</p>
		 
		 </apiDesc></apiConstructorDetail><related-links><link href="flashx.textLayout.elements.xml#Configuration"><linktext>Configuration</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow/configuration"><linktext>configuration</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow/defaultConfiguration"><linktext>defaultConfiguration</linktext></link></related-links></apiConstructor><apiOperation id="flashx.textLayout.elements:TextFlow:addEventListener"><apiName>addEventListener</apiName><shortdesc conref="flash.events.IEventDispatcher#addEventListener()">
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam><apiParam><apiItemName>priority</apiItemName><apiType value="int"/><apiData>0</apiData></apiParam><apiParam><apiItemName>useWeakReference</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc conref="flash.events.IEventDispatcher#addEventListener()">
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:TextFlow:dispatchEvent"><apiName>dispatchEvent</apiName><shortdesc conref="flash.events.IEventDispatcher#dispatchEvent()">
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc conref="flash.events.IEventDispatcher#dispatchEvent()">
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:TextFlow:tlf_internal:getBackgroundManager"><apiName>getBackgroundManager</apiName><shortdesc> </shortdesc><prolog><asCustoms><private.>Returns the existing backgroundManager - creating it if it doesn't exist.  Use when adding backgrounds to draw.  </private.></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="tlf_internal"/><apiReturn><apiType value="flashx.textLayout.elements:BackgroundManager"/></apiReturn></apiOperationDef><apiDesc> </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:TextFlow:getElementByID"><apiName>getElementByID</apiName><shortdesc> Returns an element whose id property matches the idName parameter.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The element whose id matches <codeph>idName</codeph>.
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>idName</apiItemName><apiType value="String"/><apiDesc>The <codeph>id</codeph> value of the element to find.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Returns an element whose <codeph>id</codeph> property matches the <codeph>idName</codeph> parameter. Provides
		 the ability to apply a style based on the <codeph>id</codeph>. 
		 
		 <p>For example, the following line sets the style "color" to 0xFF0000 (red), for the
		 element having the <codeph>id</codeph> span1.</p>
		 
		 <codeblock rev="3.0">
		 textFlow.getElementByID("span1").setStyle("color", 0xFF0000);
		 </codeblock>
		 
		 <p><b>Note:</b> In the following code, <codeph>p.addChild(s)</codeph> <i>removes</i> <codeph>s</codeph> 
		 from its original parent and adds it to <codeph>p</codeph>, the new parent.</p>
		 
		 <codeblock rev="3.0">
		 var s:SpanElement = new SpanElement();
		 var p:ParagraphElement = new ParagraphElement();
		 ...
		 s = textFlow.getElementByID("span3") as SpanElement;
		 p.addChild(s);
		 textFlow.addChild(p);
		 </codeblock>
		 
		 </apiDesc><example conref="examples\TextFlow_getElementByIDExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/id"><linktext>FlowElement.id</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:TextFlow:getElementsByStyleName"><apiName>getElementsByStyleName</apiName><shortdesc> Returns all elements that have styleName set to styleNameValue.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>An array of the elements whose <codeph>styleName</codeph> value matches <codeph>styleNameValue</codeph>. For example,
		 all elements that have the style name "color".
		 
		 </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>styleNameValue</apiItemName><apiType value="String"/><apiDesc>The name of the style for which to find elements that have it set.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Returns all elements that have <codeph>styleName</codeph> set to <codeph>styleNameValue</codeph>.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/styleName"><linktext>FlowElement.styleName</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:TextFlow:getElementsByTypeName"><apiName>getElementsByTypeName</apiName><shortdesc> Returns all elements that have typeName set to typeNameValue.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>An array of the elements whose <codeph>typeName</codeph> value matches <codeph>typeNameValue</codeph>. For example,
		 all elements that have the type name "foo".
		 
		 </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>typeNameValue</apiItemName><apiType value="String"/><apiDesc>The name of the style for which to find elements that have it set.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Returns all elements that have <codeph>typeName</codeph> set to <codeph>typeNameValue</codeph>.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/styleName"><linktext>FlowElement.styleName</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:TextFlow:hasEventListener"><apiName>hasEventListener</apiName><shortdesc conref="flash.events.IEventDispatcher#hasEventListener()">
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc conref="flash.events.IEventDispatcher#hasEventListener()">
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:TextFlow:invalidateAllFormats"><apiName>invalidateAllFormats</apiName><shortdesc> Invalidates all formatting information for the TextFlow, forcing it to be recomputed.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> Invalidates all formatting information for the TextFlow, forcing it to be recomputed.
		 Call this method when styles have changed.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#IFormatResolver/invalidateAll()"><linktext>IFormatResolver.invalidateAll()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:TextFlow:removeEventListener"><apiName>removeEventListener</apiName><shortdesc conref="flash.events.IEventDispatcher#removeEventListener().">
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc conref="flash.events.IEventDispatcher#removeEventListener().">
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:TextFlow:willTrigger"><apiName>willTrigger</apiName><shortdesc conref="flash.events.IEventDispatcher#willTrigger()">
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc conref="flash.events.IEventDispatcher#willTrigger()">
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.elements:TextFlow:defaultConfiguration"><apiName>defaultConfiguration</apiName><shortdesc> Default configuration for all new TextFlow objects if the configuration is not specified.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiValueClassifier>flashx.textLayout.elements:Configuration</apiValueClassifier></apiValueDef><apiDesc> Default configuration for all new TextFlow objects if the configuration is not specified. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#Configuration"><linktext>Configuration</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:TextFlow:configuration:get"><apiName>configuration</apiName><shortdesc> 
		The Configuration object for this TextFlow object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:IConfiguration</apiValueClassifier></apiValueDef><apiDesc> 
		The Configuration object for this TextFlow object. The Configuration object specifies the initial character 
		and paragraph formats, the initial container format, and attributes for selection highlighting, 
		links, focus, and scrolling.
		
		<p>If you do not specify a Configuration object, Text Layout Framework uses a default Configuration object, which
		is referenced by the <codeph>defaultConfiguration</codeph> property.</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#Configuration"><linktext>Configuration</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow/defaultConfiguration"><linktext>defaultConfiguration</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:TextFlow:flowComposer:get"><apiName>flowComposer</apiName><shortdesc> Manages the containers for this element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.compose:IFlowComposer</apiValueClassifier></apiValueDef><apiDesc> Manages the containers for this element.
		 
		 <p>The TextLines that are created from the element appear as children of the container.
		 The flowComposer manages the containers, and as the text is edited it adds lines to and removes lines
		 from the containers. The flowComposer also keeps track of some critical attributes, such as the
		 width and height to compose to, whether scrolling is on, and so on.</p>
		 
		 <p>The container and <codeph>flowComposer</codeph> are closely related. If you reset <codeph>flowComposer</codeph>, 
		 the container is reset to the new flowComposer's container. Likewise if the container is reset, 
		 <codeph>flowComposer</codeph> is reset to the container's new flowComposer.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#IFlowComposer"><linktext>FlowComposer</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:TextFlow:formatResolver:get"><apiName>formatResolver</apiName><shortdesc> A callback function for resolving element styles.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.elements:IFormatResolver</apiValueClassifier></apiValueDef><apiDesc> A callback function for resolving element styles. You can use this to provide styling using CSS or 
		 named styles, for example. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#IFormatResolver"><linktext>IFormatResolver</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:TextFlow:generation:get"><apiName>generation</apiName><shortdesc> 
		The generation number for this TextFlow object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="uint"/></apiValueDef><apiDesc> 
		The generation number for this TextFlow object. The undo and redo operations use the generation number to validate that 
		it's legal to undo or redo an operation. The generation numbers must match. 
		
		<p>Each model change increments <codeph>generation</codeph> so if the generation number changes, you know the 
		TextFlow model has changed.</p>
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:TextFlow:hostFormat:get"><apiName>hostFormat</apiName><shortdesc> The TextLayoutFormat object for this TextFlow object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> The TextLayoutFormat object for this TextFlow object. This enables several optimizations for reusing 
		host formats. For example;
		
		<codeblock>
		textFlowA.hostFormat = textFlowB.hostFormat
		</codeblock>
		
		You must set format values before assigning the TextLayoutFormat object to <codeph>hostFormat</codeph>.
		For example, the following lines do <i>not</i> set the font size to 24 because
		the font size is set <i>after</i> the TextLayoutFormat object has been assigned to <codeph>hostFormat</codeph>.
		
		<codeblock>
		format = new TextLayoutFormat()
		textFlow.hostFormat = format
		format.fontSize = 24;
		</codeblock>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>ITextLayoutFormat</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:TextFlow:interactionManager:get"><apiName>interactionManager</apiName><shortdesc>
		 The InteractionManager associated with this TextFlow object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.edit:ISelectionManager</apiValueClassifier></apiValueDef><apiDesc>
		 The InteractionManager associated with this TextFlow object.
		 <p>Controls all selection and editing on the text. If the TextFlow is not selectable, 
		 the interactionManager is null. To make the TextFlow editable, assign a interactionManager
		 that is both an ISelectionManager and an IEditManager. To make a TextFlow that is read-only
		 and allows selection, assign a interactionManager that is an ISelectionManager only. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.edit.xml#ISelectionManager"><linktext>ISelectionManager</linktext></link><link href="flashx.textLayout.edit.xml#IEditManager"><linktext>IEditManager</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:OverflowPolicy"><apiName>OverflowPolicy</apiName><shortdesc>
	  The OverflowPolicy class defines a set of constants for the overflowPolicy property
	  of the IConfiguration class.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  The OverflowPolicy class defines a set of constants for the <codeph>overflowPolicy</codeph> property
	  of the IConfiguration class. This defines how the composer will treat lines at the end of the composition area.
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.elements:OverflowPolicy:FIT_ANY"><apiName>FIT_ANY</apiName><shortdesc> 
	 Fit the line in the composition area if any part of the line fits.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>fitAny</apiData><apiType value="String"/></apiValueDef><apiDesc> 
	 Fit the line in the composition area if any part of the line fits.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:OverflowPolicy:FIT_DESCENDERS"><apiName>FIT_DESCENDERS</apiName><shortdesc> 
	 Fit the line in the composition area if the area from the top to the baseline fits.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>fitDescenders</apiData><apiType value="String"/></apiValueDef><apiDesc> 
	 Fit the line in the composition area if the area from the top to the baseline fits.
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:BreakElement"><apiName>BreakElement</apiName><shortdesc> 
	The BreakElement class defines a line break, which provides for creating a line break in the text without 
	creating a new paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flashx.textLayout.elements:SpecialCharacterElement</apiBaseClassifier></apiClassifierDef><apiDesc> 
	The BreakElement class defines a line break, which provides for creating a line break in the text without 
	creating a new paragraph. It inserts a U+2028 character in the text of the paragraph.
	
	<p><b>Note</b>: This class exists primarily to support break  tags in MXML markup. To create line breaks, 
	you can add newline characters (\n) directly into the text like this:</p>
	
	<codeblock rev="3.0">
	spanElement1.text += '\n';
	</codeblock>
	
	In markup, either FXG, TEXT_LAYOUT_FORMAT or MXML, you can simply insert a  where you want the break.
	
	</apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#ParagraphElement"><linktext>ParagraphElement</linktext></link><link href="flashx.textLayout.elements.xml#SpanElement"><linktext>SpanElement</linktext></link></related-links><apiConstructor id="flashx.textLayout.elements:BreakElement:BreakElement"><apiName>BreakElement</apiName><shortdesc> Constructor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> Constructor. 
		
		</apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.elements:GlobalSettings"><apiName>GlobalSettings</apiName><shortdesc> Configuration that applies to all TextFlow objects.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> Configuration that applies to all TextFlow objects.
     </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.elements:GlobalSettings:enableSearch:get"><apiName>enableSearch</apiName><shortdesc> Controls whether the text will be visible to a search engine indexer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc> Controls whether the text will be visible to a search engine indexer. Defaults to <codeph>true</codeph>.
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:GlobalSettings:fontMapperFunction:get"><apiName>fontMapperFunction</apiName><shortdesc> 
        Specifies the callback used for font mapping.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc> 
        Specifies the callback used for font mapping.
        The callback takes a <codeph>flash.text.engine.FontDescription</codeph> object and updates it as needed.
        
        After setting a new font mapping callback, or changing the behavior of the exisiting font mapping callback, 
        the client must explicitly call <codeph>flashx.textLayout.elements.TextFlow.invalidateAllFormats</codeph> for each impacted text flow.
        This ensures that whenever a leaf element in the text flow is next recomposed, the FontDescription applied to it is recalculated, and the the callback is invoked. 
        
        </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontDescription.xml"><linktext>FontDescription</linktext></link><link href="" invalidHref="TextFlow.invalidateAllFormats.xml"><linktext>invalidateAllFormats</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:GlobalSettings:resolveFontLookupFunction:get"><apiName>resolveFontLookupFunction</apiName><shortdesc> 
         Specifies the callback used for changing the FontLookup based on swfcontext.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc> 
         Specifies the callback used for changing the FontLookup based on swfcontext.  The function will be called each time an ElementFormat is computed.
         It gives the client the opportunity to modify the FontLookup setting.  The function is called with two parameters an ISWFContext and an ITextLayoutFormat.
         It must return a valid FontLookup.
         
         </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#ISWFContext"><linktext>flashx.textLayout.compose.ISWFContext</linktext></link><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>flashx.textLayout.formats.ITextLayoutFormat</linktext></link><link href="" invalidHref="flash.text.engine.ElementFormat.xml"><linktext>flash.text.engine.ElementFormat</linktext></link><link href="" invalidHref="flash.text.engine.FontLookup.xml"><linktext>flash.text.engine.FontLookup</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:GlobalSettings:resourceStringFunction:get"><apiName>resourceStringFunction</apiName><shortdesc> Function that takes two parameters, a resource id and an optional array of parameters to substitute into the string.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc> Function that takes two parameters, a resource id and an optional array of parameters to substitute into the string.
         The string is of form "Content {0} more content {1}".  The parameters are read from the optional array and substituted for the bracketed substrings.
         TLF provides a default implementation with
         default strings.  Clients may replace this function with their own implementation for localization.
         
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:InlineGraphicElement"><apiName>InlineGraphicElement</apiName><shortdesc> The InlineGraphicElement class handles graphic objects that display inline in the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flashx.textLayout.elements:FlowLeafElement</apiBaseClassifier></apiClassifierDef><apiDesc> The InlineGraphicElement class handles graphic objects that display inline in the text. 
     
     <p>You can embed a graphic or any DisplayObject or specify a URl for the location of the graphic. 
     The <codeph>height</codeph> and <codeph>width</codeph> properties of InlineGraphicElement control the actual size 
     of the graphic to display.  These values also control how much space to allocate
     for the graphic in the TextLine object that contains the graphic.
     The <codeph>height</codeph> and <codeph>width</codeph> properties each can be one of:</p>
     <ol>
     <li>A number of pixels</li>
     <li>A percent of the measured size of the image</li>
     <li>The constant, "auto", which computes the size (Default value)</li>
     </ol>
     There are three properties, or accessors, pertaining to the width and height of a graphic:
     <ul>
     <li>The <codeph>width</codeph> and <codeph>height</codeph> properties</li>
     <li>The <codeph>measuredWidth</codeph> and <codeph>measuredHeight</codeph> properties, which are the width or height of the graphic at load time</li>
     <li>The <codeph>actualWidth</codeph> and <codeph>actualHeight</codeph> properties, which are the actual display and compose width and height of the graphic as computed from <codeph>width</codeph> or <codeph>height</codeph> and <codeph>measuredWidth</codeph> or <codeph>measuredHeight</codeph></li>
     </ul>
     <p>The values of the <codeph>actualWidth</codeph> and <codeph>actualHeight</codeph> properties are always zero until the graphic 
     is loaded.</p>
     
     <p>If <codeph>source</codeph> is specified as a URI, the graphic is loaded asynchronously. If it's a DisplayObject, TextLayout uses the <codeph>width</codeph> and 
     <codeph>height</codeph> at the time the graphic is set into the InlineGraphicElement object as <codeph>measuredHeight</codeph> and <codeph>measuredWidth</codeph>; 
     its width and height are read immediately.</p>
     <p><b>Notes</b>: For graphics that are loaded asynchronously the user must listen for a 
     StatusChangeEvent.INLINE_GRAPHIC_STATUS_CHANGE event on the TextFlow and call <codeph>IFlowComposer.updateAllControllers()</codeph> to have the 
     graphic appear. The value of <codeph>measuredWidth</codeph> and <codeph>measuredHeight</codeph> for graphics that are in the 
     process of loading is zero.</p>
     
     <p>Some inline graphics are animations or videos that possibly have audio. They begin to run the first time they are composed after they finish loading.  
     They don't stop running until the flowComposer on the TextFlow is set to null.  At that time they are stopped and unloaded.</p>
     
     The following restrictions apply to InLineGraphicElement objects:
     <ol>
      <li>On export of TLFMarkup, source is converted to a string. If the graphic element is 
          a class, the Text Layout Framework can't export it properly</li>.
      <li>When doing a copy/paste operation of an InlineGraphicElement, if source can't be 
          used to create a new InLineGraphicElement, it won't be pasted.  For example if 
          source is a DisplayObject, or if the graphic is set directly, it can't be 
          duplicated.  Best results are obtained if the source is the class of an embedded graphic 
          though that doesn't export/import.</li>
      <li>InLineGraphicElement objects work in the factory (TextFlowTextLineFactory) only if 
          the source is a class or if you explicitly set the graphic to a loaded graphic. 
          InlineGraphic objects that require delayed loads generally do not show up.</li>
     </ol>
     </apiDesc><example conref="examples\InlineGraphicElementExample.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElement/actualHeight"><linktext>actualHeight</linktext></link><link href="flashx.textLayout.elements.xml#InlineGraphicElement/actualWidth"><linktext>actualWidth</linktext></link><link href="" invalidHref="flash.display.DisplayObject.xml"><linktext>DisplayObject</linktext></link><link href="flashx.textLayout.compose.xml#IFlowComposer/updateAllControllers()"><linktext>flashx.textLayout.compose.IFlowComposer.updateAllControllers()</linktext></link><link href="flashx.textLayout.events.xml#StatusChangeEvent"><linktext>StatusChangeEvent</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links><apiConstructor id="flashx.textLayout.elements:InlineGraphicElement:InlineGraphicElement"><apiName>InlineGraphicElement</apiName><shortdesc> Constructor - create new InlineGraphicElement object
         
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> Constructor - create new InlineGraphicElement object
         
         </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flashx.textLayout.elements:InlineGraphicElement:actualHeight:get"><apiName>actualHeight</apiName><shortdesc> The actual height in effect.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> The actual height in effect. This is the display and compose height that's computed from the
        <codeph>height</codeph> and <codeph>measuredHeight</codeph> properties.
        
        <p>The values of the <codeph>actualHeight</codeph> property are computed according to the following table:</p>
        <adobetable class="innertable">
        
        
        
        
        <tgroup cols="2"><thead><row><entry>height property</entry><entry>actualHeight</entry></row></thead><tbody><row>
          <entry>auto</entry>
          <entry>measuredheight</entry>
        </row><row>
          <entry>h a Percent</entry>
          <entry>h percent of measuredheight</entry>
        </row><row>
          <entry>h a Number</entry>
          <entry>h</entry>
        </row></tbody></tgroup></adobetable>
        <p><b>Notes</b>: If the inline graphic is a DisplayObject, its width and height are read immmediately.
        If <codeph>measuredWidth</codeph> or <codeph>measuredHeight</codeph> are zero, then any auto calculations that would cause a divide by zero sets the result to zero.</p>
        
        </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElement/height"><linktext>height</linktext></link><link href="flashx.textLayout.elements.xml#InlineGraphicElement/measuredHeight"><linktext>measuredHeight</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:InlineGraphicElement:actualWidth:get"><apiName>actualWidth</apiName><shortdesc> The actual width in effect.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> The actual width in effect. This is the display and compose width that's computed from the
        <codeph>width</codeph> and <codeph>measuredWidth</codeph> properties.
        
        <p>The values of the <codeph>actualWidth</codeph>property are computed according to the 
        following table:</p>
        <adobetable class="innertable">
        
        
        
        
        <tgroup cols="2"><thead><row><entry>width property</entry><entry>actualWidth</entry></row></thead><tbody><row>
          <entry>auto</entry>
          <entry>measuredWidth</entry>
        </row><row>
          <entry>w a Percent</entry>
          <entry>w percent of measuredWidth</entry>
        </row><row>
          <entry>w a Number</entry>
          <entry>w</entry>
        </row></tbody></tgroup></adobetable>
        
        <p><b>Notes</b>: If the inline graphic is a DisplayObject, its width and height are read immediately.
        If <codeph>measuredWidth</codeph> or <codeph>measuredHeight</codeph> are zero, then any auto calculations that would cause a divide by zero sets the result to zero.</p>
        
        </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElement/measuredWidth"><linktext>measuredWidth</linktext></link><link href="flashx.textLayout.elements.xml#InlineGraphicElement/width"><linktext>width</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:InlineGraphicElement:float:get"><apiName>float</apiName><shortdesc> 
         Controls the placement of the graphic relative to the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
         
         </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc> 
         Controls the placement of the graphic relative to the text. It can be part of the line, or can be beside the line with the text 
         wrapped around it. 
         <p>Legal values are <codeph>flashx.textLayout.formats.Float.NONE</codeph>, <codeph>flashx.textLayout.formats.Float.LEFT</codeph>, 
         <codeph>flashx.textLayout.formats.Float.RIGHT</codeph>, <codeph>flashx.textLayout.formats.Float.START</codeph>, and <codeph>flashx.textLayout.formats.Float.END</codeph>.</p>
         <p>Default value is undefined indicating not set.</p>
         <p>If undefined will be treated as <codeph>Float.NONE</codeph>.</p>
         
         </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#Float"><linktext>flashx.textLayout.formats.Float</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:InlineGraphicElement:graphic:get"><apiName>graphic</apiName><shortdesc> The embedded graphic.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:DisplayObject"/></apiValueDef><apiDesc> The embedded graphic. 
        
        </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:InlineGraphicElement:height:get"><apiName>height</apiName><shortdesc> The height of the image.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
         
          </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc> The height of the image. May be 'auto', a number of pixels or a percent of the measured height. 
         
         <p>Legal values are flashx.textLayout.formats.FormatValue.AUTO and flashx.textLayout.formats.FormatValue.INHERIT.</p>
         <p>Legal values as a number are from 0 to 32000.</p>
         <p>Legal values as a percent are numbers from 0 to 1000000.</p>
         <p>Default value is undefined indicating not set.</p>
         <p>If undefined or "inherit" the InlineGraphicElement will use the default value of "auto".</p>
         
         </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElement/actualHeight"><linktext>actualHeight</linktext></link><link href="flashx.textLayout.elements.xml#InlineGraphicElement/measuredHeight"><linktext>measuredHeight</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:InlineGraphicElement:measuredHeight:get"><apiName>measuredHeight</apiName><shortdesc> The natural height of the graphic.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> The natural height of the graphic. This is the height of the graphic at load time.
        
        </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElement/actualHeight"><linktext>actualHeight</linktext></link><link href="flashx.textLayout.elements.xml#InlineGraphicElement/height"><linktext>height</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:InlineGraphicElement:measuredWidth:get"><apiName>measuredWidth</apiName><shortdesc> The natural width of the graphic.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> The natural width of the graphic. This is the width of the graphic at load time.
        
        </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElement/actualWidth"><linktext>actualWidth</linktext></link><link href="flashx.textLayout.elements.xml#InlineGraphicElement/width"><linktext>width</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:InlineGraphicElement:source:get"><apiName>source</apiName><shortdesc> Sets the source for the graphic.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc> Sets the source for the graphic. 
         
         The value can be either a String that is interpreted as a URI, a Class that's interpreted as the class of an 
         embeddded DisplayObject, a DisplayObject instance, or a URLRequest. Creates a DisplayObject and,
         if the InlineGraphicElement object is added into a ParagraphElement in a TextFlow object, causes it to appear
         inline in the text.
         
         </apiDesc><example conref="examples\InlineGraphicElement_sourceExample.as"/></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:InlineGraphicElement:status:get"><apiName>status</apiName><shortdesc> The current status of the image.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc> The current status of the image. On each status change the owning TextFlow sends a StatusChangeEvent.
         
         </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElementStatus"><linktext>flashx.textLayout.elements.InlineGraphicElementStatus</linktext></link><link href="flashx.textLayout.events.xml#StatusChangeEvent"><linktext>flashx.textLayout.events.StatusChangeEvent</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:InlineGraphicElement:width:get"><apiName>width</apiName><shortdesc> The width of the graphic.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
         
         </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc> The width of the graphic. The value can be 'auto', a number of pixels or a percent of the measured width of the image.
         
         <p>Legal values are flashx.textLayout.formats.FormatValue.AUTO and flashx.textLayout.formats.FormatValue.INHERIT.</p>
         <p>Legal values as a number are from 0 to 32000.</p>
         <p>Legal values as a percent are numbers from 0 to 1000000.</p>
         <p>Default value is undefined indicating not set.</p>
         <p>If undefined or "inherit" the InlineGraphicElement will use the default value of "auto".</p>
         
         </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElement/actualWidth"><linktext>actualWidth</linktext></link><link href="flashx.textLayout.elements.xml#InlineGraphicElement/measuredWidth"><linktext>measuredWidth</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:FlowLeafElement"><apiName>FlowLeafElement</apiName><shortdesc> Base class for FlowElements that appear at the lowest level of the flow hierarchy.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.elements:FlowElement</apiBaseClassifier></apiClassifierDef><apiDesc> Base class for FlowElements that appear at the lowest level of the flow hierarchy. FlowLeafElement objects have
	no children and include InlineGraphicElement objects and SpanElement objects.
	
	</apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElement"><linktext>InlineGraphicElement</linktext></link><link href="flashx.textLayout.elements.xml#SpanElement"><linktext>SpanElement</linktext></link></related-links><apiConstructor id="flashx.textLayout.elements:FlowLeafElement:FlowLeafElement"><apiName>FlowLeafElement</apiName><shortdesc> 
		 Base class - invoking new FlowLeafElement() throws an error exception.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> 
		 Base class - invoking new FlowLeafElement() throws an error exception. 
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flashx.textLayout.elements:FlowLeafElement:getComputedFontMetrics"><apiName>getComputedFontMetrics</apiName><shortdesc> Returns the FontMetrics object for the span.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>font metrics associated with the span
		 </apiDesc><apiType value="flash.text.engine:FontMetrics"/></apiReturn></apiOperationDef><apiDesc> Returns the FontMetrics object for the span. The properties of the FontMetrics object describe the 
		 emBox, strikethrough position, strikethrough thickness, underline position, 
		 and underline thickness for the specified font. 
		 
 		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.text.engine.FontMetrics.xml"><linktext>flash.text.engine.FontMetrics</linktext></link><link href="" invalidHref="flash.text.engine.xml#ElementFormat/getFontMetrics()"><linktext>flash.text.engine.ElementFormat.getFontMetrics()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowLeafElement:getNextLeaf"><apiName>getNextLeaf</apiName><shortdesc>
		 Returns the next FlowLeafElement object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>next FlowLeafElement or null if at the end
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowLeafElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>limitElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowGroupElement</apiOperationClassifier><apiData>null</apiData><apiDesc>Specifies FlowGroupElement on whose last leaf to stop looking. A value of null (default) 
		 	means search till no more elements.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the next FlowLeafElement object.  
		 
		 </apiDesc><example conref="examples\FlowLeafElement_getNextLeafExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowLeafElement:getPreviousLeaf"><apiName>getPreviousLeaf</apiName><shortdesc>
		 Returns the previous FlowLeafElement object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>previous leafElement or null if at the end
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowLeafElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>limitElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowGroupElement</apiOperationClassifier><apiData>null</apiData><apiDesc>Specifies the FlowGroupElement on whose first leaf to stop looking.   null (default) means search till no more elements.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the previous FlowLeafElement object.  
		 
		 </apiDesc><example conref="examples\FlowLeafElement_getPreviousLeafExample.as"/></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.elements:FlowLeafElement:computedFormat:get"><apiName>computedFormat</apiName><shortdesc> 
		 The computed text format attributes that are in effect for this element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		 The computed text format attributes that are in effect for this element.
		 Takes into account the inheritance of attributes.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>flashx.textLayout.formats.ITextLayoutFormat</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowLeafElement:text:get"><apiName>text</apiName><shortdesc>
		 The text associated with the FlowLeafElement:
		 
		 The value for SpanElement subclass will be one character less than textLength if this is the last span in a ParagraphELement.
		 The value for BreakElement subclass is a U+2028
		 The value for TabElement subclass is a tab
		 The value for InlineGraphicElement subclass is U+FDEF
		 
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
		 The text associated with the FlowLeafElement:
		 <p><ul>
		 <li>The value for SpanElement subclass will be one character less than <codeph>textLength</codeph> if this is the last span in a ParagraphELement.</li>
		 <li>The value for BreakElement subclass is a U+2028</li>
		 <li>The value for TabElement subclass is a tab</li>
		 <li>The value for InlineGraphicElement subclass is U+FDEF</li>
		 </ul></p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#SpanElement/replaceText()"><linktext>flashx.textLayout.elements.SpanElement.replaceText()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:Configuration"><apiName>Configuration</apiName><shortdesc> 
	The Configuration class is a primary point of integration between the Text Layout Framework and an application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.elements:IConfiguration</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> 
	The Configuration class is a primary point of integration between the Text Layout Framework and an application. You can 
	include a Configuration object as a parameter to the <codeph>TextFlow()</codeph> constructor when you create a new TextFlow
	instance. It allows the application to initially control how the Text Layout Framework behaves.
	
	<p>The Configuration class allows you to specify initial, paragraph and container formats for the text flow 
	through the <codeph>textFlowInitialFormat</codeph> property. It also allows you to specify initial format attributes for links, selection,
	scrolling, and for handling the Tab and Enter keys.</p>
	
	</apiDesc><example conref="examples\ConfigurationExample.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>ITextLayoutFormat</linktext></link><link href="flashx.textLayout.edit.xml#SelectionFormat"><linktext>SelectionFormat</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links><apiConstructor id="flashx.textLayout.elements:Configuration:Configuration"><apiName>Configuration</apiName><shortdesc> Constructor - creates a default configuration.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>initializeWithDefaults</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Specifies whether to initialize the configuration with
		the default values. Default is <codeph>true</codeph>. If set to <codeph>false</codeph>, initializes
		without default values, thereby saving some objects. The <codeph>clone()</codeph> method sets this
		to <codeph>false</codeph> and copies the properties from the original object.
		
		</apiDesc></apiParam></apiConstructorDef><apiDesc> Constructor - creates a default configuration. 
		
		</apiDesc></apiConstructorDetail><related-links><link href="flashx.textLayout.edit.xml#SelectionFormat"><linktext>SelectionFormat</linktext></link><link href="flashx.textLayout.compose.xml#StandardFlowComposer"><linktext>StandardFlowComposer</linktext></link></related-links></apiConstructor><apiOperation id="flashx.textLayout.elements:Configuration:clone"><apiName>clone</apiName><shortdesc> Creates a clone of the Configuration object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.elements:Configuration</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> Creates a clone of the Configuration object.
		
		</apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.elements:Configuration:tlf_internal:hasTouchScreen"><apiName>hasTouchScreen</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="tlf_internal"/><apiStatic/><apiData>unknown</apiData><apiType value="Boolean"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:Configuration:cursorFunction:get"><apiName>cursorFunction</apiName><shortdesc conref="IConfiguration#cursorFunction"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc conref="IConfiguration#cursorFunction"> 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:Configuration:defaultLinkActiveFormat:get"><apiName>defaultLinkActiveFormat</apiName><shortdesc conref="IConfiguration#defaultLinkActiveFormat"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc conref="IConfiguration#defaultLinkActiveFormat"> 
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/linkActiveFormat"><linktext>FlowElement.linkActiveFormat</linktext></link><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>ITextLayoutFormat</linktext></link><link href="flashx.textLayout.elements.xml#LinkElement"><linktext>LinkElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:Configuration:defaultLinkHoverFormat:get"><apiName>defaultLinkHoverFormat</apiName><shortdesc conref="IConfiguration#defaultLinkHoverFormat"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc conref="IConfiguration#defaultLinkHoverFormat"> 
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/linkHoverFormat"><linktext>FlowElement.linkHoverFormat</linktext></link><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>ITextLayoutFormat</linktext></link><link href="flashx.textLayout.elements.xml#LinkElement"><linktext>LinkElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:Configuration:defaultLinkNormalFormat:get"><apiName>defaultLinkNormalFormat</apiName><shortdesc conref="IConfiguration#defaultLinkNormalFormat"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc conref="IConfiguration#defaultLinkNormalFormat"> 
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/linkNormalFormat"><linktext>FlowElement.linkNormalFormat</linktext></link><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>ITextLayoutFormat</linktext></link><link href="flashx.textLayout.elements.xml#LinkElement"><linktext>LinkElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:Configuration:defaultListMarkerFormat:get"><apiName>defaultListMarkerFormat</apiName><shortdesc conref="IConfiguration#defaultListMarkerFormat"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:IListMarkerFormat</apiValueClassifier></apiValueDef><apiDesc conref="IConfiguration#defaultListMarkerFormat"> 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/listMarkerFormat"><linktext>FlowElement.listMarkerFormat</linktext></link><link href="flashx.textLayout.formats.xml#IListMarkerFormat"><linktext>IListMarkerFormat</linktext></link><link href="flashx.textLayout.elements.xml#LinkElement"><linktext>LinkElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:Configuration:enableAccessibility:get"><apiName>enableAccessibility</apiName><shortdesc conref="IConfiguration#enableAccessibility"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="IConfiguration#enableAccessibility"> 
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:Configuration:flowComposerClass:get"><apiName>flowComposerClass</apiName><shortdesc conref="IConfiguration#flowComposerClass"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Class"/></apiValueDef><apiDesc conref="IConfiguration#flowComposerClass"> 
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#StandardFlowComposer"><linktext>StandardFlowComposer</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:Configuration:focusedSelectionFormat:get"><apiName>focusedSelectionFormat</apiName><shortdesc conref="IConfiguration#focusedSelectionFormat"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.edit:SelectionFormat</apiValueClassifier></apiValueDef><apiDesc conref="IConfiguration#focusedSelectionFormat"> 
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.edit.xml#SelectionFormat"><linktext>SelectionFormat</linktext></link><link href="flashx.textLayout.edit.xml#SelectionManager/focusedSelectionFormat"><linktext>SelectionManager.focusedSelectionFormat</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:Configuration:inactiveSelectionFormat:get"><apiName>inactiveSelectionFormat</apiName><shortdesc conref="IConfiguration#inactiveSelectionFormat"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.edit:SelectionFormat</apiValueClassifier></apiValueDef><apiDesc conref="IConfiguration#inactiveSelectionFormat"> 
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.edit.xml#SelectionFormat"><linktext>SelectionFormat</linktext></link><link href="flashx.textLayout.edit.xml#SelectionManager/inactiveSelectionFormat"><linktext>SelectionManager.inactiveSelectionFormat</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:Configuration:inlineGraphicResolverFunction:get"><apiName>inlineGraphicResolverFunction</apiName><shortdesc conref="IConfiguration#inlineGraphicResolverFunction"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc conref="IConfiguration#inlineGraphicResolverFunction"> 
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElement"><linktext>InlineGraphicElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:Configuration:manageEnterKey:get"><apiName>manageEnterKey</apiName><shortdesc conref="IConfiguration#manageEnterKey"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="IConfiguration#manageEnterKey"> 
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:Configuration:manageTabKey:get"><apiName>manageTabKey</apiName><shortdesc conref="IConfiguration#manageTabKey"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="IConfiguration#manageTabKey"> </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:Configuration:overflowPolicy:get"><apiName>overflowPolicy</apiName><shortdesc conref="IConfiguration#overflowPolicy"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="IConfiguration#overflowPolicy"> 
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#OverflowPolicy"><linktext>OverflowPolicy</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:Configuration:releaseLineCreationData:get"><apiName>releaseLineCreationData</apiName><shortdesc conref="IConfiguration#releaseLineCreationData"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="IConfiguration#releaseLineCreationData"> 
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#StandardFlowComposer"><linktext>StandardFlowComposer</linktext></link><link href="" invalidHref="flash.text.engine.xml#TextBlock/releaseLineCreationData()"><linktext>TextBlock.releaseLineCreationData()</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:Configuration:scrollDragDelay:get"><apiName>scrollDragDelay</apiName><shortdesc conref="IConfiguration#scrollDragDelay"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="IConfiguration#scrollDragDelay"> 
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:Configuration:scrollDragPixels:get"><apiName>scrollDragPixels</apiName><shortdesc conref="IConfiguration#scrollDragPixels"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="IConfiguration#scrollDragPixels"> 
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:Configuration:scrollMouseWheelMultiplier:get"><apiName>scrollMouseWheelMultiplier</apiName><shortdesc conref="IConfiguration#scrollMouseWheelMultiplier"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="IConfiguration#scrollMouseWheelMultiplier"> 
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:Configuration:scrollPagePercentage:get"><apiName>scrollPagePercentage</apiName><shortdesc conref="IConfiguration#scrollPagePercentage">
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="IConfiguration#scrollPagePercentage">
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:Configuration:textFlowInitialFormat:get"><apiName>textFlowInitialFormat</apiName><shortdesc conref="IConfiguration#textFlowInitialFormat"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc conref="IConfiguration#textFlowInitialFormat"> 
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>ITextLayoutFormat</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:Configuration:unfocusedSelectionFormat:get"><apiName>unfocusedSelectionFormat</apiName><shortdesc conref="IConfiguration#unfocusedSelectionFormat"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.edit:SelectionFormat</apiValueClassifier></apiValueDef><apiDesc conref="IConfiguration#unfocusedSelectionFormat"> 
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.edit.xml#SelectionFormat"><linktext>SelectionFormat</linktext></link><link href="flashx.textLayout.edit.xml#SelectionManager/unfocusedSelectionFormat"><linktext>SelectionManager.unfocusedSelectionFormat</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:FlowGroupElement"><apiName>FlowGroupElement</apiName><shortdesc> 
	 The FlowGroupElement class is the base class for FlowElement objects that can have an array of children.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.elements:FlowElement</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 The FlowGroupElement class is the base class for FlowElement objects that can have an array of children. These classes include
	 TextFlow, ParagraphElement, DivElement, and LinkElement.
	 
	 <p>You cannot create a FlowGroupElement object directly. Invoking <codeph>new FlowGroupElement()</codeph> throws an error 
 	 exception.</p>
 	 
 	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#DivElement"><linktext>DivElement</linktext></link><link href="flashx.textLayout.elements.xml#LinkElement"><linktext>LinkElement</linktext></link><link href="flashx.textLayout.elements.xml#ParagraphElement"><linktext>ParagraphElement</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links><apiConstructor id="flashx.textLayout.elements:FlowGroupElement:FlowGroupElement"><apiName>FlowGroupElement</apiName><shortdesc> Base class - invoking new FlowGroupElement() throws an error exception.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> Base class - invoking <codeph>new FlowGroupElement()</codeph> throws an error exception.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flashx.textLayout.elements:FlowGroupElement:addChildAt"><apiName>addChildAt</apiName><shortdesc> 
		 Adds a child FlowElement object at the specified index position.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>The <codeph>index</codeph> is out of range.
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>the added child FlowElement 
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="uint"/><apiDesc>index of the position at which to add the child element, with the first position being 0.
		 </apiDesc></apiParam><apiParam><apiItemName>child</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>The child element to add.
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Adds a child FlowElement object at the specified index position.
		 
		 </apiDesc><example conref="examples\FlowGroupElement_addChildAtExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowGroupElement:addChild"><apiName>addChild</apiName><shortdesc> 
		 Appends a child FlowElement object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the added child FlowElement 
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>child</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>The child element to append.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Appends a child FlowElement object. The new child is added to the end of the children list.
		 
		 </apiDesc><example conref="examples\FlowGroupElement_addChildExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowGroupElement:findChildIndexAtPosition"><apiName>findChildIndexAtPosition</apiName><shortdesc>
		 Given a relative text position, find the index of the first child FlowElement that contains the relative position.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>index of first child element containing <codeph>relativePosition</codeph>
		 
		 </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>relativePosition</apiItemName><apiType value="int"/><apiDesc>	the position relative to this element
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Given a relative text position, find the index of the first child FlowElement that contains the relative position. 
		 More than one child can contain relative position because of zero length FlowElements.
		  
		 <p>Examine the children to find the FlowElement that contains the relative position. The supplied relative position 
		 is relative to this FlowElement.</p>
		 
		 </apiDesc><example conref="examples\FlowGroupElement_findChildIndexAtPositionExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowGroupElement:findLeaf"><apiName>findLeaf</apiName><shortdesc>
		 Given a relative text position, find the leaf element that contains the position.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the leaf element containing the relative position.
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowLeafElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>relativePosition</apiItemName><apiType value="int"/><apiDesc>relative text index to look up.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Given a relative text position, find the leaf element that contains the position. 
		 
		 <p>Looks down the flow element hierarchy to find the FlowLeafElement that 
		 contains the specified position. The specified position 
		 is relative to this FlowElement object.</p>
		 
		 </apiDesc><example conref="examples\FlowGroupElement_findLeafExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowGroupElement:getChildAt"><apiName>getChildAt</apiName><shortdesc> 
		 Returns the FlowElement child at the specified index.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the child FlowElement object at the specified position.
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>the position at which to find the FlowElement object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Returns the FlowElement child at the specified index.
		 
		 </apiDesc><example conref="examples\FlowGroupElement_getChildAtExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowGroupElement:getChildIndex"><apiName>getChildIndex</apiName><shortdesc> 
		 Searches in children for the specified FlowElement object and returns its index position.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The index position of the specified chilc.  If <codeph>child</codeph> is not found, returns -1.
		  
		 </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>The FlowElement object item to locate among the children.
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Searches in children for the specified FlowElement object and returns its index position.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowGroupElement:getFirstLeaf"><apiName>getFirstLeaf</apiName><shortdesc>
		 Returns the first FlowLeafElement descendant of this group.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the first FlowLeafElement object.
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowLeafElement</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Returns the first FlowLeafElement descendant of this group.
		 
		 </apiDesc><example conref="examples\FlowGroupElement_getFirstLeafExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowGroupElement:getLastLeaf"><apiName>getLastLeaf</apiName><shortdesc>
		 Returns the last FlowLeafElement descendent of this group.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the last FlowLeafElement object.
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowLeafElement</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Returns the last FlowLeafElement descendent of this group.
		 
		 </apiDesc><example conref="examples\FlowGroupElement_getLastLeafExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowGroupElement:getText"><apiName>getText</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="String"/></apiReturn><apiParam><apiItemName>relativeStart</apiItemName><apiType value="int"/><apiData>0</apiData></apiParam><apiParam><apiItemName>relativeEnd</apiItemName><apiType value="int"/><apiData>-1</apiData></apiParam><apiParam><apiItemName>paragraphSeparator</apiItemName><apiType value="String"/><apiData> </apiData></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowGroupElement:removeChildAt"><apiName>removeChildAt</apiName><shortdesc> 
		 Removes the child FlowElement object at the specified index position.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>The <codeph>index</codeph> is out of range.
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>the child FlowElement object removed from the specified position.
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="uint"/><apiDesc>position at which to remove the child element.
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Removes the child FlowElement object at the specified index position.
		 
		 </apiDesc><example conref="examples\FlowGroupElement_removeChildAtExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowGroupElement:removeChild"><apiName>removeChild</apiName><shortdesc> 
		 Removes the specified child FlowElement object from the group.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>The <codeph>child</codeph> is not found.
		 
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>the removed child FlowElement object 
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>child</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>The child element to remove.
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Removes the specified child FlowElement object from the group.
		 
		 </apiDesc><example conref="examples\FlowGroupElement_removeChildExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowGroupElement:replaceChildren"><apiName>replaceChildren</apiName><shortdesc>
		 Replaces child elements in the group with the specified new elements.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>The <codeph>beginChildIndex</codeph> or <codeph>endChildIndex</codeph> specified is out of range.
	     
	     </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>beginChildIndex</apiItemName><apiType value="int"/><apiDesc>The index value for the start position of the replacement range in the children array.
		 </apiDesc></apiParam><apiParam><apiItemName>endChildIndex</apiItemName><apiType value="int"/><apiDesc>The index value following the end position of the replacement range in the children array.
		 </apiDesc></apiParam><apiParam><apiItemName>rest</apiItemName><apiType value="restParam"/><apiDesc>The elements to replace the specified range of elements. Can be a sequence containing flow elements or
		 arrays or vectors thereof.
		  
	     </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Replaces child elements in the group with the specified new elements. Use the <codeph>beginChildIndex</codeph> and
		 <codeph>endChildIndex</codeph> parameters to govern the operation as follows:
		 <p><ul>
		 <li>To delete elements, do not pass any replacement elements.</li>
		 <li>To insert elements, pass the same value for <codeph>beginChildIndex</codeph> and <codeph>endChildIndex</codeph>.  
		 The new elements is inserted before the specified index.</li>
		 <li>To append elements, pass <codeph>numChildren</codeph> for <codeph>beginChildIndex</codeph> and <codeph>endChildIndex</codeph>.</li>
		 </ul></p>
		 <p>Otherwise, this method replaces the specified elements, starting with the element at <codeph>beginChildIndex</codeph> 
		 and up to but not including <codeph>endChildIndex</codeph>.</p>
		 
		 </apiDesc><example conref="examples\FlowGroupElement_replaceChildrenExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowGroupElement:splitAtIndex"><apiName>splitAtIndex</apiName><shortdesc> 
		 Splits this object at the position specified by the childIndex parameter.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>if <codeph>childIndex</codeph> is greater than the length of the children.
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>the new FlowGroupElement object.
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowGroupElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>childIndex</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc> 
		 Splits this object at the position specified by the <codeph>childIndex</codeph> parameter. If this group element has 
		 a parent, creates a shallow copy of this object and replaces its children with the elements up to the index. Moves 
		 elements following <codeph>childIndex</codeph> into the copy.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.elements:FlowGroupElement:mxmlChildren:get"><apiName>mxmlChildren</apiName><shortdesc> 
		 Appends an array of children to this object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiException><apiDesc>if array element is not a FlowElement or String
		 </apiDesc><apiItemName>TypeError</apiItemName><apiOperationClassifier>TypeError</apiOperationClassifier></apiException></apiValueDef><apiDesc> 
		 Appends an array of children to this object. Uses the <codeph>replaceChildren()</codeph> method to append each 
		 element in the array. Intended for use during an mxml compiled import.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowGroupElement/replaceChildren()"><linktext>FlowGroupElement.replaceChildren()</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowGroupElement:numChildren:get"><apiName>numChildren</apiName><shortdesc> 
		Returns the number of FlowElement children that this FlowGroupElement object has.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 
		Returns the number of FlowElement children that this FlowGroupElement object has.
		
		</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:SpanElement"><apiName>SpanElement</apiName><shortdesc> 
	The SpanElement class represents a run of text that has a single set of formatting attributes applied.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.elements:FlowLeafElement</apiBaseClassifier></apiClassifierDef><apiDesc> 
	The SpanElement class represents a run of text that has a single set of formatting attributes applied. SpanElement 
	objects contain the text in a paragraph. A simple paragraph (ParagraphElement) includes one or more SpanElement objects. 
	
	<p>A ParagraphElement will have a single SpanElement object if all the text in the paragraph shares the same set of 
	attributes. It has multiple SpanElement objects if the text in the paragraph has multiple formats.</p>
	
	</apiDesc><example conref="SpanElementExample.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement"><linktext>FlowElement</linktext></link><link href="flashx.textLayout.elements.xml#ParagraphElement"><linktext>ParagraphElement</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links><apiConstructor id="flashx.textLayout.elements:SpanElement:SpanElement"><apiName>SpanElement</apiName><shortdesc> Constructor - creates a SpanElement object to hold a run of text in a paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> Constructor - creates a SpanElement object to hold a run of text in a paragraph.
		
		</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flashx.textLayout.elements:SpanElement:replaceText"><apiName>replaceText</apiName><shortdesc> 
		 Updates the text in text span based on the specified start and end positions.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>The <codeph>relativeStartPosition</codeph> or <codeph>relativeEndPosition</codeph> specified is out of 
		 range or a surrogate pair is being split as a result of the replace.
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>relativeStartPosition</apiItemName><apiType value="int"/><apiDesc>The index position of the beginning of the text to be replaced, 
		   relative to the start of the span. The first character in the span is at position 0.
		  </apiDesc></apiParam><apiParam><apiItemName>relativeEndPosition</apiItemName><apiType value="int"/><apiDesc>The index one position after the last character of the text to be replaced, 
		   relative to the start of the span. Set this value equal to <codeph>relativeStartPos</codeph>
		   for an insert. 
		  </apiDesc></apiParam><apiParam><apiItemName>textValue</apiItemName><apiType value="String"/><apiDesc>The replacement text or the text to add, as the case may be.
		 
		  </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Updates the text in text span based on the specified start and end positions. To insert text, set the end position
		 equal to the start position. To append text to the existing text in the span, set the start position and the
		 end position equal to the length of the existing text.
		 
		 <p>The replaced text includes the start character and up to but not including the end character.</p>
		 
		  </apiDesc><example conref="SpanElement_replaceTextExample.as"/></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.elements:SpanElement:mxmlChildren:get"><apiName>mxmlChildren</apiName><shortdesc> 
		 Sets text based on content within span tags; always deletes existing children.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiException><apiDesc>If array element is not a SpecialCharacterElement or a String.
		 </apiDesc><apiItemName>TypeError</apiItemName><apiOperationClassifier>TypeError</apiOperationClassifier></apiException></apiValueDef><apiDesc> 
		 Sets text based on content within span tags; always deletes existing children.
		 This property is intended for use during MXML compiled import in Flex. Flash Professional ignores this property.
         When TLF markup elements have other
		 TLF markup elements as children, the children are assigned to this property.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:SpanElement:text:set"><apiName>text</apiName><shortdesc> 
		 Receives the String of text that this SpanElement object holds.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc> 
		 Receives the String of text that this SpanElement object holds.
		 
		 <p>The text of a span does not include the carriage return (CR) at the end of the paragraph
		 but it is included in the value of <codeph>textLength</codeph>.</p>
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:LinkState"><apiName>LinkState</apiName><shortdesc>
	  The LinkState class defines a set of constants for the linkState property
	  of the LinkElement class.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  The LinkState class defines a set of constants for the <codeph>linkState</codeph> property
	  of the LinkElement class. 
	 
	 </apiDesc><example conref="examples\LinkStateExample.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#LinkElement/linkState"><linktext>LinkElement.linkState</linktext></link></related-links><apiValue id="flashx.textLayout.elements:LinkState:ACTIVE"><apiName>ACTIVE</apiName><shortdesc> 
	 Value for the active state, which occurs when you hold the mouse down over a link.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>active</apiData><apiType value="String"/></apiValueDef><apiDesc> 
	 Value for the active state, which occurs when you hold the mouse down over a link. 
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:LinkState:HOVER"><apiName>HOVER</apiName><shortdesc> 
	 Value for the hover state, which occurs when you drag the mouse over a link.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>hover</apiData><apiType value="String"/></apiValueDef><apiDesc> 
	 Value for the hover state, which occurs when you drag the mouse over a link. 
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:LinkState:LINK"><apiName>LINK</apiName><shortdesc> 
	 Value for the normal, default link state.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>link</apiData><apiType value="String"/></apiValueDef><apiDesc> 
	 Value for the normal, default link state. 
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:DivElement"><apiName>DivElement</apiName><shortdesc> 
	 The DivElement class defines an element for grouping paragraphs (ParagraphElement objects).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flashx.textLayout.elements:ContainerFormattedElement</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 The DivElement class defines an element for grouping paragraphs (ParagraphElement objects). If you want a group of paragraphs
	 to share the same formatting attributes, you can group them in a DivElement object and apply the attributes to it. The paragraphs
	 will inherit the attributes from the DivElement object.
	 
	 </apiDesc><example conref="examples\DivElementExample.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#ParagraphElement"><linktext>ParagraphElement</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links></apiClassifier><apiClassifier id="flashx.textLayout.elements:FlowElement"><apiName>FlowElement</apiName><shortdesc>
 The text in a flow is stored in tree form with the elements of the tree representing logical
 divisions within the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.formats:ITextLayoutFormat</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 The text in a flow is stored in tree form with the elements of the tree representing logical
 divisions within the text. The FlowElement class is the abstract base class of all the objects in this tree.
 FlowElement objects represent paragraphs, spans of text within paragraphs, and
 groups of paragraphs.
 
 <p>The root of a composable FlowElement tree is always a TextFlow object. Leaf elements of the tree are always 
 subclasses of the FlowLeafElement class. All leaves arranged in a composable TextFlow have a ParagraphElement ancestor.
 </p> 
 
 <p>You cannot create a FlowElement object directly. Invoking <codeph>new FlowElement()</codeph> throws an error 
 exception.</p>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#FlowGroupElement"><linktext>FlowGroupElement</linktext></link><link href="flashx.textLayout.elements.xml#FlowLeafElement"><linktext>FlowLeafElement</linktext></link><link href="flashx.textLayout.elements.xml#InlineGraphicElement"><linktext>InlineGraphicElement</linktext></link><link href="flashx.textLayout.elements.xml#ParagraphElement"><linktext>ParagraphElement</linktext></link><link href="flashx.textLayout.elements.xml#SpanElement"><linktext>SpanElement</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links><apiConstructor id="flashx.textLayout.elements:FlowElement:FlowElement"><apiName>FlowElement</apiName><shortdesc> Base class - invoking new FlowElement() throws an error exception.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> Base class - invoking <codeph>new FlowElement()</codeph> throws an error exception.
		
		</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flashx.textLayout.elements:FlowElement:clearStyle"><apiName>clearStyle</apiName><shortdesc> Clears the style specified by the styleProp parameter from this FlowElement object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>The name of the style to clear.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Clears the style specified by the <codeph>styleProp</codeph> parameter from this FlowElement object. Sets 
		 the value to <codeph>undefined</codeph>.
		 
		 </apiDesc><example conref="examples\FlowElement_clearStyleExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/getStyle()"><linktext>getStyle()</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement/setStyle()"><linktext>setStyle()</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement/userStyles"><linktext>userStyles</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:deepCopy"><apiName>deepCopy</apiName><shortdesc>
		 Makes a deep copy of this FlowElement object, including any children, copying the content between the two specified
		 character positions and returning the copy as a FlowElement object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the object created by the deep copy operation.
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>relativeStart</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>relative text position of the first character to copy. First position is 0.
		 </apiDesc></apiParam><apiParam><apiItemName>relativeEnd</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>relative text position of the last character to copy. A value of -1 indicates copy to end.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Makes a deep copy of this FlowElement object, including any children, copying the content between the two specified
		 character positions and returning the copy as a FlowElement object.
		 
		 <p>With no arguments, <codeph>deepCopy()</codeph> defaults to copying the entire element.</p>
		 
		 </apiDesc><example conref="examples\FlowElement_deepCopyExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/shallowCopy()"><linktext>shallowCopy()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:equalUserStyles"><apiName>equalUserStyles</apiName><shortdesc> Compare the userStyles of this with otherElement's userStyles.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>true if the user styles are equal; false otherwise.
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>otherElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>the FlowElement object with which to compare user styles
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Compare the userStyles of this with otherElement's userStyles. 
		 
		 </apiDesc><example conref="examples\FlowElement_equalUserStylesExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/getStyle()"><linktext>getStyle()</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement/setStyle()"><linktext>setStyle()</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement/userStyles"><linktext>userStyles</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:getAbsoluteStart"><apiName>getAbsoluteStart</apiName><shortdesc>
		 Returns the start location of the element in the text flow as an absolute index.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The index of the start of the element from the start of the TextFlow object.
 		 
 		 </apiDesc><apiType value="int"/></apiReturn></apiOperationDef><apiDesc>
		 Returns the start location of the element in the text flow as an absolute index. The first character in the flow
		 is position 0.
		 
		 </apiDesc><example conref="examples\FlowElement_getAbsoluteStartExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/parentRelativeStart"><linktext>parentRelativeStart</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:getCharAtPosition"><apiName>getCharAtPosition</apiName><shortdesc> 
		Returns the character at the specified position, relative to this FlowElement object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>String containing the character.
		
		</apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>relativePosition</apiItemName><apiType value="int"/><apiDesc>The relative position of the character in this FlowElement object.
		</apiDesc></apiParam></apiOperationDef><apiDesc> 
		Returns the character at the specified position, relative to this FlowElement object. The first
		character is at relative position 0.
		
		</apiDesc><example conref="examples\FlowElement_getCharAtPositionExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/getCharCodeAtPosition()"><linktext>getCharCodeAtPosition()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:getCharCodeAtPosition"><apiName>getCharCodeAtPosition</apiName><shortdesc> Returns the character code at the specified position, relative to this FlowElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the Unicode value for the character at the specified position.
		
		</apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>relativePosition</apiItemName><apiType value="int"/><apiDesc>	The relative position of the character in this FlowElement object.
		
		</apiDesc></apiParam></apiOperationDef><apiDesc> Returns the character code at the specified position, relative to this FlowElement. The first
		character is at relative position 0.
		
		</apiDesc><example conref="examples\FlowElement_getCharCodeAtPositionExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/getCharAtPosition()"><linktext>getCharAtPosition()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:getElementRelativeStart"><apiName>getElementRelativeStart</apiName><shortdesc>
		 Returns the start of this element relative to an ancestor element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the offset of this element.
		 
		 </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>ancestorElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>The element from which you want to find the relative start of this element.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the start of this element relative to an ancestor element. Assumes that the
		 ancestor element is in the parent chain. If the ancestor element is the parent, this is the
		 same as <codeph>this.parentRelativeStart</codeph>.  If the ancestor element is the grandparent, this is the same as 
		 <codeph>parentRelativeStart</codeph> plus <codeph>parent.parentRelativeStart</codeph> and so on.
		 
		 </apiDesc><example conref="examples\FlowElement_getElementRelativeStartExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/getAbsoluteStart()"><linktext>getAbsoluteStart()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:getNextSibling"><apiName>getNextSibling</apiName><shortdesc> Returns the next FlowElement sibling in the text flow hierarchy.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the next FlowElement object of the same type, or null if there is no sibling.
		
		</apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> Returns the next FlowElement sibling in the text flow hierarchy. 
		
		</apiDesc><example conref="examples\FlowElement_getNextSiblingExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/getPreviousSibling()"><linktext>getPreviousSibling()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:getParagraph"><apiName>getParagraph</apiName><shortdesc>
		 Returns the ParagraphElement object associated with this element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the ParagraphElement object that's associated with this FlowElement object.
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:ParagraphElement</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Returns the ParagraphElement object associated with this element. It looks up the text flow hierarchy and returns 
		 the first ParagraphElement object.
		 
		 </apiDesc><example conref="examples\FlowElement_getParagraphExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/getTextFlow()"><linktext>getTextFlow()</linktext></link><link href="flashx.textLayout.elements.xml#ParagraphElement"><linktext>ParagraphElement</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:getPreviousSibling"><apiName>getPreviousSibling</apiName><shortdesc> Returns the previous FlowElement sibling in the text flow hierarchy.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the previous FlowElement object of the same type, or null if there is no previous sibling.
		
		</apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> Returns the previous FlowElement sibling in the text flow hierarchy. 
		
		</apiDesc><example conref="examples\FlowElement_getPreviousSiblingExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/getNextSibling()"><linktext>getNextSibling()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:getStyle"><apiName>getStyle</apiName><shortdesc> Returns the value of the style specified by the styleProp parameter, which specifies
		 the style name and can include any user style name.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The value of the specified style. The type varies depending on the type of the style being
		 accessed. Returns <codeph>undefined</codeph> if the style is not set.
		 
		 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>The name of the style whose value is to be retrieved.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Returns the value of the style specified by the <codeph>styleProp</codeph> parameter, which specifies
		 the style name and can include any user style name. Accesses an existing span, paragraph, text flow,
		 or container style. Searches the parent tree if the style's value is <codeph>undefined</codeph> on a 
		 particular element.
		 
		 </apiDesc><example conref="examples\FlowElement_getStyleExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/clearStyle()"><linktext>clearStyle()</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement/setStyle()"><linktext>setStyle()</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement/userStyles"><linktext>userStyles</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:getTextFlow"><apiName>getTextFlow</apiName><shortdesc>
		 Climbs the text flow hierarchy to return the root TextFlow object for the element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The root TextFlow object for this FlowElement object.
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Climbs the text flow hierarchy to return the root TextFlow object for the element.
		 
		 </apiDesc><example conref="examples\FlowElement_getTextFlowExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:getText"><apiName>getText</apiName><shortdesc> 
		 Gets the specified range of text from a flow element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The requested text.
		 
		 </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>relativeStart</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>The starting position of the range of text to be retrieved, relative to the start of the FlowElement
		 </apiDesc></apiParam><apiParam><apiItemName>relativeEnd</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>The ending position of the range of text to be retrieved, relative to the start of the FlowElement, -1 for up to the end of the element
		 </apiDesc></apiParam><apiParam><apiItemName>paragraphSeparator</apiItemName><apiType value="String"/><apiData> </apiData><apiDesc>character to put between paragraphs
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Gets the specified range of text from a flow element.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:initialized"><apiName>initialized</apiName><shortdesc> Called for MXML objects after the implementing object has been created and all component properties specified on the MXML tag have been initialized.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>document</apiItemName><apiType value="Object"/><apiDesc>The MXML document that created the object.
		 </apiDesc></apiParam><apiParam><apiItemName>id</apiItemName><apiType value="String"/><apiDesc>The identifier used by document to refer to this object.
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Called for MXML objects after the implementing object has been created and all component properties specified on the MXML tag have been initialized. 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:setStyle"><apiName>setStyle</apiName><shortdesc> Sets the style specified by the styleProp parameter to the value specified by the
		newValue parameter.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>The name of the style to set.
		</apiDesc></apiParam><apiParam><apiItemName>newValue</apiItemName><apiType value="any"/><apiDesc>The value to which to set the style.
		
		</apiDesc></apiParam></apiOperationDef><apiDesc> Sets the style specified by the <codeph>styleProp</codeph> parameter to the value specified by the
		<codeph>newValue</codeph> parameter. You can set a span, paragraph, text flow, or container style, including
		any user name-value pair.
		
		<p><b>Note:</b> If you assign a custom style, Text Layout Framework can import and export it but
		compiled MXML cannot support it.</p>
		
		</apiDesc><example conref="examples\FlowElement_setStyleExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/clearStyle()"><linktext>clearStyle()</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement/getStyle()"><linktext>getStyle()</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement/userStyles"><linktext>userStyles</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:shallowCopy"><apiName>shallowCopy</apiName><shortdesc>
		 Makes a copy of this FlowElement object, copying the content between two specified character positions.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the object created by the copy operation.
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>relativeStart</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>The relative text position of the first character to copy. First position is 0.
		 </apiDesc></apiParam><apiParam><apiItemName>relativeEnd</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>The relative text position of the last character to copy. A value of -1 indicates copy to end.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Makes a copy of this FlowElement object, copying the content between two specified character positions.
		 It returns the copy as a new FlowElement object. Unlike <codeph>deepCopy()</codeph>, <codeph>shallowCopy()</codeph> does
		 not copy any of the children of this FlowElement object. 
		 
		 <p>With no arguments, <codeph>shallowCopy()</codeph> defaults to copying all of the content.</p>
		 
		 </apiDesc><example conref="examples\FlowElement_shallowCopyExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/deepCopy()"><linktext>deepCopy()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:splitAtPosition"><apiName>splitAtPosition</apiName><shortdesc> 
		 Splits this FlowElement object at the position specified by the relativePosition parameter, which is
		 a relative position in the text for this element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>if <codeph>relativePosition</codeph> is greater than <codeph>textLength</codeph>, or less than 0.
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>the new object, which contains the content of the original object, starting at the specified position.
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>relativePosition</apiItemName><apiType value="int"/><apiDesc>the position at which to split the content of the original object, with the first position being 0.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Splits this FlowElement object at the position specified by the <codeph>relativePosition</codeph> parameter, which is
		 a relative position in the text for this element. This method splits only SpanElement and FlowGroupElement 
		 objects.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.elements:FlowElement:alignmentBaseline:get"><apiName>alignmentBaseline</apiName><shortdesc>
		 TextLayoutFormat:
		 Specifies the baseline to which the dominant baseline aligns.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Specifies the baseline to which the dominant baseline aligns. For example, if you set <codeph>dominantBaseline</codeph> to ASCENT, setting <codeph>alignmentBaseline</codeph> to DESCENT aligns the top of the text with the DESCENT baseline, or below the line.  The largest element in the line generally determines the baselines.<p><adobeimage alt="baselines" href="../../../images/textLayout_baselines.jpg"/></p>
		 <p>Legal values are TextBaseline.ROMAN, TextBaseline.ASCENT, TextBaseline.DESCENT, TextBaseline.IDEOGRAPHIC_TOP, TextBaseline.IDEOGRAPHIC_CENTER, TextBaseline.IDEOGRAPHIC_BOTTOM, TextBaseline.USE_DOMINANT_BASELINE, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of TextBaseline.USE_DOMINANT_BASELINE.</p>
		 </apiDesc><example conref="examples\TextLayoutFormat_alignmentBaselineExample.as"/></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextBaseline.xml"><linktext>flash.text.engine.TextBaseline</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:backgroundAlpha:get"><apiName>backgroundAlpha</apiName><shortdesc>
		 TextLayoutFormat:
		 Alpha (transparency) value for the background (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Alpha (transparency) value for the background (adopts default value if undefined during cascade). A value of 0 is fully transparent, and a value of 1 is fully opaque. Display objects with alpha set to 0 are active, even though they are invisible.
		 <p>Legal values are numbers from 0 to 1 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of 1.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:backgroundColor:get"><apiName>backgroundColor</apiName><shortdesc>
		 TextLayoutFormat:
		 Background color of the text (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Background color of the text (adopts default value if undefined during cascade). Can be either the constant value  <codeph>BackgroundColor.TRANSPARENT</codeph>, or a hexadecimal value that specifies the three 8-bit RGB (red, green, blue) values; for example, 0xFF0000 is red and 0x00FF00 is green.
		 <p>Legal values as a string are BackgroundColor.TRANSPARENT, FormatValue.INHERIT and uints from 0x0 to 0xffffffff.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of BackgroundColor.TRANSPARENT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BackgroundColor"><linktext>flashx.textLayout.formats.BackgroundColor</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:baselineShift:get"><apiName>baselineShift</apiName><shortdesc>
		 TextLayoutFormat:
		 Amount to shift the baseline from the dominantBaseline value.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Amount to shift the baseline from the <codeph>dominantBaseline</codeph> value. Units are in pixels, or a percentage of <codeph>fontSize</codeph> (in which case, enter a string value, like 140%).  Positive values shift the line up for horizontal text (right for vertical) and negative values shift it down for horizontal (left for vertical). 
		 <p>Legal values are BaselineShift.SUPERSCRIPT, BaselineShift.SUBSCRIPT, FormatValue.INHERIT.</p>
		 <p>Legal values as a number are from -1000 to 1000.</p>
		 <p>Legal values as a percent are numbers from -1000 to 1000.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.0.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BaselineShift"><linktext>flashx.textLayout.formats.BaselineShift</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:blockProgression:get"><apiName>blockProgression</apiName><shortdesc>
		 TextLayoutFormat:
		 Specifies a vertical or horizontal progression of line placement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Specifies a vertical or horizontal progression of line placement.
		 Lines are either placed top-to-bottom (<codeph>BlockProgression.TB</codeph>, used for horizontal text) or right-to-left (<codeph>BlockProgression.RL</codeph>, used for vertical text).
		 <p>Legal values are BlockProgression.RL, BlockProgression.TB, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of BlockProgression.TB.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BlockProgression"><linktext>flashx.textLayout.formats.BlockProgression</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:breakOpportunity:get"><apiName>breakOpportunity</apiName><shortdesc>
		 TextLayoutFormat:
		 Controls where lines are allowed to break when breaking wrapping text into multiple lines.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Controls where lines are allowed to break when breaking wrapping text into multiple lines. Set to <codeph>BreakOpportunity.AUTO</codeph> to break text normally. Set to <codeph>BreakOpportunity.NONE</codeph> to <i>not</i> break the text unless the text would overrun the measure and there are no other places to break the line. Set to <codeph>BreakOpportunity.ANY</codeph> to allow the line to break anywhere, rather than just between words. Set to <codeph>BreakOpportunity.ALL</codeph> to have each typographic cluster put on a separate line (useful for text on a path).
		 <p>Legal values are BreakOpportunity.ALL, BreakOpportunity.ANY, BreakOpportunity.AUTO, BreakOpportunity.NONE, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of BreakOpportunity.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.BreakOpportunity.xml"><linktext>flash.text.engine.BreakOpportunity</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:cffHinting:get"><apiName>cffHinting</apiName><shortdesc>
		 TextLayoutFormat:
		 The type of CFF hinting used for this text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 The type of CFF hinting used for this text. CFF hinting determines whether the Flash runtime forces strong horizontal stems to fit to a sub pixel grid or not. This property applies only if the <codeph>renderingMode</codeph> property is set to <codeph>RenderingMode.CFF</codeph>, and the font is embedded (<codeph>fontLookup</codeph> property is set to <codeph>FontLookup.EMBEDDED_CFF</codeph>). At small screen sizes, hinting produces a clear, legible text for human readers.
		 <p>Legal values are CFFHinting.NONE, CFFHinting.HORIZONTAL_STEM, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of CFFHinting.HORIZONTAL_STEM.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.CFFHinting.xml"><linktext>flash.text.engine.CFFHinting</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:clearFloats:get"><apiName>clearFloats</apiName><shortdesc>
		 TextLayoutFormat:
		 Controls how text wraps around a float.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Controls how text wraps around a float. A value of none allows the text to wrap most closely around a float. A value of left causes the text to skip over any portion of the container that has a left float, and a value of right causes the text to skip over any portion of the container that has a right float. A value of both causes the text to skip over any floats.
		 <p>Legal values are ClearFloats.START, ClearFloats.END, ClearFloats.LEFT, ClearFloats.RIGHT, ClearFloats.BOTH, ClearFloats.NONE, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of ClearFloats.NONE.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#ClearFloats"><linktext>flashx.textLayout.formats.ClearFloats</linktext></link><link href="flashx.textLayout.formats.xml#ClearFloats"><linktext>flashx.textLayout.formats.ClearFloats</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:color:get"><apiName>color</apiName><shortdesc>
		 TextLayoutFormat:
		 Color of the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Color of the text. A hexadecimal number that specifies three 8-bit RGB (red, green, blue) values; for example, 0xFF0000 is red and 0x00FF00 is green. It can also be enum value {BLACK, GREEN, GRAY, BLUE, SILVER, LIME, OLIVE, WHITE, YELLOW, MAROON, NAVY, RED, PURPLE, TEAL, FUCHSIA, AQUA, MAGENTA, CYAN}
		 <p>Legal values as a string are ColorName.BLACK, ColorName.GREEN, ColorName.GRAY, ColorName.BLUE, ColorName.SILVER, ColorName.LIME, ColorName.OLIVE, ColorName.WHITE, ColorName.YELLOW, ColorName.MAROON, ColorName.NAVY, ColorName.RED, ColorName.PURPLE, ColorName.TEAL, ColorName.FUCHSIA, ColorName.AQUA, ColorName.MAGENTA, ColorName.CYAN, FormatValue.INHERIT and uints from 0x0 to 0xffffffff.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#ColorName"><linktext>flashx.textLayout.formats.ColorName</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:columnBreakAfter:get"><apiName>columnBreakAfter</apiName><shortdesc>
		 TextLayoutFormat:
		 Controls column after before the element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Controls column after before the element.
		 <p>Legal values are BreakStyle.AUTO, BreakStyle.ALWAYS, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of BreakStyle.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BreakStyle"><linktext>flashx.textLayout.formats.BreakStyle</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:columnBreakBefore:get"><apiName>columnBreakBefore</apiName><shortdesc>
		 TextLayoutFormat:
		 Controls column break before the element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Controls column break before the element.
		 <p>Legal values are BreakStyle.AUTO, BreakStyle.ALWAYS, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of BreakStyle.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BreakStyle"><linktext>flashx.textLayout.formats.BreakStyle</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:columnCount:get"><apiName>columnCount</apiName><shortdesc>
		 TextLayoutFormat:
		 Number of text columns (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Number of text columns (adopts default value if undefined during cascade).
		 The column number overrides the  other column settings. Value is an integer, or <codeph>FormatValue.AUTO</codeph> if unspecified. If <codeph>columnCount</codeph> is not specified,<codeph>columnWidth</codeph> is used to create as many columns as can fit in the container.
		 <p>Legal values as a string are FormatValue.AUTO, FormatValue.INHERIT and from ints from 1 to 50.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of FormatValue.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:columnGap:get"><apiName>columnGap</apiName><shortdesc>
		 TextLayoutFormat:
		 Specifies the amount of gutter space, in pixels, to leave between the columns (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Specifies the amount of gutter space, in pixels, to leave between the columns (adopts default value if undefined during cascade).
		 Value is a Number
		 <p>Legal values are numbers from 0 to 1000 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of 20.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:columnWidth:get"><apiName>columnWidth</apiName><shortdesc>
		 TextLayoutFormat:
		 Column width in pixels (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Column width in pixels (adopts default value if undefined during cascade).
		 If you specify the width of the columns, but not the count, TextLayout will create as many columns of that width as possible, given the  container width and <codeph>columnGap</codeph> settings. Any remainder space is left after the last column. Value is a Number.
		 <p>Legal values as a string are FormatValue.AUTO, FormatValue.INHERIT and numbers from 0 to 8000.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of FormatValue.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:computedFormat:get"><apiName>computedFormat</apiName><shortdesc> 
		 Returns the computed format attributes that are in effect for this element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		 Returns the computed format attributes that are in effect for this element.
		 Takes into account the inheritance of attributes from parent elements.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>ITextLayoutFormat</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:containerBreakAfter:get"><apiName>containerBreakAfter</apiName><shortdesc>
		 TextLayoutFormat:
		 Controls container after before the element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Controls container after before the element.
		 <p>Legal values are BreakStyle.AUTO, BreakStyle.ALWAYS, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of BreakStyle.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BreakStyle"><linktext>flashx.textLayout.formats.BreakStyle</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:containerBreakBefore:get"><apiName>containerBreakBefore</apiName><shortdesc>
		 TextLayoutFormat:
		 Controls container break before the element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Controls container break before the element.
		 <p>Legal values are BreakStyle.AUTO, BreakStyle.ALWAYS, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of BreakStyle.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BreakStyle"><linktext>flashx.textLayout.formats.BreakStyle</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:coreStyles:get"><apiName>coreStyles</apiName><shortdesc> Returns the coreStyles on this FlowElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc> Returns the <codeph>coreStyles</codeph> on this FlowElement.  Note that the getter makes a copy of the core 
		 styles dictionary. The coreStyles object encapsulates the formats that are defined by TextLayoutFormat and are in TextLayoutFormat.description. The
		 <codeph>coreStyles</codeph> object consists of an array of <i>stylename-value</i> pairs.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat"><linktext>flashx.textLayout.formats.TextLayoutFormat</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:digitCase:get"><apiName>digitCase</apiName><shortdesc>
		 TextLayoutFormat:
		 The type of digit case used for this text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 The type of digit case used for this text. Setting the value to <codeph>DigitCase.OLD_STYLE</codeph> approximates lowercase letterforms with varying ascenders and descenders. The figures are proportionally spaced. This style is only available in selected typefaces, most commonly in a supplemental or expert font. The <codeph>DigitCase.LINING</codeph> setting has all-cap height and is typically monospaced to line up in charts.<p><adobeimage alt="digitCase" href="../../../images/textLayout_digitcase.gif"/></p>
		 <p>Legal values are DigitCase.DEFAULT, DigitCase.LINING, DigitCase.OLD_STYLE, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of DigitCase.DEFAULT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.DigitCase.xml"><linktext>flash.text.engine.DigitCase</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:digitWidth:get"><apiName>digitWidth</apiName><shortdesc>
		 TextLayoutFormat:
		 Type of digit width used for this text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Type of digit width used for this text. This can be <codeph>DigitWidth.PROPORTIONAL</codeph>, which looks best for individual numbers, or <codeph>DigitWidth.TABULAR</codeph>, which works best for numbers in tables, charts, and vertical rows.<p><adobeimage alt="digitWidth" href="../../../images/textLayout_digitwidth.gif"/></p>
		 <p>Legal values are DigitWidth.DEFAULT, DigitWidth.PROPORTIONAL, DigitWidth.TABULAR, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of DigitWidth.DEFAULT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.DigitWidth.xml"><linktext>flash.text.engine.DigitWidth</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:direction:get"><apiName>direction</apiName><shortdesc>
		 TextLayoutFormat:
		 Specifies the default bidirectional embedding level of the text in the text block.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Specifies the default bidirectional embedding level of the text in the text block. 
		 Left-to-right reading order, as in Latin-style scripts, or right-to-left reading order, as in Arabic or Hebrew. This property also affects column direction when it is applied at the container level. Columns can be either left-to-right or right-to-left, just like text. Below are some examples:<p><adobeimage alt="direction" href="../../../images/textLayout_direction.gif"/></p>
		 <p>Legal values are Direction.LTR, Direction.RTL, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of Direction.LTR.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#Direction"><linktext>flashx.textLayout.formats.Direction</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:dominantBaseline:get"><apiName>dominantBaseline</apiName><shortdesc>
		 TextLayoutFormat:
		 Specifies which element baseline snaps to the alignmentBaseline to determine the vertical position of the element on the line.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Specifies which element baseline snaps to the <codeph>alignmentBaseline</codeph> to determine the vertical position of the element on the line. A value of <codeph>TextBaseline.AUTO</codeph> selects the dominant baseline based on the <codeph>locale</codeph> property of the parent paragraph.  For Japanese and Chinese, the selected baseline value is <codeph>TextBaseline.IDEOGRAPHIC_CENTER</codeph>; for all others it is <codeph>TextBaseline.ROMAN</codeph>. These baseline choices are determined by the choice of font and the font size.<p><adobeimage alt="baselines" href="../../../images/textLayout_baselines.jpg"/></p>
		 <p>Legal values are FormatValue.AUTO, TextBaseline.ROMAN, TextBaseline.ASCENT, TextBaseline.DESCENT, TextBaseline.IDEOGRAPHIC_TOP, TextBaseline.IDEOGRAPHIC_CENTER, TextBaseline.IDEOGRAPHIC_BOTTOM, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of FormatValue.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextBaseline.xml"><linktext>flash.text.engine.TextBaseline</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:firstBaselineOffset:get"><apiName>firstBaselineOffset</apiName><shortdesc>
		 TextLayoutFormat:
		 Specifies the baseline position of the first line in the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Specifies the baseline position of the first line in the container. Which baseline this property refers to depends on the container-level locale.  For Japanese and Chinese, it is <codeph>TextBaseline.IDEOGRAPHIC_BOTTOM</codeph>; for all others it is <codeph>TextBaseline.ROMAN</codeph>.
		 The offset from the top inset (or right inset if <codeph>blockProgression</codeph> is RL) of the container to the baseline of the first line can be either <codeph>BaselineOffset.ASCENT</codeph>, meaning equal to the ascent of the line, <codeph>BaselineOffset.LINE_HEIGHT</codeph>, meaning equal to the height of that first line, or any fixed-value number to specify an absolute distance. <codeph>BaselineOffset.AUTO</codeph> aligns the ascent of the line with the container top inset.<p><adobeimage alt="firstBaselineOffset1" href="../../../images/textLayout_FBO1.png"/><adobeimage alt="firstBaselineOffset2" href="../../../images/textLayout_FBO2.png"/><adobeimage alt="firstBaselineOffset3" href="../../../images/textLayout_FBO3.png"/><adobeimage alt="firstBaselineOffset4" href="../../../images/textLayout_FBO4.png"/></p>
		 <p>Legal values as a string are BaselineOffset.AUTO, BaselineOffset.ASCENT, BaselineOffset.LINE_HEIGHT, FormatValue.INHERIT and numbers from 0 to 1000.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of BaselineOffset.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BaselineOffset"><linktext>flashx.textLayout.formats.BaselineOffset</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:fontFamily:get"><apiName>fontFamily</apiName><shortdesc>
		 TextLayoutFormat:
		  The name of the font to use, or a comma-separated list of font names.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		  The name of the font to use, or a comma-separated list of font names. The Flash runtime renders the element with the first available font in the list. For example Arial, Helvetica, _sans causes the player to search for Arial, then Helvetica if Arial is not found, then _sans if neither is found.
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of Arial.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:fontLookup:get"><apiName>fontLookup</apiName><shortdesc>
		 TextLayoutFormat:
		 Font lookup to use.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Font lookup to use. Specifying <codeph>FontLookup.DEVICE</codeph> uses the fonts installed on the system that is running the SWF file. Device fonts result in a smaller movie size, but text is not always rendered the same across different systems and platforms. Specifying <codeph>FontLookup.EMBEDDED_CFF</codeph> uses font outlines embedded in the published SWF file. Embedded fonts increase the size of the SWF file (sometimes dramatically), but text is consistently displayed in the chosen font.
		 <p>Legal values are FontLookup.DEVICE, FontLookup.EMBEDDED_CFF, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of FontLookup.DEVICE.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontLookup.xml"><linktext>flash.text.engine.FontLookup</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:fontSize:get"><apiName>fontSize</apiName><shortdesc>
		 TextLayoutFormat:
		 The size of the text in pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 The size of the text in pixels.
		 <p>Legal values are numbers from 1 to 720 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 12.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:fontStyle:get"><apiName>fontStyle</apiName><shortdesc>
		 TextLayoutFormat:
		 Style of text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Style of text. May be <codeph>FontPosture.NORMAL</codeph>, for use in plain text, or <codeph>FontPosture.ITALIC</codeph> for italic. This property applies only to device fonts (<codeph>fontLookup</codeph> property is set to flash.text.engine.FontLookup.DEVICE).
		 <p>Legal values are FontPosture.NORMAL, FontPosture.ITALIC, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of FontPosture.NORMAL.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontPosture.xml"><linktext>flash.text.engine.FontPosture</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:fontWeight:get"><apiName>fontWeight</apiName><shortdesc>
		 TextLayoutFormat:
		 Weight of text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Weight of text. May be <codeph>FontWeight.NORMAL</codeph> for use in plain text, or <codeph>FontWeight.BOLD</codeph>. Applies only to device fonts (<codeph>fontLookup</codeph> property is set to flash.text.engine.FontLookup.DEVICE).
		 <p>Legal values are FontWeight.NORMAL, FontWeight.BOLD, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of FontWeight.NORMAL.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontWeight.xml"><linktext>flash.text.engine.FontWeight</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:format:get"><apiName>format</apiName><shortdesc> TextLayoutFormat properties applied directly to this element.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> TextLayoutFormat properties applied directly to this element.
		 <p>Each element may have properties applied to it as part of its format. Properties applied to this element override properties inherited from the parent. Properties applied to this element will in turn be inherited by element's children if they are not overridden on the child. If no properties are applied to the element, this will be null.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>flashx.textLayout.formats.ITextLayoutFormat</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:id:get"><apiName>id</apiName><shortdesc>
		 Assigns an identifying name to the element, making it possible to set a style for the element
		 by referencing the id.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
		 Assigns an identifying name to the element, making it possible to set a style for the element
		 by referencing the <codeph>id</codeph>. For example, the following line sets the color for
		 a SpanElement object that has an id of span1:
		 
		 <codeblock rev="3.0">
		 textFlow.getElementByID("span1").setStyle("color", 0xFF0000);
		 </codeblock>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow/getElementByID()"><linktext>TextFlow.getElementByID()</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:justificationRule:get"><apiName>justificationRule</apiName><shortdesc>
		 TextLayoutFormat:
		 Rule used to justify text in a paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Rule used to justify text in a paragraph.
		 Default value is <codeph>FormatValue.AUTO</codeph>, which justifies text based on the paragraph's <codeph>locale</codeph> property. For all languages except Japanese and Chinese, <codeph>FormatValue.AUTO</codeph> becomes <codeph>JustificationRule.SPACE</codeph>, which adds extra space to the space characters.  For Japanese and Chinese, <codeph>FormatValue.AUTO</codeph> becomes <codeph>JustficationRule.EAST_ASIAN</codeph>. In part, justification changes the spacing of punctuation. In Roman text the comma and Japanese periods take a full character's width but in East Asian text only half of a character's width. Also, in the East Asian text the spacing between sequential punctuation marks becomes tighter, obeying traditional East Asian typographic conventions. Note, too, in the example below the leading that is applied to the second line of the paragraphs. In the East Asian version, the last two lines push left. In the Roman version, the second and following lines push left.<p><adobeimage alt="justificationRule" href="../../../images/textLayout_justificationrule.png"/></p>
		 <p>Legal values are JustificationRule.EAST_ASIAN, JustificationRule.SPACE, FormatValue.AUTO, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of FormatValue.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#JustificationRule"><linktext>flashx.textLayout.formats.JustificationRule</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:justificationStyle:get"><apiName>justificationStyle</apiName><shortdesc>
		 TextLayoutFormat:
		 The style used for justification of the paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 The style used for justification of the paragraph. Used only in conjunction with a <codeph>justificationRule</codeph> setting of <codeph>JustificationRule.EAST_ASIAN</codeph>.
		 Default value of <codeph>FormatValue.AUTO</codeph> is resolved to <codeph>JustificationStyle.PUSH_IN_KINSOKU</codeph> for all locales.  The constants defined by the JustificationStyle class specify options for handling kinsoku characters, which are Japanese characters that cannot appear at either the beginning or end of a line. If you want looser text, specify <codeph>JustificationStyle.PUSH-OUT-ONLY</codeph>. If you want behavior that is like what you get with the  <codeph>justificationRule</codeph> of <codeph>JustificationRule.SPACE</codeph>, use <codeph>JustificationStyle.PRIORITIZE-LEAST-ADJUSTMENT</codeph>.
		 <p>Legal values are JustificationStyle.PRIORITIZE_LEAST_ADJUSTMENT, JustificationStyle.PUSH_IN_KINSOKU, JustificationStyle.PUSH_OUT_ONLY, FormatValue.AUTO, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of FormatValue.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.JustificationStyle.xml"><linktext>flash.text.engine.JustificationStyle</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:kerning:get"><apiName>kerning</apiName><shortdesc>
		 TextLayoutFormat:
		 Kerning adjusts the pixels between certain character pairs to improve readability.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Kerning adjusts the pixels between certain character pairs to improve readability. Kerning is supported for all fonts with kerning tables.
		 <p>Legal values are Kerning.ON, Kerning.OFF, Kerning.AUTO, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of Kerning.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.Kerning.xml"><linktext>flash.text.engine.Kerning</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:leadingModel:get"><apiName>leadingModel</apiName><shortdesc>
		 TextLayoutFormat:
		 Specifies the leading model, which is a combination of leading basis and leading direction.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Specifies the leading model, which is a combination of leading basis and leading direction.
		 Leading basis is the baseline to which the <codeph>lineHeight</codeph> property refers. Leading direction determines whether the <codeph>lineHeight</codeph> property refers to the distance of a line's baseline from that of the line before it or the line after it. The default value of <codeph>FormatValue.AUTO</codeph> is resolved based on the paragraph's <codeph>locale</codeph> property.  For Japanese and Chinese, it is <codeph>LeadingModel.IDEOGRAPHIC_TOP_DOWN</codeph> and for all others it is <codeph>LeadingModel.ROMAN_UP</codeph>.<p><b>Leading Basis:</b></p><p><adobeimage alt="leadingBasis1" href="../../../images/textLayout_LB1.png"/>    <adobeimage alt="leadingBasis2" href="../../../images/textLayout_LB2.png"/>    <adobeimage alt="leadingBasis3" href="../../../images/textLayout_LB3.png"/></p><p><b>Leading Direction:</b></p><p><adobeimage alt="leadingDirection1" href="../../../images/textLayout_LD1.png"/>    <adobeimage alt="leadingDirection2" href="../../../images/textLayout_LD2.png"/>    <adobeimage alt="leadingDirection3" href="../../../images/textLayout_LD3.png"/></p>
		 <p>Legal values are LeadingModel.ROMAN_UP, LeadingModel.IDEOGRAPHIC_TOP_UP, LeadingModel.IDEOGRAPHIC_CENTER_UP, LeadingModel.IDEOGRAPHIC_TOP_DOWN, LeadingModel.IDEOGRAPHIC_CENTER_DOWN, LeadingModel.APPROXIMATE_TEXT_FIELD, LeadingModel.ASCENT_DESCENT_UP, LeadingModel.BOX, LeadingModel.AUTO, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of LeadingModel.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#LeadingModel"><linktext>flashx.textLayout.formats.LeadingModel</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:ligatureLevel:get"><apiName>ligatureLevel</apiName><shortdesc>
		 TextLayoutFormat:
		 Controls which of the ligatures that are defined in the font may be used in the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Controls which of the ligatures that are defined in the font may be used in the text. The ligatures that appear for each of these settings is dependent on the font. A ligature occurs where two or more letter-forms are joined as a single glyph. Ligatures usually replace consecutive characters sharing common components, such as the letter pairs 'fi', 'fl', or 'ae'. They are used with both Latin and Non-Latin character sets. The ligatures enabled by the values of the LigatureLevel class - <codeph>MINIMUM</codeph>, <codeph>COMMON</codeph>, <codeph>UNCOMMON</codeph>, and <codeph>EXOTIC</codeph> - are additive. Each value enables a new set of ligatures, but also includes those of the previous types.<p><b>Note: </b>When working with Arabic or Syriac fonts, <codeph>ligatureLevel</codeph> must be set to MINIMUM or above.</p><p><adobeimage alt="ligatureLevel" href="../../../images/textLayout_ligatures.png"/></p>
		 <p>Legal values are LigatureLevel.MINIMUM, LigatureLevel.COMMON, LigatureLevel.UNCOMMON, LigatureLevel.EXOTIC, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of LigatureLevel.COMMON.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.LigatureLevel.xml"><linktext>flash.text.engine.LigatureLevel</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:lineBreak:get"><apiName>lineBreak</apiName><shortdesc>
		 TextLayoutFormat:
		 Controls word wrapping within the container (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Controls word wrapping within the container (adopts default value if undefined during cascade).
		 Text in the container may be set to fit the width of the container (<codeph>LineBreak.TO_FIT</codeph>), or can be set to break only at explicit return or line feed characters (<codeph>LineBreak.EXPLICIT</codeph>).
		 <p>Legal values are LineBreak.EXPLICIT, LineBreak.TO_FIT, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of LineBreak.TO_FIT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#LineBreak"><linktext>flashx.textLayout.formats.LineBreak</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:lineHeight:get"><apiName>lineHeight</apiName><shortdesc>
		 TextLayoutFormat:
		 Leading controls for the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Leading controls for the text. The distance from the baseline of the previous or the next line (based on <codeph>LeadingModel</codeph>) to the baseline of the current line is equal to the maximum amount of the leading applied to any character in the line. This is either a number or a percent.  If specifying a percent, enter a string value, like 140%.<p><adobeimage alt="lineHeight1" href="../../../images/textLayout_lineHeight1.jpg"/><adobeimage alt="lineHeight2" href="../../../images/textLayout_lineHeight2.jpg"/></p>
		 <p>Legal values as a number are from -720 to 720.</p>
		 <p>Legal values as a percent are numbers from -1000% to 1000%.</p>
		 <p>Legal values include FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 120%.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:lineThrough:get"><apiName>lineThrough</apiName><shortdesc>
		 TextLayoutFormat:
		 If true, applies strikethrough, a line drawn through the middle of the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 If <codeph>true</codeph>, applies strikethrough, a line drawn through the middle of the text.
		 <p>Legal values are true, false and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of false.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:linkActiveFormat:get"><apiName>linkActiveFormat</apiName><shortdesc>
		 TextLayoutFormat:
		 Defines the formatting attributes used for links in normal state.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Defines the formatting attributes used for links in normal state. This value will cascade down the hierarchy and apply to any links that are descendants.
		 Accepts <codeph>inherit</codeph>, an <codeph>ITextLayoutFormat</codeph> or converts an array of objects with key and value as members to a TextLayoutFormat.
		 <p>Legal values include FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of null.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:linkHoverFormat:get"><apiName>linkHoverFormat</apiName><shortdesc>
		 TextLayoutFormat:
		 Defines the formatting attributes used for links in hover state, when the mouse is within the bounds (rolling over) a link.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Defines the formatting attributes used for links in hover state, when the mouse is within the bounds (rolling over) a link. This value will cascade down the hierarchy and apply to any links that are descendants.
		 Accepts <codeph>inherit</codeph>, an <codeph>ITextLayoutFormat</codeph> or converts an array of objects with key and value as members to a TextLayoutFormat.
		 <p>Legal values include FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of null.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:linkNormalFormat:get"><apiName>linkNormalFormat</apiName><shortdesc>
		 TextLayoutFormat:
		 Defines the formatting attributes used for links in normal state.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Defines the formatting attributes used for links in normal state. This value will cascade down the hierarchy and apply to any links that are descendants.
		 Accepts <codeph>inherit</codeph>, an <codeph>ITextLayoutFormat</codeph> or converts an array of objects with key and value as members to a TextLayoutFormat.
		 <p>Legal values include FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of null.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:listAutoPadding:get"><apiName>listAutoPadding</apiName><shortdesc>
		 TextLayoutFormat:
		 This specifies an auto indent for the start edge of lists when the padding value of the list on that side is auto.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 This specifies an auto indent for the start edge of lists when the padding value of the list on that side is <codeph>auto</codeph>.
		 <p>Legal values are numbers from -1000 to 1000 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 40.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:listMarkerFormat:get"><apiName>listMarkerFormat</apiName><shortdesc>
		 TextLayoutFormat:
		 Defines the formatting attributes list markers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Defines the formatting attributes list markers. This value will cascade down the hierarchy and apply to any links that are descendants.
		 Accepts <codeph>inherit</codeph>, an <codeph>IListMarkerFormat</codeph> or converts an array of objects with key and value as members to a ListMarkerFormat.
		 <p>Legal values include FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of null.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:listStylePosition:get"><apiName>listStylePosition</apiName><shortdesc>
		 TextLayoutFormat:
		 Legal values are ListStylePosition.INSIDE, ListStylePosition.OUTSIDE, FormatValue.INHERIT.
		 Default value is undefined indicating not set.
		 If undefined during the cascade this property will inherit its value from an ancestor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 <p>Legal values are ListStylePosition.INSIDE, ListStylePosition.OUTSIDE, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of ListStylePosition.OUTSIDE.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#ListStylePosition"><linktext>flashx.textLayout.formats.ListStylePosition</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:listStyleType:get"><apiName>listStyleType</apiName><shortdesc>
		 TextLayoutFormat:
		 Legal values are ListStyleType.UPPER_ALPHA, ListStyleType.LOWER_ALPHA, ListStyleType.UPPER_ROMAN, ListStyleType.LOWER_ROMAN, ListStyleType.NONE, ListStyleType.DISC, ListStyleType.CIRCLE, ListStyleType.SQUARE, ListStyleType.BOX, ListStyleType.CHECK, ListStyleType.DIAMOND, ListStyleType.HYPHEN, ListStyleType.ARABIC_INDIC, ListStyleType.BENGALI, ListStyleType.DECIMAL, ListStyleType.DECIMAL_LEADING_ZERO, ListStyleType.DEVANAGARI, ListStyleType.GUJARATI, ListStyleType.GURMUKHI, ListStyleType.KANNADA, ListStyleType.PERSIAN, ListStyleType.THAI, ListStyleType.URDU, ListStyleType.CJK_EARTHLY_BRANCH, ListStyleType.CJK_HEAVENLY_STEM, ListStyleType.HANGUL, ListStyleType.HANGUL_CONSTANT, ListStyleType.HIRAGANA, ListStyleType.HIRAGANA_IROHA, ListStyleType.KATAKANA, ListStyleType.KATAKANA_IROHA, ListStyleType.LOWER_ALPHA, ListStyleType.LOWER_GREEK, ListStyleType.LOWER_LATIN, ListStyleType.UPPER_ALPHA, ListStyleType.UPPER_GREEK, ListStyleType.UPPER_LATIN, FormatValue.INHERIT.
		 Default value is undefined indicating not set.
		 If undefined during the cascade this property will inherit its value from an ancestor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 <p>Legal values are ListStyleType.UPPER_ALPHA, ListStyleType.LOWER_ALPHA, ListStyleType.UPPER_ROMAN, ListStyleType.LOWER_ROMAN, ListStyleType.NONE, ListStyleType.DISC, ListStyleType.CIRCLE, ListStyleType.SQUARE, ListStyleType.BOX, ListStyleType.CHECK, ListStyleType.DIAMOND, ListStyleType.HYPHEN, ListStyleType.ARABIC_INDIC, ListStyleType.BENGALI, ListStyleType.DECIMAL, ListStyleType.DECIMAL_LEADING_ZERO, ListStyleType.DEVANAGARI, ListStyleType.GUJARATI, ListStyleType.GURMUKHI, ListStyleType.KANNADA, ListStyleType.PERSIAN, ListStyleType.THAI, ListStyleType.URDU, ListStyleType.CJK_EARTHLY_BRANCH, ListStyleType.CJK_HEAVENLY_STEM, ListStyleType.HANGUL, ListStyleType.HANGUL_CONSTANT, ListStyleType.HIRAGANA, ListStyleType.HIRAGANA_IROHA, ListStyleType.KATAKANA, ListStyleType.KATAKANA_IROHA, ListStyleType.LOWER_ALPHA, ListStyleType.LOWER_GREEK, ListStyleType.LOWER_LATIN, ListStyleType.UPPER_ALPHA, ListStyleType.UPPER_GREEK, ListStyleType.UPPER_LATIN, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of ListStyleType.DISC.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#ListStyleType"><linktext>flashx.textLayout.formats.ListStyleType</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:locale:get"><apiName>locale</apiName><shortdesc>
		 TextLayoutFormat:
		 The locale of the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 The locale of the text. Controls case transformations and shaping. Standard locale identifiers as described in Unicode Technical Standard #35 are used. For example en, en_US and en-US are all English, ja is Japanese. 
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of en.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:paddingBottom:get"><apiName>paddingBottom</apiName><shortdesc>
		 TextLayoutFormat:
		 Bottom inset in pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Bottom inset in pixels.  Default of auto is zero except in lists which get a start side padding of 45.  (adopts default value if undefined during cascade).
		 Space between the bottom edge of the container and the text.  Value is a Number  or auto. <p> With horizontal text, in scrollable containers with multiple columns, the first and following columns will show the padding as blank space at the bottom of the container, but for the last column, if the text doesn't all fit, you may have to scroll in order to see the padding.</p>
		 <p>Legal values as a string are FormatValue.AUTO, FormatValue.INHERIT and numbers from -8000 to 8000.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of FormatValue.AUTO.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#Configuration/autoListElementStartPadding"><linktext>flashx.textLayout.elements.Configuration.autoListElementStartPadding</linktext></link><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:paddingLeft:get"><apiName>paddingLeft</apiName><shortdesc>
		 TextLayoutFormat:
		 Left inset in pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Left inset in pixels.  Default of auto is zero except in lists which get a start side padding of 45. (adopts default value if undefined during cascade).
		 Space between the left edge of the container and the text.  Value is a Number or auto.<p> With vertical text, in scrollable containers with multiple columns, the first and following columns will show the padding as blank space at the end of the container, but for the last column, if the text doesn't all fit, you may have to scroll in order to see the padding.</p>
		 <p>Legal values as a string are FormatValue.AUTO, FormatValue.INHERIT and numbers from -8000 to 8000.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of FormatValue.AUTO.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#Configuration/autoListElementStartPadding"><linktext>flashx.textLayout.elements.Configuration.autoListElementStartPadding</linktext></link><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:paddingRight:get"><apiName>paddingRight</apiName><shortdesc>
		 TextLayoutFormat:
		 Right inset in pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Right inset in pixels.  Default of auto is zero except in lists which get a start side padding of 45. (adopts default value if undefined during cascade).
		 Space between the right edge of the container and the text.  Value is a Number or auto. 
		 <p>Legal values as a string are FormatValue.AUTO, FormatValue.INHERIT and numbers from -8000 to 8000.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of FormatValue.AUTO.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#Configuration/autoListElementStartPadding"><linktext>flashx.textLayout.elements.Configuration.autoListElementStartPadding</linktext></link><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:paddingTop:get"><apiName>paddingTop</apiName><shortdesc>
		 TextLayoutFormat:
		 Top inset in pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Top inset in pixels.  Default of auto is zero except in lists which get a start side padding of 45. (adopts default value if undefined during cascade).
		 Space between the top edge of the container and the text.  Value is a Number or auto.
		 <p>Legal values as a string are FormatValue.AUTO, FormatValue.INHERIT and numbers from -8000 to 8000.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of FormatValue.AUTO.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#Configuration/autoListElementStartPadding"><linktext>flashx.textLayout.elements.Configuration.autoListElementStartPadding</linktext></link><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:paragraphEndIndent:get"><apiName>paragraphEndIndent</apiName><shortdesc>
		 TextLayoutFormat:
		 A Number that specifies, in pixels, the amount to indent the paragraph's end edge.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 A Number that specifies, in pixels, the amount to indent the paragraph's end edge. Refers to the right edge in left-to-right text and the left edge in right-to-left text. 
		 <p>Legal values are numbers from 0 to 8000 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:paragraphSpaceAfter:get"><apiName>paragraphSpaceAfter</apiName><shortdesc>
		 TextLayoutFormat:
		 A Number that specifies the amount of space, in pixels, to leave after the paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 A Number that specifies the amount of space, in pixels, to leave after the paragraph.
		 Collapses in tandem with  <codeph>paragraphSpaceBefore</codeph>.
		 <p>Legal values are numbers from 0 to 8000 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:paragraphSpaceBefore:get"><apiName>paragraphSpaceBefore</apiName><shortdesc>
		 TextLayoutFormat:
		 A Number that specifies the amount of space, in pixels, to leave before the paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 A Number that specifies the amount of space, in pixels, to leave before the paragraph. 
		 Collapses in tandem with <codeph>paragraphSpaceAfter</codeph>.
		 <p>Legal values are numbers from 0 to 8000 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:paragraphStartIndent:get"><apiName>paragraphStartIndent</apiName><shortdesc>
		 TextLayoutFormat:
		 A Number that specifies, in pixels, the amount to indent the paragraph's start edge.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 A Number that specifies, in pixels, the amount to indent the paragraph's start edge. Refers to the left edge in left-to-right text and the right edge in right-to-left text. 
		 <p>Legal values are numbers from 0 to 8000 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:parentRelativeEnd:get"><apiName>parentRelativeEnd</apiName><shortdesc> Returns the relative end of this FlowElement object in the parent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> Returns the relative end of this FlowElement object in the parent. If the parent is null this is always equal to <codeph>textLength</codeph>.  If 
		 the parent is not null, the value is the sum of the text lengths of this and all previous siblings, which is effectively
		 the first character in the next FlowElement object.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowGroupElement"><linktext>FlowGroupElement</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement/textLength"><linktext>textLength</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:parentRelativeStart:get"><apiName>parentRelativeStart</apiName><shortdesc> Returns the relative start of this FlowElement object in the parent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> Returns the relative start of this FlowElement object in the parent. If parent is null, this value is always zero.  
		 If parent is not null, the value is the sum of the text lengths of all previous siblings.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/textLength"><linktext>textLength</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:parent:get"><apiName>parent</apiName><shortdesc> Returns the parent of this FlowElement object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:FlowGroupElement</apiValueClassifier></apiValueDef><apiDesc> Returns the parent of this FlowElement object. Every FlowElement has at most one parent.
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:renderingMode:get"><apiName>renderingMode</apiName><shortdesc>
		 TextLayoutFormat:
		 The rendering mode used for this text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 The rendering mode used for this text.  Applies only to embedded fonts (<codeph>fontLookup</codeph> property is set to <codeph>FontLookup.EMBEDDED_CFF</codeph>).
		 <p>Legal values are RenderingMode.NORMAL, RenderingMode.CFF, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of RenderingMode.CFF.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.RenderingMode.xml"><linktext>flash.text.engine.RenderingMode</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:styleName:get"><apiName>styleName</apiName><shortdesc>
		 TextLayoutFormat:
		 Assigns an identifying class to the element, making it possible to set a style for the element by referencing the styleName.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Assigns an identifying class to the element, making it possible to set a style for the element by referencing the <codeph>styleName</codeph>.
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of null.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:styles:get"><apiName>styles</apiName><shortdesc> Returns the styles on this FlowElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc> Returns the styles on this FlowElement.  Note that the getter makes a copy of the  
		 styles dictionary. The returned object encapsulates all styles set in the format property including core and user styles. The
		 returned object consists of an array of <i>stylename-value</i> pairs.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat"><linktext>flashx.textLayout.formats.TextLayoutFormat</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:tabStops:get"><apiName>tabStops</apiName><shortdesc>
		 TextLayoutFormat:
		 Specifies the tab stops associated with the paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Specifies the tab stops associated with the paragraph.
		 Setters can take an array of TabStopFormat, a condensed string representation, undefined, or <codeph>FormatValue.INHERIT</codeph>. The condensed string representation is always converted into an array of TabStopFormat. <p>The string-based format is a list of tab stops, where each tab stop is delimited by one or more spaces.</p><p>A tab stop takes the following form: &lt;alignment type&gt;&lt;alignment position&gt;|&lt;alignment token&gt;.</p><p>The alignment type is a single character, and can be S, E, C, or D (or lower-case equivalents). S or s for start, E or e for end, C or c for center, D or d for decimal. The alignment type is optional, and if its not specified will default to S.</p><p>The alignment position is a Number, and is specified according to FXG spec for Numbers (decimal or scientific notation). The alignment position is required.</p><p>The vertical bar is used to separate the alignment position from the alignment token, and should only be present if the alignment token is present.</p><p> The alignment token is optional if the alignment type is D, and should not be present if the alignment type is anything other than D. The alignment token may be any sequence of characters terminated by the space that ends the tab stop (for the last tab stop, the terminating space is optional; end of alignment token is implied). A space may be part of the alignment token if it is escaped with a backslash (\ ). A backslash may be part of the alignment token if it is escaped with another backslash (\\). If the alignment type is D, and the alignment token is not specified, it will take on the default value of null.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of null.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TabStopFormat"><linktext>flashx.textLayout.formats.TabStopFormat</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:textAlignLast:get"><apiName>textAlignLast</apiName><shortdesc>
		 TextLayoutFormat:
		 Alignment of the last (or only) line in the paragraph relative to the container in justified text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Alignment of the last (or only) line in the paragraph relative to the container in justified text.
		 If <codeph>textAlign</codeph> is set to <codeph>TextAlign.JUSTIFY</codeph>, <codeph>textAlignLast</codeph> specifies how the last line (or only line, if this is a one line block) is aligned. Values are similar to <codeph>textAlign</codeph>.
		 <p>Legal values are TextAlign.LEFT, TextAlign.RIGHT, TextAlign.CENTER, TextAlign.JUSTIFY, TextAlign.START, TextAlign.END, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of TextAlign.START.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextAlign"><linktext>flashx.textLayout.formats.TextAlign</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:textAlign:get"><apiName>textAlign</apiName><shortdesc>
		 TextLayoutFormat:
		 Alignment of lines in the paragraph relative to the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Alignment of lines in the paragraph relative to the container.
		 <codeph>TextAlign.LEFT</codeph> aligns lines along the left edge of the container. <codeph>TextAlign.RIGHT</codeph> aligns on the right edge. <codeph>TextAlign.CENTER</codeph> positions the line equidistant from the left and right edges. <codeph>TextAlign.JUSTIFY</codeph> spreads the lines out so they fill the space. <codeph>TextAlign.START</codeph> is equivalent to setting left in left-to-right text, or right in right-to-left text. <codeph>TextAlign.END</codeph> is equivalent to setting right in left-to-right text, or left in right-to-left text.
		 <p>Legal values are TextAlign.LEFT, TextAlign.RIGHT, TextAlign.CENTER, TextAlign.JUSTIFY, TextAlign.START, TextAlign.END, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of TextAlign.START.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextAlign"><linktext>flashx.textLayout.formats.TextAlign</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:textAlpha:get"><apiName>textAlpha</apiName><shortdesc>
		 TextLayoutFormat:
		 Alpha (transparency) value for the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Alpha (transparency) value for the text. A value of 0 is fully transparent, and a value of 1 is fully opaque. Display objects with <codeph>textAlpha</codeph> set to 0 are active, even though they are invisible.
		 <p>Legal values are numbers from 0 to 1 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 1.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:textDecoration:get"><apiName>textDecoration</apiName><shortdesc>
		 TextLayoutFormat:
		 Decoration on text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Decoration on text. Use to apply underlining; default is none.
		 <p>Legal values are TextDecoration.NONE, TextDecoration.UNDERLINE, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of TextDecoration.NONE.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextDecoration"><linktext>flashx.textLayout.formats.TextDecoration</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:textIndent:get"><apiName>textIndent</apiName><shortdesc>
		 TextLayoutFormat:
		 A Number that specifies, in pixels, the amount to indent the first line of the paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 A Number that specifies, in pixels, the amount to indent the first line of the paragraph.
		 A negative indent will push the line into the margin, and possibly out of the container.
		 <p>Legal values are numbers from -8000 to 8000 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:textJustify:get"><apiName>textJustify</apiName><shortdesc>
		 TextLayoutFormat:
		 Specifies options for justifying text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Specifies options for justifying text.
		 Default value is <codeph>TextJustify.INTER_WORD</codeph>, meaning that extra space is added to the space characters. <codeph>TextJustify.DISTRIBUTE</codeph> adds extra space to space characters and between individual letters. Used only in conjunction with a <codeph>justificationRule</codeph> value of <codeph>JustificationRule.SPACE</codeph>.
		 <p>Legal values are TextJustify.INTER_WORD, TextJustify.DISTRIBUTE, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of TextJustify.INTER_WORD.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextJustify"><linktext>flashx.textLayout.formats.TextJustify</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:textLength:get"><apiName>textLength</apiName><shortdesc>
		 Returns the total length of text owned by this FlowElement object and its children.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 Returns the total length of text owned by this FlowElement object and its children.  If an element has no text, the 
		 value of <codeph>textLength</codeph> is usually zero. 
		 
		 <p>ParagraphElement objects have a final span with a paragraph terminator character for the last 
		 SpanElement object.The paragraph terminator is included in the value of the <codeph>textLength</codeph> of that 
		 SpanElement object and all its parents.  It is not included in <codeph>text</codeph> property of the SpanElement
		 object.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/textLength"><linktext>textLength</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:textRotation:get"><apiName>textRotation</apiName><shortdesc>
		 TextLayoutFormat:
		 Determines the number of degrees to rotate this text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Determines the number of degrees to rotate this text.
		 <p>Legal values are TextRotation.ROTATE_0, TextRotation.ROTATE_180, TextRotation.ROTATE_270, TextRotation.ROTATE_90, TextRotation.AUTO, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of TextRotation.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextRotation.xml"><linktext>flash.text.engine.TextRotation</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:trackingLeft:get"><apiName>trackingLeft</apiName><shortdesc>
		 TextLayoutFormat:
		 Number in pixels (or percent of fontSize, like 120%) indicating the amount of tracking (manual kerning) to be applied to the left of each character.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Number in pixels (or percent of <codeph>fontSize</codeph>, like 120%) indicating the amount of tracking (manual kerning) to be applied to the left of each character. If kerning is enabled, the <codeph>trackingLeft</codeph> value is added to the values in the kerning table for the font. If kerning is disabled, the <codeph>trackingLeft</codeph> value is used as a manual kerning value. Supports both positive and negative values. 
		 <p>Legal values as a number are from -1000 to 1000.</p>
		 <p>Legal values as a percent are numbers from -1000% to 1000%.</p>
		 <p>Legal values include FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:trackingRight:get"><apiName>trackingRight</apiName><shortdesc>
		 TextLayoutFormat:
		 Number in pixels (or percent of fontSize, like 120%) indicating the amount of tracking (manual kerning) to be applied to the right of each character.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Number in pixels (or percent of <codeph>fontSize</codeph>, like 120%) indicating the amount of tracking (manual kerning) to be applied to the right of each character.  If kerning is enabled, the <codeph>trackingRight</codeph> value is added to the values in the kerning table for the font. If kerning is disabled, the <codeph>trackingRight</codeph> value is used as a manual kerning value. Supports both positive and negative values. 
		 <p>Legal values as a number are from -1000 to 1000.</p>
		 <p>Legal values as a percent are numbers from -1000% to 1000%.</p>
		 <p>Legal values include FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:typeName:get"><apiName>typeName</apiName><shortdesc>
		 Each FlowElement has a typeName.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
		 Each FlowElement has a <codeph>typeName</codeph>.  <codeph>typeName</codeph> defaults to the string the <codeph>textLayoutFormat</codeph> TextConverter uses.  This API
		 can be used to set a different <codeph>typeName</codeph> to a <codeph>FlowElement</codeph>.  Typically this is done to support <codeph>type</codeph> selectors in CSS.  
		 
		 <p>See the <codeph>TEXT_FIELD_HTML_FORMAT</codeph> documentation for how this used..</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.conversion.xml#TextConverter"><linktext>flashx.textLayout.conversion.TextConverter</linktext></link><link href="flashx.textLayout.conversion.xml#TextConverter/TEXT_FIELD_HTML_FORMAT"><linktext>flashx.textLayout.conversion.TextConverter.TEXT_FIELD_HTML_FORMAT</linktext></link><link href="flashx.textLayout.conversion.xml#IHTMLImporter"><linktext>flashx.textLayout.conversion.IHTMLImporter</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:typographicCase:get"><apiName>typographicCase</apiName><shortdesc>
		 TextLayoutFormat:
		 The type of typographic case used for this text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 The type of typographic case used for this text. Here are some examples:<p><adobeimage alt="typographicCase" href="../../../images/textLayout_typographiccase.png"/></p>
		 <p>Legal values are TLFTypographicCase.DEFAULT, TLFTypographicCase.CAPS_TO_SMALL_CAPS, TLFTypographicCase.UPPERCASE, TLFTypographicCase.LOWERCASE, TLFTypographicCase.LOWERCASE_TO_SMALL_CAPS, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of TLFTypographicCase.DEFAULT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TLFTypographicCase"><linktext>flashx.textLayout.formats.TLFTypographicCase</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:userStyles:get"><apiName>userStyles</apiName><shortdesc> Allows you to read and write user styles on a FlowElement object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc> Allows you to read and write user styles on a FlowElement object.  Note that reading this property
		makes a copy of the userStyles set in the format of this element. 
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:verticalAlign:get"><apiName>verticalAlign</apiName><shortdesc>
		 TextLayoutFormat:
		 Vertical alignment or justification (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Vertical alignment or justification (adopts default value if undefined during cascade).
		 Determines how TextFlow elements align within the container.
		 <p>Legal values are VerticalAlign.TOP, VerticalAlign.MIDDLE, VerticalAlign.BOTTOM, VerticalAlign.JUSTIFY, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of VerticalAlign.TOP.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#VerticalAlign"><linktext>flashx.textLayout.formats.VerticalAlign</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:whiteSpaceCollapse:get"><apiName>whiteSpaceCollapse</apiName><shortdesc>
		 TextLayoutFormat:
		 Collapses or preserves whitespace when importing text into a TextFlow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Collapses or preserves whitespace when importing text into a TextFlow. <codeph>WhiteSpaceCollapse.PRESERVE</codeph> retains all whitespace characters. <codeph>WhiteSpaceCollapse.COLLAPSE</codeph> removes newlines, tabs, and leading or trailing spaces within a block of imported text. Line break tags () and Unicode line separator characters are retained.
		 <p>Legal values are WhiteSpaceCollapse.PRESERVE, WhiteSpaceCollapse.COLLAPSE, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of WhiteSpaceCollapse.COLLAPSE.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#WhiteSpaceCollapse"><linktext>flashx.textLayout.formats.WhiteSpaceCollapse</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:wordSpacing:get"><apiName>wordSpacing</apiName><shortdesc>
		 TextLayoutFormat:
		 Specifies the optimum, minimum, and maximum spacing (as a multiplier of the width of a normal space) between words to use during justification.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Specifies the optimum, minimum, and maximum spacing (as a multiplier of the width of a normal space) between words to use during justification.
		 The optimum space is used to indicate the desired size of a space, as a fraction of the value defined in the font. The minimum and maximum values are the used when textJustify is distribute to determine how wide or narrow the spaces between the words may grow before letter spacing is used to justify the line.
		 <p>Legal values as a percent are numbers from -1000% to 1000%.</p>
		 <p>Legal values include FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 100%, 50%, 150%.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:tracking:set"><apiName>tracking</apiName><shortdesc>
		 Sets the tracking and is synonymous with the trackingRight property.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Object"/></apiValueDef><apiDesc>
		 Sets the tracking and is synonymous with the <codeph>trackingRight</codeph> property. Specified as a number of
		 pixels or a percent of <codeph>fontSize</codeph>.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/trackingRight"><linktext>trackingRight</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:TextRange"><apiName>TextRange</apiName><shortdesc>
	 A read only class that describes a range of contiguous text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 A read only class that describes a range of contiguous text. Such a range occurs when you select a
	 section of text. The range consists of the anchor point of the selection, <codeph>anchorPosition</codeph>,
	 and the point that is to be modified by actions, <codeph>activePosition</codeph>.  As block selections are 
	 modified and extended <codeph>anchorPosition</codeph> remains fixed and <codeph>activePosition</codeph> is modified.  
	 The anchor position may be placed in the text before or after the active position.
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link><link href="flashx.textLayout.edit.xml#SelectionState"><linktext>SelectionState</linktext></link></related-links><apiConstructor id="flashx.textLayout.elements:TextRange:TextRange"><apiName>TextRange</apiName><shortdesc> Constructor - creates a new TextRange instance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>root</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier><apiDesc>the TextFlow associated with the selection.
		 </apiDesc></apiParam><apiParam><apiItemName>anchorIndex</apiItemName><apiType value="int"/><apiDesc>the index position of the anchor in the selection. The first position in the text is position 0.
		 </apiDesc></apiParam><apiParam><apiItemName>activeIndex</apiItemName><apiType value="int"/><apiDesc>the index position of the active location in the selection. The first position in the text is position 0. 
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> Constructor - creates a new TextRange instance.  A TextRange can be (-1,-1), indicating no range, or a pair of 
		values from 0 to <codeph>TextFlow.textLength</codeph>.
		
		</apiDesc></apiConstructorDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/textLength"><linktext>FlowElement.textLength</linktext></link></related-links></apiConstructor><apiOperation id="flashx.textLayout.elements:TextRange:updateRange"><apiName>updateRange</apiName><shortdesc> Update the range with new anchor or active position values.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>true if selection is changed.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>newAnchorPosition</apiItemName><apiType value="int"/><apiDesc>the anchor index of the selection.
		  </apiDesc></apiParam><apiParam><apiItemName>newActivePosition</apiItemName><apiType value="int"/><apiDesc>the active index of the selection.
		  </apiDesc></apiParam></apiOperationDef><apiDesc> Update the range with new anchor or active position values.
		
		</apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.elements:TextRange:absoluteEnd:get"><apiName>absoluteEnd</apiName><shortdesc> End of the selection, as an absolute position in the TextFlow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc> End of the selection, as an absolute position in the TextFlow.
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:TextRange:absoluteStart:get"><apiName>absoluteStart</apiName><shortdesc> Start of the selection, as an absolute position in the TextFlow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc> Start of the selection, as an absolute position in the TextFlow.
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:TextRange:activePosition:get"><apiName>activePosition</apiName><shortdesc> Active position of the selection, as an absolute position in the TextFlow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc> Active position of the selection, as an absolute position in the TextFlow.
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:TextRange:anchorPosition:get"><apiName>anchorPosition</apiName><shortdesc> Anchor position of the selection, as an absolute position in the TextFlow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc> Anchor position of the selection, as an absolute position in the TextFlow.
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:TextRange:textFlow:get"><apiName>textFlow</apiName><shortdesc> Returns the TextFlow associated with the selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.elements:TextFlow</apiValueClassifier></apiValueDef><apiDesc> Returns the TextFlow associated with the selection.
		</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:TabElement"><apiName>TabElement</apiName><shortdesc> 
	 The TabElement class represents a &amp;lt;tab/&amp;gt; in the text flow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flashx.textLayout.elements:SpecialCharacterElement</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 The TabElement class represents a &lt;tab/&gt; in the text flow. You assign tab stops as an array of TabStopFormat objects to the 
	 <codeph>ParagraphElement.tabStops</codeph> property.
	 
	 <p><b>Note</b>:This class exists primarily to support &lt;tab/&gt; in MXML markup. You can add tab characters (\t) directly 
	 into the text like this:</p>
	 
	 <codeblock rev="3.0">
	 spanElement1.text += '\t';
	 </codeblock>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TabStopFormat"><linktext>flashx.textLayout.formats.TabStopFormat</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement/tabStops"><linktext>FlowElement.tabStops</linktext></link><link href="flashx.textLayout.elements.xml#SpanElement"><linktext>SpanElement</linktext></link></related-links><apiConstructor id="flashx.textLayout.elements:TabElement:TabElement"><apiName>TabElement</apiName><shortdesc> Constructor - creates a new TabElement instance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> Constructor - creates a new TabElement instance. 
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.elements:ListElement"><apiName>ListElement</apiName><shortdesc> 
	 The List class is used for grouping together items into a numbered or unnumbered list.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.elements:ContainerFormattedElement</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 The List class is used for grouping together items into a numbered or unnumbered list. A ListElement's children may be of type ListItemElement,
	 ListElement, ParagraphElement, or DivElement. 
	 
	 <p>Each ListElement creates a scope with an implicit counter 'ordered'.</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#ITextLayoutFormat/listStyleType"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStyleType</linktext></link><link href="flashx.textLayout.formats.xml#ITextLayoutFormat/listStylePosition"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStylePosition</linktext></link><link href="flashx.textLayout.formats.xml#ListMarkerFormat"><linktext>flashx.textLayout.formats.ListMarkerFormat</linktext></link></related-links></apiClassifier><apiClassifier id="flashx.textLayout.elements:SpecialCharacterElement"><apiName>SpecialCharacterElement</apiName><shortdesc> The SpecialCharacterElement class is an abstract base class for elements that represent special characters.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.elements:SpanElement</apiBaseClassifier></apiClassifierDef><apiDesc> The SpecialCharacterElement class is an abstract base class for elements that represent special characters.
	 
	 <p>You cannot create a SpecialCharacterElement object directly. Invoking <codeph>new SpecialCharacterElement()</codeph>
	 throws an error exception.</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#BreakElement"><linktext>BreakElement</linktext></link><link href="flashx.textLayout.elements.xml#TabElement"><linktext>TabElement</linktext></link></related-links><apiConstructor id="flashx.textLayout.elements:SpecialCharacterElement:SpecialCharacterElement"><apiName>SpecialCharacterElement</apiName><shortdesc>  
		 Base class - invoking new SpecialCharacterElement() throws an error exception.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>  
		 Base class - invoking <codeph>new SpecialCharacterElement()</codeph> throws an error exception.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier></apiPackage><apiPackage id="flashx.textLayout.events"><apiName>flashx.textLayout.events</apiName><apiDetail/><apiClassifier id="flashx.textLayout.events:StatusChangeEvent"><apiName>StatusChangeEvent</apiName><shortdesc> 
	 A TextFlow instance dispatches this event when the status of a FlowElement changes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 A TextFlow instance dispatches this event when the status of a FlowElement changes. 
	 This event can be used to detect when an inline graphic element has
	 completed loading. You can use your event handler to recompose the text flow
	 based on the presence of the newly loaded inline graphic element.
	 
	 </apiDesc><example conref="examples\StatusChangeEvent_example.as"/></apiClassifierDetail><apiConstructor id="flashx.textLayout.events:StatusChangeEvent:StatusChangeEvent"><apiName>StatusChangeEvent</apiName><shortdesc> Creates an event object that contains information about a status change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>	The type of the event. Event listeners can access this information through the
		 inherited <codeph>type</codeph> property. There is only one type of StatusChangeEvent: 
		 <codeph>StatusChangeEvent.INLINE_GRAPHIC_STATUS_CHANGE</codeph>; 
		 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>	Indicates whether an event is a bubbling event.This event does not bubble.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>	Indicates whether the behavior associated with the event can be prevented.
		 This event cannot be cancelled.
		 </apiDesc></apiParam><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiData>null</apiData><apiDesc>The FlowElement instance that has experienced a change in status.
		 </apiDesc></apiParam><apiParam><apiItemName>status</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>The FlowElement instance's new status.
		 </apiDesc></apiParam><apiParam><apiItemName>errorEvent</apiItemName><apiType value="flash.events:ErrorEvent"/><apiData>null</apiData><apiDesc>The ErrorEvent object, if any, associated with the status.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> Creates an event object that contains information about a status change.
		 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flashx.textLayout.events:StatusChangeEvent:INLINE_GRAPHIC_STATUS_CHANGE"><apiName>INLINE_GRAPHIC_STATUS_CHANGE</apiName><shortdesc> 
	     Defines the value of the type property of a inlineGraphicStatusChanged event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>inlineGraphicStatusChange</apiData><apiType value="String"/></apiValueDef><apiDesc> 
	     Defines the value of the <codeph>type</codeph> property of a <codeph>inlineGraphicStatusChanged</codeph> event object.
	     </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:StatusChangeEvent:element:get"><apiName>element</apiName><shortdesc> 
		 The FlowElement instance that has experienced a change in status.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.elements:FlowElement</apiValueClassifier></apiValueDef><apiDesc> 
		 The FlowElement instance that has experienced a change in status. 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement"><linktext>flashx.textLayout.elements.FlowElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.events:StatusChangeEvent:errorEvent:get"><apiName>errorEvent</apiName><shortdesc> 
		 The ErrorEvent object that was dispatched as a result of the status change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.events:ErrorEvent"/></apiValueDef><apiDesc> 
		 The ErrorEvent object that was dispatched as a result of the status change. 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.events.ErrorEvent.xml"><linktext>flash.events.ErrorEvent</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.events:StatusChangeEvent:status:get"><apiName>status</apiName><shortdesc>
		 The FlowElement's new status.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
		 The FlowElement's new status. The possible values of this property are
		 defined by the InlineGraphicElementStatus class. There are five static constants
		 available in the InlineGraphicElementStatus class:
		 <ul>
		   <li>ERROR : String = "error". An error occurred during loading of a referenced graphic.</li>
		   <li>LOADING : String = "loading". Load has been initiated (but not completed) on a graphic element that is a URL.</li>
		   <li>LOAD_PENDING : String = "loadPending". Graphic element is an URL that has not been loaded.</li>
		   <li>READY : String = "ready". Graphic is completely loaded and properly sized.</li>
		   <li>SIZE_PENDING : String = "sizePending". Graphic element with auto or percentage width/height has completed loading but has not been recomposed.</li>
		 </ul>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElementStatus"><linktext>flashx.textLayout.elements.InlineGraphicElementStatus</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.events:FlowElementMouseEvent"><apiName>FlowElementMouseEvent</apiName><shortdesc> A link element dispatches this event when it detects mouse activity.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc> A link element dispatches this event when it detects mouse activity.
	 The Text Layout Framework includes this special version of mouse events
	 because mouse events are generally unwanted when a flow element is
	 embedded in an editable text flow, and because link elements are not in
	 the display list (they are not DisplayObjects).
	 <p>You can add an event listener to a link element to listen for this
	 type of event. If you choose to cancel the event by calling
	 <codeph>Event.preventDefault()</codeph>, the default behavior associated
	 with the event will not occur.
	 </p>
	 <p>If you choose not to add an event listener to the link element, or
	 your event listener function does not cancel the behavior, the 
	 event is again dispatched, but this time by the link element's
	 associated TextFlow instance rather than by the link element itself. 
	 This provides a second opportunity to listen for this event with
	 an event listener attached to the TextFlow. 
	 </p>
	 <p>FlowElementMouseEvents are
	 dispatched only when the text cannot be edited or when the control key 
	 is pressed concurrently with the mouse activity.</p>
	 <p>
	 The following six event types are dispatched only when the text
	 cannot be edited or when the control key is pressed:
	 <ul>
	   <li><codeph>FlowElementMouseEvent.CLICK</codeph></li>
	   <li><codeph>FlowElementMouseEvent.MOUSE_DOWN</codeph></li>
	   <li><codeph>FlowElementMouseEvent.MOUSE_UP</codeph></li>
	   <li><codeph>FlowElementMouseEvent.MOUSE_MOVE</codeph></li>
	   <li><codeph>FlowElementMouseEvent.ROLL_OVER</codeph></li>
	   <li><codeph>FlowElementMouseEvent.ROLL_OUT</codeph></li>
	 </ul>
	 </p>
	 
	 </apiDesc><example conref="examples\FlowElementMouseEvent_example.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#LinkElement"><linktext>flashx.textLayout.elements.LinkElement</linktext></link><link href="" invalidHref="flash.events.MouseEvent.xml"><linktext>flash.events.MouseEvent</linktext></link></related-links><apiConstructor id="flashx.textLayout.events:FlowElementMouseEvent:FlowElementMouseEvent"><apiName>FlowElementMouseEvent</apiName><shortdesc> 
		 Creates an event object that contains information about mouse activity.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc> The type of the event. Event listeners can access this information through the
		 inherited <codeph>type</codeph> property. There are six types:
		 <codeph>FlowElementMouseEvent.CLICK</codeph>; <codeph>FlowElementMouseEvent.MOUSE_DOWN</codeph>; <codeph>FlowElementMouseEvent.MOUSE_MOVE</codeph>;
		 <codeph>FlowElementMouseEvent.MOUSE_UP</codeph>; <codeph>FlowElementMouseEvent.ROLL_OVER</codeph>; and <codeph>FlowElementMouseEvent.ROLL_OUT</codeph>.
		 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Determines whether the Event object participates in the bubbling phase of the
		 event flow. FlowElementMouseEvent objects do not bubble.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Determines whether the Event object can be canceled. Event listeners can
		 access this information through the inherited <codeph>cancelable</codeph> property. FlowElementMouseEvent
		 objects can be cancelled. You can cancel the default behavior associated with this event
		 by calling the <codeph>preventDefault()</codeph> method in your event listener.
		 </apiDesc></apiParam><apiParam><apiItemName>flowElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiData>null</apiData><apiDesc>The instance of FlowElement, currently a LinkElement, associated with this
		 event. Event listeners can access this information through the <codeph>flowElement</codeph> property.
		 </apiDesc></apiParam><apiParam><apiItemName>originalEvent</apiItemName><apiType value="flash.events:MouseEvent"/><apiData>null</apiData><apiDesc>The original mouse event that occurred on the flowElement. Event listeners can 
		 access this information through the <codeph>originalEvent</codeph> property.

		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Creates an event object that contains information about mouse activity.
		 Event objects are passed as parameters to event listeners. Use the
		 constructor if you plan to manually dispatch an event. You do not need
		 to use the constructor to listen for FlowElementMouseEvent objects
		 generated by a FlowElement.
		 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flashx.textLayout.events:FlowElementMouseEvent:CLICK"><apiName>CLICK</apiName><shortdesc>
		 Defines the value of the type property of a click event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>click</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 Defines the value of the <codeph>type</codeph> property of a <codeph>click</codeph> event object. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/CLICK"><linktext>flash.events.MouseEvent.CLICK</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.events:FlowElementMouseEvent:MOUSE_DOWN"><apiName>MOUSE_DOWN</apiName><shortdesc>
		 Defines the value of the type property of a mouseDown event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseDown</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 Defines the value of the <codeph>type</codeph> property of a <codeph>mouseDown</codeph> event object. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_DOWN"><linktext>flash.events.MouseEvent.MOUSE_DOWN</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.events:FlowElementMouseEvent:MOUSE_MOVE"><apiName>MOUSE_MOVE</apiName><shortdesc>
		 Defines the value of the type property of a mouseMove event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseMove</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 Defines the value of the <codeph>type</codeph> property of a <codeph>mouseMove</codeph> event object. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_MOVE"><linktext>flash.events.MouseEvent.MOUSE_MOVE</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.events:FlowElementMouseEvent:MOUSE_UP"><apiName>MOUSE_UP</apiName><shortdesc>
		 Defines the value of the type property of a mouseUp event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseUp</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 Defines the value of the <codeph>type</codeph> property of a <codeph>mouseUp</codeph> event object. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_UP"><linktext>flash.events.MouseEvent.MOUSE_UP</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.events:FlowElementMouseEvent:ROLL_OUT"><apiName>ROLL_OUT</apiName><shortdesc>
		 Defines the value of the type property of a rollOut event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rollOut</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 Defines the value of the <codeph>type</codeph> property of a <codeph>rollOut</codeph> event object. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/ROLL_OUT"><linktext>flash.events.MouseEvent.ROLL_OUT</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.events:FlowElementMouseEvent:ROLL_OVER"><apiName>ROLL_OVER</apiName><shortdesc>
		 Defines the value of the type property of a rollOver event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rollOver</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 Defines the value of the <codeph>type</codeph> property of a <codeph>rollOver</codeph> event object. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/ROLL_OVER"><linktext>flash.events.MouseEvent.ROLL_OVER</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.events:FlowElementMouseEvent:flowElement:get"><apiName>flowElement</apiName><shortdesc> 
		 The FlowElement that dispatched the event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.elements:FlowElement</apiValueClassifier></apiValueDef><apiDesc> 
		 The FlowElement that dispatched the event.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement"><linktext>flashx.textLayout.elements.FlowElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.events:FlowElementMouseEvent:originalEvent:get"><apiName>originalEvent</apiName><shortdesc> 
		 The original mouse event generated by the mouse activity.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.events:MouseEvent"/></apiValueDef><apiDesc> 
		 The original mouse event generated by the mouse activity. 
		 This property can contain any of the following values:
		 <ul>
		   <li><codeph>MouseEvent.CLICK</codeph></li>
		   <li><codeph>MouseEvent.MOUSE_DOWN</codeph></li>
		   <li><codeph>MouseEvent.MOUSE_UP</codeph></li>
		   <li><codeph>MouseEvent.MOUSE_MOVE</codeph></li>
		   <li><codeph>MouseEvent.MOUSE_OVER</codeph></li>
		   <li><codeph>MouseEvent.MOUSE_OUT</codeph></li>
		 </ul>
		 <p>
		 In most cases the original event matches the event that the
		 link element dispatches. The events match for the <codeph>click</codeph>,
		 <codeph>mouseDown</codeph>, <codeph>mouseOut</codeph>, and <codeph>mouseOver</codeph>
		 events. There are two cases, however, in which the original event
		 is converted by the link element to a related event. 
		 If a link element detects a <codeph>mouseOver</codeph> event, it dispatches
		 a <codeph>rollOver</codeph> event. Likewise, if a link element detects
		 a <codeph>mouseOut</codeph> event, it dispatches a <codeph>rollOut</codeph> event.
		 Usually, the event target and the mouse coordinates are related to
		 the TextLine instance containing the link element.
		 </p>
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.events.MouseEvent.xml"><linktext>flash.events.MouseEvent</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.events:CompositionCompleteEvent"><apiName>CompositionCompleteEvent</apiName><shortdesc> 
	 A TextFlow instance dispatches this event after a compose operation completes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 A TextFlow instance dispatches this event after a compose operation completes. 
	 Each text container has two states: composition and display. This event notifies
	 you when the composition phase has ended. This provides an opportunity to make any
	 necessary and appropriate changes to the container before you display the text. 
	 For example, you can use this event to add highlighting of certain words or
	 characters in the text flow before the text is displayed.
	 
	 <p>The three main methods that dispatch this event are <codeph>compose()</codeph>, 
	 <codeph>updateToController()</codeph>, and <codeph>updateAllControllers()</codeph>.
	 All three of these methods are in the StandardFlowComposer class.</p>
	 
	 <p><b>Note: </b>If the event is dispatched by the
	 <codeph>updateAllControllers()</codeph> method, do not call 
	 <codeph>updateAllControllers()</codeph> again in your event handler function.
	 Such a call would be a recursive call because the <codeph>updateAllControllers()</codeph> 
	 method executes both the composition and display steps. The <codeph>updateAllControllers()</codeph>
	 dispatches this event after composition completes, but before the display step executes.
	 The same reasoning applies to the <codeph>updateToController()</codeph> method.
	 </p>
	 
	 </apiDesc><example conref="examples\CompositionCompleteEvent_example.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>flashx.textLayout.elements.TextFlow</linktext></link></related-links><apiConstructor id="flashx.textLayout.events:CompositionCompleteEvent:CompositionCompleteEvent"><apiName>CompositionCompleteEvent</apiName><shortdesc> Constructor
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>event type - use the static property COMPOSITION_COMPLETE.
		 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Indicates whether an event is a bubbling event. This event does not bubble.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Indicates whether the behavior associated with the event can be prevented.
		 This event cannot be cancelled.
		 </apiDesc></apiParam><apiParam><apiItemName>textFlow</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier><apiData>null</apiData><apiDesc>The TextFlow which was composed
		 </apiDesc></apiParam><apiParam><apiItemName>compositionStart</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>start of composition, in terms of an index into the text flow.
		 </apiDesc></apiParam><apiParam><apiItemName>compositionLength</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>length number of characters composed
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> Constructor
		 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flashx.textLayout.events:CompositionCompleteEvent:COMPOSITION_COMPLETE"><apiName>COMPOSITION_COMPLETE</apiName><shortdesc> 
	     Defines the value of the type property of a compositionComplete event object 
	     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>compositionComplete</apiData><apiType value="String"/></apiValueDef><apiDesc> 
	     Defines the value of the <codeph>type</codeph> property of a <codeph>compositionComplete</codeph> event object 
	     </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:CompositionCompleteEvent:compositionLength:get"><apiName>compositionLength</apiName><shortdesc> 
		 The number of characters composed.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc> 
		 The number of characters composed.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:CompositionCompleteEvent:compositionStart:get"><apiName>compositionStart</apiName><shortdesc> 
		 The start location of the text range affected by the composition, expressed as an index into the text flow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc> 
		 The start location of the text range affected by the composition, expressed as an index into the text flow.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:CompositionCompleteEvent:textFlow:get"><apiName>textFlow</apiName><shortdesc>
		 TextFlow on which composition has been completed.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.elements:TextFlow</apiValueClassifier></apiValueDef><apiDesc>
		 TextFlow on which composition has been completed. 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.events:DamageEvent"><apiName>DamageEvent</apiName><shortdesc> 
	 A TextFlow instance dispatches this each time it is marked as damaged.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 A TextFlow instance dispatches this each time it is marked as damaged.  Damage can be caused by changes to the model or changes to the layout.
	 
	 </apiDesc><example conref="examples\DamageEvent_example.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>flashx.textLayout.elements.TextFlow</linktext></link></related-links><apiConstructor id="flashx.textLayout.events:DamageEvent:DamageEvent"><apiName>DamageEvent</apiName><shortdesc> Constructor
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>text index of the start of the damage
		 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>length of text that was damaged
		 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam><apiParam><apiItemName>textFlow</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier><apiData>null</apiData></apiParam><apiParam><apiItemName>damageAbsoluteStart</apiItemName><apiType value="int"/><apiData>0</apiData></apiParam><apiParam><apiItemName>damageLength</apiItemName><apiType value="int"/><apiData>0</apiData></apiParam></apiConstructorDef><apiDesc> Constructor
		 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flashx.textLayout.events:DamageEvent:DAMAGE"><apiName>DAMAGE</apiName><shortdesc> Event type for DamageEvent </shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>damage</apiData><apiType value="String"/></apiValueDef><apiDesc> Event type for DamageEvent </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:DamageEvent:damageAbsoluteStart:get"><apiName>damageAbsoluteStart</apiName><shortdesc>
		 Absolute start of the damage 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 Absolute start of the damage 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:DamageEvent:damageLength:get"><apiName>damageLength</apiName><shortdesc>
		 Length of the damage 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 Length of the damage 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:DamageEvent:textFlow:get"><apiName>textFlow</apiName><shortdesc>
		 TextFlow owning the damage 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:TextFlow</apiValueClassifier></apiValueDef><apiDesc>
		 TextFlow owning the damage 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.events:SelectionEvent"><apiName>SelectionEvent</apiName><shortdesc> 
	 A TextFlow instance dispatches a SelectionEvent object when
	 an EditManager or SelectionManager changes or selects a range of text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 A TextFlow instance dispatches a SelectionEvent object when
	 an EditManager or SelectionManager changes or selects a range of text. 
	 For example, this event is dispatched not only when a range of text is
	 selected, but also when the selection changes because the
	 user clicks elsewhere in the text flow. Moreover, this
	 event is also dispatched when an EditManager changes
	 the text or text formatting within a range of text.
	 
	 </apiDesc><example conref="examples\SelectionEvent_example.as"/></apiClassifierDetail><apiConstructor id="flashx.textLayout.events:SelectionEvent:SelectionEvent"><apiName>SelectionEvent</apiName><shortdesc> 
		 Creates an event object that contains information about a flow operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>	The type of the event. Event listeners can access this information through the
		 inherited <codeph>type</codeph> property. There is only one type of SelectionEvent: 
		 <codeph>SelectionEvent.SELECTION_CHANGE</codeph>; 
		 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>	Indicates whether an event is a bubbling event.This event does not bubble.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>	Indicates whether the behavior associated with the event can be prevented.
		 </apiDesc></apiParam><apiParam><apiItemName>selectionState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiData>null</apiData><apiDesc>	An object of type ElementRange that describes the range of text selected.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Creates an event object that contains information about a flow operation.
		 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flashx.textLayout.events:SelectionEvent:SELECTION_CHANGE"><apiName>SELECTION_CHANGE</apiName><shortdesc> 
		 The SelectionEvent.SELECTION_CHANGE constant defines the value of the 
		 type property of the event object for a selection event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>selectionChange</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		 The SelectionEvent.SELECTION_CHANGE constant defines the value of the 
		 type property of the event object for a selection event. 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:SelectionEvent:selectionState:get"><apiName>selectionState</apiName><shortdesc> 
		 An object of type SelectionState that represents the selected range associated with this SelectionEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.edit:SelectionState</apiValueClassifier></apiValueDef><apiDesc> 
		 An object of type SelectionState that represents the selected range associated with this SelectionEvent.
		 
		 <p>You can use this property, along with the ElementRange class, to create an ElementRange
		 instance that represents the range of selected text.
		 You can use the following line of code to create an instance of the
		 ElementRange class that represents the range of selected text
		 (the <codeph>ev</codeph> variable represents the event object, and the conditional operator 
		 is used to guard against a <codeph>null</codeph> value for the <codeph>selectionState</codeph>
		 property):</p>
		 <codeblock>
		 // Find selected element range
		 var range:ElementRange = ev.selectionState ?  
		 	ElementRange.createElementRange(ev.selectionState.textFlow,
		 	ev.selectionState.absoluteStart, ev.selectionState.absoluteEnd) : null;</codeblock>
		 
		 
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.edit.xml#ElementRange"><linktext>flashx.textLayout.edit.ElementRange</linktext></link><link href="flashx.textLayout.edit.xml#SelectionState"><linktext>flashx.textLayout.edit.SelectionState</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.events:FlowOperationEvent"><apiName>FlowOperationEvent</apiName><shortdesc> A TextFlow instance dispatches this event just before an operation commences
	 and again just after an operation completes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc> A TextFlow instance dispatches this event just before an operation commences
	 and again just after an operation completes. Although the event object
	 dispatched in both cases is an instance of FlowOperationEvent, the events
	 dispatched before and after an operation differ in significant ways.
	 
	 <p>Before any operation is carried out, a TextFlow object dispatches a FlowOperationEvent
	 with its <codeph>type</codeph> property set to <codeph>FlowOperationEvent.FLOW_OPERATION_BEGIN.</codeph>
	 You can determine what type of operation is about to commence by checking
	 the <codeph>operation</codeph> property. Events of type FLOW_OPERATION_BEGIN are
	 cancellable, which means that if you decide that the operation should not proceed,
	 you can call <codeph>Event.PreventDefault()</codeph> to cancel the operation.
	 If you cancel the operation, the operation is not performed and the 
	 FLOW_OPERATION_END event is not dispatched. You may also choose to call back into the
	 EditManager to do another operation before the operation that triggered the event is done. If you do
	 this, the operations you initiate in your event handler will be undone as a single
	 operation with the operation that triggered the event.</p>
	 
	 <p>If you allow the operation to proceed, TextFlow will dispatch a FlowOperationEvent
	 upon completion of the operation with its <codeph>type</codeph> property set to
	 <codeph>FlowOperationEvent.FLOW_OPERATION_END</codeph>. This event is dispatched
	 before Flash Player throws any errors that may have occurred as a result of the
	 operation. This gives you an opportunity to process the error before Flash Player
	 throws the error. You can access the error through the event's <codeph>error</codeph>
	 property. If you choose to handle the error in your event handler, you can prevent
	 Flash Player from throwing the error by cancelling the FLOW_OPERATION_END event
	 by calling <codeph>Event.preventDefault()</codeph>. You may also choose to call back into the
	 EditManager to do some additional operations. If you do this, the operations that result
	 will be undone as a unit with the operation that triggered the event.
	 </p> 
	 
	 </apiDesc><example conref="examples\FlowOperationEvent_example.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.operations.xml#FlowOperation"><linktext>flashx.textLayout.operations.FlowOperation</linktext></link></related-links><apiConstructor id="flashx.textLayout.events:FlowOperationEvent:FlowOperationEvent"><apiName>FlowOperationEvent</apiName><shortdesc> Creates an event object that contains information about a flow operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>		The type of the event. Event listeners can access this information through the
		 inherited <codeph>type</codeph> property. There are two types: 
		 <codeph>FlowOperationEvent.FLOW_OPERATION_BEGIN</codeph>; 
		 <codeph>FlowOperationEvent.FLOW_OPERATION_END</codeph>.
		 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>		Indicates whether an event is a bubbling event.This event does not bubble.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>	Indicates whether the behavior associated with the event can be prevented.
		 This event can be cancelled by calling the <codeph>Event.preventDefault()</codeph> method in
		 your event handler function.
		 </apiDesc></apiParam><apiParam><apiItemName>operation</apiItemName><apiOperationClassifier>flashx.textLayout.operations:FlowOperation</apiOperationClassifier><apiData>null</apiData><apiDesc>	The FlowOperation that is about to commence or that has just ended.
		 </apiDesc></apiParam><apiParam><apiItemName>level</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>		Any Error generating during the operation.
		 </apiDesc></apiParam><apiParam><apiItemName>error</apiItemName><apiType value="Error"/><apiData>null</apiData></apiParam></apiConstructorDef><apiDesc> Creates an event object that contains information about a flow operation.
		 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flashx.textLayout.events:FlowOperationEvent:FLOW_OPERATION_BEGIN"><apiName>FLOW_OPERATION_BEGIN</apiName><shortdesc> 
		 Defines the value of the type property of a flowOperationBegin event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>flowOperationBegin</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		 Defines the value of the <codeph>type</codeph> property of a <codeph>flowOperationBegin</codeph> event object.
		 Dispatched before an operation is executed.   Cancelling this event blocks the operation. 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:FlowOperationEvent:FLOW_OPERATION_COMPLETE"><apiName>FLOW_OPERATION_COMPLETE</apiName><shortdesc>  
		 Defines the value of the type property of a flowOperationComplete event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>flowOperationComplete</apiData><apiType value="String"/></apiValueDef><apiDesc>  
		 Defines the value of the <codeph>type</codeph> property of a <codeph>flowOperationComplete</codeph> event object.
		 Dispatched after all operations including pending and composite operations are completed, composition is finished and the display is scrolled.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:FlowOperationEvent:FLOW_OPERATION_END"><apiName>FLOW_OPERATION_END</apiName><shortdesc>  
		 Defines the value of the type property of a flowOperationEnd event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>flowOperationEnd</apiData><apiType value="String"/></apiValueDef><apiDesc>  
		 Defines the value of the <codeph>type</codeph> property of a <codeph>flowOperationEnd</codeph> event object.
		 Dispatched after an operation completes. Any errors are stored in <codeph>OperationEvent.error</codeph>.
	 	 If there is an error, cancelling this event blocks the rethrow of the error.
	 	 Generally speaking all errors are likely to be fatal.
	 	 <p>Changing an operation at this time (after it has been executed) may fail.</p> 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:FlowOperationEvent:error:get"><apiName>error</apiName><shortdesc> 
		 The error thrown, if any, during an operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Error"/></apiValueDef><apiDesc> 
		 The error thrown, if any, during an operation.  
		 If an error occurs during an operation, a reference to the error object is attached to the 
		 FLOW_OPERATION_END event. This give you the opportunity to deal with the error
		 before Flash Player throws the error. If you cancel the event, Flash Player will not throw the error.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:FlowOperationEvent:level:get"><apiName>level</apiName><shortdesc> 
		 Operations may be merged into composite operations through nesting.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc> 
		 Operations may be merged into composite operations through nesting.  This flag describes the nesting level of the operation.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:FlowOperationEvent:operation:get"><apiName>operation</apiName><shortdesc> 
		 The operation that is about to begin or has just ended.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.operations:FlowOperation</apiValueClassifier></apiValueDef><apiDesc> 
		 The operation that is about to begin or has just ended.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.operations.xml#FlowOperation"><linktext>flashx.textLayout.operations.FlowOperation</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.events:ScrollEvent"><apiName>ScrollEvent</apiName><shortdesc>
	  Represents events that are dispatched when the TextFlow does automatic scrolling.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.events:TextLayoutEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Represents events that are dispatched when the TextFlow does automatic scrolling.
	 
	  </apiDesc></apiClassifierDetail><apiConstructor id="flashx.textLayout.events:ScrollEvent:ScrollEvent"><apiName>ScrollEvent</apiName><shortdesc>
		  Constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>The event type; indicates the action that caused the event.
		 
		  </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Specifies whether the event can bubble
		  up the display list hierarchy.
		 
		  </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Specifies whether the behavior associated with the event
		  can be prevented.
		 
		 
		  </apiDesc></apiParam><apiParam><apiItemName>direction</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>The change in scroll position, expressed in pixels.
		  
		 </apiDesc></apiParam><apiParam><apiItemName>delta</apiItemName><apiType value="Number"/><apiData>unknown</apiData></apiParam></apiConstructorDef><apiDesc>
		  Constructor.
		 
		  Scroll events are dispatched when a container has scrolled. 
		 
		  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flashx.textLayout.events:ScrollEvent:delta"><apiName>delta</apiName><shortdesc>
		  The change in the scroll position value that resulted from 
		  the scroll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
		  The change in the scroll position value that resulted from 
		  the scroll. The value is expressed in pixels. A positive value indicates the 
		  scroll was down or to the right. A negative value indicates the scroll  
		 	was up or to the left.
		  
		  </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:ScrollEvent:direction"><apiName>direction</apiName><shortdesc>
		  The direction of motion.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
		  The direction of motion.
		  The possible values are <codeph>ScrollEventDirection.VERTICAL</codeph>
		  or <codeph>ScrollEventDirection.HORIZONTAL</codeph>.
		 
		  </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.events.xml#ScrollEventDirection"><linktext>flashx.textLayout.events.ScrollEventDirection</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.events:TextLayoutEvent"><apiName>TextLayoutEvent</apiName><shortdesc>
	 A TextLayoutEvent instance represents an event, such as the 
	 TextLayoutEvent.SCROLL event, that does not require
	 custom properties.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
	 A TextLayoutEvent instance represents an event, such as the 
	 <codeph>TextLayoutEvent.SCROLL</codeph> event, that does not require
	 custom properties. 
	 <p>A scroll event is represented by a TextLayoutEvent instance with its 
	 <codeph>type</codeph> property set to <codeph>TextLayoutEvent.SCROLL</codeph>.
	 A class specifically for scroll events is not necessary because there are
	 no custom properties for a scroll event, as there are for the other
	 events that have specific event classes.
	 If a new text layout event is needed, and the event does not require
	 custom properties, the new event will also be represented by a
	 TextLayoutEvent object, but with its <codeph>type</codeph> property
	 set to a new static constant.
	 </p>
	 
	 </apiDesc><example conref="examples\TextLayoutEvent_example.as"/></apiClassifierDetail><apiConstructor id="flashx.textLayout.events:TextLayoutEvent:TextLayoutEvent"><apiName>TextLayoutEvent</apiName><shortdesc>
		  The TextLayoutEvent class represents the event object passed to
		  the event listener for many Text Layout events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiConstructorDef><apiDesc>
		  The TextLayoutEvent class represents the event object passed to
		  the event listener for many Text Layout events.
		 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flashx.textLayout.events:TextLayoutEvent:SCROLL"><apiName>SCROLL</apiName><shortdesc>
	      The TextLayoutEvent.SCROLL constant defines the value of the
	      type property of the event object for a scroll event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>scroll</apiData><apiType value="String"/></apiValueDef><apiDesc>
	      The <codeph>TextLayoutEvent.SCROLL</codeph> constant defines the value of the
	      <codeph>type</codeph> property of the event object for a <codeph>scroll</codeph> event.
	     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.events:ScrollEventDirection"><apiName>ScrollEventDirection</apiName><shortdesc>
      Constants for the values of the direction property
      of a ScrollEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.0"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
      Constants for the values of the <codeph>direction</codeph> property
      of a ScrollEvent.
     
      </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.events.xml#ScrollEvent"><linktext>flashx.textLayout.events.ScrollEvent</linktext></link></related-links><apiValue id="flashx.textLayout.events:ScrollEventDirection:HORIZONTAL"><apiName>HORIZONTAL</apiName><shortdesc>
          The user scrolled horizontally.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.0"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>horizontal</apiData><apiType value="String"/></apiValueDef><apiDesc>
          The user scrolled horizontally.
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:ScrollEventDirection:VERTICAL"><apiName>VERTICAL</apiName><shortdesc>
          The user scrolled vertically.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.0"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>vertical</apiData><apiType value="String"/></apiValueDef><apiDesc>
          The user scrolled vertically.
         
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.events:UpdateCompleteEvent"><apiName>UpdateCompleteEvent</apiName><shortdesc> 
	 A TextFlow instance dispatches this event after any of its containers completes 
	 an update.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata><asCustoms><internal>Note: the DamageEvent_example class contains a good example of 
	 using the UpdateCompleteEvent, so I have included it as the class example
	 instead of creating a new example. I've updated the description of the
	 DamageEvent_example file to include prominent mention of the UpdateCompleteEvent.
	 
	 </internal></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 A TextFlow instance dispatches this event after any of its containers completes 
	 an update. Each text container has two states: composition and display. This 
	 event notifies you when the display phase has ended. This provides an 
	 opportunity to make any necessary changes to the container when it is ready to
	 be displayed, but hasn't yet been painted to the screen.
	 
	 </apiDesc><example conref="examples\DamageEvent_example.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>flashx.textLayout.elements.TextFlow</linktext></link></related-links><apiConstructor id="flashx.textLayout.events:UpdateCompleteEvent:UpdateCompleteEvent"><apiName>UpdateCompleteEvent</apiName><shortdesc> Constructor
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>event type - use the static property UPDATE_COMPLETE.
		 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Indicates whether an event is a bubbling event. This event does not bubble.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Indicates whether the behavior associated with the event can be prevented.
		 This event cannot be cancelled.
		 </apiDesc></apiParam><apiParam><apiItemName>textFlow</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier><apiData>null</apiData><apiDesc>The ContainerController whose container was updated
		 </apiDesc></apiParam><apiParam><apiItemName>controller</apiItemName><apiOperationClassifier>flashx.textLayout.container:ContainerController</apiOperationClassifier><apiData>null</apiData><apiDesc>The TextFlow which was updated
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> Constructor
		 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flashx.textLayout.events:UpdateCompleteEvent:UPDATE_COMPLETE"><apiName>UPDATE_COMPLETE</apiName><shortdesc> 
	     Defines the value of the type property of an UpdateCompleteEvent object 
	     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>updateComplete</apiData><apiType value="String"/></apiValueDef><apiDesc> 
	     Defines the value of the <codeph>type</codeph> property of an <codeph>UpdateCompleteEvent</codeph> object 
	     </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:UpdateCompleteEvent:controller:get"><apiName>controller</apiName><shortdesc> 
		 The controller of the container being updated
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.container:ContainerController</apiValueClassifier></apiValueDef><apiDesc> 
		 The controller of the container being updated
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:UpdateCompleteEvent:textFlow:get"><apiName>textFlow</apiName><shortdesc>
		 TextFlow which has been updated.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.elements:TextFlow</apiValueClassifier></apiValueDef><apiDesc>
		 TextFlow which has been updated. 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage><apiPackage id="flashx.textLayout.factory"><apiName>flashx.textLayout.factory</apiName><apiDetail/><apiClassifier id="flashx.textLayout.factory:TruncationOptions"><apiName>TruncationOptions</apiName><shortdesc> 
	 The TruncationOptions class specifies options for limiting the number of lines of text 
	 created by a text line factory and for indicating when lines have been left out.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 The TruncationOptions class specifies options for limiting the number of lines of text 
	 created by a text line factory and for indicating when lines have been left out.
	 
	 </apiDesc></apiClassifierDetail><apiConstructor id="flashx.textLayout.factory:TruncationOptions:TruncationOptions"><apiName>TruncationOptions</apiName><shortdesc> 
		 Creates a TruncationOptions object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>truncationIndicator</apiItemName><apiType value="String"/><apiData>unknown</apiData><apiDesc>the string used to indicate that text has been truncated. 
		 It appears at the end of the composed text. The default value is the horizontal ellipsis (U+2026).
		 </apiDesc></apiParam><apiParam><apiItemName>lineCountLimit</apiItemName><apiType value="int"/><apiData>unknown</apiData><apiDesc>specifies a truncation criterion in the form of the maximum 
		 number of lines allowed. The default value of <codeph>NO_LINE_COUNT_LIMIT</codeph> 
		 indicates that there is no line count limit.
		 </apiDesc></apiParam><apiParam><apiItemName>truncationIndicatorFormat</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiData>null</apiData><apiDesc>specifies the format for the truncation indicator. 
		 A null format (the default value) specifies that the truncation indicator assume 
		 the format of content just before the truncation point. The <codeph>TextLineFactory</codeph> 
		 methods that take a simple string as input also ignore this parameter and implement 
		 the default behavior.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Creates a TruncationOptions object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flashx.textLayout.factory:TruncationOptions:HORIZONTAL_ELLIPSIS"><apiName>HORIZONTAL_ELLIPSIS</apiName><shortdesc>
		 Defines the truncationIndicator property value, \u2026, that represents a horizontal ellipsis.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>…</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 Defines the <codeph>truncationIndicator</codeph> property value, <codeph>\u2026</codeph>, that represents a horizontal ellipsis.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.factory.xml#TruncationOptions/truncationIndicator"><linktext>truncationIndicator</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.factory:TruncationOptions:NO_LINE_COUNT_LIMIT"><apiName>NO_LINE_COUNT_LIMIT</apiName><shortdesc>
		 Defines the lineCountLimit property value, -1, that represents no limit.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>-1</apiData><apiType value="int"/></apiValueDef><apiDesc>
		 Defines the <codeph>lineCountLimit</codeph> property value, <codeph>-1</codeph>, that represents no limit.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.factory.xml#TruncationOptions/lineCountLimit"><linktext>lineCountLimit</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.factory:TruncationOptions:lineCountLimit:get"><apiName>lineCountLimit</apiName><shortdesc> 
		 The maximum number of lines to create.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc> 
		 The maximum number of lines to create.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.factory:TruncationOptions:truncationIndicatorFormat:get"><apiName>truncationIndicatorFormat</apiName><shortdesc> 
		 The style applied to the truncation indicator string.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		 The style applied to the truncation indicator string.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.factory:TruncationOptions:truncationIndicator:get"><apiName>truncationIndicator</apiName><shortdesc> 
		 A string used to indicate that content could not be fully displayed
		 because of limits on the number of lines.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc> 
		 A string used to indicate that content could not be fully displayed
		 because of limits on the number of lines.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.factory:StringTextLineFactory"><apiName>StringTextLineFactory</apiName><shortdesc>
 The StringTextLineFactory class provides a simple way to create TextLines from a string.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.factory:TextLineFactoryBase</apiBaseClassifier></apiClassifierDef><apiDesc>
 The StringTextLineFactory class provides a simple way to create TextLines from a string. 
 
 <p>The text lines are static and are created using a single format and a single paragraph. 
 The lines are created to fit in the specified bounding rectangle.</p>
 
 <p>The StringTextLineFactory provides an efficient way to create TextLines, since it reuses single TextFlow,
 ParagraphElement, SpanElement, and ContainerController objects across many repeated invocations. You can create a
 single factory, and use it again and again. You can also reuse all the parts that are the same each time
 you call it; for instance, you can reuse the various formats and the bounds.</p> 
 
 <p><b>Note:</b> To create static lines that use multiple formats or paragraphs, or that include
 inline graphics, use a TextFlowTextLineFactory and a TextFlow object. </p>
 
 <p><b>Note:</b> The StringTextLineFactory ignores the truncationIndicatorFormat property set in the truncationOptions when truncating text.</p>
  
 </apiDesc><example conref="examples\StringTextLineFactory_example.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.factory.xml#TextFlowTextLineFactory"><linktext>TextFlowTextLineFactory</linktext></link></related-links><apiConstructor id="flashx.textLayout.factory:StringTextLineFactory:StringTextLineFactory"><apiName>StringTextLineFactory</apiName><shortdesc> 
		 Creates a StringTextLineFactory object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>configuration</apiItemName><apiOperationClassifier>flashx.textLayout.elements:IConfiguration</apiOperationClassifier><apiData>null</apiData><apiDesc>The configuration object used to set the properties of the 
		 internal TextFlow object used to compose lines produced by this factory. 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Creates a StringTextLineFactory object.  
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flashx.textLayout.factory:StringTextLineFactory:createTextLines"><apiName>createTextLines</apiName><shortdesc> 
		 Creates TextLine objects using the text currently assigned to this factory object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>callback</apiItemName><apiType value="Function"/><apiDesc>The callback function called for each TextLine object created.
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Creates TextLine objects using the text currently assigned to this factory object.
		 
		 <p>The text lines are created using the currently assigned text and formats and
		 are composed to fit the bounds assigned to the <codeph>compositionBounds</codeph> property.
		 As each line is created, the factory calls the function specified in the 
		 <codeph>callback</codeph> parameter. This function is passed the TextLine object and
		 is responsible for displaying the line.</p>
		 
		 <p>To create a different set of lines, change any properties desired and call
		 <codeph>createTextLines()</codeph> again.</p>
		  
		 <p>Note that the scroll policies of the factory will control how many lines are generated.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.factory:StringTextLineFactory:configuration:get"><apiName>configuration</apiName><shortdesc> 
		 The configuration used by the internal TextFlow object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:IConfiguration</apiValueClassifier></apiValueDef><apiDesc> 
		 The configuration used by the internal TextFlow object.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.factory:StringTextLineFactory:defaultConfiguration:get"><apiName>defaultConfiguration</apiName><shortdesc> 
		 The default configuration used by this factory if none is specified.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:IConfiguration</apiValueClassifier></apiValueDef><apiDesc> 
		 The default configuration used by this factory if none is specified. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.factory:StringTextLineFactory:paragraphFormat:get"><apiName>paragraphFormat</apiName><shortdesc> 
		 The paragraph format.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		 The paragraph format. 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.factory:StringTextLineFactory:spanFormat:get"><apiName>spanFormat</apiName><shortdesc> 
		 The character format.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		 The character format. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.factory:StringTextLineFactory:textFlowFormat:get"><apiName>textFlowFormat</apiName><shortdesc> 
		 The text flow format.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		 The text flow format.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.factory:StringTextLineFactory:text:get"><apiName>text</apiName><shortdesc> 
		 The text to convert into TextLine objects.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc> 
		 The text to convert into TextLine objects.
		 
		 <p>To produce TextLines, call <codeph>createTextLines()</codeph> after setting this
		 <codeph>text</codeph> property and the desired formats.</p> 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.factory:TextLineFactoryBase"><apiName>TextLineFactoryBase</apiName><shortdesc>
 The TextLineFactoryBase class serves as the base class for the Text Layout Framework text line factories.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><Exclude kind="method" name="getNextTruncationPosition"/><Exclude kind="method" name="doesComposedTextFit"/><Exclude kind="method" name="callbackWithTextLines"/><Exclude kind="method" name="setContentBounds"/><Exclude kind="property" name="containerController"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 The TextLineFactoryBase class serves as the base class for the Text Layout Framework text line factories.
 
 <p><b>Note:</b> Application code does not typically need to create or use a TextLineFactoryBase object directly.
 Use one of the derived text factory classes instead.</p>
  
 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>flashx.textLayout.elements.TextFlow</linktext></link></related-links><apiConstructor id="flashx.textLayout.factory:TextLineFactoryBase:TextLineFactoryBase"><apiName>TextLineFactoryBase</apiName><shortdesc> 
		 Base-class constructor for text line factories.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> 
		 Base-class constructor for text line factories.
		  
 		 <p><b>Note:</b> Application code does not typically need to create or use a TextLineFactoryBase object directly.
		 Use one of the derived text factory classes instead.</p>
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flashx.textLayout.factory:TextLineFactoryBase:getContentBounds"><apiName>getContentBounds</apiName><shortdesc>
		 The smallest rectangle in which the layed-out content fits.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.geom:Rectangle"/></apiReturn></apiOperationDef><apiDesc>
		 The smallest rectangle in which the layed-out content fits.
		 
		 <p><b>Note:</b> Truncated lines are not included in the size calculation.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.factory:TextLineFactoryBase:compositionBounds:get"><apiName>compositionBounds</apiName><shortdesc>
		 The rectangle within which text lines are created.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc>
		 The rectangle within which text lines are created.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.factory:TextLineFactoryBase:horizontalScrollPolicy:get"><apiName>horizontalScrollPolicy</apiName><shortdesc> 
		 Specifies how lines are created when the composition bounds are not large enough.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc> 
		 Specifies how lines are created when the composition bounds are not large enough.
		  
		 <p>If set to <codeph>ScrollPolicy.ON</codeph> or <codeph>ScrollPolicy.AUTO</codeph>, all lines
		 are created. It is the your responsibility to scroll lines in the viewable area (and to
		 mask lines outside this area, if necessary). If set to <codeph>ScrollPolicy.OFF</codeph>, then 
		 only lines that fit within the composition bounds are created.</p>
		 
		 <p>If the <codeph>truncationOptions</codeph> property is set, the scroll policy is ignored 
		 (and treated as <codeph>ScrollPolicy.OFF</codeph>).</p> 
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#StandardFlowComposer"><linktext>flashx.textLayout.compose.StandardFlowComposer</linktext></link><link href="flashx.textLayout.container.xml#ScrollPolicy"><linktext>flashx.textLayout.container.ScrollPolicy</linktext></link><link href="flashx.textLayout.factory.xml#TextLineFactoryBase/truncationOptions"><linktext>truncationOptions</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.factory:TextLineFactoryBase:isTruncated:get"><apiName>isTruncated</apiName><shortdesc> 
		 Indicates whether text was truncated when lines were last created.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc> 
		 Indicates whether text was truncated when lines were last created.
		  
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.factory:TextLineFactoryBase:swfContext:get"><apiName>swfContext</apiName><shortdesc> 
		The ISWFContext instance used to make FTE calls as needed.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.compose:ISWFContext</apiValueClassifier></apiValueDef><apiDesc> 
		The ISWFContext instance used to make FTE calls as needed. 
		
		<p>By default, the ISWFContext implementation is this FlowComposerBase object.
		Applications can provide a custom implementation to use fonts
		embedded in a different SWF file or to cache and reuse text lines.</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#ISWFContext"><linktext>flashx.textLayout.compose.ISWFContext</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.factory:TextLineFactoryBase:truncationOptions:get"><apiName>truncationOptions</apiName><shortdesc> 
		 Specifies the options for truncating the text if it doesn't fit in the composition bounds.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.factory:TruncationOptions</apiValueClassifier></apiValueDef><apiDesc> 
		 Specifies the options for truncating the text if it doesn't fit in the composition bounds.
		  
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.factory:TextLineFactoryBase:verticalScrollPolicy:get"><apiName>verticalScrollPolicy</apiName><shortdesc> 
		 Specifies how lines are created when the composition bounds are not large enough.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc> 
		 Specifies how lines are created when the composition bounds are not large enough.
		  
		 <p>If set to <codeph>ScrollPolicy.ON</codeph> or <codeph>ScrollPolicy.AUTO</codeph>, all lines
		 are created. It is the your responsibility to scroll lines in the viewable area (and to
		 mask lines outside this area, if necessary). If set to <codeph>ScrollPolicy.OFF</codeph>, then 
		 only lines that fit within the composition bounds are created.</p>
		 
		 <p>If the <codeph>truncationOptions</codeph> property is set, the scroll policy is ignored 
		 (and treated as <codeph>ScrollPolicy.OFF</codeph>).</p> 
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#StandardFlowComposer"><linktext>flashx.textLayout.compose.StandardFlowComposer</linktext></link><link href="flashx.textLayout.container.xml#ScrollPolicy"><linktext>flashx.textLayout.container.ScrollPolicy</linktext></link><link href="flashx.textLayout.factory.xml#TextLineFactoryBase/truncationOptions"><linktext>truncationOptions</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.factory:TextFlowTextLineFactory"><apiName>TextFlowTextLineFactory</apiName><shortdesc>
 The TextFlowTextLineFactory class provides a simple way to create TextLines for displaying text from a text flow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.factory:TextLineFactoryBase</apiBaseClassifier></apiClassifierDef><apiDesc>
 The TextFlowTextLineFactory class provides a simple way to create TextLines for displaying text from a text flow.
 
 <p>The text lines are static and created fit in a single bounding rectangle, but can have multiple paragraphs and formats as well as
 inline graphics. To create TextLine objects directly from a string, use StringTextLineFactory.</p> 
 
 <p><b>Note:</b> When using inline graphics, the <codeph>source</codeph> property of the InlineGraphicElement object 
 must either be an instance of a DisplayObject or a Class object representing an embedded asset. 
 URLRequest objects cannot be used. The width and height of the inline graphic at the time the line 
 is created is used to compose the flow. </p>
 
 </apiDesc><example conref="examples\TextFlowTextLineFactory_example.as"><swfblock conref="examples\TextFlowTextLineFactory_example.swf"/></example></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link><link href="flashx.textLayout.factory.xml#StringTextLineFactory"><linktext>StringTextLineFactory</linktext></link></related-links><apiConstructor id="flashx.textLayout.factory:TextFlowTextLineFactory:TextFlowTextLineFactory"><apiName>TextFlowTextLineFactory</apiName><shortdesc> 
		 Creates a TextFlowTextLineFactory object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> 
		 Creates a TextFlowTextLineFactory object. 
		 
 		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flashx.textLayout.factory:TextFlowTextLineFactory:createTextLines"><apiName>createTextLines</apiName><shortdesc>
		 Creates TextLine objects from the specified text flow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>callback</apiItemName><apiType value="Function"/><apiDesc>function to call with each generated TextLine object.  
		 The callback will be called with a Shape object representing any background color (if present), 
		 and with TextLine objects for the text.
		 </apiDesc></apiParam><apiParam><apiItemName>textFlow</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier><apiDesc>The TextFlow from which the lines are created.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Creates TextLine objects from the specified text flow.
		 
		 <p>The text lines are composed to fit the bounds assigned to the <codeph>compositionBounds</codeph> property.
		 As each line is created, the factory calls the function specified in the 
		 <codeph>callback</codeph> parameter. This function is passed the TextLine object and
		 is responsible for displaying the line. If a line has a background color, the factory also calls the
		 callback function with a Shape object containing a rectangle of the background color.</p>
		 
		 <p>Note that the scroll policies of the factory will control how many lines are generated.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier></apiPackage><apiPackage id="flashx.textLayout.formats"><apiName>flashx.textLayout.formats</apiName><apiDetail/><apiClassifier id="flashx.textLayout.formats:TLFTypographicCase"><apiName>TLFTypographicCase</apiName><shortdesc>
	  Defines values for the typographicCase property of the TextLayoutFormat
	  class.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Defines values for the <codeph>typographicCase</codeph> property of the TextLayoutFormat
	  class. 
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/typographicCase"><linktext>TextLayoutFormat.typographicCase</linktext></link></related-links><apiValue id="flashx.textLayout.formats:TLFTypographicCase:CAPS_TO_SMALL_CAPS"><apiName>CAPS_TO_SMALL_CAPS</apiName><shortdesc> Specifies that uppercase characters use small-caps glyphs on output.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>capsToSmallCaps</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies that uppercase characters use small-caps glyphs on output. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TLFTypographicCase:DEFAULT"><apiName>DEFAULT</apiName><shortdesc> Specifies default typographic case -- no special features applied.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>default</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies default typographic case -- no special features applied. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TLFTypographicCase:LOWERCASE_TO_SMALL_CAPS"><apiName>LOWERCASE_TO_SMALL_CAPS</apiName><shortdesc> Converts all lowercase characters to uppercase, then applies small caps to only the 
		 characters that the conversion changed.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>lowercaseToSmallCaps</apiData><apiType value="String"/></apiValueDef><apiDesc> Converts all lowercase characters to uppercase, then applies small caps to only the 
		 characters that the conversion changed. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TLFTypographicCase:LOWERCASE"><apiName>LOWERCASE</apiName><shortdesc> Specifies that all characters use lowercase glyphs on output.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>lowercase</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies that all characters use lowercase glyphs on output. 
  	 	 
  	 	 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TLFTypographicCase:UPPERCASE"><apiName>UPPERCASE</apiName><shortdesc> Specifies that all characters use uppercase glyphs on output.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>uppercase</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies that all characters use uppercase glyphs on output.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:BreakStyle"><apiName>BreakStyle</apiName><shortdesc>
	 
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.formats:BreakStyle:ALWAYS"><apiName>ALWAYS</apiName><shortdesc> 
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>always</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:BreakStyle:AUTO"><apiName>AUTO</apiName><shortdesc> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>auto</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:VerticalAlign"><apiName>VerticalAlign</apiName><shortdesc>
	  Defines values for the verticalAlign property of the TextLayoutFormat class.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Defines values for the <codeph>verticalAlign</codeph> property of the TextLayoutFormat class. Specifies how 
	  TextFlow elements align with their containers.  
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/verticalAlign"><linktext>TextLayoutFormat.verticalAlign</linktext></link></related-links><apiValue id="flashx.textLayout.formats:VerticalAlign:BOTTOM"><apiName>BOTTOM</apiName><shortdesc> Specifies alignment with the bottom edge of the frame.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>bottom</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies alignment with the bottom edge of the frame. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:VerticalAlign:JUSTIFY"><apiName>JUSTIFY</apiName><shortdesc> Specifies vertical line justification within the frame 
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>justify</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies vertical line justification within the frame 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:VerticalAlign:MIDDLE"><apiName>MIDDLE</apiName><shortdesc> Specifies alignment with the middle of the frame.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>middle</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies alignment with the middle of the frame. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:VerticalAlign:TOP"><apiName>TOP</apiName><shortdesc> Specifies alignment with the top edge of the frame.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>top</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies alignment with the top edge of the frame. 
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:ColorName"><apiName>ColorName</apiName><shortdesc>
	  Defines a constant for specifying that the value of the color property
	  of the TextLayoutFormat class is "transparent".</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Defines a constant for specifying that the value of the <codeph>color</codeph> property
	  of the <codeph>TextLayoutFormat</codeph> class is "transparent".
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/color"><linktext>TextLayoutFormat.color</linktext></link></related-links><apiValue id="flashx.textLayout.formats:ColorName:AQUA"><apiName>AQUA</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>aqua</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ColorName:BLACK"><apiName>BLACK</apiName><shortdesc> Below are supported colorName values 
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>black</apiData><apiType value="String"/></apiValueDef><apiDesc> Below are supported colorName values 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ColorName:BLUE"><apiName>BLUE</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>blue</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ColorName:CYAN"><apiName>CYAN</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>cyan</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ColorName:FUCHSIA"><apiName>FUCHSIA</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>fuchsia</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ColorName:GRAY"><apiName>GRAY</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>gray</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ColorName:GREEN"><apiName>GREEN</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>green</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ColorName:LIME"><apiName>LIME</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>lime</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ColorName:MAGENTA"><apiName>MAGENTA</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>magenta</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ColorName:MAROON"><apiName>MAROON</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>maroon</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ColorName:NAVY"><apiName>NAVY</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>navy</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ColorName:OLIVE"><apiName>OLIVE</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>olive</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ColorName:PURPLE"><apiName>PURPLE</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>purple</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ColorName:RED"><apiName>RED</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>red</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ColorName:SILVER"><apiName>SILVER</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>silver</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ColorName:TEAL"><apiName>TEAL</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>teal</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ColorName:WHITE"><apiName>WHITE</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>white</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ColorName:YELLOW"><apiName>YELLOW</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>yellow</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:ListStylePosition"><apiName>ListStylePosition</apiName><shortdesc>
	 Defines values for setting the listStylePosition property.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Defines values for setting the <codeph>listStylePosition</codeph> property. These values control the placement
	 of a list item marker relative to the list item.
	 
	  </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/listStylePosition"><linktext>TextLayoutFormat.listStylePosition</linktext></link></related-links><apiValue id="flashx.textLayout.formats:ListStylePosition:INSIDE"><apiName>INSIDE</apiName><shortdesc> Marker will appear inline with the list item.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>inside</apiData><apiType value="String"/></apiValueDef><apiDesc> Marker will appear inline with the list item. This style position lets you include trailing spaces.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStylePosition:OUTSIDE"><apiName>OUTSIDE</apiName><shortdesc> Marker will appear in the margin of the list.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>outside</apiData><apiType value="String"/></apiValueDef><apiDesc> Marker will appear in the margin of the list. This style position does not recognize trailing spaces.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:BaselineOffset"><apiName>BaselineOffset</apiName><shortdesc>
	  Defines values for the firstBaselineOffset property
	  of the TextLayoutFormat and ContainerFormattedElement classes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Defines values for the <codeph>firstBaselineOffset</codeph> property
	  of the <codeph>TextLayoutFormat</codeph> and <codeph>ContainerFormattedElement</codeph> classes. 
	  Determines the offset from the top inset of the container
	  to the baseline of the first line. Baseline offset may be specified as 
	  the ascent of the line, the height of the line, or an auto generated amount.
	  <p>
	  <adobeimage alt="firstBaselineOffset_1" border="0" href="../../../images/textLayout_FBO1.jpg"/>
	  <adobeimage alt="firstBaselineOffset_2" border="0" href="../../../images/textLayout_FBO2.jpg"/>
	  <adobeimage alt="firstBaselineOffset_3" border="0" href="../../../images/textLayout_FBO3.jpg"/>
	  <adobeimage alt="firstBaselineOffset_4" border="0" href="../../../images/textLayout_FBO4.jpg"/>
	  </p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/firstBaselineOffset"><linktext>TextLayoutFormat.firstBaselineOffset</linktext></link></related-links><apiValue id="flashx.textLayout.formats:BaselineOffset:ASCENT"><apiName>ASCENT</apiName><shortdesc> Specifies an offset equal to the ascent of the line, that is, the ascent of the tallest font in the line, accounting for inline graphics as having the bottom of the graphic on the baseline.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ascent</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies an offset equal to the ascent of the line, that is, the ascent of the tallest font in the line, accounting for inline graphics as having the bottom of the graphic on the baseline.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:BaselineOffset:AUTO"><apiName>AUTO</apiName><shortdesc> Aligns the ascent of the line with the container top inset.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>auto</apiData><apiType value="String"/></apiValueDef><apiDesc> Aligns the ascent of the line with the container top inset.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:BaselineOffset:LINE_HEIGHT"><apiName>LINE_HEIGHT</apiName><shortdesc> Specifies an offset equal to the height of the line.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>lineHeight</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies an offset equal to the height of the line.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:BaselineShift"><apiName>BaselineShift</apiName><shortdesc>
	  Defines constants for specifying subscript or superscript in the baselineShift property
	  of the TextLayoutFormat class.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Defines constants for specifying subscript or superscript in the <codeph>baselineShift</codeph> property
	  of the <codeph>TextLayoutFormat</codeph> class. You can specify baseline shift as an absolute pixel offset, 
	  a percentage of the current point size, or the constants SUPERSCRIPT or 
	  SUBSCRIPT. Positive values shift the line up for horizontal text (right for vertical) and negative values 
	  shift it down for horizontal (left for vertical). 
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/baselineShift"><linktext>TextLayoutFormat.baselineShift</linktext></link></related-links><apiValue id="flashx.textLayout.formats:BaselineShift:SUBSCRIPT"><apiName>SUBSCRIPT</apiName><shortdesc> Shifts baseline to the current subscript position.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>subscript</apiData><apiType value="String"/></apiValueDef><apiDesc> Shifts baseline to the current subscript position.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:BaselineShift:SUPERSCRIPT"><apiName>SUPERSCRIPT</apiName><shortdesc> Shifts baseline to the current superscript position.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>superscript</apiData><apiType value="String"/></apiValueDef><apiDesc> Shifts baseline to the current superscript position.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:JustificationRule"><apiName>JustificationRule</apiName><shortdesc>
	  Defines values for setting the justificationRule property
	  of the TextLayoutFormat class.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Defines values for setting the <codeph>justificationRule</codeph> property
	  of the TextLayoutFormat class. Default value is SPACE, which accomplishes justification by adding 
	  extra space to the space characters. When you use EAST_ASIAN, Japanese style leading is employed, which 
	  applies bottom-down as opposed to top-up, which is used in Roman text. The spacing of punctuation is also 
	  different. In the Roman version, the comma and Japanese periods take a full character's width but only half 
	  in East Asian. Additionally, the spacing between sequential punctuation marks becomes tighter, obeying traditional 
	  East Asian typographic conventions. Also note the leading, applied to the second line of the paragraphs in the 
	  example below. In the East Asian version, the last two lines push left. In the Roman version, the second and 
	  following lines push left.
	  <p><adobeimage alt="justificationRule" href="../../../images/textLayout_justificationrule.png"/></p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/justificationRule"><linktext>TextLayoutFormat.justificationRule</linktext></link></related-links><apiValue id="flashx.textLayout.formats:JustificationRule:EAST_ASIAN"><apiName>EAST_ASIAN</apiName><shortdesc> Specifies East Asian justification rules.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>eastAsian</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies East Asian justification rules. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:JustificationRule:SPACE"><apiName>SPACE</apiName><shortdesc> Specifies justification for Latin and other horizontal scripts that divide words using spaces.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>space</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies justification for Latin and other horizontal scripts that divide words using spaces. 
		  Use this value for everything except East Asian text.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:TabStopFormat"><apiName>TabStopFormat</apiName><shortdesc>
	 The TabStopFormat class represents the properties of a tab stop in a paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.formats:ITabStopFormat</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The TabStopFormat class represents the properties of a tab stop in a paragraph. You can set the <codeph>TextLayoutFormat.tabstops</codeph> property to an array of TabStopFormat objects.
	 </apiDesc><example conref="examples\TabStopFormat_example.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#TabElement"><linktext>flashx.textLayout.elements.TabElement</linktext></link><link href="flashx.textLayout.formats.xml#TextLayoutFormat/tabStops"><linktext>flashx.textLayout.formats.TextLayoutFormat.tabStops</linktext></link></related-links><apiConstructor id="flashx.textLayout.formats:TabStopFormat:TabStopFormat"><apiName>TabStopFormat</apiName><shortdesc>
		 Creates a new TabStopFormat object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>initialValues</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITabStopFormat</apiOperationClassifier><apiData>null</apiData><apiDesc>optional instance from which to copy initial values.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Creates a new TabStopFormat object. All settings are empty or, optionally, are initialized from the
		 supplied <codeph>initialValues</codeph> object.
		 
		 </apiDesc></apiConstructorDetail><related-links><link href="flashx.textLayout.formats.xml#TabStopFormat/defaultFormat"><linktext>defaultFormat</linktext></link></related-links></apiConstructor><apiOperation id="flashx.textLayout.formats:TabStopFormat:apply"><apiName>apply</apiName><shortdesc>
		 Replaces property values in this TabStopFormat object with the values of properties that are set in
		 the incoming ITabStopFormat instance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>incoming</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITabStopFormat</apiOperationClassifier><apiDesc>instance whose property values are applied to this TabStopFormat object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Replaces property values in this TabStopFormat object with the values of properties that are set in
		 the <codeph>incoming</codeph> ITabStopFormat instance. Properties that are <codeph>undefined</codeph> in the <codeph>incoming</codeph>
		 ITabStopFormat instance are not changed in this object.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.formats:TabStopFormat:concatInheritOnly"><apiName>concatInheritOnly</apiName><shortdesc>
		 Concatenates the values of properties in the incoming ITabStopFormat instance
		 with the values of this TabStopFormat object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>incoming</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITabStopFormat</apiOperationClassifier><apiDesc>instance from which values are concatenated.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Concatenates the values of properties in the <codeph>incoming</codeph> ITabStopFormat instance
		 with the values of this TabStopFormat object. In this (the receiving) TabStopFormat object, properties whose values are <codeph>FormatValue.INHERIT</codeph>,
		 and inheriting properties whose values are <codeph>undefined</codeph> will get new values from the <codeph>incoming</codeph> object.
		 All other property values will remain unmodified.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue/INHERIT"><linktext>flashx.textLayout.formats.FormatValue.INHERIT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.formats:TabStopFormat:concat"><apiName>concat</apiName><shortdesc>
		 Concatenates the values of properties in the incoming ITabStopFormat instance
		 with the values of this TabStopFormat object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>incoming</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITabStopFormat</apiOperationClassifier><apiDesc>instance from which values are concatenated.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Concatenates the values of properties in the <codeph>incoming</codeph> ITabStopFormat instance
		 with the values of this TabStopFormat object. In this (the receiving) TabStopFormat object, properties whose values are <codeph>FormatValue.INHERIT</codeph>,
		 and inheriting properties whose values are <codeph>undefined</codeph> will get new values from the <codeph>incoming</codeph> object.
		 Non-inheriting properties whose values are <codeph>undefined</codeph> will get their default values.
		 All other property values will remain unmodified.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue/INHERIT"><linktext>flashx.textLayout.formats.FormatValue.INHERIT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.formats:TabStopFormat:copy"><apiName>copy</apiName><shortdesc>
		 Copies TabStopFormat settings from the values ITabStopFormat instance into this TabStopFormat object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>values</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITabStopFormat</apiOperationClassifier><apiDesc>optional instance from which to copy values.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Copies TabStopFormat settings from the <codeph>values</codeph> ITabStopFormat instance into this TabStopFormat object.
		 If <codeph>values</codeph> is <codeph>null</codeph>, this TabStopFormat object is initialized with undefined values for all properties.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.formats:TabStopFormat:getStyle"><apiName>getStyle</apiName><shortdesc>
		 Return the value of the style specified by the styleProp parameter
		 which specifies the style name.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The value of the specified style.  The type varies depending on the type of the style being
		 accessed.  Returns <codeph>undefined</codeph> if the style is not set.
		 
		 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>styleName</apiItemName><apiType value="String"/><apiDesc>The name of the style whose value is to be retrieved.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Return the value of the style specified by the <codeph>styleProp</codeph> parameter
		 which specifies the style name.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.formats:TabStopFormat:isEqual"><apiName>isEqual</apiName><shortdesc>
		 Compares properties in ITabStopFormat instance p1 with properties in ITabStopFormat instance p2
		 and returns true if all properties match.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>true if all properties match, false otherwise.
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>p1</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITabStopFormat</apiOperationClassifier><apiDesc>instance to compare to <codeph>p2</codeph>.
		 </apiDesc></apiParam><apiParam><apiItemName>p2</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITabStopFormat</apiOperationClassifier><apiDesc>instance to compare to <codeph>p1</codeph>.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Compares properties in ITabStopFormat instance <codeph>p1</codeph> with properties in ITabStopFormat instance <codeph>p2</codeph>
		 and returns <codeph>true</codeph> if all properties match.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.formats:TabStopFormat:removeClashing"><apiName>removeClashing</apiName><shortdesc>
		 Sets properties in this TabStopFormat object to undefined if they do not match those in the
		 incoming ITabStopFormat instance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>incoming</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITabStopFormat</apiOperationClassifier><apiDesc>instance against which to compare this TabStopFormat object's property values.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Sets properties in this TabStopFormat object to <codeph>undefined</codeph> if they do not match those in the
		 <codeph>incoming</codeph> ITabStopFormat instance.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.formats:TabStopFormat:removeMatching"><apiName>removeMatching</apiName><shortdesc>
		 Sets properties in this TabStopFormat object to undefined if they match those in the incoming
		 ITabStopFormat instance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>incoming</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITabStopFormat</apiOperationClassifier><apiDesc>instance against which to compare this TabStopFormat object's property values.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Sets properties in this TabStopFormat object to <codeph>undefined</codeph> if they match those in the <codeph>incoming</codeph>
		 ITabStopFormat instance.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.formats:TabStopFormat:setStyle"><apiName>setStyle</apiName><shortdesc>
		 Set the value of the style specified by the styleProp parameter
		 which specifies the style name to value.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleName</apiItemName><apiType value="String"/><apiDesc>The name of the style whose value is to be set.
		 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>The value to set.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Set the value of the style specified by the <codeph>styleProp</codeph> parameter
		 which specifies the style name to <codeph>value</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.formats:TabStopFormat:alignment:get"><apiName>alignment</apiName><shortdesc>
		 The tab alignment for this tab stop.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 The tab alignment for this tab stop. 
		 <p>Legal values are TabAlignment.START, TabAlignment.CENTER, TabAlignment.END, TabAlignment.DECIMAL, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of TabAlignment.START.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue/INHERIT"><linktext>FormatValue.INHERIT</linktext></link><link href="" invalidHref="flash.text.engine.TabAlignment.xml"><linktext>flash.text.engine.TabAlignment</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TabStopFormat:decimalAlignmentToken:get"><apiName>decimalAlignmentToken</apiName><shortdesc>
		 The alignment token to be used if the alignment is DECIMAL.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 The alignment token to be used if the alignment is DECIMAL.
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of null.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TabStopFormat:defaultFormat:get"><apiName>defaultFormat</apiName><shortdesc>
		 Returns a TabStopFormat object with default settings.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.formats:ITabStopFormat</apiValueClassifier></apiValueDef><apiDesc>
		 Returns a TabStopFormat object with default settings.
		 This function always returns the same object.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TabStopFormat:position:get"><apiName>position</apiName><shortdesc>
		 The position of the tab stop, in pixels, relative to the start edge of the column.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 The position of the tab stop, in pixels, relative to the start edge of the column.
		 <p>Legal values are numbers from 0 to 10000 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of 0.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue/INHERIT"><linktext>FormatValue.INHERIT</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:BackgroundColor"><apiName>BackgroundColor</apiName><shortdesc>
	  Defines a constant for specifying that the value of the backgroundColor property
	  of the TextLayoutFormat class is "transparent".</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Defines a constant for specifying that the value of the <codeph>backgroundColor</codeph> property
	  of the <codeph>TextLayoutFormat</codeph> class is "transparent".
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/backgroundColor"><linktext>TextLayoutFormat.backgroundColor</linktext></link></related-links><apiValue id="flashx.textLayout.formats:BackgroundColor:TRANSPARENT"><apiName>TRANSPARENT</apiName><shortdesc> Transparent - no background color is applied.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>transparent</apiData><apiType value="String"/></apiValueDef><apiDesc> Transparent - no background color is applied.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:Direction"><apiName>Direction</apiName><shortdesc>
	  Defines values for setting the direction property
	  of the TextLayoutFormat class.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Defines values for setting the <codeph>direction</codeph> property
	  of the <codeph>TextLayoutFormat</codeph> class. Left-to-right reading order 
	  is used in Latin-style scripts. Right-to-left reading order is used with scripts such as Arabic or Hebrew. 
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/direction"><linktext>TextLayoutFormat.direction</linktext></link></related-links><apiValue id="flashx.textLayout.formats:Direction:LTR"><apiName>LTR</apiName><shortdesc> Specifies left-to-right direction for text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ltr</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies left-to-right direction for text. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:Direction:RTL"><apiName>RTL</apiName><shortdesc> Specifies right-to-left direction for text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rtl</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies right-to-left direction for text. 
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:WhiteSpaceCollapse"><apiName>WhiteSpaceCollapse</apiName><shortdesc>
	  Defines values for setting the whiteSpaceCollapse property
	  of the TextLayoutFormat class.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Defines values for setting the <codeph>whiteSpaceCollapse</codeph> property
	  of the <codeph>TextLayoutFormat</codeph> class. 
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/whiteSpaceCollapse"><linktext>TextLayoutFormat.whiteSpaceCollapse</linktext></link></related-links><apiValue id="flashx.textLayout.formats:WhiteSpaceCollapse:COLLAPSE"><apiName>COLLAPSE</apiName><shortdesc> 
		 Collapse whitespace when importing text (default).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>collapse</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		 Collapse whitespace when importing text (default).
		 Within a block of imported text, removes newlines, tabs, and leading and trailing
		 spaces. Retains line break tags (br/) and Unicode line
		 separator characters.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:WhiteSpaceCollapse:PRESERVE"><apiName>PRESERVE</apiName><shortdesc> Preserves whitespace when importing text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>preserve</apiData><apiType value="String"/></apiValueDef><apiDesc> Preserves whitespace when importing text. 
		</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:ITextLayoutFormat"><apiName>ITextLayoutFormat</apiName><shortdesc>
	 This interface provides read access to FlowElements-related properties.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 This interface provides read access to FlowElements-related properties.
	 
	 </apiDesc></apiClassifierDetail><apiOperation id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:getStyle"><apiName>getStyle</apiName><shortdesc>
		 Return the value of the style specified by the styleProp parameter
		 which specifies the style name.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The value of the specified style.  The type varies depending on the type of the style being
		 accessed.  Returns <codeph>undefined</codeph> if the style is not set.
		 
		 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>styleName</apiItemName><apiType value="String"/><apiDesc>The name of the style whose value is to be retrieved.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Return the value of the style specified by the <codeph>styleProp</codeph> parameter
		 which specifies the style name.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:alignmentBaseline:get"><apiName>alignmentBaseline</apiName><shortdesc>
		 Specifies the baseline to which the dominant baseline aligns.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Specifies the baseline to which the dominant baseline aligns. For example, if you set <codeph>dominantBaseline</codeph> to ASCENT, setting <codeph>alignmentBaseline</codeph> to DESCENT aligns the top of the text with the DESCENT baseline, or below the line.  The largest element in the line generally determines the baselines.<p><adobeimage alt="baselines" href="../../../images/textLayout_baselines.jpg"/></p>
		 <p>Legal values are TextBaseline.ROMAN, TextBaseline.ASCENT, TextBaseline.DESCENT, TextBaseline.IDEOGRAPHIC_TOP, TextBaseline.IDEOGRAPHIC_CENTER, TextBaseline.IDEOGRAPHIC_BOTTOM, TextBaseline.USE_DOMINANT_BASELINE, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of TextBaseline.USE_DOMINANT_BASELINE.</p>
		 </apiDesc><example conref="examples\TextLayoutFormat_alignmentBaselineExample.as"/></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextBaseline.xml"><linktext>flash.text.engine.TextBaseline</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:backgroundAlpha:get"><apiName>backgroundAlpha</apiName><shortdesc>
		 Alpha (transparency) value for the background (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Alpha (transparency) value for the background (adopts default value if undefined during cascade). A value of 0 is fully transparent, and a value of 1 is fully opaque. Display objects with alpha set to 0 are active, even though they are invisible.
		 <p>Legal values are numbers from 0 to 1 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of 1.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:backgroundColor:get"><apiName>backgroundColor</apiName><shortdesc>
		 Background color of the text (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Background color of the text (adopts default value if undefined during cascade). Can be either the constant value  <codeph>BackgroundColor.TRANSPARENT</codeph>, or a hexadecimal value that specifies the three 8-bit RGB (red, green, blue) values; for example, 0xFF0000 is red and 0x00FF00 is green.
		 <p>Legal values as a string are BackgroundColor.TRANSPARENT, FormatValue.INHERIT and uints from 0x0 to 0xffffffff.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of BackgroundColor.TRANSPARENT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BackgroundColor"><linktext>flashx.textLayout.formats.BackgroundColor</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:baselineShift:get"><apiName>baselineShift</apiName><shortdesc>
		 Amount to shift the baseline from the dominantBaseline value.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Amount to shift the baseline from the <codeph>dominantBaseline</codeph> value. Units are in pixels, or a percentage of <codeph>fontSize</codeph> (in which case, enter a string value, like 140%).  Positive values shift the line up for horizontal text (right for vertical) and negative values shift it down for horizontal (left for vertical). 
		 <p>Legal values are BaselineShift.SUPERSCRIPT, BaselineShift.SUBSCRIPT, FormatValue.INHERIT.</p>
		 <p>Legal values as a number are from -1000 to 1000.</p>
		 <p>Legal values as a percent are numbers from -1000 to 1000.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.0.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BaselineShift"><linktext>flashx.textLayout.formats.BaselineShift</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:blockProgression:get"><apiName>blockProgression</apiName><shortdesc>
		 Specifies a vertical or horizontal progression of line placement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Specifies a vertical or horizontal progression of line placement.
		 Lines are either placed top-to-bottom (<codeph>BlockProgression.TB</codeph>, used for horizontal text) or right-to-left (<codeph>BlockProgression.RL</codeph>, used for vertical text).
		 <p>Legal values are BlockProgression.RL, BlockProgression.TB, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of BlockProgression.TB.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BlockProgression"><linktext>flashx.textLayout.formats.BlockProgression</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:breakOpportunity:get"><apiName>breakOpportunity</apiName><shortdesc>
		 Controls where lines are allowed to break when breaking wrapping text into multiple lines.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Controls where lines are allowed to break when breaking wrapping text into multiple lines. Set to <codeph>BreakOpportunity.AUTO</codeph> to break text normally. Set to <codeph>BreakOpportunity.NONE</codeph> to <i>not</i> break the text unless the text would overrun the measure and there are no other places to break the line. Set to <codeph>BreakOpportunity.ANY</codeph> to allow the line to break anywhere, rather than just between words. Set to <codeph>BreakOpportunity.ALL</codeph> to have each typographic cluster put on a separate line (useful for text on a path).
		 <p>Legal values are BreakOpportunity.ALL, BreakOpportunity.ANY, BreakOpportunity.AUTO, BreakOpportunity.NONE, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of BreakOpportunity.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.BreakOpportunity.xml"><linktext>flash.text.engine.BreakOpportunity</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:cffHinting:get"><apiName>cffHinting</apiName><shortdesc>
		 The type of CFF hinting used for this text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 The type of CFF hinting used for this text. CFF hinting determines whether the Flash runtime forces strong horizontal stems to fit to a sub pixel grid or not. This property applies only if the <codeph>renderingMode</codeph> property is set to <codeph>RenderingMode.CFF</codeph>, and the font is embedded (<codeph>fontLookup</codeph> property is set to <codeph>FontLookup.EMBEDDED_CFF</codeph>). At small screen sizes, hinting produces a clear, legible text for human readers.
		 <p>Legal values are CFFHinting.NONE, CFFHinting.HORIZONTAL_STEM, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of CFFHinting.HORIZONTAL_STEM.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.CFFHinting.xml"><linktext>flash.text.engine.CFFHinting</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:clearFloats:get"><apiName>clearFloats</apiName><shortdesc>
		 Controls how text wraps around a float.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Controls how text wraps around a float. A value of none allows the text to wrap most closely around a float. A value of left causes the text to skip over any portion of the container that has a left float, and a value of right causes the text to skip over any portion of the container that has a right float. A value of both causes the text to skip over any floats.
		 <p>Legal values are ClearFloats.START, ClearFloats.END, ClearFloats.LEFT, ClearFloats.RIGHT, ClearFloats.BOTH, ClearFloats.NONE, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of ClearFloats.NONE.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#ClearFloats"><linktext>flashx.textLayout.formats.ClearFloats</linktext></link><link href="flashx.textLayout.formats.xml#ClearFloats"><linktext>flashx.textLayout.formats.ClearFloats</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:color:get"><apiName>color</apiName><shortdesc>
		 Color of the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Color of the text. A hexadecimal number that specifies three 8-bit RGB (red, green, blue) values; for example, 0xFF0000 is red and 0x00FF00 is green. It can also be enum value {BLACK, GREEN, GRAY, BLUE, SILVER, LIME, OLIVE, WHITE, YELLOW, MAROON, NAVY, RED, PURPLE, TEAL, FUCHSIA, AQUA, MAGENTA, CYAN}
		 <p>Legal values as a string are ColorName.BLACK, ColorName.GREEN, ColorName.GRAY, ColorName.BLUE, ColorName.SILVER, ColorName.LIME, ColorName.OLIVE, ColorName.WHITE, ColorName.YELLOW, ColorName.MAROON, ColorName.NAVY, ColorName.RED, ColorName.PURPLE, ColorName.TEAL, ColorName.FUCHSIA, ColorName.AQUA, ColorName.MAGENTA, ColorName.CYAN, FormatValue.INHERIT and uints from 0x0 to 0xffffffff.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#ColorName"><linktext>flashx.textLayout.formats.ColorName</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:columnBreakAfter:get"><apiName>columnBreakAfter</apiName><shortdesc>
		 Controls column after before the element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Controls column after before the element.
		 <p>Legal values are BreakStyle.AUTO, BreakStyle.ALWAYS, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of BreakStyle.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BreakStyle"><linktext>flashx.textLayout.formats.BreakStyle</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:columnBreakBefore:get"><apiName>columnBreakBefore</apiName><shortdesc>
		 Controls column break before the element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Controls column break before the element.
		 <p>Legal values are BreakStyle.AUTO, BreakStyle.ALWAYS, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of BreakStyle.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BreakStyle"><linktext>flashx.textLayout.formats.BreakStyle</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:columnCount:get"><apiName>columnCount</apiName><shortdesc>
		 Number of text columns (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Number of text columns (adopts default value if undefined during cascade).
		 The column number overrides the  other column settings. Value is an integer, or <codeph>FormatValue.AUTO</codeph> if unspecified. If <codeph>columnCount</codeph> is not specified,<codeph>columnWidth</codeph> is used to create as many columns as can fit in the container.
		 <p>Legal values as a string are FormatValue.AUTO, FormatValue.INHERIT and from ints from 1 to 50.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of FormatValue.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:columnGap:get"><apiName>columnGap</apiName><shortdesc>
		 Specifies the amount of gutter space, in pixels, to leave between the columns (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Specifies the amount of gutter space, in pixels, to leave between the columns (adopts default value if undefined during cascade).
		 Value is a Number
		 <p>Legal values are numbers from 0 to 1000 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of 20.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:columnWidth:get"><apiName>columnWidth</apiName><shortdesc>
		 Column width in pixels (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Column width in pixels (adopts default value if undefined during cascade).
		 If you specify the width of the columns, but not the count, TextLayout will create as many columns of that width as possible, given the  container width and <codeph>columnGap</codeph> settings. Any remainder space is left after the last column. Value is a Number.
		 <p>Legal values as a string are FormatValue.AUTO, FormatValue.INHERIT and numbers from 0 to 8000.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of FormatValue.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:containerBreakAfter:get"><apiName>containerBreakAfter</apiName><shortdesc>
		 Controls container after before the element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Controls container after before the element.
		 <p>Legal values are BreakStyle.AUTO, BreakStyle.ALWAYS, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of BreakStyle.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BreakStyle"><linktext>flashx.textLayout.formats.BreakStyle</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:containerBreakBefore:get"><apiName>containerBreakBefore</apiName><shortdesc>
		 Controls container break before the element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Controls container break before the element.
		 <p>Legal values are BreakStyle.AUTO, BreakStyle.ALWAYS, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of BreakStyle.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BreakStyle"><linktext>flashx.textLayout.formats.BreakStyle</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:digitCase:get"><apiName>digitCase</apiName><shortdesc>
		 The type of digit case used for this text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 The type of digit case used for this text. Setting the value to <codeph>DigitCase.OLD_STYLE</codeph> approximates lowercase letterforms with varying ascenders and descenders. The figures are proportionally spaced. This style is only available in selected typefaces, most commonly in a supplemental or expert font. The <codeph>DigitCase.LINING</codeph> setting has all-cap height and is typically monospaced to line up in charts.<p><adobeimage alt="digitCase" href="../../../images/textLayout_digitcase.gif"/></p>
		 <p>Legal values are DigitCase.DEFAULT, DigitCase.LINING, DigitCase.OLD_STYLE, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of DigitCase.DEFAULT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.DigitCase.xml"><linktext>flash.text.engine.DigitCase</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:digitWidth:get"><apiName>digitWidth</apiName><shortdesc>
		 Type of digit width used for this text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Type of digit width used for this text. This can be <codeph>DigitWidth.PROPORTIONAL</codeph>, which looks best for individual numbers, or <codeph>DigitWidth.TABULAR</codeph>, which works best for numbers in tables, charts, and vertical rows.<p><adobeimage alt="digitWidth" href="../../../images/textLayout_digitwidth.gif"/></p>
		 <p>Legal values are DigitWidth.DEFAULT, DigitWidth.PROPORTIONAL, DigitWidth.TABULAR, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of DigitWidth.DEFAULT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.DigitWidth.xml"><linktext>flash.text.engine.DigitWidth</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:direction:get"><apiName>direction</apiName><shortdesc>
		 Specifies the default bidirectional embedding level of the text in the text block.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Specifies the default bidirectional embedding level of the text in the text block. 
		 Left-to-right reading order, as in Latin-style scripts, or right-to-left reading order, as in Arabic or Hebrew. This property also affects column direction when it is applied at the container level. Columns can be either left-to-right or right-to-left, just like text. Below are some examples:<p><adobeimage alt="direction" href="../../../images/textLayout_direction.gif"/></p>
		 <p>Legal values are Direction.LTR, Direction.RTL, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of Direction.LTR.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#Direction"><linktext>flashx.textLayout.formats.Direction</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:dominantBaseline:get"><apiName>dominantBaseline</apiName><shortdesc>
		 Specifies which element baseline snaps to the alignmentBaseline to determine the vertical position of the element on the line.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Specifies which element baseline snaps to the <codeph>alignmentBaseline</codeph> to determine the vertical position of the element on the line. A value of <codeph>TextBaseline.AUTO</codeph> selects the dominant baseline based on the <codeph>locale</codeph> property of the parent paragraph.  For Japanese and Chinese, the selected baseline value is <codeph>TextBaseline.IDEOGRAPHIC_CENTER</codeph>; for all others it is <codeph>TextBaseline.ROMAN</codeph>. These baseline choices are determined by the choice of font and the font size.<p><adobeimage alt="baselines" href="../../../images/textLayout_baselines.jpg"/></p>
		 <p>Legal values are FormatValue.AUTO, TextBaseline.ROMAN, TextBaseline.ASCENT, TextBaseline.DESCENT, TextBaseline.IDEOGRAPHIC_TOP, TextBaseline.IDEOGRAPHIC_CENTER, TextBaseline.IDEOGRAPHIC_BOTTOM, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of FormatValue.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextBaseline.xml"><linktext>flash.text.engine.TextBaseline</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:firstBaselineOffset:get"><apiName>firstBaselineOffset</apiName><shortdesc>
		 Specifies the baseline position of the first line in the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Specifies the baseline position of the first line in the container. Which baseline this property refers to depends on the container-level locale.  For Japanese and Chinese, it is <codeph>TextBaseline.IDEOGRAPHIC_BOTTOM</codeph>; for all others it is <codeph>TextBaseline.ROMAN</codeph>.
		 The offset from the top inset (or right inset if <codeph>blockProgression</codeph> is RL) of the container to the baseline of the first line can be either <codeph>BaselineOffset.ASCENT</codeph>, meaning equal to the ascent of the line, <codeph>BaselineOffset.LINE_HEIGHT</codeph>, meaning equal to the height of that first line, or any fixed-value number to specify an absolute distance. <codeph>BaselineOffset.AUTO</codeph> aligns the ascent of the line with the container top inset.<p><adobeimage alt="firstBaselineOffset1" href="../../../images/textLayout_FBO1.png"/><adobeimage alt="firstBaselineOffset2" href="../../../images/textLayout_FBO2.png"/><adobeimage alt="firstBaselineOffset3" href="../../../images/textLayout_FBO3.png"/><adobeimage alt="firstBaselineOffset4" href="../../../images/textLayout_FBO4.png"/></p>
		 <p>Legal values as a string are BaselineOffset.AUTO, BaselineOffset.ASCENT, BaselineOffset.LINE_HEIGHT, FormatValue.INHERIT and numbers from 0 to 1000.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of BaselineOffset.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BaselineOffset"><linktext>flashx.textLayout.formats.BaselineOffset</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:fontFamily:get"><apiName>fontFamily</apiName><shortdesc>
		  The name of the font to use, or a comma-separated list of font names.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		  The name of the font to use, or a comma-separated list of font names. The Flash runtime renders the element with the first available font in the list. For example Arial, Helvetica, _sans causes the player to search for Arial, then Helvetica if Arial is not found, then _sans if neither is found.
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of Arial.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:fontLookup:get"><apiName>fontLookup</apiName><shortdesc>
		 Font lookup to use.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Font lookup to use. Specifying <codeph>FontLookup.DEVICE</codeph> uses the fonts installed on the system that is running the SWF file. Device fonts result in a smaller movie size, but text is not always rendered the same across different systems and platforms. Specifying <codeph>FontLookup.EMBEDDED_CFF</codeph> uses font outlines embedded in the published SWF file. Embedded fonts increase the size of the SWF file (sometimes dramatically), but text is consistently displayed in the chosen font.
		 <p>Legal values are FontLookup.DEVICE, FontLookup.EMBEDDED_CFF, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of FontLookup.DEVICE.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontLookup.xml"><linktext>flash.text.engine.FontLookup</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:fontSize:get"><apiName>fontSize</apiName><shortdesc>
		 The size of the text in pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 The size of the text in pixels.
		 <p>Legal values are numbers from 1 to 720 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 12.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:fontStyle:get"><apiName>fontStyle</apiName><shortdesc>
		 Style of text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Style of text. May be <codeph>FontPosture.NORMAL</codeph>, for use in plain text, or <codeph>FontPosture.ITALIC</codeph> for italic. This property applies only to device fonts (<codeph>fontLookup</codeph> property is set to flash.text.engine.FontLookup.DEVICE).
		 <p>Legal values are FontPosture.NORMAL, FontPosture.ITALIC, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of FontPosture.NORMAL.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontPosture.xml"><linktext>flash.text.engine.FontPosture</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:fontWeight:get"><apiName>fontWeight</apiName><shortdesc>
		 Weight of text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Weight of text. May be <codeph>FontWeight.NORMAL</codeph> for use in plain text, or <codeph>FontWeight.BOLD</codeph>. Applies only to device fonts (<codeph>fontLookup</codeph> property is set to flash.text.engine.FontLookup.DEVICE).
		 <p>Legal values are FontWeight.NORMAL, FontWeight.BOLD, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of FontWeight.NORMAL.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontWeight.xml"><linktext>flash.text.engine.FontWeight</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:justificationRule:get"><apiName>justificationRule</apiName><shortdesc>
		 Rule used to justify text in a paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Rule used to justify text in a paragraph.
		 Default value is <codeph>FormatValue.AUTO</codeph>, which justifies text based on the paragraph's <codeph>locale</codeph> property. For all languages except Japanese and Chinese, <codeph>FormatValue.AUTO</codeph> becomes <codeph>JustificationRule.SPACE</codeph>, which adds extra space to the space characters.  For Japanese and Chinese, <codeph>FormatValue.AUTO</codeph> becomes <codeph>JustficationRule.EAST_ASIAN</codeph>. In part, justification changes the spacing of punctuation. In Roman text the comma and Japanese periods take a full character's width but in East Asian text only half of a character's width. Also, in the East Asian text the spacing between sequential punctuation marks becomes tighter, obeying traditional East Asian typographic conventions. Note, too, in the example below the leading that is applied to the second line of the paragraphs. In the East Asian version, the last two lines push left. In the Roman version, the second and following lines push left.<p><adobeimage alt="justificationRule" href="../../../images/textLayout_justificationrule.png"/></p>
		 <p>Legal values are JustificationRule.EAST_ASIAN, JustificationRule.SPACE, FormatValue.AUTO, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of FormatValue.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#JustificationRule"><linktext>flashx.textLayout.formats.JustificationRule</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:justificationStyle:get"><apiName>justificationStyle</apiName><shortdesc>
		 The style used for justification of the paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 The style used for justification of the paragraph. Used only in conjunction with a <codeph>justificationRule</codeph> setting of <codeph>JustificationRule.EAST_ASIAN</codeph>.
		 Default value of <codeph>FormatValue.AUTO</codeph> is resolved to <codeph>JustificationStyle.PUSH_IN_KINSOKU</codeph> for all locales.  The constants defined by the JustificationStyle class specify options for handling kinsoku characters, which are Japanese characters that cannot appear at either the beginning or end of a line. If you want looser text, specify <codeph>JustificationStyle.PUSH-OUT-ONLY</codeph>. If you want behavior that is like what you get with the  <codeph>justificationRule</codeph> of <codeph>JustificationRule.SPACE</codeph>, use <codeph>JustificationStyle.PRIORITIZE-LEAST-ADJUSTMENT</codeph>.
		 <p>Legal values are JustificationStyle.PRIORITIZE_LEAST_ADJUSTMENT, JustificationStyle.PUSH_IN_KINSOKU, JustificationStyle.PUSH_OUT_ONLY, FormatValue.AUTO, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of FormatValue.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.JustificationStyle.xml"><linktext>flash.text.engine.JustificationStyle</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:kerning:get"><apiName>kerning</apiName><shortdesc>
		 Kerning adjusts the pixels between certain character pairs to improve readability.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Kerning adjusts the pixels between certain character pairs to improve readability. Kerning is supported for all fonts with kerning tables.
		 <p>Legal values are Kerning.ON, Kerning.OFF, Kerning.AUTO, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of Kerning.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.Kerning.xml"><linktext>flash.text.engine.Kerning</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:leadingModel:get"><apiName>leadingModel</apiName><shortdesc>
		 Specifies the leading model, which is a combination of leading basis and leading direction.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Specifies the leading model, which is a combination of leading basis and leading direction.
		 Leading basis is the baseline to which the <codeph>lineHeight</codeph> property refers. Leading direction determines whether the <codeph>lineHeight</codeph> property refers to the distance of a line's baseline from that of the line before it or the line after it. The default value of <codeph>FormatValue.AUTO</codeph> is resolved based on the paragraph's <codeph>locale</codeph> property.  For Japanese and Chinese, it is <codeph>LeadingModel.IDEOGRAPHIC_TOP_DOWN</codeph> and for all others it is <codeph>LeadingModel.ROMAN_UP</codeph>.<p><b>Leading Basis:</b></p><p><adobeimage alt="leadingBasis1" href="../../../images/textLayout_LB1.png"/>    <adobeimage alt="leadingBasis2" href="../../../images/textLayout_LB2.png"/>    <adobeimage alt="leadingBasis3" href="../../../images/textLayout_LB3.png"/></p><p><b>Leading Direction:</b></p><p><adobeimage alt="leadingDirection1" href="../../../images/textLayout_LD1.png"/>    <adobeimage alt="leadingDirection2" href="../../../images/textLayout_LD2.png"/>    <adobeimage alt="leadingDirection3" href="../../../images/textLayout_LD3.png"/></p>
		 <p>Legal values are LeadingModel.ROMAN_UP, LeadingModel.IDEOGRAPHIC_TOP_UP, LeadingModel.IDEOGRAPHIC_CENTER_UP, LeadingModel.IDEOGRAPHIC_TOP_DOWN, LeadingModel.IDEOGRAPHIC_CENTER_DOWN, LeadingModel.APPROXIMATE_TEXT_FIELD, LeadingModel.ASCENT_DESCENT_UP, LeadingModel.BOX, LeadingModel.AUTO, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of LeadingModel.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#LeadingModel"><linktext>flashx.textLayout.formats.LeadingModel</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:ligatureLevel:get"><apiName>ligatureLevel</apiName><shortdesc>
		 Controls which of the ligatures that are defined in the font may be used in the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Controls which of the ligatures that are defined in the font may be used in the text. The ligatures that appear for each of these settings is dependent on the font. A ligature occurs where two or more letter-forms are joined as a single glyph. Ligatures usually replace consecutive characters sharing common components, such as the letter pairs 'fi', 'fl', or 'ae'. They are used with both Latin and Non-Latin character sets. The ligatures enabled by the values of the LigatureLevel class - <codeph>MINIMUM</codeph>, <codeph>COMMON</codeph>, <codeph>UNCOMMON</codeph>, and <codeph>EXOTIC</codeph> - are additive. Each value enables a new set of ligatures, but also includes those of the previous types.<p><b>Note: </b>When working with Arabic or Syriac fonts, <codeph>ligatureLevel</codeph> must be set to MINIMUM or above.</p><p><adobeimage alt="ligatureLevel" href="../../../images/textLayout_ligatures.png"/></p>
		 <p>Legal values are LigatureLevel.MINIMUM, LigatureLevel.COMMON, LigatureLevel.UNCOMMON, LigatureLevel.EXOTIC, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of LigatureLevel.COMMON.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.LigatureLevel.xml"><linktext>flash.text.engine.LigatureLevel</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:lineBreak:get"><apiName>lineBreak</apiName><shortdesc>
		 Controls word wrapping within the container (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Controls word wrapping within the container (adopts default value if undefined during cascade).
		 Text in the container may be set to fit the width of the container (<codeph>LineBreak.TO_FIT</codeph>), or can be set to break only at explicit return or line feed characters (<codeph>LineBreak.EXPLICIT</codeph>).
		 <p>Legal values are LineBreak.EXPLICIT, LineBreak.TO_FIT, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of LineBreak.TO_FIT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#LineBreak"><linktext>flashx.textLayout.formats.LineBreak</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:lineHeight:get"><apiName>lineHeight</apiName><shortdesc>
		 Leading controls for the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Leading controls for the text. The distance from the baseline of the previous or the next line (based on <codeph>LeadingModel</codeph>) to the baseline of the current line is equal to the maximum amount of the leading applied to any character in the line. This is either a number or a percent.  If specifying a percent, enter a string value, like 140%.<p><adobeimage alt="lineHeight1" href="../../../images/textLayout_lineHeight1.jpg"/><adobeimage alt="lineHeight2" href="../../../images/textLayout_lineHeight2.jpg"/></p>
		 <p>Legal values as a number are from -720 to 720.</p>
		 <p>Legal values as a percent are numbers from -1000% to 1000%.</p>
		 <p>Legal values include FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 120%.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:lineThrough:get"><apiName>lineThrough</apiName><shortdesc>
		 If true, applies strikethrough, a line drawn through the middle of the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 If <codeph>true</codeph>, applies strikethrough, a line drawn through the middle of the text.
		 <p>Legal values are true, false and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of false.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:linkActiveFormat:get"><apiName>linkActiveFormat</apiName><shortdesc>
		 Defines the formatting attributes used for links in normal state.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Defines the formatting attributes used for links in normal state. This value will cascade down the hierarchy and apply to any links that are descendants.
		 Accepts <codeph>inherit</codeph>, an <codeph>ITextLayoutFormat</codeph> or converts an array of objects with key and value as members to a TextLayoutFormat.
		 <p>Legal values include FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of null.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:linkHoverFormat:get"><apiName>linkHoverFormat</apiName><shortdesc>
		 Defines the formatting attributes used for links in hover state, when the mouse is within the bounds (rolling over) a link.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Defines the formatting attributes used for links in hover state, when the mouse is within the bounds (rolling over) a link. This value will cascade down the hierarchy and apply to any links that are descendants.
		 Accepts <codeph>inherit</codeph>, an <codeph>ITextLayoutFormat</codeph> or converts an array of objects with key and value as members to a TextLayoutFormat.
		 <p>Legal values include FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of null.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:linkNormalFormat:get"><apiName>linkNormalFormat</apiName><shortdesc>
		 Defines the formatting attributes used for links in normal state.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Defines the formatting attributes used for links in normal state. This value will cascade down the hierarchy and apply to any links that are descendants.
		 Accepts <codeph>inherit</codeph>, an <codeph>ITextLayoutFormat</codeph> or converts an array of objects with key and value as members to a TextLayoutFormat.
		 <p>Legal values include FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of null.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:listAutoPadding:get"><apiName>listAutoPadding</apiName><shortdesc>
		 This specifies an auto indent for the start edge of lists when the padding value of the list on that side is auto.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 This specifies an auto indent for the start edge of lists when the padding value of the list on that side is <codeph>auto</codeph>.
		 <p>Legal values are numbers from -1000 to 1000 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 40.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:listMarkerFormat:get"><apiName>listMarkerFormat</apiName><shortdesc>
		 Defines the formatting attributes list markers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Defines the formatting attributes list markers. This value will cascade down the hierarchy and apply to any links that are descendants.
		 Accepts <codeph>inherit</codeph>, an <codeph>IListMarkerFormat</codeph> or converts an array of objects with key and value as members to a ListMarkerFormat.
		 <p>Legal values include FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of null.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:listStylePosition:get"><apiName>listStylePosition</apiName><shortdesc>
		 Legal values are ListStylePosition.INSIDE, ListStylePosition.OUTSIDE, FormatValue.INHERIT.
		 Default value is undefined indicating not set.
		 If undefined during the cascade this property will inherit its value from an ancestor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 <p>Legal values are ListStylePosition.INSIDE, ListStylePosition.OUTSIDE, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of ListStylePosition.OUTSIDE.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#ListStylePosition"><linktext>flashx.textLayout.formats.ListStylePosition</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:listStyleType:get"><apiName>listStyleType</apiName><shortdesc>
		 Legal values are ListStyleType.UPPER_ALPHA, ListStyleType.LOWER_ALPHA, ListStyleType.UPPER_ROMAN, ListStyleType.LOWER_ROMAN, ListStyleType.NONE, ListStyleType.DISC, ListStyleType.CIRCLE, ListStyleType.SQUARE, ListStyleType.BOX, ListStyleType.CHECK, ListStyleType.DIAMOND, ListStyleType.HYPHEN, ListStyleType.ARABIC_INDIC, ListStyleType.BENGALI, ListStyleType.DECIMAL, ListStyleType.DECIMAL_LEADING_ZERO, ListStyleType.DEVANAGARI, ListStyleType.GUJARATI, ListStyleType.GURMUKHI, ListStyleType.KANNADA, ListStyleType.PERSIAN, ListStyleType.THAI, ListStyleType.URDU, ListStyleType.CJK_EARTHLY_BRANCH, ListStyleType.CJK_HEAVENLY_STEM, ListStyleType.HANGUL, ListStyleType.HANGUL_CONSTANT, ListStyleType.HIRAGANA, ListStyleType.HIRAGANA_IROHA, ListStyleType.KATAKANA, ListStyleType.KATAKANA_IROHA, ListStyleType.LOWER_ALPHA, ListStyleType.LOWER_GREEK, ListStyleType.LOWER_LATIN, ListStyleType.UPPER_ALPHA, ListStyleType.UPPER_GREEK, ListStyleType.UPPER_LATIN, FormatValue.INHERIT.
		 Default value is undefined indicating not set.
		 If undefined during the cascade this property will inherit its value from an ancestor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 <p>Legal values are ListStyleType.UPPER_ALPHA, ListStyleType.LOWER_ALPHA, ListStyleType.UPPER_ROMAN, ListStyleType.LOWER_ROMAN, ListStyleType.NONE, ListStyleType.DISC, ListStyleType.CIRCLE, ListStyleType.SQUARE, ListStyleType.BOX, ListStyleType.CHECK, ListStyleType.DIAMOND, ListStyleType.HYPHEN, ListStyleType.ARABIC_INDIC, ListStyleType.BENGALI, ListStyleType.DECIMAL, ListStyleType.DECIMAL_LEADING_ZERO, ListStyleType.DEVANAGARI, ListStyleType.GUJARATI, ListStyleType.GURMUKHI, ListStyleType.KANNADA, ListStyleType.PERSIAN, ListStyleType.THAI, ListStyleType.URDU, ListStyleType.CJK_EARTHLY_BRANCH, ListStyleType.CJK_HEAVENLY_STEM, ListStyleType.HANGUL, ListStyleType.HANGUL_CONSTANT, ListStyleType.HIRAGANA, ListStyleType.HIRAGANA_IROHA, ListStyleType.KATAKANA, ListStyleType.KATAKANA_IROHA, ListStyleType.LOWER_ALPHA, ListStyleType.LOWER_GREEK, ListStyleType.LOWER_LATIN, ListStyleType.UPPER_ALPHA, ListStyleType.UPPER_GREEK, ListStyleType.UPPER_LATIN, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of ListStyleType.DISC.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#ListStyleType"><linktext>flashx.textLayout.formats.ListStyleType</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:locale:get"><apiName>locale</apiName><shortdesc>
		 The locale of the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 The locale of the text. Controls case transformations and shaping. Standard locale identifiers as described in Unicode Technical Standard #35 are used. For example en, en_US and en-US are all English, ja is Japanese. 
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of en.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:paddingBottom:get"><apiName>paddingBottom</apiName><shortdesc>
		 Bottom inset in pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Bottom inset in pixels.  Default of auto is zero except in lists which get a start side padding of 45.  (adopts default value if undefined during cascade).
		 Space between the bottom edge of the container and the text.  Value is a Number  or auto. <p> With horizontal text, in scrollable containers with multiple columns, the first and following columns will show the padding as blank space at the bottom of the container, but for the last column, if the text doesn't all fit, you may have to scroll in order to see the padding.</p>
		 <p>Legal values as a string are FormatValue.AUTO, FormatValue.INHERIT and numbers from -8000 to 8000.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of FormatValue.AUTO.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#Configuration/autoListElementStartPadding"><linktext>flashx.textLayout.elements.Configuration.autoListElementStartPadding</linktext></link><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:paddingLeft:get"><apiName>paddingLeft</apiName><shortdesc>
		 Left inset in pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Left inset in pixels.  Default of auto is zero except in lists which get a start side padding of 45. (adopts default value if undefined during cascade).
		 Space between the left edge of the container and the text.  Value is a Number or auto.<p> With vertical text, in scrollable containers with multiple columns, the first and following columns will show the padding as blank space at the end of the container, but for the last column, if the text doesn't all fit, you may have to scroll in order to see the padding.</p>
		 <p>Legal values as a string are FormatValue.AUTO, FormatValue.INHERIT and numbers from -8000 to 8000.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of FormatValue.AUTO.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#Configuration/autoListElementStartPadding"><linktext>flashx.textLayout.elements.Configuration.autoListElementStartPadding</linktext></link><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:paddingRight:get"><apiName>paddingRight</apiName><shortdesc>
		 Right inset in pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Right inset in pixels.  Default of auto is zero except in lists which get a start side padding of 45. (adopts default value if undefined during cascade).
		 Space between the right edge of the container and the text.  Value is a Number or auto. 
		 <p>Legal values as a string are FormatValue.AUTO, FormatValue.INHERIT and numbers from -8000 to 8000.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of FormatValue.AUTO.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#Configuration/autoListElementStartPadding"><linktext>flashx.textLayout.elements.Configuration.autoListElementStartPadding</linktext></link><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:paddingTop:get"><apiName>paddingTop</apiName><shortdesc>
		 Top inset in pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Top inset in pixels.  Default of auto is zero except in lists which get a start side padding of 45. (adopts default value if undefined during cascade).
		 Space between the top edge of the container and the text.  Value is a Number or auto.
		 <p>Legal values as a string are FormatValue.AUTO, FormatValue.INHERIT and numbers from -8000 to 8000.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of FormatValue.AUTO.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#Configuration/autoListElementStartPadding"><linktext>flashx.textLayout.elements.Configuration.autoListElementStartPadding</linktext></link><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:paragraphEndIndent:get"><apiName>paragraphEndIndent</apiName><shortdesc>
		 A Number that specifies, in pixels, the amount to indent the paragraph's end edge.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 A Number that specifies, in pixels, the amount to indent the paragraph's end edge. Refers to the right edge in left-to-right text and the left edge in right-to-left text. 
		 <p>Legal values are numbers from 0 to 8000 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:paragraphSpaceAfter:get"><apiName>paragraphSpaceAfter</apiName><shortdesc>
		 A Number that specifies the amount of space, in pixels, to leave after the paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 A Number that specifies the amount of space, in pixels, to leave after the paragraph.
		 Collapses in tandem with  <codeph>paragraphSpaceBefore</codeph>.
		 <p>Legal values are numbers from 0 to 8000 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:paragraphSpaceBefore:get"><apiName>paragraphSpaceBefore</apiName><shortdesc>
		 A Number that specifies the amount of space, in pixels, to leave before the paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 A Number that specifies the amount of space, in pixels, to leave before the paragraph. 
		 Collapses in tandem with <codeph>paragraphSpaceAfter</codeph>.
		 <p>Legal values are numbers from 0 to 8000 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:paragraphStartIndent:get"><apiName>paragraphStartIndent</apiName><shortdesc>
		 A Number that specifies, in pixels, the amount to indent the paragraph's start edge.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 A Number that specifies, in pixels, the amount to indent the paragraph's start edge. Refers to the left edge in left-to-right text and the right edge in right-to-left text. 
		 <p>Legal values are numbers from 0 to 8000 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:renderingMode:get"><apiName>renderingMode</apiName><shortdesc>
		 The rendering mode used for this text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 The rendering mode used for this text.  Applies only to embedded fonts (<codeph>fontLookup</codeph> property is set to <codeph>FontLookup.EMBEDDED_CFF</codeph>).
		 <p>Legal values are RenderingMode.NORMAL, RenderingMode.CFF, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of RenderingMode.CFF.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.RenderingMode.xml"><linktext>flash.text.engine.RenderingMode</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:styleName:get"><apiName>styleName</apiName><shortdesc>
		 Assigns an identifying class to the element, making it possible to set a style for the element by referencing the styleName.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Assigns an identifying class to the element, making it possible to set a style for the element by referencing the <codeph>styleName</codeph>.
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of null.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:tabStops:get"><apiName>tabStops</apiName><shortdesc>
		 Specifies the tab stops associated with the paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Specifies the tab stops associated with the paragraph.
		 Setters can take an array of TabStopFormat, a condensed string representation, undefined, or <codeph>FormatValue.INHERIT</codeph>. The condensed string representation is always converted into an array of TabStopFormat. <p>The string-based format is a list of tab stops, where each tab stop is delimited by one or more spaces.</p><p>A tab stop takes the following form: &lt;alignment type&gt;&lt;alignment position&gt;|&lt;alignment token&gt;.</p><p>The alignment type is a single character, and can be S, E, C, or D (or lower-case equivalents). S or s for start, E or e for end, C or c for center, D or d for decimal. The alignment type is optional, and if its not specified will default to S.</p><p>The alignment position is a Number, and is specified according to FXG spec for Numbers (decimal or scientific notation). The alignment position is required.</p><p>The vertical bar is used to separate the alignment position from the alignment token, and should only be present if the alignment token is present.</p><p> The alignment token is optional if the alignment type is D, and should not be present if the alignment type is anything other than D. The alignment token may be any sequence of characters terminated by the space that ends the tab stop (for the last tab stop, the terminating space is optional; end of alignment token is implied). A space may be part of the alignment token if it is escaped with a backslash (\ ). A backslash may be part of the alignment token if it is escaped with another backslash (\\). If the alignment type is D, and the alignment token is not specified, it will take on the default value of null.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of null.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TabStopFormat"><linktext>flashx.textLayout.formats.TabStopFormat</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:textAlignLast:get"><apiName>textAlignLast</apiName><shortdesc>
		 Alignment of the last (or only) line in the paragraph relative to the container in justified text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Alignment of the last (or only) line in the paragraph relative to the container in justified text.
		 If <codeph>textAlign</codeph> is set to <codeph>TextAlign.JUSTIFY</codeph>, <codeph>textAlignLast</codeph> specifies how the last line (or only line, if this is a one line block) is aligned. Values are similar to <codeph>textAlign</codeph>.
		 <p>Legal values are TextAlign.LEFT, TextAlign.RIGHT, TextAlign.CENTER, TextAlign.JUSTIFY, TextAlign.START, TextAlign.END, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of TextAlign.START.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextAlign"><linktext>flashx.textLayout.formats.TextAlign</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:textAlign:get"><apiName>textAlign</apiName><shortdesc>
		 Alignment of lines in the paragraph relative to the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Alignment of lines in the paragraph relative to the container.
		 <codeph>TextAlign.LEFT</codeph> aligns lines along the left edge of the container. <codeph>TextAlign.RIGHT</codeph> aligns on the right edge. <codeph>TextAlign.CENTER</codeph> positions the line equidistant from the left and right edges. <codeph>TextAlign.JUSTIFY</codeph> spreads the lines out so they fill the space. <codeph>TextAlign.START</codeph> is equivalent to setting left in left-to-right text, or right in right-to-left text. <codeph>TextAlign.END</codeph> is equivalent to setting right in left-to-right text, or left in right-to-left text.
		 <p>Legal values are TextAlign.LEFT, TextAlign.RIGHT, TextAlign.CENTER, TextAlign.JUSTIFY, TextAlign.START, TextAlign.END, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of TextAlign.START.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextAlign"><linktext>flashx.textLayout.formats.TextAlign</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:textAlpha:get"><apiName>textAlpha</apiName><shortdesc>
		 Alpha (transparency) value for the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Alpha (transparency) value for the text. A value of 0 is fully transparent, and a value of 1 is fully opaque. Display objects with <codeph>textAlpha</codeph> set to 0 are active, even though they are invisible.
		 <p>Legal values are numbers from 0 to 1 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 1.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:textDecoration:get"><apiName>textDecoration</apiName><shortdesc>
		 Decoration on text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Decoration on text. Use to apply underlining; default is none.
		 <p>Legal values are TextDecoration.NONE, TextDecoration.UNDERLINE, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of TextDecoration.NONE.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextDecoration"><linktext>flashx.textLayout.formats.TextDecoration</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:textIndent:get"><apiName>textIndent</apiName><shortdesc>
		 A Number that specifies, in pixels, the amount to indent the first line of the paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 A Number that specifies, in pixels, the amount to indent the first line of the paragraph.
		 A negative indent will push the line into the margin, and possibly out of the container.
		 <p>Legal values are numbers from -8000 to 8000 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:textJustify:get"><apiName>textJustify</apiName><shortdesc>
		 Specifies options for justifying text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Specifies options for justifying text.
		 Default value is <codeph>TextJustify.INTER_WORD</codeph>, meaning that extra space is added to the space characters. <codeph>TextJustify.DISTRIBUTE</codeph> adds extra space to space characters and between individual letters. Used only in conjunction with a <codeph>justificationRule</codeph> value of <codeph>JustificationRule.SPACE</codeph>.
		 <p>Legal values are TextJustify.INTER_WORD, TextJustify.DISTRIBUTE, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of TextJustify.INTER_WORD.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextJustify"><linktext>flashx.textLayout.formats.TextJustify</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:textRotation:get"><apiName>textRotation</apiName><shortdesc>
		 Determines the number of degrees to rotate this text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Determines the number of degrees to rotate this text.
		 <p>Legal values are TextRotation.ROTATE_0, TextRotation.ROTATE_180, TextRotation.ROTATE_270, TextRotation.ROTATE_90, TextRotation.AUTO, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of TextRotation.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextRotation.xml"><linktext>flash.text.engine.TextRotation</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:trackingLeft:get"><apiName>trackingLeft</apiName><shortdesc>
		 Number in pixels (or percent of fontSize, like 120%) indicating the amount of tracking (manual kerning) to be applied to the left of each character.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Number in pixels (or percent of <codeph>fontSize</codeph>, like 120%) indicating the amount of tracking (manual kerning) to be applied to the left of each character. If kerning is enabled, the <codeph>trackingLeft</codeph> value is added to the values in the kerning table for the font. If kerning is disabled, the <codeph>trackingLeft</codeph> value is used as a manual kerning value. Supports both positive and negative values. 
		 <p>Legal values as a number are from -1000 to 1000.</p>
		 <p>Legal values as a percent are numbers from -1000% to 1000%.</p>
		 <p>Legal values include FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:trackingRight:get"><apiName>trackingRight</apiName><shortdesc>
		 Number in pixels (or percent of fontSize, like 120%) indicating the amount of tracking (manual kerning) to be applied to the right of each character.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Number in pixels (or percent of <codeph>fontSize</codeph>, like 120%) indicating the amount of tracking (manual kerning) to be applied to the right of each character.  If kerning is enabled, the <codeph>trackingRight</codeph> value is added to the values in the kerning table for the font. If kerning is disabled, the <codeph>trackingRight</codeph> value is used as a manual kerning value. Supports both positive and negative values. 
		 <p>Legal values as a number are from -1000 to 1000.</p>
		 <p>Legal values as a percent are numbers from -1000% to 1000%.</p>
		 <p>Legal values include FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:typographicCase:get"><apiName>typographicCase</apiName><shortdesc>
		 The type of typographic case used for this text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 The type of typographic case used for this text. Here are some examples:<p><adobeimage alt="typographicCase" href="../../../images/textLayout_typographiccase.png"/></p>
		 <p>Legal values are TLFTypographicCase.DEFAULT, TLFTypographicCase.CAPS_TO_SMALL_CAPS, TLFTypographicCase.UPPERCASE, TLFTypographicCase.LOWERCASE, TLFTypographicCase.LOWERCASE_TO_SMALL_CAPS, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of TLFTypographicCase.DEFAULT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TLFTypographicCase"><linktext>flashx.textLayout.formats.TLFTypographicCase</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:verticalAlign:get"><apiName>verticalAlign</apiName><shortdesc>
		 Vertical alignment or justification (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Vertical alignment or justification (adopts default value if undefined during cascade).
		 Determines how TextFlow elements align within the container.
		 <p>Legal values are VerticalAlign.TOP, VerticalAlign.MIDDLE, VerticalAlign.BOTTOM, VerticalAlign.JUSTIFY, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of VerticalAlign.TOP.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#VerticalAlign"><linktext>flashx.textLayout.formats.VerticalAlign</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:whiteSpaceCollapse:get"><apiName>whiteSpaceCollapse</apiName><shortdesc>
		 Collapses or preserves whitespace when importing text into a TextFlow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Collapses or preserves whitespace when importing text into a TextFlow. <codeph>WhiteSpaceCollapse.PRESERVE</codeph> retains all whitespace characters. <codeph>WhiteSpaceCollapse.COLLAPSE</codeph> removes newlines, tabs, and leading or trailing spaces within a block of imported text. Line break tags () and Unicode line separator characters are retained.
		 <p>Legal values are WhiteSpaceCollapse.PRESERVE, WhiteSpaceCollapse.COLLAPSE, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of WhiteSpaceCollapse.COLLAPSE.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#WhiteSpaceCollapse"><linktext>flashx.textLayout.formats.WhiteSpaceCollapse</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:wordSpacing:get"><apiName>wordSpacing</apiName><shortdesc>
		 Specifies the optimum, minimum, and maximum spacing (as a multiplier of the width of a normal space) between words to use during justification.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Specifies the optimum, minimum, and maximum spacing (as a multiplier of the width of a normal space) between words to use during justification.
		 The optimum space is used to indicate the desired size of a space, as a fraction of the value defined in the font. The minimum and maximum values are the used when textJustify is distribute to determine how wide or narrow the spaces between the words may grow before letter spacing is used to justify the line.
		 <p>Legal values as a percent are numbers from -1000% to 1000%.</p>
		 <p>Legal values include FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 100%, 50%, 150%.</p>
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:TextLayoutFormat"><apiName>TextLayoutFormat</apiName><shortdesc>
	 The TextLayoutFormat class holds all of the text layout properties.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.formats:ITextLayoutFormat</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The TextLayoutFormat class holds all of the text layout properties. These properties affect the format and style of a text flow at the container level, paragraph level, and text level.  Both the ContainerController class and the FlowElement base class have <codeph>format</codeph> properties that enable you to assign a TextLayoutFormat instance to them. Assign a TextLayoutFormat object to a container to affect the format of all of the container's content. Assign a TextLayoutFormat object to a FlowElement descendant to specify formatting for that particular element: TextFlow, ParagraphElement, DivElement, SpanElement, InlineGraphicElement, LinkElement, and TCYElement.
	 In addition to the <codeph>format</codeph> property, these classes also define each of the individual TextLayoutFormat properties so that you can override the setting of a particular style property for that element, if you wish. <p>Because you can set a given style at multiple levels, it is possible to have conflicts. For example, the color of the text at the TextFlow level could be set to black while a SpanElement object sets it to blue. The general rule is that the setting at the lowest level on the text flow tree takes precedence. So if the ligature level is set for a TextFlow instance and also set for a DivElement, the DivElement setting takes precedence. </p><p>Cascading styles refers to the process of adopting styles from a higher level in the text flow if a style value is undefined at a lower level. When a style is undefined on an element at the point it is about to be rendered, it either takes its default value or the value cascades or descends from the value on a parent element. For example, if the transparency (<codeph>textAlpha</codeph> property) of the text is undefined on a SpanElement object, but is set on the TextFlow, the value of the <codeph>TextFlow.textAlpha</codeph> property cascades to the SpanElement object and is applied to the text for that span. The result of the cascade, or the sum of the styles that is applied to the element, is stored in the element's <codeph>computedFormat</codeph> property.</p><p>In the same way, you can apply user styles using the <codeph>userStyles</codeph> property of the ContainerController and FlowElement classes. This  property allows you to read or write a dictionary of user styles and apply its settings to a container or a text flow element. The user styles dictionary is an object that consists of <i>stylename-value</i> pairs. Styles specified by the <codeph>userStyles</codeph> property take precedence over all others.</p><p>Most styles that are undefined inherit the value of their immediate parent during a cascade. A small number of styles, however, do not inherit their parent�s value and take on their default values instead.</p><p><b>Style properties that adopt their default values, if undefined, include:</b> <codeph>backgroundAlpha</codeph>, <codeph>backgroundColor</codeph>, <codeph>columnCount</codeph>, <codeph>columnGap</codeph>, <codeph>columnWidth</codeph>, <codeph>lineBreak</codeph>, <codeph>paddingBottom</codeph>, <codeph>paddingLeft</codeph>, <codeph>paddingRight</codeph>, <codeph>paddingTop</codeph>, <codeph>verticalAlign</codeph></p>.
	 </apiDesc><example conref="examples\TextLayoutFormatExample.as"/><example conref="examples\TextLayoutFormatExample2.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/format"><linktext>flashx.textLayout.elements.FlowElement.format</linktext></link><link href="flashx.textLayout.factory.xml#TextFlowTextLineFactory"><linktext>flashx.textLayout.factory.TextFlowTextLineFactory</linktext></link></related-links><apiConstructor id="flashx.textLayout.formats:TextLayoutFormat:TextLayoutFormat"><apiName>TextLayoutFormat</apiName><shortdesc>
		 Creates a new TextLayoutFormat object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>initialValues</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiData>null</apiData><apiDesc>optional instance from which to copy initial values.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Creates a new TextLayoutFormat object. All settings are empty or, optionally, are initialized from the
		 supplied <codeph>initialValues</codeph> object.
		 
		 </apiDesc></apiConstructorDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/defaultFormat"><linktext>defaultFormat</linktext></link></related-links></apiConstructor><apiOperation id="flashx.textLayout.formats:TextLayoutFormat:apply"><apiName>apply</apiName><shortdesc>
		 Replaces property values in this TextLayoutFormat object with the values of properties that are set in
		 the incoming ITextLayoutFormat instance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>incoming</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>instance whose property values are applied to this TextLayoutFormat object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Replaces property values in this TextLayoutFormat object with the values of properties that are set in
		 the <codeph>incoming</codeph> ITextLayoutFormat instance. Properties that are <codeph>undefined</codeph> in the <codeph>incoming</codeph>
		 ITextLayoutFormat instance are not changed in this object.
		 
		 </apiDesc><example conref="examples\TextLayoutFormat_applyExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.formats:TextLayoutFormat:concatInheritOnly"><apiName>concatInheritOnly</apiName><shortdesc>
		 Concatenates the values of properties in the incoming ITextLayoutFormat instance
		 with the values of this TextLayoutFormat object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>incoming</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>instance from which values are concatenated.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Concatenates the values of properties in the <codeph>incoming</codeph> ITextLayoutFormat instance
		 with the values of this TextLayoutFormat object. In this (the receiving) TextLayoutFormat object, properties whose values are <codeph>FormatValue.INHERIT</codeph>,
		 and inheriting properties whose values are <codeph>undefined</codeph> will get new values from the <codeph>incoming</codeph> object.
		 All other property values will remain unmodified.
		 
		 </apiDesc><example conref="examples\TextLayoutFormat_concatInheritOnlyExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue/INHERIT"><linktext>flashx.textLayout.formats.FormatValue.INHERIT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.formats:TextLayoutFormat:concat"><apiName>concat</apiName><shortdesc>
		 Concatenates the values of properties in the incoming ITextLayoutFormat instance
		 with the values of this TextLayoutFormat object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>incoming</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>instance from which values are concatenated.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Concatenates the values of properties in the <codeph>incoming</codeph> ITextLayoutFormat instance
		 with the values of this TextLayoutFormat object. In this (the receiving) TextLayoutFormat object, properties whose values are <codeph>FormatValue.INHERIT</codeph>,
		 and inheriting properties whose values are <codeph>undefined</codeph> will get new values from the <codeph>incoming</codeph> object.
		 Non-inheriting properties whose values are <codeph>undefined</codeph> will get their default values.
		 All other property values will remain unmodified.
		 
		 </apiDesc><example conref="examples\TextLayoutFormat_concatExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue/INHERIT"><linktext>flashx.textLayout.formats.FormatValue.INHERIT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.formats:TextLayoutFormat:copy"><apiName>copy</apiName><shortdesc>
		 Copies TextLayoutFormat settings from the values ITextLayoutFormat instance into this TextLayoutFormat object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>incoming</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>optional instance from which to copy values.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Copies TextLayoutFormat settings from the <codeph>values</codeph> ITextLayoutFormat instance into this TextLayoutFormat object.
		 If <codeph>values</codeph> is <codeph>null</codeph>, this TextLayoutFormat object is initialized with undefined values for all properties.
		 </apiDesc><example conref="examples\TextLayoutFormat_copyExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.formats:TextLayoutFormat:createTextLayoutFormat"><apiName>createTextLayoutFormat</apiName><shortdesc>
		 Creates a new TextLayoutFormat object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiOperationClassifier>flashx.textLayout.formats:TextLayoutFormat</apiOperationClassifier></apiReturn><apiParam><apiItemName>initialValues</apiItemName><apiType value="Object"/><apiDesc>optional instance from which to copy initial values. If an TextLayoutFormat object values are copied.
		 Otherwise initialValues is treated like a Dictionary or Object and iterated over.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Creates a new TextLayoutFormat object. All settings are empty or, optionally, are initialized from the
		 supplied <codeph>initialValues</codeph> object.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.formats:TextLayoutFormat:getStyle"><apiName>getStyle</apiName><shortdesc> Returns the value of the style specified by the styleProp parameter, which specifies
		 the style name.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The value of the specified style. The type varies depending on the type of the style being
		 accessed. Returns <codeph>undefined</codeph> if the style is not set.
		 
		 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>The name of the style whose value is to be retrieved.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Returns the value of the style specified by the <codeph>styleProp</codeph> parameter, which specifies
		 the style name.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.formats:TextLayoutFormat:isEqual"><apiName>isEqual</apiName><shortdesc>
		 Compares properties in ITextLayoutFormat instance p1 with properties in ITextLayoutFormat instance p2
		 and returns true if all properties match.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>true if all properties match, false otherwise.
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>p1</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>instance to compare to <codeph>p2</codeph>.
		 </apiDesc></apiParam><apiParam><apiItemName>p2</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>instance to compare to <codeph>p1</codeph>.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Compares properties in ITextLayoutFormat instance <codeph>p1</codeph> with properties in ITextLayoutFormat instance <codeph>p2</codeph>
		 and returns <codeph>true</codeph> if all properties match.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.formats:TextLayoutFormat:removeClashing"><apiName>removeClashing</apiName><shortdesc>
		 Sets properties in this TextLayoutFormat object to undefined if they do not match those in the
		 incoming ITextLayoutFormat instance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>incoming</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>instance against which to compare this TextLayoutFormat object's property values.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Sets properties in this TextLayoutFormat object to <codeph>undefined</codeph> if they do not match those in the
		 <codeph>incoming</codeph> ITextLayoutFormat instance.
		 
		 </apiDesc><example conref="examples\TextLayoutFormat_removeClashingExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.formats:TextLayoutFormat:removeMatching"><apiName>removeMatching</apiName><shortdesc>
		 Sets properties in this TextLayoutFormat object to undefined if they match those in the incoming
		 ITextLayoutFormat instance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>incoming</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>instance against which to compare this TextLayoutFormat object's property values.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Sets properties in this TextLayoutFormat object to <codeph>undefined</codeph> if they match those in the <codeph>incoming</codeph>
		 ITextLayoutFormat instance.
		 
		 </apiDesc><example conref="examples\TextLayoutFormat_removeMatchingExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.formats:TextLayoutFormat:setStyle"><apiName>setStyle</apiName><shortdesc> Sets the style specified by the styleProp parameter to the value specified by the
		 newValue parameter.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>The name of the style to set.
		 </apiDesc></apiParam><apiParam><apiItemName>newValue</apiItemName><apiType value="any"/><apiDesc>The value to which to set the style.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Sets the style specified by the <codeph>styleProp</codeph> parameter to the value specified by the
		 <codeph>newValue</codeph> parameter. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.formats:TextLayoutFormat:alignmentBaselineProperty:get"><apiName>alignmentBaselineProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:alignmentBaseline:get"><apiName>alignmentBaseline</apiName><shortdesc>
		 Specifies the baseline to which the dominant baseline aligns.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Specifies the baseline to which the dominant baseline aligns. For example, if you set <codeph>dominantBaseline</codeph> to ASCENT, setting <codeph>alignmentBaseline</codeph> to DESCENT aligns the top of the text with the DESCENT baseline, or below the line.  The largest element in the line generally determines the baselines.<p><adobeimage alt="baselines" href="../../../images/textLayout_baselines.jpg"/></p>
		 <p>Legal values are TextBaseline.ROMAN, TextBaseline.ASCENT, TextBaseline.DESCENT, TextBaseline.IDEOGRAPHIC_TOP, TextBaseline.IDEOGRAPHIC_CENTER, TextBaseline.IDEOGRAPHIC_BOTTOM, TextBaseline.USE_DOMINANT_BASELINE, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of TextBaseline.USE_DOMINANT_BASELINE.</p>
		 </apiDesc><example conref="examples\TextLayoutFormat_alignmentBaselineExample.as"/></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextBaseline.xml"><linktext>flash.text.engine.TextBaseline</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:backgroundAlphaProperty:get"><apiName>backgroundAlphaProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:backgroundAlpha:get"><apiName>backgroundAlpha</apiName><shortdesc>
		 Alpha (transparency) value for the background (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Alpha (transparency) value for the background (adopts default value if undefined during cascade). A value of 0 is fully transparent, and a value of 1 is fully opaque. Display objects with alpha set to 0 are active, even though they are invisible.
		 <p>Legal values are numbers from 0 to 1 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of 1.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:backgroundColorProperty:get"><apiName>backgroundColorProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:backgroundColor:get"><apiName>backgroundColor</apiName><shortdesc>
		 Background color of the text (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Background color of the text (adopts default value if undefined during cascade). Can be either the constant value  <codeph>BackgroundColor.TRANSPARENT</codeph>, or a hexadecimal value that specifies the three 8-bit RGB (red, green, blue) values; for example, 0xFF0000 is red and 0x00FF00 is green.
		 <p>Legal values as a string are BackgroundColor.TRANSPARENT, FormatValue.INHERIT and uints from 0x0 to 0xffffffff.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of BackgroundColor.TRANSPARENT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BackgroundColor"><linktext>flashx.textLayout.formats.BackgroundColor</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:baselineShiftProperty:get"><apiName>baselineShiftProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:baselineShift:get"><apiName>baselineShift</apiName><shortdesc>
		 Amount to shift the baseline from the dominantBaseline value.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Amount to shift the baseline from the <codeph>dominantBaseline</codeph> value. Units are in pixels, or a percentage of <codeph>fontSize</codeph> (in which case, enter a string value, like 140%).  Positive values shift the line up for horizontal text (right for vertical) and negative values shift it down for horizontal (left for vertical). 
		 <p>Legal values are BaselineShift.SUPERSCRIPT, BaselineShift.SUBSCRIPT, FormatValue.INHERIT.</p>
		 <p>Legal values as a number are from -1000 to 1000.</p>
		 <p>Legal values as a percent are numbers from -1000 to 1000.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.0.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BaselineShift"><linktext>flashx.textLayout.formats.BaselineShift</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:blockProgressionProperty:get"><apiName>blockProgressionProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:blockProgression:get"><apiName>blockProgression</apiName><shortdesc>
		 Specifies a vertical or horizontal progression of line placement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Specifies a vertical or horizontal progression of line placement.
		 Lines are either placed top-to-bottom (<codeph>BlockProgression.TB</codeph>, used for horizontal text) or right-to-left (<codeph>BlockProgression.RL</codeph>, used for vertical text).
		 <p>Legal values are BlockProgression.RL, BlockProgression.TB, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of BlockProgression.TB.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BlockProgression"><linktext>flashx.textLayout.formats.BlockProgression</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:breakOpportunityProperty:get"><apiName>breakOpportunityProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:breakOpportunity:get"><apiName>breakOpportunity</apiName><shortdesc>
		 Controls where lines are allowed to break when breaking wrapping text into multiple lines.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Controls where lines are allowed to break when breaking wrapping text into multiple lines. Set to <codeph>BreakOpportunity.AUTO</codeph> to break text normally. Set to <codeph>BreakOpportunity.NONE</codeph> to <i>not</i> break the text unless the text would overrun the measure and there are no other places to break the line. Set to <codeph>BreakOpportunity.ANY</codeph> to allow the line to break anywhere, rather than just between words. Set to <codeph>BreakOpportunity.ALL</codeph> to have each typographic cluster put on a separate line (useful for text on a path).
		 <p>Legal values are BreakOpportunity.ALL, BreakOpportunity.ANY, BreakOpportunity.AUTO, BreakOpportunity.NONE, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of BreakOpportunity.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.BreakOpportunity.xml"><linktext>flash.text.engine.BreakOpportunity</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:cffHintingProperty:get"><apiName>cffHintingProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:cffHinting:get"><apiName>cffHinting</apiName><shortdesc>
		 The type of CFF hinting used for this text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 The type of CFF hinting used for this text. CFF hinting determines whether the Flash runtime forces strong horizontal stems to fit to a sub pixel grid or not. This property applies only if the <codeph>renderingMode</codeph> property is set to <codeph>RenderingMode.CFF</codeph>, and the font is embedded (<codeph>fontLookup</codeph> property is set to <codeph>FontLookup.EMBEDDED_CFF</codeph>). At small screen sizes, hinting produces a clear, legible text for human readers.
		 <p>Legal values are CFFHinting.NONE, CFFHinting.HORIZONTAL_STEM, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of CFFHinting.HORIZONTAL_STEM.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.CFFHinting.xml"><linktext>flash.text.engine.CFFHinting</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:clearFloatsProperty:get"><apiName>clearFloatsProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:clearFloats:get"><apiName>clearFloats</apiName><shortdesc>
		 Controls how text wraps around a float.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Controls how text wraps around a float. A value of none allows the text to wrap most closely around a float. A value of left causes the text to skip over any portion of the container that has a left float, and a value of right causes the text to skip over any portion of the container that has a right float. A value of both causes the text to skip over any floats.
		 <p>Legal values are ClearFloats.START, ClearFloats.END, ClearFloats.LEFT, ClearFloats.RIGHT, ClearFloats.BOTH, ClearFloats.NONE, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of ClearFloats.NONE.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#ClearFloats"><linktext>flashx.textLayout.formats.ClearFloats</linktext></link><link href="flashx.textLayout.formats.xml#ClearFloats"><linktext>flashx.textLayout.formats.ClearFloats</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:colorProperty:get"><apiName>colorProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:color:get"><apiName>color</apiName><shortdesc>
		 Color of the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Color of the text. A hexadecimal number that specifies three 8-bit RGB (red, green, blue) values; for example, 0xFF0000 is red and 0x00FF00 is green. It can also be enum value {BLACK, GREEN, GRAY, BLUE, SILVER, LIME, OLIVE, WHITE, YELLOW, MAROON, NAVY, RED, PURPLE, TEAL, FUCHSIA, AQUA, MAGENTA, CYAN}
		 <p>Legal values as a string are ColorName.BLACK, ColorName.GREEN, ColorName.GRAY, ColorName.BLUE, ColorName.SILVER, ColorName.LIME, ColorName.OLIVE, ColorName.WHITE, ColorName.YELLOW, ColorName.MAROON, ColorName.NAVY, ColorName.RED, ColorName.PURPLE, ColorName.TEAL, ColorName.FUCHSIA, ColorName.AQUA, ColorName.MAGENTA, ColorName.CYAN, FormatValue.INHERIT and uints from 0x0 to 0xffffffff.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#ColorName"><linktext>flashx.textLayout.formats.ColorName</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:columnBreakAfterProperty:get"><apiName>columnBreakAfterProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:columnBreakAfter:get"><apiName>columnBreakAfter</apiName><shortdesc>
		 Controls column after before the element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Controls column after before the element.
		 <p>Legal values are BreakStyle.AUTO, BreakStyle.ALWAYS, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of BreakStyle.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BreakStyle"><linktext>flashx.textLayout.formats.BreakStyle</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:columnBreakBeforeProperty:get"><apiName>columnBreakBeforeProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:columnBreakBefore:get"><apiName>columnBreakBefore</apiName><shortdesc>
		 Controls column break before the element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Controls column break before the element.
		 <p>Legal values are BreakStyle.AUTO, BreakStyle.ALWAYS, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of BreakStyle.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BreakStyle"><linktext>flashx.textLayout.formats.BreakStyle</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:columnCountProperty:get"><apiName>columnCountProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:columnCount:get"><apiName>columnCount</apiName><shortdesc>
		 Number of text columns (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Number of text columns (adopts default value if undefined during cascade).
		 The column number overrides the  other column settings. Value is an integer, or <codeph>FormatValue.AUTO</codeph> if unspecified. If <codeph>columnCount</codeph> is not specified,<codeph>columnWidth</codeph> is used to create as many columns as can fit in the container.
		 <p>Legal values as a string are FormatValue.AUTO, FormatValue.INHERIT and from ints from 1 to 50.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of FormatValue.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:columnGapProperty:get"><apiName>columnGapProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:columnGap:get"><apiName>columnGap</apiName><shortdesc>
		 Specifies the amount of gutter space, in pixels, to leave between the columns (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Specifies the amount of gutter space, in pixels, to leave between the columns (adopts default value if undefined during cascade).
		 Value is a Number
		 <p>Legal values are numbers from 0 to 1000 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of 20.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:columnWidthProperty:get"><apiName>columnWidthProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:columnWidth:get"><apiName>columnWidth</apiName><shortdesc>
		 Column width in pixels (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Column width in pixels (adopts default value if undefined during cascade).
		 If you specify the width of the columns, but not the count, TextLayout will create as many columns of that width as possible, given the  container width and <codeph>columnGap</codeph> settings. Any remainder space is left after the last column. Value is a Number.
		 <p>Legal values as a string are FormatValue.AUTO, FormatValue.INHERIT and numbers from 0 to 8000.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of FormatValue.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:containerBreakAfterProperty:get"><apiName>containerBreakAfterProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:containerBreakAfter:get"><apiName>containerBreakAfter</apiName><shortdesc>
		 Controls container after before the element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Controls container after before the element.
		 <p>Legal values are BreakStyle.AUTO, BreakStyle.ALWAYS, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of BreakStyle.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BreakStyle"><linktext>flashx.textLayout.formats.BreakStyle</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:containerBreakBeforeProperty:get"><apiName>containerBreakBeforeProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:containerBreakBefore:get"><apiName>containerBreakBefore</apiName><shortdesc>
		 Controls container break before the element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Controls container break before the element.
		 <p>Legal values are BreakStyle.AUTO, BreakStyle.ALWAYS, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of BreakStyle.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BreakStyle"><linktext>flashx.textLayout.formats.BreakStyle</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:coreStyles:get"><apiName>coreStyles</apiName><shortdesc> Returns the coreStyles on this TextLayoutFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc> Returns the <codeph>coreStyles</codeph> on this TextLayoutFormat.  
		 The coreStyles object includes the formats that are defined by TextLayoutFormat and are in TextLayoutFormat.description. The
		 returned <codeph>coreStyles</codeph> object consists of an array of <i>stylename-value</i> pairs.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat"><linktext>flashx.textLayout.formats.TextLayoutFormat</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:defaultFormat:get"><apiName>defaultFormat</apiName><shortdesc>
		 Returns a TextLayoutFormat object with default settings.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc>
		 Returns a TextLayoutFormat object with default settings.
		 This function always returns the same object.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:digitCaseProperty:get"><apiName>digitCaseProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:digitCase:get"><apiName>digitCase</apiName><shortdesc>
		 The type of digit case used for this text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 The type of digit case used for this text. Setting the value to <codeph>DigitCase.OLD_STYLE</codeph> approximates lowercase letterforms with varying ascenders and descenders. The figures are proportionally spaced. This style is only available in selected typefaces, most commonly in a supplemental or expert font. The <codeph>DigitCase.LINING</codeph> setting has all-cap height and is typically monospaced to line up in charts.<p><adobeimage alt="digitCase" href="../../../images/textLayout_digitcase.gif"/></p>
		 <p>Legal values are DigitCase.DEFAULT, DigitCase.LINING, DigitCase.OLD_STYLE, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of DigitCase.DEFAULT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.DigitCase.xml"><linktext>flash.text.engine.DigitCase</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:digitWidthProperty:get"><apiName>digitWidthProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:digitWidth:get"><apiName>digitWidth</apiName><shortdesc>
		 Type of digit width used for this text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Type of digit width used for this text. This can be <codeph>DigitWidth.PROPORTIONAL</codeph>, which looks best for individual numbers, or <codeph>DigitWidth.TABULAR</codeph>, which works best for numbers in tables, charts, and vertical rows.<p><adobeimage alt="digitWidth" href="../../../images/textLayout_digitwidth.gif"/></p>
		 <p>Legal values are DigitWidth.DEFAULT, DigitWidth.PROPORTIONAL, DigitWidth.TABULAR, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of DigitWidth.DEFAULT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.DigitWidth.xml"><linktext>flash.text.engine.DigitWidth</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:directionProperty:get"><apiName>directionProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:direction:get"><apiName>direction</apiName><shortdesc>
		 Specifies the default bidirectional embedding level of the text in the text block.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Specifies the default bidirectional embedding level of the text in the text block. 
		 Left-to-right reading order, as in Latin-style scripts, or right-to-left reading order, as in Arabic or Hebrew. This property also affects column direction when it is applied at the container level. Columns can be either left-to-right or right-to-left, just like text. Below are some examples:<p><adobeimage alt="direction" href="../../../images/textLayout_direction.gif"/></p>
		 <p>Legal values are Direction.LTR, Direction.RTL, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of Direction.LTR.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#Direction"><linktext>flashx.textLayout.formats.Direction</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:dominantBaselineProperty:get"><apiName>dominantBaselineProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:dominantBaseline:get"><apiName>dominantBaseline</apiName><shortdesc>
		 Specifies which element baseline snaps to the alignmentBaseline to determine the vertical position of the element on the line.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Specifies which element baseline snaps to the <codeph>alignmentBaseline</codeph> to determine the vertical position of the element on the line. A value of <codeph>TextBaseline.AUTO</codeph> selects the dominant baseline based on the <codeph>locale</codeph> property of the parent paragraph.  For Japanese and Chinese, the selected baseline value is <codeph>TextBaseline.IDEOGRAPHIC_CENTER</codeph>; for all others it is <codeph>TextBaseline.ROMAN</codeph>. These baseline choices are determined by the choice of font and the font size.<p><adobeimage alt="baselines" href="../../../images/textLayout_baselines.jpg"/></p>
		 <p>Legal values are FormatValue.AUTO, TextBaseline.ROMAN, TextBaseline.ASCENT, TextBaseline.DESCENT, TextBaseline.IDEOGRAPHIC_TOP, TextBaseline.IDEOGRAPHIC_CENTER, TextBaseline.IDEOGRAPHIC_BOTTOM, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of FormatValue.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextBaseline.xml"><linktext>flash.text.engine.TextBaseline</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:firstBaselineOffsetProperty:get"><apiName>firstBaselineOffsetProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:firstBaselineOffset:get"><apiName>firstBaselineOffset</apiName><shortdesc>
		 Specifies the baseline position of the first line in the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Specifies the baseline position of the first line in the container. Which baseline this property refers to depends on the container-level locale.  For Japanese and Chinese, it is <codeph>TextBaseline.IDEOGRAPHIC_BOTTOM</codeph>; for all others it is <codeph>TextBaseline.ROMAN</codeph>.
		 The offset from the top inset (or right inset if <codeph>blockProgression</codeph> is RL) of the container to the baseline of the first line can be either <codeph>BaselineOffset.ASCENT</codeph>, meaning equal to the ascent of the line, <codeph>BaselineOffset.LINE_HEIGHT</codeph>, meaning equal to the height of that first line, or any fixed-value number to specify an absolute distance. <codeph>BaselineOffset.AUTO</codeph> aligns the ascent of the line with the container top inset.<p><adobeimage alt="firstBaselineOffset1" href="../../../images/textLayout_FBO1.png"/><adobeimage alt="firstBaselineOffset2" href="../../../images/textLayout_FBO2.png"/><adobeimage alt="firstBaselineOffset3" href="../../../images/textLayout_FBO3.png"/><adobeimage alt="firstBaselineOffset4" href="../../../images/textLayout_FBO4.png"/></p>
		 <p>Legal values as a string are BaselineOffset.AUTO, BaselineOffset.ASCENT, BaselineOffset.LINE_HEIGHT, FormatValue.INHERIT and numbers from 0 to 1000.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of BaselineOffset.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BaselineOffset"><linktext>flashx.textLayout.formats.BaselineOffset</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:fontFamilyProperty:get"><apiName>fontFamilyProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:fontFamily:get"><apiName>fontFamily</apiName><shortdesc>
		  The name of the font to use, or a comma-separated list of font names.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		  The name of the font to use, or a comma-separated list of font names. The Flash runtime renders the element with the first available font in the list. For example Arial, Helvetica, _sans causes the player to search for Arial, then Helvetica if Arial is not found, then _sans if neither is found.
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of Arial.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:fontLookupProperty:get"><apiName>fontLookupProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:fontLookup:get"><apiName>fontLookup</apiName><shortdesc>
		 Font lookup to use.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Font lookup to use. Specifying <codeph>FontLookup.DEVICE</codeph> uses the fonts installed on the system that is running the SWF file. Device fonts result in a smaller movie size, but text is not always rendered the same across different systems and platforms. Specifying <codeph>FontLookup.EMBEDDED_CFF</codeph> uses font outlines embedded in the published SWF file. Embedded fonts increase the size of the SWF file (sometimes dramatically), but text is consistently displayed in the chosen font.
		 <p>Legal values are FontLookup.DEVICE, FontLookup.EMBEDDED_CFF, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of FontLookup.DEVICE.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontLookup.xml"><linktext>flash.text.engine.FontLookup</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:fontSizeProperty:get"><apiName>fontSizeProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:fontSize:get"><apiName>fontSize</apiName><shortdesc>
		 The size of the text in pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 The size of the text in pixels.
		 <p>Legal values are numbers from 1 to 720 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 12.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:fontStyleProperty:get"><apiName>fontStyleProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:fontStyle:get"><apiName>fontStyle</apiName><shortdesc>
		 Style of text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Style of text. May be <codeph>FontPosture.NORMAL</codeph>, for use in plain text, or <codeph>FontPosture.ITALIC</codeph> for italic. This property applies only to device fonts (<codeph>fontLookup</codeph> property is set to flash.text.engine.FontLookup.DEVICE).
		 <p>Legal values are FontPosture.NORMAL, FontPosture.ITALIC, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of FontPosture.NORMAL.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontPosture.xml"><linktext>flash.text.engine.FontPosture</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:fontWeightProperty:get"><apiName>fontWeightProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:fontWeight:get"><apiName>fontWeight</apiName><shortdesc>
		 Weight of text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Weight of text. May be <codeph>FontWeight.NORMAL</codeph> for use in plain text, or <codeph>FontWeight.BOLD</codeph>. Applies only to device fonts (<codeph>fontLookup</codeph> property is set to flash.text.engine.FontLookup.DEVICE).
		 <p>Legal values are FontWeight.NORMAL, FontWeight.BOLD, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of FontWeight.NORMAL.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontWeight.xml"><linktext>flash.text.engine.FontWeight</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:justificationRuleProperty:get"><apiName>justificationRuleProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:justificationRule:get"><apiName>justificationRule</apiName><shortdesc>
		 Rule used to justify text in a paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Rule used to justify text in a paragraph.
		 Default value is <codeph>FormatValue.AUTO</codeph>, which justifies text based on the paragraph's <codeph>locale</codeph> property. For all languages except Japanese and Chinese, <codeph>FormatValue.AUTO</codeph> becomes <codeph>JustificationRule.SPACE</codeph>, which adds extra space to the space characters.  For Japanese and Chinese, <codeph>FormatValue.AUTO</codeph> becomes <codeph>JustficationRule.EAST_ASIAN</codeph>. In part, justification changes the spacing of punctuation. In Roman text the comma and Japanese periods take a full character's width but in East Asian text only half of a character's width. Also, in the East Asian text the spacing between sequential punctuation marks becomes tighter, obeying traditional East Asian typographic conventions. Note, too, in the example below the leading that is applied to the second line of the paragraphs. In the East Asian version, the last two lines push left. In the Roman version, the second and following lines push left.<p><adobeimage alt="justificationRule" href="../../../images/textLayout_justificationrule.png"/></p>
		 <p>Legal values are JustificationRule.EAST_ASIAN, JustificationRule.SPACE, FormatValue.AUTO, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of FormatValue.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#JustificationRule"><linktext>flashx.textLayout.formats.JustificationRule</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:justificationStyleProperty:get"><apiName>justificationStyleProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:justificationStyle:get"><apiName>justificationStyle</apiName><shortdesc>
		 The style used for justification of the paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 The style used for justification of the paragraph. Used only in conjunction with a <codeph>justificationRule</codeph> setting of <codeph>JustificationRule.EAST_ASIAN</codeph>.
		 Default value of <codeph>FormatValue.AUTO</codeph> is resolved to <codeph>JustificationStyle.PUSH_IN_KINSOKU</codeph> for all locales.  The constants defined by the JustificationStyle class specify options for handling kinsoku characters, which are Japanese characters that cannot appear at either the beginning or end of a line. If you want looser text, specify <codeph>JustificationStyle.PUSH-OUT-ONLY</codeph>. If you want behavior that is like what you get with the  <codeph>justificationRule</codeph> of <codeph>JustificationRule.SPACE</codeph>, use <codeph>JustificationStyle.PRIORITIZE-LEAST-ADJUSTMENT</codeph>.
		 <p>Legal values are JustificationStyle.PRIORITIZE_LEAST_ADJUSTMENT, JustificationStyle.PUSH_IN_KINSOKU, JustificationStyle.PUSH_OUT_ONLY, FormatValue.AUTO, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of FormatValue.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.JustificationStyle.xml"><linktext>flash.text.engine.JustificationStyle</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:kerningProperty:get"><apiName>kerningProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:kerning:get"><apiName>kerning</apiName><shortdesc>
		 Kerning adjusts the pixels between certain character pairs to improve readability.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Kerning adjusts the pixels between certain character pairs to improve readability. Kerning is supported for all fonts with kerning tables.
		 <p>Legal values are Kerning.ON, Kerning.OFF, Kerning.AUTO, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of Kerning.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.Kerning.xml"><linktext>flash.text.engine.Kerning</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:leadingModelProperty:get"><apiName>leadingModelProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:leadingModel:get"><apiName>leadingModel</apiName><shortdesc>
		 Specifies the leading model, which is a combination of leading basis and leading direction.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Specifies the leading model, which is a combination of leading basis and leading direction.
		 Leading basis is the baseline to which the <codeph>lineHeight</codeph> property refers. Leading direction determines whether the <codeph>lineHeight</codeph> property refers to the distance of a line's baseline from that of the line before it or the line after it. The default value of <codeph>FormatValue.AUTO</codeph> is resolved based on the paragraph's <codeph>locale</codeph> property.  For Japanese and Chinese, it is <codeph>LeadingModel.IDEOGRAPHIC_TOP_DOWN</codeph> and for all others it is <codeph>LeadingModel.ROMAN_UP</codeph>.<p><b>Leading Basis:</b></p><p><adobeimage alt="leadingBasis1" href="../../../images/textLayout_LB1.png"/>    <adobeimage alt="leadingBasis2" href="../../../images/textLayout_LB2.png"/>    <adobeimage alt="leadingBasis3" href="../../../images/textLayout_LB3.png"/></p><p><b>Leading Direction:</b></p><p><adobeimage alt="leadingDirection1" href="../../../images/textLayout_LD1.png"/>    <adobeimage alt="leadingDirection2" href="../../../images/textLayout_LD2.png"/>    <adobeimage alt="leadingDirection3" href="../../../images/textLayout_LD3.png"/></p>
		 <p>Legal values are LeadingModel.ROMAN_UP, LeadingModel.IDEOGRAPHIC_TOP_UP, LeadingModel.IDEOGRAPHIC_CENTER_UP, LeadingModel.IDEOGRAPHIC_TOP_DOWN, LeadingModel.IDEOGRAPHIC_CENTER_DOWN, LeadingModel.APPROXIMATE_TEXT_FIELD, LeadingModel.ASCENT_DESCENT_UP, LeadingModel.BOX, LeadingModel.AUTO, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of LeadingModel.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#LeadingModel"><linktext>flashx.textLayout.formats.LeadingModel</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:ligatureLevelProperty:get"><apiName>ligatureLevelProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:ligatureLevel:get"><apiName>ligatureLevel</apiName><shortdesc>
		 Controls which of the ligatures that are defined in the font may be used in the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Controls which of the ligatures that are defined in the font may be used in the text. The ligatures that appear for each of these settings is dependent on the font. A ligature occurs where two or more letter-forms are joined as a single glyph. Ligatures usually replace consecutive characters sharing common components, such as the letter pairs 'fi', 'fl', or 'ae'. They are used with both Latin and Non-Latin character sets. The ligatures enabled by the values of the LigatureLevel class - <codeph>MINIMUM</codeph>, <codeph>COMMON</codeph>, <codeph>UNCOMMON</codeph>, and <codeph>EXOTIC</codeph> - are additive. Each value enables a new set of ligatures, but also includes those of the previous types.<p><b>Note: </b>When working with Arabic or Syriac fonts, <codeph>ligatureLevel</codeph> must be set to MINIMUM or above.</p><p><adobeimage alt="ligatureLevel" href="../../../images/textLayout_ligatures.png"/></p>
		 <p>Legal values are LigatureLevel.MINIMUM, LigatureLevel.COMMON, LigatureLevel.UNCOMMON, LigatureLevel.EXOTIC, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of LigatureLevel.COMMON.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.LigatureLevel.xml"><linktext>flash.text.engine.LigatureLevel</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:lineBreakProperty:get"><apiName>lineBreakProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:lineBreak:get"><apiName>lineBreak</apiName><shortdesc>
		 Controls word wrapping within the container (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Controls word wrapping within the container (adopts default value if undefined during cascade).
		 Text in the container may be set to fit the width of the container (<codeph>LineBreak.TO_FIT</codeph>), or can be set to break only at explicit return or line feed characters (<codeph>LineBreak.EXPLICIT</codeph>).
		 <p>Legal values are LineBreak.EXPLICIT, LineBreak.TO_FIT, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of LineBreak.TO_FIT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#LineBreak"><linktext>flashx.textLayout.formats.LineBreak</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:lineHeightProperty:get"><apiName>lineHeightProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:lineHeight:get"><apiName>lineHeight</apiName><shortdesc>
		 Leading controls for the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Leading controls for the text. The distance from the baseline of the previous or the next line (based on <codeph>LeadingModel</codeph>) to the baseline of the current line is equal to the maximum amount of the leading applied to any character in the line. This is either a number or a percent.  If specifying a percent, enter a string value, like 140%.<p><adobeimage alt="lineHeight1" href="../../../images/textLayout_lineHeight1.jpg"/><adobeimage alt="lineHeight2" href="../../../images/textLayout_lineHeight2.jpg"/></p>
		 <p>Legal values as a number are from -720 to 720.</p>
		 <p>Legal values as a percent are numbers from -1000% to 1000%.</p>
		 <p>Legal values include FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 120%.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:lineThroughProperty:get"><apiName>lineThroughProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:lineThrough:get"><apiName>lineThrough</apiName><shortdesc>
		 If true, applies strikethrough, a line drawn through the middle of the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 If <codeph>true</codeph>, applies strikethrough, a line drawn through the middle of the text.
		 <p>Legal values are true, false and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of false.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:linkActiveFormatProperty:get"><apiName>linkActiveFormatProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:linkActiveFormat:get"><apiName>linkActiveFormat</apiName><shortdesc>
		 Defines the formatting attributes used for links in normal state.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Defines the formatting attributes used for links in normal state. This value will cascade down the hierarchy and apply to any links that are descendants.
		 Accepts <codeph>inherit</codeph>, an <codeph>ITextLayoutFormat</codeph> or converts an array of objects with key and value as members to a TextLayoutFormat.
		 <p>Legal values include FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of null.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:linkHoverFormatProperty:get"><apiName>linkHoverFormatProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:linkHoverFormat:get"><apiName>linkHoverFormat</apiName><shortdesc>
		 Defines the formatting attributes used for links in hover state, when the mouse is within the bounds (rolling over) a link.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Defines the formatting attributes used for links in hover state, when the mouse is within the bounds (rolling over) a link. This value will cascade down the hierarchy and apply to any links that are descendants.
		 Accepts <codeph>inherit</codeph>, an <codeph>ITextLayoutFormat</codeph> or converts an array of objects with key and value as members to a TextLayoutFormat.
		 <p>Legal values include FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of null.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:linkNormalFormatProperty:get"><apiName>linkNormalFormatProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:linkNormalFormat:get"><apiName>linkNormalFormat</apiName><shortdesc>
		 Defines the formatting attributes used for links in normal state.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Defines the formatting attributes used for links in normal state. This value will cascade down the hierarchy and apply to any links that are descendants.
		 Accepts <codeph>inherit</codeph>, an <codeph>ITextLayoutFormat</codeph> or converts an array of objects with key and value as members to a TextLayoutFormat.
		 <p>Legal values include FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of null.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:listAutoPaddingProperty:get"><apiName>listAutoPaddingProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:listAutoPadding:get"><apiName>listAutoPadding</apiName><shortdesc>
		 This specifies an auto indent for the start edge of lists when the padding value of the list on that side is auto.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 This specifies an auto indent for the start edge of lists when the padding value of the list on that side is <codeph>auto</codeph>.
		 <p>Legal values are numbers from -1000 to 1000 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 40.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:listMarkerFormatProperty:get"><apiName>listMarkerFormatProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:listMarkerFormat:get"><apiName>listMarkerFormat</apiName><shortdesc>
		 Defines the formatting attributes list markers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Defines the formatting attributes list markers. This value will cascade down the hierarchy and apply to any links that are descendants.
		 Accepts <codeph>inherit</codeph>, an <codeph>IListMarkerFormat</codeph> or converts an array of objects with key and value as members to a ListMarkerFormat.
		 <p>Legal values include FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of null.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:listStylePositionProperty:get"><apiName>listStylePositionProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:listStylePosition:get"><apiName>listStylePosition</apiName><shortdesc>
		 Legal values are ListStylePosition.INSIDE, ListStylePosition.OUTSIDE, FormatValue.INHERIT.
		 Default value is undefined indicating not set.
		 If undefined during the cascade this property will inherit its value from an ancestor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 <p>Legal values are ListStylePosition.INSIDE, ListStylePosition.OUTSIDE, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of ListStylePosition.OUTSIDE.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#ListStylePosition"><linktext>flashx.textLayout.formats.ListStylePosition</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:listStyleTypeProperty:get"><apiName>listStyleTypeProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:listStyleType:get"><apiName>listStyleType</apiName><shortdesc>
		 Legal values are ListStyleType.UPPER_ALPHA, ListStyleType.LOWER_ALPHA, ListStyleType.UPPER_ROMAN, ListStyleType.LOWER_ROMAN, ListStyleType.NONE, ListStyleType.DISC, ListStyleType.CIRCLE, ListStyleType.SQUARE, ListStyleType.BOX, ListStyleType.CHECK, ListStyleType.DIAMOND, ListStyleType.HYPHEN, ListStyleType.ARABIC_INDIC, ListStyleType.BENGALI, ListStyleType.DECIMAL, ListStyleType.DECIMAL_LEADING_ZERO, ListStyleType.DEVANAGARI, ListStyleType.GUJARATI, ListStyleType.GURMUKHI, ListStyleType.KANNADA, ListStyleType.PERSIAN, ListStyleType.THAI, ListStyleType.URDU, ListStyleType.CJK_EARTHLY_BRANCH, ListStyleType.CJK_HEAVENLY_STEM, ListStyleType.HANGUL, ListStyleType.HANGUL_CONSTANT, ListStyleType.HIRAGANA, ListStyleType.HIRAGANA_IROHA, ListStyleType.KATAKANA, ListStyleType.KATAKANA_IROHA, ListStyleType.LOWER_ALPHA, ListStyleType.LOWER_GREEK, ListStyleType.LOWER_LATIN, ListStyleType.UPPER_ALPHA, ListStyleType.UPPER_GREEK, ListStyleType.UPPER_LATIN, FormatValue.INHERIT.
		 Default value is undefined indicating not set.
		 If undefined during the cascade this property will inherit its value from an ancestor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 <p>Legal values are ListStyleType.UPPER_ALPHA, ListStyleType.LOWER_ALPHA, ListStyleType.UPPER_ROMAN, ListStyleType.LOWER_ROMAN, ListStyleType.NONE, ListStyleType.DISC, ListStyleType.CIRCLE, ListStyleType.SQUARE, ListStyleType.BOX, ListStyleType.CHECK, ListStyleType.DIAMOND, ListStyleType.HYPHEN, ListStyleType.ARABIC_INDIC, ListStyleType.BENGALI, ListStyleType.DECIMAL, ListStyleType.DECIMAL_LEADING_ZERO, ListStyleType.DEVANAGARI, ListStyleType.GUJARATI, ListStyleType.GURMUKHI, ListStyleType.KANNADA, ListStyleType.PERSIAN, ListStyleType.THAI, ListStyleType.URDU, ListStyleType.CJK_EARTHLY_BRANCH, ListStyleType.CJK_HEAVENLY_STEM, ListStyleType.HANGUL, ListStyleType.HANGUL_CONSTANT, ListStyleType.HIRAGANA, ListStyleType.HIRAGANA_IROHA, ListStyleType.KATAKANA, ListStyleType.KATAKANA_IROHA, ListStyleType.LOWER_ALPHA, ListStyleType.LOWER_GREEK, ListStyleType.LOWER_LATIN, ListStyleType.UPPER_ALPHA, ListStyleType.UPPER_GREEK, ListStyleType.UPPER_LATIN, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of ListStyleType.DISC.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#ListStyleType"><linktext>flashx.textLayout.formats.ListStyleType</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:localeProperty:get"><apiName>localeProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:locale:get"><apiName>locale</apiName><shortdesc>
		 The locale of the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 The locale of the text. Controls case transformations and shaping. Standard locale identifiers as described in Unicode Technical Standard #35 are used. For example en, en_US and en-US are all English, ja is Japanese. 
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of en.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:paddingBottomProperty:get"><apiName>paddingBottomProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:paddingBottom:get"><apiName>paddingBottom</apiName><shortdesc>
		 Bottom inset in pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Bottom inset in pixels.  Default of auto is zero except in lists which get a start side padding of 45.  (adopts default value if undefined during cascade).
		 Space between the bottom edge of the container and the text.  Value is a Number  or auto. <p> With horizontal text, in scrollable containers with multiple columns, the first and following columns will show the padding as blank space at the bottom of the container, but for the last column, if the text doesn't all fit, you may have to scroll in order to see the padding.</p>
		 <p>Legal values as a string are FormatValue.AUTO, FormatValue.INHERIT and numbers from -8000 to 8000.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of FormatValue.AUTO.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#Configuration/autoListElementStartPadding"><linktext>flashx.textLayout.elements.Configuration.autoListElementStartPadding</linktext></link><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:paddingLeftProperty:get"><apiName>paddingLeftProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:paddingLeft:get"><apiName>paddingLeft</apiName><shortdesc>
		 Left inset in pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Left inset in pixels.  Default of auto is zero except in lists which get a start side padding of 45. (adopts default value if undefined during cascade).
		 Space between the left edge of the container and the text.  Value is a Number or auto.<p> With vertical text, in scrollable containers with multiple columns, the first and following columns will show the padding as blank space at the end of the container, but for the last column, if the text doesn't all fit, you may have to scroll in order to see the padding.</p>
		 <p>Legal values as a string are FormatValue.AUTO, FormatValue.INHERIT and numbers from -8000 to 8000.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of FormatValue.AUTO.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#Configuration/autoListElementStartPadding"><linktext>flashx.textLayout.elements.Configuration.autoListElementStartPadding</linktext></link><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:paddingRightProperty:get"><apiName>paddingRightProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:paddingRight:get"><apiName>paddingRight</apiName><shortdesc>
		 Right inset in pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Right inset in pixels.  Default of auto is zero except in lists which get a start side padding of 45. (adopts default value if undefined during cascade).
		 Space between the right edge of the container and the text.  Value is a Number or auto. 
		 <p>Legal values as a string are FormatValue.AUTO, FormatValue.INHERIT and numbers from -8000 to 8000.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of FormatValue.AUTO.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#Configuration/autoListElementStartPadding"><linktext>flashx.textLayout.elements.Configuration.autoListElementStartPadding</linktext></link><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:paddingTopProperty:get"><apiName>paddingTopProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:paddingTop:get"><apiName>paddingTop</apiName><shortdesc>
		 Top inset in pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Top inset in pixels.  Default of auto is zero except in lists which get a start side padding of 45. (adopts default value if undefined during cascade).
		 Space between the top edge of the container and the text.  Value is a Number or auto.
		 <p>Legal values as a string are FormatValue.AUTO, FormatValue.INHERIT and numbers from -8000 to 8000.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of FormatValue.AUTO.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#Configuration/autoListElementStartPadding"><linktext>flashx.textLayout.elements.Configuration.autoListElementStartPadding</linktext></link><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:paragraphEndIndentProperty:get"><apiName>paragraphEndIndentProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:paragraphEndIndent:get"><apiName>paragraphEndIndent</apiName><shortdesc>
		 A Number that specifies, in pixels, the amount to indent the paragraph's end edge.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 A Number that specifies, in pixels, the amount to indent the paragraph's end edge. Refers to the right edge in left-to-right text and the left edge in right-to-left text. 
		 <p>Legal values are numbers from 0 to 8000 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:paragraphSpaceAfterProperty:get"><apiName>paragraphSpaceAfterProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:paragraphSpaceAfter:get"><apiName>paragraphSpaceAfter</apiName><shortdesc>
		 A Number that specifies the amount of space, in pixels, to leave after the paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 A Number that specifies the amount of space, in pixels, to leave after the paragraph.
		 Collapses in tandem with  <codeph>paragraphSpaceBefore</codeph>.
		 <p>Legal values are numbers from 0 to 8000 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:paragraphSpaceBeforeProperty:get"><apiName>paragraphSpaceBeforeProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:paragraphSpaceBefore:get"><apiName>paragraphSpaceBefore</apiName><shortdesc>
		 A Number that specifies the amount of space, in pixels, to leave before the paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 A Number that specifies the amount of space, in pixels, to leave before the paragraph. 
		 Collapses in tandem with <codeph>paragraphSpaceAfter</codeph>.
		 <p>Legal values are numbers from 0 to 8000 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:paragraphStartIndentProperty:get"><apiName>paragraphStartIndentProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:paragraphStartIndent:get"><apiName>paragraphStartIndent</apiName><shortdesc>
		 A Number that specifies, in pixels, the amount to indent the paragraph's start edge.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 A Number that specifies, in pixels, the amount to indent the paragraph's start edge. Refers to the left edge in left-to-right text and the right edge in right-to-left text. 
		 <p>Legal values are numbers from 0 to 8000 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:renderingModeProperty:get"><apiName>renderingModeProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:renderingMode:get"><apiName>renderingMode</apiName><shortdesc>
		 The rendering mode used for this text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 The rendering mode used for this text.  Applies only to embedded fonts (<codeph>fontLookup</codeph> property is set to <codeph>FontLookup.EMBEDDED_CFF</codeph>).
		 <p>Legal values are RenderingMode.NORMAL, RenderingMode.CFF, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of RenderingMode.CFF.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.RenderingMode.xml"><linktext>flash.text.engine.RenderingMode</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:styleNameProperty:get"><apiName>styleNameProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:styleName:get"><apiName>styleName</apiName><shortdesc>
		 Assigns an identifying class to the element, making it possible to set a style for the element by referencing the styleName.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Assigns an identifying class to the element, making it possible to set a style for the element by referencing the <codeph>styleName</codeph>.
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of null.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:styles:get"><apiName>styles</apiName><shortdesc> Returns the styles on this TextLayoutFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc> Returns the styles on this TextLayoutFormat.  Note that the getter makes a copy of the  
		 styles dictionary. The coreStyles object encapsulates all styles set in the format property including core and user styles. The
		 returned object consists of an array of <i>stylename-value</i> pairs.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat"><linktext>flashx.textLayout.formats.TextLayoutFormat</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:tabStopsProperty:get"><apiName>tabStopsProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:tabStops:get"><apiName>tabStops</apiName><shortdesc>
		 Specifies the tab stops associated with the paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Specifies the tab stops associated with the paragraph.
		 Setters can take an array of TabStopFormat, a condensed string representation, undefined, or <codeph>FormatValue.INHERIT</codeph>. The condensed string representation is always converted into an array of TabStopFormat. <p>The string-based format is a list of tab stops, where each tab stop is delimited by one or more spaces.</p><p>A tab stop takes the following form: &lt;alignment type&gt;&lt;alignment position&gt;|&lt;alignment token&gt;.</p><p>The alignment type is a single character, and can be S, E, C, or D (or lower-case equivalents). S or s for start, E or e for end, C or c for center, D or d for decimal. The alignment type is optional, and if its not specified will default to S.</p><p>The alignment position is a Number, and is specified according to FXG spec for Numbers (decimal or scientific notation). The alignment position is required.</p><p>The vertical bar is used to separate the alignment position from the alignment token, and should only be present if the alignment token is present.</p><p> The alignment token is optional if the alignment type is D, and should not be present if the alignment type is anything other than D. The alignment token may be any sequence of characters terminated by the space that ends the tab stop (for the last tab stop, the terminating space is optional; end of alignment token is implied). A space may be part of the alignment token if it is escaped with a backslash (\ ). A backslash may be part of the alignment token if it is escaped with another backslash (\\). If the alignment type is D, and the alignment token is not specified, it will take on the default value of null.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of null.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TabStopFormat"><linktext>flashx.textLayout.formats.TabStopFormat</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:textAlignLastProperty:get"><apiName>textAlignLastProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:textAlignLast:get"><apiName>textAlignLast</apiName><shortdesc>
		 Alignment of the last (or only) line in the paragraph relative to the container in justified text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Alignment of the last (or only) line in the paragraph relative to the container in justified text.
		 If <codeph>textAlign</codeph> is set to <codeph>TextAlign.JUSTIFY</codeph>, <codeph>textAlignLast</codeph> specifies how the last line (or only line, if this is a one line block) is aligned. Values are similar to <codeph>textAlign</codeph>.
		 <p>Legal values are TextAlign.LEFT, TextAlign.RIGHT, TextAlign.CENTER, TextAlign.JUSTIFY, TextAlign.START, TextAlign.END, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of TextAlign.START.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextAlign"><linktext>flashx.textLayout.formats.TextAlign</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:textAlignProperty:get"><apiName>textAlignProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:textAlign:get"><apiName>textAlign</apiName><shortdesc>
		 Alignment of lines in the paragraph relative to the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Alignment of lines in the paragraph relative to the container.
		 <codeph>TextAlign.LEFT</codeph> aligns lines along the left edge of the container. <codeph>TextAlign.RIGHT</codeph> aligns on the right edge. <codeph>TextAlign.CENTER</codeph> positions the line equidistant from the left and right edges. <codeph>TextAlign.JUSTIFY</codeph> spreads the lines out so they fill the space. <codeph>TextAlign.START</codeph> is equivalent to setting left in left-to-right text, or right in right-to-left text. <codeph>TextAlign.END</codeph> is equivalent to setting right in left-to-right text, or left in right-to-left text.
		 <p>Legal values are TextAlign.LEFT, TextAlign.RIGHT, TextAlign.CENTER, TextAlign.JUSTIFY, TextAlign.START, TextAlign.END, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of TextAlign.START.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextAlign"><linktext>flashx.textLayout.formats.TextAlign</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:textAlphaProperty:get"><apiName>textAlphaProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:textAlpha:get"><apiName>textAlpha</apiName><shortdesc>
		 Alpha (transparency) value for the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Alpha (transparency) value for the text. A value of 0 is fully transparent, and a value of 1 is fully opaque. Display objects with <codeph>textAlpha</codeph> set to 0 are active, even though they are invisible.
		 <p>Legal values are numbers from 0 to 1 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 1.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:textDecorationProperty:get"><apiName>textDecorationProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:textDecoration:get"><apiName>textDecoration</apiName><shortdesc>
		 Decoration on text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Decoration on text. Use to apply underlining; default is none.
		 <p>Legal values are TextDecoration.NONE, TextDecoration.UNDERLINE, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of TextDecoration.NONE.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextDecoration"><linktext>flashx.textLayout.formats.TextDecoration</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:textIndentProperty:get"><apiName>textIndentProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:textIndent:get"><apiName>textIndent</apiName><shortdesc>
		 A Number that specifies, in pixels, the amount to indent the first line of the paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 A Number that specifies, in pixels, the amount to indent the first line of the paragraph.
		 A negative indent will push the line into the margin, and possibly out of the container.
		 <p>Legal values are numbers from -8000 to 8000 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:textJustifyProperty:get"><apiName>textJustifyProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:textJustify:get"><apiName>textJustify</apiName><shortdesc>
		 Specifies options for justifying text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Specifies options for justifying text.
		 Default value is <codeph>TextJustify.INTER_WORD</codeph>, meaning that extra space is added to the space characters. <codeph>TextJustify.DISTRIBUTE</codeph> adds extra space to space characters and between individual letters. Used only in conjunction with a <codeph>justificationRule</codeph> value of <codeph>JustificationRule.SPACE</codeph>.
		 <p>Legal values are TextJustify.INTER_WORD, TextJustify.DISTRIBUTE, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of TextJustify.INTER_WORD.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextJustify"><linktext>flashx.textLayout.formats.TextJustify</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:textRotationProperty:get"><apiName>textRotationProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:textRotation:get"><apiName>textRotation</apiName><shortdesc>
		 Determines the number of degrees to rotate this text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Determines the number of degrees to rotate this text.
		 <p>Legal values are TextRotation.ROTATE_0, TextRotation.ROTATE_180, TextRotation.ROTATE_270, TextRotation.ROTATE_90, TextRotation.AUTO, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of TextRotation.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextRotation.xml"><linktext>flash.text.engine.TextRotation</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:trackingLeftProperty:get"><apiName>trackingLeftProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:trackingLeft:get"><apiName>trackingLeft</apiName><shortdesc>
		 Number in pixels (or percent of fontSize, like 120%) indicating the amount of tracking (manual kerning) to be applied to the left of each character.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Number in pixels (or percent of <codeph>fontSize</codeph>, like 120%) indicating the amount of tracking (manual kerning) to be applied to the left of each character. If kerning is enabled, the <codeph>trackingLeft</codeph> value is added to the values in the kerning table for the font. If kerning is disabled, the <codeph>trackingLeft</codeph> value is used as a manual kerning value. Supports both positive and negative values. 
		 <p>Legal values as a number are from -1000 to 1000.</p>
		 <p>Legal values as a percent are numbers from -1000% to 1000%.</p>
		 <p>Legal values include FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:trackingRightProperty:get"><apiName>trackingRightProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:trackingRight:get"><apiName>trackingRight</apiName><shortdesc>
		 Number in pixels (or percent of fontSize, like 120%) indicating the amount of tracking (manual kerning) to be applied to the right of each character.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Number in pixels (or percent of <codeph>fontSize</codeph>, like 120%) indicating the amount of tracking (manual kerning) to be applied to the right of each character.  If kerning is enabled, the <codeph>trackingRight</codeph> value is added to the values in the kerning table for the font. If kerning is disabled, the <codeph>trackingRight</codeph> value is used as a manual kerning value. Supports both positive and negative values. 
		 <p>Legal values as a number are from -1000 to 1000.</p>
		 <p>Legal values as a percent are numbers from -1000% to 1000%.</p>
		 <p>Legal values include FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:typographicCaseProperty:get"><apiName>typographicCaseProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:typographicCase:get"><apiName>typographicCase</apiName><shortdesc>
		 The type of typographic case used for this text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 The type of typographic case used for this text. Here are some examples:<p><adobeimage alt="typographicCase" href="../../../images/textLayout_typographiccase.png"/></p>
		 <p>Legal values are TLFTypographicCase.DEFAULT, TLFTypographicCase.CAPS_TO_SMALL_CAPS, TLFTypographicCase.UPPERCASE, TLFTypographicCase.LOWERCASE, TLFTypographicCase.LOWERCASE_TO_SMALL_CAPS, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of TLFTypographicCase.DEFAULT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TLFTypographicCase"><linktext>flashx.textLayout.formats.TLFTypographicCase</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:userStyles:get"><apiName>userStyles</apiName><shortdesc> Returns the userStyles on this TextLayoutFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc> Returns the <codeph>userStyles</codeph> on this TextLayoutFormat.  
		 The userStyles object includes the formats that are defined by TextLayoutFormat and are not in TextLayoutFormat.description. The
		 returned <codeph>userStyles</codeph> object consists of an array of <i>stylename-value</i> pairs.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat"><linktext>flashx.textLayout.formats.TextLayoutFormat</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:verticalAlignProperty:get"><apiName>verticalAlignProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:verticalAlign:get"><apiName>verticalAlign</apiName><shortdesc>
		 Vertical alignment or justification (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Vertical alignment or justification (adopts default value if undefined during cascade).
		 Determines how TextFlow elements align within the container.
		 <p>Legal values are VerticalAlign.TOP, VerticalAlign.MIDDLE, VerticalAlign.BOTTOM, VerticalAlign.JUSTIFY, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of VerticalAlign.TOP.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#VerticalAlign"><linktext>flashx.textLayout.formats.VerticalAlign</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:whiteSpaceCollapseProperty:get"><apiName>whiteSpaceCollapseProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:whiteSpaceCollapse:get"><apiName>whiteSpaceCollapse</apiName><shortdesc>
		 Collapses or preserves whitespace when importing text into a TextFlow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Collapses or preserves whitespace when importing text into a TextFlow. <codeph>WhiteSpaceCollapse.PRESERVE</codeph> retains all whitespace characters. <codeph>WhiteSpaceCollapse.COLLAPSE</codeph> removes newlines, tabs, and leading or trailing spaces within a block of imported text. Line break tags () and Unicode line separator characters are retained.
		 <p>Legal values are WhiteSpaceCollapse.PRESERVE, WhiteSpaceCollapse.COLLAPSE, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of WhiteSpaceCollapse.COLLAPSE.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#WhiteSpaceCollapse"><linktext>flashx.textLayout.formats.WhiteSpaceCollapse</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:wordSpacingProperty:get"><apiName>wordSpacingProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:wordSpacing:get"><apiName>wordSpacing</apiName><shortdesc>
		 Specifies the optimum, minimum, and maximum spacing (as a multiplier of the width of a normal space) between words to use during justification.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Specifies the optimum, minimum, and maximum spacing (as a multiplier of the width of a normal space) between words to use during justification.
		 The optimum space is used to indicate the desired size of a space, as a fraction of the value defined in the font. The minimum and maximum values are the used when textJustify is distribute to determine how wide or narrow the spaces between the words may grow before letter spacing is used to justify the line.
		 <p>Legal values as a percent are numbers from -1000% to 1000%.</p>
		 <p>Legal values include FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 100%, 50%, 150%.</p>
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:Float"><apiName>Float</apiName><shortdesc>
      Defines values for the float property
	  of the InlineGraphicElement class.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
      Defines values for the <codeph>float</codeph> property
	  of the InlineGraphicElement class. 
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="flashx.textLayout.elements.InlineGrapicElement.xml"><linktext>flashx.textLayout.elements.InlineGrapicElement</linktext></link></related-links><apiValue id="flashx.textLayout.formats:Float:END"><apiName>END</apiName><shortdesc> Graphic floats on the trailing side of the text 
        (right if paragraph direction is "ltr", left if paragraph direction is "rtl").</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>end</apiData><apiType value="String"/></apiValueDef><apiDesc> Graphic floats on the trailing side of the text 
        (right if paragraph direction is "ltr", left if paragraph direction is "rtl"). 
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:Float:LEFT"><apiName>LEFT</apiName><shortdesc> Graphic floats on the left side of the text.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>left</apiData><apiType value="String"/></apiValueDef><apiDesc> Graphic floats on the left side of the text. </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:Float:NONE"><apiName>NONE</apiName><shortdesc> Graphic appears inline in the text (doesn't float).</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiType value="String"/></apiValueDef><apiDesc> Graphic appears inline in the text (doesn't float). </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:Float:RIGHT"><apiName>RIGHT</apiName><shortdesc> Graphic floats on the right side of the text.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>right</apiData><apiType value="String"/></apiValueDef><apiDesc> Graphic floats on the right side of the text. </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:Float:START"><apiName>START</apiName><shortdesc> Graphic floats on the leading side of the text 
         (left if paragraph direction is "ltr", right if paragraph direction is "rtl").</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>start</apiData><apiType value="String"/></apiValueDef><apiDesc> Graphic floats on the leading side of the text 
         (left if paragraph direction is "ltr", right if paragraph direction is "rtl"). 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:LineBreak"><apiName>LineBreak</apiName><shortdesc> Defines values for setting the lineBreak property of TextLayoutFormat to
	  specify how lines are broken within wrapping text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> Defines values for setting the <codeph>lineBreak</codeph> property of <codeph>TextLayoutFormat</codeph> to
	  specify how lines are broken within wrapping text.
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/linebreak"><linktext>TextLayoutFormat.linebreak</linktext></link></related-links><apiValue id="flashx.textLayout.formats:LineBreak:EXPLICIT"><apiName>EXPLICIT</apiName><shortdesc> Specifies that lines break only at explicit return or line feed characters.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>explicit</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies that lines break only at explicit return or line feed characters. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:LineBreak:TO_FIT"><apiName>TO_FIT</apiName><shortdesc> Specifies that lines wrap to fit the container width.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>toFit</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies that lines wrap to fit the container width. 
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:BlockProgression"><apiName>BlockProgression</apiName><shortdesc>
	  Defines values for the blockProgression property
	  of the TextLayouFormat class.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Defines values for the <codeph>blockProgression</codeph> property
	  of the <codeph>TextLayouFormat</codeph> class. BlockProgression specifies the direction in 
	  which lines are placed in the container.
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/blockProgression"><linktext>TextLayoutFormat.blockProgression</linktext></link></related-links><apiValue id="flashx.textLayout.formats:BlockProgression:RL"><apiName>RL</apiName><shortdesc> 
		  Specifies right to left block progression.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rl</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		  Specifies right to left block progression. Lines are laid out vertically starting at the right 
		  edge of the container and progressing leftward. Used for vertical text, for example, vertical 
		  Chinese or Japanese text. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:BlockProgression:TB"><apiName>TB</apiName><shortdesc> 
		  Specifies top to bottom block progression.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>tb</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		  Specifies top to bottom block progression. Lines are laid out horizontally starting at the top of 
		  the container and progressing down to the bottom. Used for horizontal text. 
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:Suffix"><apiName>Suffix</apiName><shortdesc>
     Defines values for setting the suffix property of a ListMarkerFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
     Defines values for setting the <codeph>suffix</codeph> property of a ListMarkerFormat. 
     
      </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#ListMarkerFormat/suffix"><linktext>ListMarkerFormat.suffix</linktext></link></related-links><apiValue id="flashx.textLayout.formats:Suffix:AUTO"><apiName>AUTO</apiName><shortdesc> Specifies that the auto suffix is appended to the list marker after the content.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>auto</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies that the auto suffix is appended to the list marker after the content. 
          See <xref href="http://www.w3.org/TR/css3-lists/">http://www.w3.org/TR/css3-lists/</xref> for the default suffixes.
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:Suffix:NONE"><apiName>NONE</apiName><shortdesc> Specifies that no suffix is appended to a list marker after the content.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies that no suffix is appended to a list marker after the content. 
         
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:IListMarkerFormat"><apiName>IListMarkerFormat</apiName><shortdesc>
	 This interface provides read access to ListMarkerFormat properties.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.formats:ITextLayoutFormat</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 This interface provides read access to ListMarkerFormat properties.
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.formats:IListMarkerFormat:flashx.textLayout.formats:IListMarkerFormat:afterContent:get"><apiName>afterContent</apiName><shortdesc conref="ListMarkerFormat#afterContent"> </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/></apiValueDef><apiDesc conref="ListMarkerFormat#afterContent"> </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:IListMarkerFormat:flashx.textLayout.formats:IListMarkerFormat:beforeContent:get"><apiName>beforeContent</apiName><shortdesc conref="ListMarkerFormat#beforeContent"> </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/></apiValueDef><apiDesc conref="ListMarkerFormat#beforeContent"> </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:IListMarkerFormat:flashx.textLayout.formats:IListMarkerFormat:content:get"><apiName>content</apiName><shortdesc conref="ListMarkerFormat#content"> </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/></apiValueDef><apiDesc conref="ListMarkerFormat#content"> </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:IListMarkerFormat:flashx.textLayout.formats:IListMarkerFormat:counterIncrement:get"><apiName>counterIncrement</apiName><shortdesc conref="ListMarkerFormat#counterIncrement"> </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/></apiValueDef><apiDesc conref="ListMarkerFormat#counterIncrement"> </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:IListMarkerFormat:flashx.textLayout.formats:IListMarkerFormat:counterReset:get"><apiName>counterReset</apiName><shortdesc conref="ListMarkerFormat#counterReset"> </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/></apiValueDef><apiDesc conref="ListMarkerFormat#counterReset"> </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:IListMarkerFormat:flashx.textLayout.formats:IListMarkerFormat:suffix:get"><apiName>suffix</apiName><shortdesc conref="ListMarkerFormat#suffix"> </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/></apiValueDef><apiDesc conref="ListMarkerFormat#suffix"> </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:ClearFloats"><apiName>ClearFloats</apiName><shortdesc>
	  Defines values for setting the clear property
      of the TextLayoutFormat class.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Defines values for setting the <codeph>clear</codeph> property
      of the <codeph>TextLayoutFormat</codeph> class. This property controls 
	  how text wraps around floats.
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElement/float"><linktext>flashx.textLayout.elements.InlineGraphicElement.float</linktext></link><link href="flashx.textLayout.formats.xml#TextLayoutFormat/clear"><linktext>TextLayoutFormat.clear</linktext></link></related-links><apiValue id="flashx.textLayout.formats:ClearFloats:BOTH"><apiName>BOTH</apiName><shortdesc> Specifies that text skips over any float.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>both</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies that text skips over any float.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ClearFloats:END"><apiName>END</apiName><shortdesc> Specifies that text skips over floats on the start side in reading order (left if direction is "ltr", right if direction is "rtl").</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>end</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies that text skips over floats on the start side in reading order (left if direction is "ltr", right if direction is "rtl").
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ClearFloats:LEFT"><apiName>LEFT</apiName><shortdesc> Specifies that text skips over left floats.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>left</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies that text skips over left floats.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ClearFloats:NONE"><apiName>NONE</apiName><shortdesc> Specifies that  text wraps closely around floats.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies that  text wraps closely around floats.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ClearFloats:RIGHT"><apiName>RIGHT</apiName><shortdesc> Specifies that text skips over right floats.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>right</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies that text skips over right floats.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ClearFloats:START"><apiName>START</apiName><shortdesc> Specifies that text skips over floats on the start side in reading order (left if direction is "ltr", right if direction is "rtl").</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>start</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies that text skips over floats on the start side in reading order (left if direction is "ltr", right if direction is "rtl").
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:TextAlign"><apiName>TextAlign</apiName><shortdesc>
	  Defines values for setting the textAlign and textAlignLast properties
	  of the TextLayoutFormat class.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Defines values for setting the <codeph>textAlign</codeph> and <codeph>textAlignLast</codeph> properties
	  of the TextLayoutFormat class. The values describe the alignment of lines in the paragraph relative to the 
	  container.
	 
	 </apiDesc><example conref="examples\TextAlignExample.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/textAlign"><linktext>TextLayoutFormat.textAlign</linktext></link><link href="flashx.textLayout.formats.xml#TextLayoutFormat/textAlignLast"><linktext>TextLayoutFormat.textAlignLast</linktext></link></related-links><apiValue id="flashx.textLayout.formats:TextAlign:CENTER"><apiName>CENTER</apiName><shortdesc> Specifies center alignment within the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>center</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies center alignment within the container.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextAlign:END"><apiName>END</apiName><shortdesc> Specifies end edge alignment - text is aligned opposite from the writing order.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>end</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies end edge alignment - text is aligned opposite from the writing order. Equivalent to 
		  specifying right in left-to-right text, or left in right-to-left text. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextAlign:JUSTIFY"><apiName>JUSTIFY</apiName><shortdesc> Specifies that text is justified within the lines so they fill the container space.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>justify</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies that text is justified within the lines so they fill the container space.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextAlign:LEFT"><apiName>LEFT</apiName><shortdesc> Specifies left edge alignment.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>left</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies left edge alignment. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextAlign:RIGHT"><apiName>RIGHT</apiName><shortdesc> Specifies right edge alignment.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>right</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies right edge alignment. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextAlign:START"><apiName>START</apiName><shortdesc> Specifies start edge alignment - text is aligned to match the writing order.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>start</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies start edge alignment - text is aligned to match the writing order. Equivalent to setting 
		 left in left-to-right text, or right in right-to-left text.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:LeadingModel"><apiName>LeadingModel</apiName><shortdesc>
	  Defines values for setting the leadingModel property
	  of the TextLayoutFormat class, composed of valid combinations of leading basis and leading direction.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Defines values for setting the <codeph>leadingModel</codeph> property
	  of the <codeph>TextLayoutFormat</codeph> class, composed of valid combinations of leading basis and leading direction.
	  Leading basis describes which baselines determine the leading (or <codeph>lineHeight</codeph>) of lines in a paragraph.
	  Leading direction specifies whether the <codeph>lineHeight</codeph> property refers to the distance of a line's 
	  baseline from that of the line before it or the line after it. 
	  <p>
	  <adobeimage alt="baselines" border="0" href="../../../images/textLayout_baselines.jpg"/>
	  <adobeimage alt="leadingDirection_1" border="0" href="../../../images/textLayout_LD1.jpg"/>
	  <adobeimage alt="leadingDirection_2" border="0" href="../../../images/textLayout_LD2.jpg"/>
	  <adobeimage alt="leadingDirection_3" border="0" href="../../../images/textLayout_LD3.jpg"/>
	  </p>
	  </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/leadingModel"><linktext>TextLayoutFormat.leadingModel</linktext></link><link href="flashx.textLayout.formats.xml#TextLayoutFormat/lineHeight"><linktext>TextLayoutFormat.lineHeight</linktext></link><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.engine.TextLine.xml"><linktext>flash.text.engine.TextLine</linktext></link></related-links><apiValue id="flashx.textLayout.formats:LeadingModel:APPROXIMATE_TEXT_FIELD"><apiName>APPROXIMATE_TEXT_FIELD</apiName><shortdesc> Specifies a leading model that approximates the line spacing behavior of TextField.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>approximateTextField</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies a leading model that approximates the line spacing behavior of <codeph>TextField</codeph>.
		 It is similar to <codeph>ASCENT_DESCENT_UP</codeph> in that <codeph>lineHeight</codeph> refers to the 
		 distance of a line's ascent baseline from the previous line's descent baseline. However, baseline 
		 positions approximate those determined by <codeph>TextField</codeph>, rather than using metrics 
		 offered by <codeph>TextLine</codeph>.  
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:LeadingModel:ASCENT_DESCENT_UP"><apiName>ASCENT_DESCENT_UP</apiName><shortdesc> Specifies that leading basis is ASCENT/DESCENT and leading direction is UP.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ascentDescentUp</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies that leading basis is ASCENT/DESCENT and leading direction is UP. 
		  In other words, <codeph>lineHeight</codeph> refers to the distance of a line's ascent baseline from the 
		  previous line's descent baseline.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:LeadingModel:AUTO"><apiName>AUTO</apiName><shortdesc> Specifies that leading model is chosen automatically based on the paragraph's locale property.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="3.0" version="#IDEOGRAPHIC_TOP_DOWN"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>auto</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies that leading model is chosen automatically based on the paragraph's <codeph>locale</codeph> property.  
		 For Japanese and Chinese, it is IDEOGRAPHIC_TOP_DOWN and for all others it is ROMAN_UP.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:LeadingModel:BOX"><apiName>BOX</apiName><shortdesc>  Specifies a leading model based on the CSS inline formatting model, which involves stacking line boxes contiguously.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>box</apiData><apiType value="String"/></apiValueDef><apiDesc>  Specifies a leading model based on the CSS inline formatting model, which involves stacking <i>line boxes</i> contiguously.
		 A <i>line box</i> is defined as the bounding box around <i>inline boxes</i> for all leaf elements on the text line, after they have been aligned
		 using <codeph>baselineShift</codeph>, <codeph>dominantBaseline</codeph>, <codeph>alignmentBaseline</codeph> etc. For a span, the <i>inline box</i> 
		 is obtained by applying leading equally above and below the text content such that its height equals <codeph>lineHeight</codeph>.
		 For an inline graphic, <codeph>lineHeight</codeph> is ignored; the <i>inline box</i> is derived from its specified dimensions and padding values.
		 Also, <codeph>firstBaselineOffset</codeph> is ignored with this leading model.
		 
         <p>For more information, see <xref href="http://blogs.adobe.com/tlf/2010/11/box-leading-model.html">Box leading model</xref>.</p>
         
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:LeadingModel:IDEOGRAPHIC_CENTER_DOWN"><apiName>IDEOGRAPHIC_CENTER_DOWN</apiName><shortdesc> Specifies that leading basis is IDEOGRAPHIC_CENTER and leading direction is down.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ideographicCenterDown</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies that leading basis is IDEOGRAPHIC_CENTER and leading direction is down.
		  In other words, <codeph>lineHeight</codeph> refers to the distance of a line's ideographic center 
		  baseline from the next line's ideographic center baseline.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:LeadingModel:IDEOGRAPHIC_CENTER_UP"><apiName>IDEOGRAPHIC_CENTER_UP</apiName><shortdesc> Specifies that leading basis is IDEOGRAPHIC_CENTER and leading direction is UP.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ideographicCenterUp</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies that leading basis is IDEOGRAPHIC_CENTER and leading direction is UP. 
		 In other words, <codeph>lineHeight</codeph> refers to the distance of a line's ideographic center 
		 baseline from the previous line's ideographic center baseline.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:LeadingModel:IDEOGRAPHIC_TOP_DOWN"><apiName>IDEOGRAPHIC_TOP_DOWN</apiName><shortdesc> Specifies that leading basis is IDEOGRAPHIC_TOP and leading direction is DOWN.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ideographicTopDown</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies that leading basis is IDEOGRAPHIC_TOP and leading direction is DOWN.
		 In other words, <codeph>lineHeight</codeph> refers to the distance of a line's ideographic top baseline 
		 from the next line's ideographic top baseline.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:LeadingModel:IDEOGRAPHIC_TOP_UP"><apiName>IDEOGRAPHIC_TOP_UP</apiName><shortdesc> Specifies that leading basis is IDEOGRAPHIC_TOP and leading direction is UP.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ideographicTopUp</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies that leading basis is IDEOGRAPHIC_TOP and leading direction is UP. 
		  In other words, <codeph>lineHeight</codeph> refers to the distance of a line's ideographic top 
		  baseline from the previous line's ideographic top baseline.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:LeadingModel:ROMAN_UP"><apiName>ROMAN_UP</apiName><shortdesc> Specifies that leading basis is ROMAN and leading direction is UP.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>romanUp</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies that leading basis is ROMAN and leading direction is UP. 
		 In other words, <codeph>lineHeight</codeph> refers to the distance of a line's Roman baseline from the 
		 previous line's Roman baseline.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:TextJustify"><apiName>TextJustify</apiName><shortdesc>
	  Defines values for setting the textJustify property of the TextLayoutFormat class.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Defines values for setting the <codeph>textJustify</codeph> property of the TextLayoutFormat class. 
	  Default value is INTER_WORD, meaning that extra space in justification is added to the space characters.
	  DISTRIBUTE specifies that extra space is added both to space characters and between individual
	  letters. Use these values only when setting <codeph>justificationRule</codeph> to SPACE.
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/textJustify"><linktext>TextLayoutFormat.textJustify</linktext></link><link href="flashx.textLayout.formats.xml#TextLayoutFormat/justificationRule"><linktext>TextLayoutFormat.justificationRule</linktext></link></related-links><apiValue id="flashx.textLayout.formats:TextJustify:DISTRIBUTE"><apiName>DISTRIBUTE</apiName><shortdesc> Specifies that justification is to add space both to space characters and 
		 between individual letters.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>distribute</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies that justification is to add space both to space characters and 
		 between individual letters.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextJustify:INTER_WORD"><apiName>INTER_WORD</apiName><shortdesc> Specifies that justification is to add space to space characters.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>interWord</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies that justification is to add space to space characters. 
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:FormatValue"><apiName>FormatValue</apiName><shortdesc>
	  Defines values for specifying that a formatting property is to inherit its parent's value or have it's value
	  generated automatically.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Defines values for specifying that a formatting property is to inherit its parent's value or have it's value
	  generated automatically. The <codeph>INHERIT</codeph> constant specifies that a property inherits its parent's value 
	  while the <codeph>AUTO</codeph> constant specifies that an internal algorithm automatically determine the property's 
	  value. As one example, you can set <codeph>TextLayoutFormat.columnWidth</codeph> using these values. Typically, a 
	  property's description indicates whether it accepts these constants.
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat"><linktext>TextLayoutFormat</linktext></link></related-links><apiValue id="flashx.textLayout.formats:FormatValue:AUTO"><apiName>AUTO</apiName><shortdesc> Specifies that a property's value is automatically generated.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>auto</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies that a property's value is automatically generated. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:FormatValue:INHERIT"><apiName>INHERIT</apiName><shortdesc> Specifies that a property is to inherit its parent's value.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>inherit</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies that a property is to inherit its parent's value.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:FormatValue:NONE"><apiName>NONE</apiName><shortdesc> Specifies that a property's value is none.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies that a property's value is none. 
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:ListStyleType"><apiName>ListStyleType</apiName><shortdesc>
	 Defines values for setting the listStyleType property of a TextLayoutFormat object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Defines values for setting the <codeph>listStyleType</codeph> property of a TextLayoutFormat object. These values are used for controlling
	 the appearance of items in a list.
	 
	  </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/listStyleType"><linktext>TextLayoutFormat.listStyleType</linktext></link></related-links><apiValue id="flashx.textLayout.formats:ListStyleType:ARABIC_INDIC"><apiName>ARABIC_INDIC</apiName><shortdesc> Numbering using Arabic script.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>arabicIndic</apiData><apiType value="String"/></apiValueDef><apiDesc> Numbering using Arabic script.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:BENGALI"><apiName>BENGALI</apiName><shortdesc> Numbering using Bengali script.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>bengali</apiData><apiType value="String"/></apiValueDef><apiDesc> Numbering using Bengali script.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:BOX"><apiName>BOX</apiName><shortdesc> A square marker that is not filled.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>box</apiData><apiType value="String"/></apiValueDef><apiDesc> A square marker that is not filled.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:CHECK"><apiName>CHECK</apiName><shortdesc> A check mark.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>check</apiData><apiType value="String"/></apiValueDef><apiDesc> A check mark.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:CIRCLE"><apiName>CIRCLE</apiName><shortdesc> A circle character marker that is not filled.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>circle</apiData><apiType value="String"/></apiValueDef><apiDesc> A circle character marker that is not filled.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:CJK_EARTHLY_BRANCH"><apiName>CJK_EARTHLY_BRANCH</apiName><shortdesc> Numbering for CJK.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>cjkEarthlyBranch</apiData><apiType value="String"/></apiValueDef><apiDesc> Numbering for CJK.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:CJK_HEAVENLY_STEM"><apiName>CJK_HEAVENLY_STEM</apiName><shortdesc> Numbering for CJK.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>cjkHeavenlyStem</apiData><apiType value="String"/></apiValueDef><apiDesc> Numbering for CJK.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:DECIMAL_LEADING_ZERO"><apiName>DECIMAL_LEADING_ZERO</apiName><shortdesc> Numbering using decimal with a leading zero: 01, 02, 03, and so on.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>decimalLeadingZero</apiData><apiType value="String"/></apiValueDef><apiDesc> Numbering using decimal with a leading zero: 01, 02, 03, and so on.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:DECIMAL"><apiName>DECIMAL</apiName><shortdesc> Numbering using decimals: 1, 2, 3, and so on.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>decimal</apiData><apiType value="String"/></apiValueDef><apiDesc> Numbering using decimals: 1, 2, 3, and so on.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:DEVANAGARI"><apiName>DEVANAGARI</apiName><shortdesc> Numbering using Devangari.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>devanagari</apiData><apiType value="String"/></apiValueDef><apiDesc> Numbering using Devangari.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:DIAMOND"><apiName>DIAMOND</apiName><shortdesc> A filled diamond marker.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>diamond</apiData><apiType value="String"/></apiValueDef><apiDesc> A filled diamond marker.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:DISC"><apiName>DISC</apiName><shortdesc> A bullet character marker (filled circle).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>disc</apiData><apiType value="String"/></apiValueDef><apiDesc> A bullet character marker (filled circle).
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:GUJARATI"><apiName>GUJARATI</apiName><shortdesc> Numbering using Gujarati.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>gujarati</apiData><apiType value="String"/></apiValueDef><apiDesc> Numbering using Gujarati.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:GURMUKHI"><apiName>GURMUKHI</apiName><shortdesc> Numbering using Gurmukhi.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>gurmukhi</apiData><apiType value="String"/></apiValueDef><apiDesc> Numbering using Gurmukhi.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:HANGUL_CONSTANT"><apiName>HANGUL_CONSTANT</apiName><shortdesc> Numbering for Hangul.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>hangulConstant</apiData><apiType value="String"/></apiValueDef><apiDesc> Numbering for Hangul.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:HANGUL"><apiName>HANGUL</apiName><shortdesc> Numbering for Hangul.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>hangul</apiData><apiType value="String"/></apiValueDef><apiDesc> Numbering for Hangul.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:HIRAGANA_IROHA"><apiName>HIRAGANA_IROHA</apiName><shortdesc> Numbering for Hiragana.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>hiraganaIroha</apiData><apiType value="String"/></apiValueDef><apiDesc> Numbering for Hiragana.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:HIRAGANA"><apiName>HIRAGANA</apiName><shortdesc> Numbering for Hiragana.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>hiragana</apiData><apiType value="String"/></apiValueDef><apiDesc> Numbering for Hiragana.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:HYPHEN"><apiName>HYPHEN</apiName><shortdesc> A dash mark.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>hyphen</apiData><apiType value="String"/></apiValueDef><apiDesc> A dash mark.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:KANNADA"><apiName>KANNADA</apiName><shortdesc> Numbering using Kannada.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>kannada</apiData><apiType value="String"/></apiValueDef><apiDesc> Numbering using Kannada.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:KATAKANA_IROHA"><apiName>KATAKANA_IROHA</apiName><shortdesc> Numbering for Katagana.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>katakanaIroha</apiData><apiType value="String"/></apiValueDef><apiDesc> Numbering for Katagana.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:KATAKANA"><apiName>KATAKANA</apiName><shortdesc> Numbering for Katagana.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>katakana</apiData><apiType value="String"/></apiValueDef><apiDesc> Numbering for Katagana.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:LOWER_ALPHA"><apiName>LOWER_ALPHA</apiName><shortdesc> Lower-case alphabetic "numbering": a-z, aa-zz, and so on.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>lowerAlpha</apiData><apiType value="String"/></apiValueDef><apiDesc> Lower-case alphabetic "numbering": a-z, aa-zz, and so on.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:LOWER_GREEK"><apiName>LOWER_GREEK</apiName><shortdesc> Lower-case Greek alphabetic "numering".</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>lowerGreek</apiData><apiType value="String"/></apiValueDef><apiDesc> Lower-case Greek alphabetic "numering".
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:LOWER_LATIN"><apiName>LOWER_LATIN</apiName><shortdesc> Lower-case alphabetic "numbering": a-z, aa-zz, and so on.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>lowerLatin</apiData><apiType value="String"/></apiValueDef><apiDesc> Lower-case alphabetic "numbering": a-z, aa-zz, and so on.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:LOWER_ROMAN"><apiName>LOWER_ROMAN</apiName><shortdesc> Lower-case Roman numbering: i, ii, iii, iv, and so on.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>lowerRoman</apiData><apiType value="String"/></apiValueDef><apiDesc> Lower-case Roman numbering: i, ii, iii, iv, and so on.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:NONE"><apiName>NONE</apiName><shortdesc> No content is generated for the marker.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiType value="String"/></apiValueDef><apiDesc> No content is generated for the marker.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:PERSIAN"><apiName>PERSIAN</apiName><shortdesc> Numbering using Persian.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>persian</apiData><apiType value="String"/></apiValueDef><apiDesc> Numbering using Persian.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:SQUARE"><apiName>SQUARE</apiName><shortdesc> A filled square marker.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>square</apiData><apiType value="String"/></apiValueDef><apiDesc> A filled square marker.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:THAI"><apiName>THAI</apiName><shortdesc> Numbering using Thai.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>thai</apiData><apiType value="String"/></apiValueDef><apiDesc> Numbering using Thai.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:UPPER_ALPHA"><apiName>UPPER_ALPHA</apiName><shortdesc> Upper-case alphabetic "numbering": A-Z, AA-ZZ, and so on.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>upperAlpha</apiData><apiType value="String"/></apiValueDef><apiDesc> Upper-case alphabetic "numbering": A-Z, AA-ZZ, and so on.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:UPPER_GREEK"><apiName>UPPER_GREEK</apiName><shortdesc> Upper-case Greek alphabetic "numering".</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>upperGreek</apiData><apiType value="String"/></apiValueDef><apiDesc> Upper-case Greek alphabetic "numering".
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:UPPER_LATIN"><apiName>UPPER_LATIN</apiName><shortdesc> Upper-case alphabetic "numbering": A-Z, AA-ZZ, and so on.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>upperLatin</apiData><apiType value="String"/></apiValueDef><apiDesc> Upper-case alphabetic "numbering": A-Z, AA-ZZ, and so on.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:UPPER_ROMAN"><apiName>UPPER_ROMAN</apiName><shortdesc> Upper-case Roman numbering: I, II, III, IV, and so on.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>upperRoman</apiData><apiType value="String"/></apiValueDef><apiDesc> Upper-case Roman numbering: I, II, III, IV, and so on.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:URDU"><apiName>URDU</apiName><shortdesc> Numbering using Urdu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>urdu</apiData><apiType value="String"/></apiValueDef><apiDesc> Numbering using Urdu.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:ListMarkerFormat"><apiName>ListMarkerFormat</apiName><shortdesc> Defines the marker format in a ListItemElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.formats:IListMarkerFormat</apiBaseInterface><apiBaseClassifier>flashx.textLayout.formats:TextLayoutFormat</apiBaseClassifier></apiClassifierDef><apiDesc> Defines the marker format in a ListItemElement.
	  
	  </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#ListItemElement"><linktext>flashx.textLayout.elements.ListItemElement</linktext></link></related-links><apiConstructor id="flashx.textLayout.formats:ListMarkerFormat:ListMarkerFormat"><apiName>ListMarkerFormat</apiName><shortdesc> Create a ListMarkerFormat that holds all the properties possible for a list marker.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>initialValues</apiItemName><apiOperationClassifier>flashx.textLayout.formats:IListMarkerFormat</apiOperationClassifier><apiData>null</apiData><apiDesc>An optional instance from which to copy initial values.
		 
		  </apiDesc></apiParam></apiConstructorDef><apiDesc> Create a ListMarkerFormat that holds all the properties possible for a list marker.  
		 
		  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flashx.textLayout.formats:ListMarkerFormat:createListMarkerFormat"><apiName>createListMarkerFormat</apiName><shortdesc>
		 Creates a new ListMarkerFormat object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>The new ListMarkerFormat object.
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.formats:ListMarkerFormat</apiOperationClassifier></apiReturn><apiParam><apiItemName>initialValues</apiItemName><apiType value="Object"/><apiDesc>Optional instance from which to copy initial values. If the object is of type IListMarkerFormat or ITextLayoutFormat, the values are copied.  
		 Otherwise the <codeph>initialValues</codeph> parameter is treated like a Dictionary or Object and iterated over.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Creates a new ListMarkerFormat object. All settings are empty or, optionally, are initialized from the
		 supplied <codeph>initialValues</codeph> object.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.formats.xml#ListMarkerFormat/defaultFormat"><linktext>defaultFormat</linktext></link></related-links></apiOperation><apiValue id="flashx.textLayout.formats:ListMarkerFormat:afterContent:get"><apiName>afterContent</apiName><shortdesc> Specifies a string that goes after the marker.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/></apiValueDef><apiDesc> Specifies a string that goes after the marker. Default is the empty string. 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListMarkerFormat:beforeContent:get"><apiName>beforeContent</apiName><shortdesc> Specifies a string that goes before the marker.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/></apiValueDef><apiDesc> Specifies a string that goes before the marker. Default is the empty string. 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListMarkerFormat:content:get"><apiName>content</apiName><shortdesc>
		 Controls the content of the marker.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Controls the content of the marker. 
		 <p>Legal values for this string are:
		 <ul>
		 	<li><codeph>none</codeph> - No marker.</li>
		 	<li><codeph>counter(ordered)</codeph> - Display the marker.</li>
		 	<li><codeph>counter(ordered,ListStyleType)</codeph> - Display the marker but change the listStyleType to the specified value.</li>
		 	<li><codeph>counters(ordered)</codeph> - Starting from the top-most parent ListElement creating a string of values of the ordered counter in each counters specified listStyleType separated by the suffix for each.  This is used for outline number - for example I.1., I.2. etc.</li>
		 	<li><codeph>counters(ordered,"&lt;string&gt;")</codeph> - Similar to the previous value, except the suffix for each ordered counter is replaced by &lt;string&gt;.</li>
		 	<li><codeph>counters(ordered,"&lt;string&gt;",ListStyleType)</codeph> - Similar to the previous value, except each counter's <codeph>listStyleType</codeph> is replaced with the specified value.</li>
		 </ul>
		 </p>
		 <p>If undefined, the default vaule of this property is <codeph>"counter(ordered)"</codeph>.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListMarkerFormat:counterIncrement:get"><apiName>counterIncrement</apiName><shortdesc>
		 Controls incrementing the value of the counter.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Controls incrementing the value of the counter.  
		 <p>Legal values for this string are:
		  <ul>
		 		<li><codeph>none</codeph> - No increment.</li>
		 		<li><codeph>ordered</codeph> - Increment the counter by one.</li>
		 		<li><codeph>ordered <i>integer</i></codeph> - Increment the counter by <codeph><i>integer</i></codeph>.</li>
		  </ul>
		 </p>
		 <p>If undefined, the default vaule of this property is <codeph>"ordered 1"</codeph>.</p>
		 <p>Note: The <codeph>counterIncrement</codeph> property is applied before the <codeph>counterReset</codeph> property.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListMarkerFormat:counterReset:get"><apiName>counterReset</apiName><shortdesc>
		 Controls resetting the value of the counter.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Controls resetting the value of the counter.  
		 <p>Legal values for this property are:
		  <ul>
		 	  <li><codeph>none</codeph> - No reset.</li>
		 	  <li><codeph>ordered</codeph> - Reset the counter to zero.</li>
		 	  <li><codeph>ordered <i>integer</i></codeph> - Reset the counter to <codeph><i>integer</i></codeph>.</li>
		  </ul>
		 </p>
		 <p>If <codeph>undefined</codeph>, the default value of this property is "none".</p>
		 <p>Note: The <codeph>counterReset</codeph> property is applied before the <codeph>counterIncrement</codeph> property.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListMarkerFormat:suffix:get"><apiName>suffix</apiName><shortdesc>
		 Controls the application of the suffix in the generated text in the ListItemElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Controls the application of the suffix in the generated text in the ListItemElement.
		 <p>Legal values are:
		 <ul>
		   <li><codeph>flashx.textLayout.formats.Suffix.NONE</codeph> - No suffix.</li>		 
		   <li><codeph>flashx.textLayout.formats.Suffix.AUTO</codeph> - Follow CSS rules for adding a suffix.</li>
		 </ul> 
		 </p>
		 <p>Default value is <codeph>Suffix.AUTO</codeph>.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#Suffix"><linktext>flashx.textLayout.formats.Suffix</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:ITabStopFormat"><apiName>ITabStopFormat</apiName><shortdesc>
	 This interface provides read access to tab stop-related properties.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 This interface provides read access to tab stop-related properties.
	 
	 </apiDesc></apiClassifierDetail><apiOperation id="flashx.textLayout.formats:ITabStopFormat:flashx.textLayout.formats:ITabStopFormat:getStyle"><apiName>getStyle</apiName><shortdesc>
		 Return the value of the style specified by the styleProp parameter
		 which specifies the style name.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The value of the specified style.  The type varies depending on the type of the style being
		 accessed.  Returns <codeph>undefined</codeph> if the style is not set.
		 
		 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>styleName</apiItemName><apiType value="String"/><apiDesc>The name of the style whose value is to be retrieved.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Return the value of the style specified by the <codeph>styleProp</codeph> parameter
		 which specifies the style name.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.formats:ITabStopFormat:flashx.textLayout.formats:ITabStopFormat:alignment:get"><apiName>alignment</apiName><shortdesc>
		 The tab alignment for this tab stop.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 The tab alignment for this tab stop. 
		 <p>Legal values are TabAlignment.START, TabAlignment.CENTER, TabAlignment.END, TabAlignment.DECIMAL, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of TabAlignment.START.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue/INHERIT"><linktext>FormatValue.INHERIT</linktext></link><link href="" invalidHref="flash.text.engine.TabAlignment.xml"><linktext>flash.text.engine.TabAlignment</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITabStopFormat:flashx.textLayout.formats:ITabStopFormat:decimalAlignmentToken:get"><apiName>decimalAlignmentToken</apiName><shortdesc>
		 The alignment token to be used if the alignment is DECIMAL.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 The alignment token to be used if the alignment is DECIMAL.
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of null.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITabStopFormat:flashx.textLayout.formats:ITabStopFormat:position:get"><apiName>position</apiName><shortdesc>
		 The position of the tab stop, in pixels, relative to the start edge of the column.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 The position of the tab stop, in pixels, relative to the start edge of the column.
		 <p>Legal values are numbers from 0 to 10000 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of 0.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue/INHERIT"><linktext>FormatValue.INHERIT</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:TextDecoration"><apiName>TextDecoration</apiName><shortdesc>
	  Defines values for the textDecoration property
	  of the TextLayoutFormat class.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Defines values for the <codeph>textDecoration</codeph> property
	  of the TextLayoutFormat class. The values specify either normal text, with no decoration,
	  or underline.
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/textDecoration"><linktext>TextLayoutFormat.textDecoration</linktext></link></related-links><apiValue id="flashx.textLayout.formats:TextDecoration:NONE"><apiName>NONE</apiName><shortdesc> Specifies normal text - no decoration applied 
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies normal text - no decoration applied 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextDecoration:UNDERLINE"><apiName>UNDERLINE</apiName><shortdesc> Specifies that text is underlined.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>underline</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies that text is underlined. 
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage><apiPackage id="flashx.textLayout.operations"><apiName>flashx.textLayout.operations</apiName><apiDetail/><apiClassifier id="flashx.textLayout.operations:CreateSubParagraphGroupOperation"><apiName>CreateSubParagraphGroupOperation</apiName><shortdesc>
	 The CreateSPGEOperation class encapsulates creating a SubPargraphGroupElement
	 
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The CreateSPGEOperation class encapsulates creating a SubPargraphGroupElement
	 
	 </apiDesc></apiClassifierDetail><apiConstructor id="flashx.textLayout.operations:CreateSubParagraphGroupOperation:CreateSubParagraphGroupOperation"><apiName>CreateSubParagraphGroupOperation</apiName><shortdesc> 
		 Constructor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>selection over which to apply the operation.  
		 </apiDesc></apiParam><apiParam><apiItemName>parent</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowGroupElement</apiOperationClassifier><apiData>null</apiData><apiDesc>optional parent for the spge element.  If not specified one is chosen based on the selection
		 </apiDesc></apiParam><apiParam><apiItemName>format</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiData>null</apiData><apiDesc>optional format to set in the new spge element.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Constructor.
		 
		 This operation creates a single SubParagraphGroupElement in the first paragraph of the selection range.  That paragraph must have at least one character selected the paragraph terminator does not count towards that selection.
		 Specifying the spgeParent creates an SubParagraphGroupElement int he part of the selection range included by that spgeParent.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flashx.textLayout.operations:CreateSubParagraphGroupOperation:format:get"><apiName>format</apiName><shortdesc> Format to be applied to the new SubParagraphGroupElement
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> Format to be applied to the new SubParagraphGroupElement
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:CreateSubParagraphGroupOperation:newSubParagraphGroupElement:get"><apiName>newSubParagraphGroupElement</apiName><shortdesc> The new SubParagraphGroupElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:SubParagraphGroupElement</apiValueClassifier></apiValueDef><apiDesc> The new SubParagraphGroupElement. 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:CreateSubParagraphGroupOperation:parent:get"><apiName>parent</apiName><shortdesc> 
		 Specifies the element this operation modifies.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.elements:FlowGroupElement</apiValueClassifier></apiValueDef><apiDesc> 
		 Specifies the element this operation modifies.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.operations:FlowElementOperation"><apiName>FlowElementOperation</apiName><shortdesc>
	 The FlowElementOperation class is the base class for operations that transform a FlowElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The FlowElementOperation class is the base class for operations that transform a FlowElement.
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat"><linktext>flashx.textLayout.formats.TextLayoutFormat</linktext></link><link href="flashx.textLayout.edit.xml#EditManager"><linktext>flashx.textLayout.edit.EditManager</linktext></link><link href="flashx.textLayout.events.xml#FlowOperationEvent"><linktext>flashx.textLayout.events.FlowOperationEvent</linktext></link></related-links><apiConstructor id="flashx.textLayout.operations:FlowElementOperation:FlowElementOperation"><apiName>FlowElementOperation</apiName><shortdesc> 
		 Creates a FlowElementOperation object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>Specifies the TextFlow object this operation acts upon.
		 </apiDesc></apiParam><apiParam><apiItemName>targetElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>Specifies the element this operation modifies.
		 </apiDesc></apiParam><apiParam><apiItemName>relativeStart</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>An offset from the beginning of the <codeph>targetElement</codeph>.
		 </apiDesc></apiParam><apiParam><apiItemName>relativeEnd</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>An offset from the end of the <codeph>targetElement</codeph>.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Creates a FlowElementOperation object.
		  
		 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flashx.textLayout.operations:FlowElementOperation:relativeEnd:get"><apiName>relativeEnd</apiName><shortdesc> 
		 An offset from the start of the targetElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc> 
		 An offset from the start of the <codeph>targetElement</codeph>.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:FlowElementOperation:relativeStart:get"><apiName>relativeStart</apiName><shortdesc> 
		 An offset from the beginning of the targetElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc> 
		 An offset from the beginning of the <codeph>targetElement</codeph>.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:FlowElementOperation:targetElement:get"><apiName>targetElement</apiName><shortdesc> 
		 Specifies the element this operation modifies.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.elements:FlowElement</apiValueClassifier></apiValueDef><apiDesc> 
		 Specifies the element this operation modifies.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.operations:CutOperation"><apiName>CutOperation</apiName><shortdesc>
	 The CutOperation class encapsulates a cut operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The CutOperation class encapsulates a cut operation.
	 
	 <p>The specified range is removed from the text flow.</p>
	 
	 <p><b>Note:</b> The edit manager is responsible for copying the 
	 text scrap to the clipboard. Undoing a cut operation does not restore
	 the original clipboard state.</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.edit.xml#EditManager"><linktext>flashx.textLayout.edit.EditManager</linktext></link><link href="flashx.textLayout.events.xml#FlowOperationEvent"><linktext>flashx.textLayout.events.FlowOperationEvent</linktext></link></related-links><apiConstructor id="flashx.textLayout.operations:CutOperation:flashx.textLayout.operations:CutOperation"><apiName>CutOperation</apiName><shortdesc> 
		 Creates a CutOperation object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>The range of text to be cut.
		 </apiDesc></apiParam><apiParam><apiItemName>scrapToCut</apiItemName><apiOperationClassifier>flashx.textLayout.edit:TextScrap</apiOperationClassifier><apiDesc>A copy of the deleted text.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Creates a CutOperation object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flashx.textLayout.operations:CutOperation:scrapToCut:get"><apiName>scrapToCut</apiName><shortdesc> 
		 scrapToCut the original removed text
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.edit:TextScrap</apiValueClassifier></apiValueDef><apiDesc> 
		 scrapToCut the original removed text
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.operations:ApplyFormatOperation"><apiName>ApplyFormatOperation</apiName><shortdesc>
	 The ApplyFormatOperation class encapsulates a style change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The ApplyFormatOperation class encapsulates a style change.
	 
	 <p>An ApplyFormatOperation applies the leaf format to the text in the 
	 specified range (no change is made if the specified range is a single point). 
	 It applies the paragraph format to any paragraphs at least partially within the range 
	 (or a single paragraph if the range is a single point). 
	 And it applies the container format to any containers at least partially within the range 
	 (or a single container if the range is a single point).</p>
	 
	 </apiDesc><example conref="examples\ApplyFormatOperation_example.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.edit.xml#EditManager"><linktext>flashx.textLayout.edit.EditManager</linktext></link><link href="flashx.textLayout.events.xml#FlowOperationEvent"><linktext>flashx.textLayout.events.FlowOperationEvent</linktext></link></related-links><apiConstructor id="flashx.textLayout.operations:ApplyFormatOperation:ApplyFormatOperation"><apiName>ApplyFormatOperation</apiName><shortdesc> 
		 Creates an ApplyFormatOperation object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>Defines the text range to which the format is applied.
		  </apiDesc></apiParam><apiParam><apiItemName>leafFormat</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc> The format to apply to LeafFlowElement objects in the selected range.
		  </apiDesc></apiParam><apiParam><apiItemName>paragraphFormat</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>The format to apply to ParagraphElement objects in the selected range.
		  </apiDesc></apiParam><apiParam><apiItemName>containerFormat</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiData>null</apiData><apiDesc>The format to apply to containers in the selected range.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Creates an ApplyFormatOperation object.
		 
		  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flashx.textLayout.operations:ApplyFormatOperation:containerFormat:get"><apiName>containerFormat</apiName><shortdesc> 
		 The format properties to apply to the containers in the range.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		 The format properties to apply to the containers in the range.
		 
		 <p>The formats of any containers at least partially within the range are updated. 
		 If the range of this operation is a point, then a single container is updated.
		 If <codeph>containerFormat</codeph> is <codeph>null</codeph>, then no container formats are changed.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:ApplyFormatOperation:leafFormat:get"><apiName>leafFormat</apiName><shortdesc> 
		 The format properties to apply to the leaf elements in the range.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		 The format properties to apply to the leaf elements in the range.
		 
		 <p>If the range of this operation is a point, or if <codeph>leafFormat</codeph> is <codeph>null</codeph>,
		 then no leaf element formats are changed.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:ApplyFormatOperation:paragraphFormat:get"><apiName>paragraphFormat</apiName><shortdesc> 
		 The format properties to apply to the paragraphs in the range.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		 The format properties to apply to the paragraphs in the range.
		 
		 <p>The formats of any paragraphs at least partially within the range are updated. 
		 If the range of this operation is a point, then a single paragraph is updated.
		 If <codeph>paragraphFormat</codeph> is <codeph>null</codeph>, then no paragraph formats are changed.</p>
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.operations:ClearFormatOperation"><apiName>ClearFormatOperation</apiName><shortdesc>
	 The ClearFormatOperation class encapsulates a way to undefine formats.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The ClearFormatOperation class encapsulates a way to undefine formats.
	 
	 <p>An UndefineFormatOperation undefines properties set in the leaf format to the text in the 
	 specified range (no change is made if the specified range is a single point). 
	 It undefines properties set in the paragraph format to any paragraphs at least partially within the range 
	 (or a single paragraph if the range is a single point). 
	 And it undefines properties set in the container format to any containers at least partially within the range 
	 (or a single container if the range is a single point).</p>
	 
	 </apiDesc><example conref="examples\ApplyFormatOperation_example.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.edit.xml#EditManager"><linktext>flashx.textLayout.edit.EditManager</linktext></link><link href="flashx.textLayout.events.xml#FlowOperationEvent"><linktext>flashx.textLayout.events.FlowOperationEvent</linktext></link></related-links><apiConstructor id="flashx.textLayout.operations:ClearFormatOperation:ClearFormatOperation"><apiName>ClearFormatOperation</apiName><shortdesc> 
		 Creates an ClearFormatOperation object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>Defines the text range to which the format is applied.
		  </apiDesc></apiParam><apiParam><apiItemName>leafFormat</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc> The format whose set values indicate properties to undefine to LeafFlowElement objects in the selected range.
		  </apiDesc></apiParam><apiParam><apiItemName>paragraphFormat</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>The format whose set values indicate properties to undefine to ParagraphElement objects in the selected range.
		  </apiDesc></apiParam><apiParam><apiItemName>containerFormat</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiData>null</apiData><apiDesc>The format whose set values indicate properties to undefine to ContainerController objects in the selected range.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Creates an ClearFormatOperation object.
		 
		  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flashx.textLayout.operations:ClearFormatOperation:redo"><apiName>redo</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.operations:ClearFormatOperation:containerFormat:get"><apiName>containerFormat</apiName><shortdesc> 
		 The format properties to undefine on the containers in the range.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		 The format properties to undefine on the containers in the range.
		 
		 <p>The formats of any containers at least partially within the range are updated. 
		 If the range of this operation is a point, then a single container is updated.
		 If <codeph>containerFormat</codeph> is <codeph>null</codeph>, then no container formats are changed.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:ClearFormatOperation:leafFormat:get"><apiName>leafFormat</apiName><shortdesc> 
		 The format properties to undefine on the leaf elements in the range.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		 The format properties to undefine on the leaf elements in the range.
		 
		 <p>If the range of this operation is a point, or if <codeph>leafFormat</codeph> is <codeph>null</codeph>,
		 then no leaf element formats are changed.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:ClearFormatOperation:paragraphFormat:get"><apiName>paragraphFormat</apiName><shortdesc> 
		 The format properties to undefine on the paragraphs in the range.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		 The format properties to undefine on the paragraphs in the range.
		 
		 <p>The formats of any paragraphs at least partially within the range are updated. 
		 If the range of this operation is a point, then a single paragraph is updated.
		 If <codeph>paragraphFormat</codeph> is <codeph>null</codeph>, then no paragraph formats are changed.</p>
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.operations:RedoOperation"><apiName>RedoOperation</apiName><shortdesc> 
	 The RedoOperation class encapsulates a redo operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowOperation</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 The RedoOperation class encapsulates a redo operation.
	 
	 </apiDesc><example conref="examples\RedoOperation_example.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.edit.xml#EditManager"><linktext>flashx.textLayout.edit.EditManager</linktext></link><link href="flashx.textLayout.events.xml#FlowOperationEvent"><linktext>flashx.textLayout.events.FlowOperationEvent</linktext></link></related-links><apiConstructor id="flashx.textLayout.operations:RedoOperation:RedoOperation"><apiName>RedoOperation</apiName><shortdesc> 
		 Creates a RedoOperation object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>operation</apiItemName><apiOperationClassifier>flashx.textLayout.operations:FlowOperation</apiOperationClassifier><apiDesc>The operation to redo.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Creates a RedoOperation object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flashx.textLayout.operations:RedoOperation:operation:get"><apiName>operation</apiName><shortdesc> 
		 The operation to redo.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.operations:FlowOperation</apiValueClassifier></apiValueDef><apiDesc> 
		 The operation to redo.
		  
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.operations:InsertTextOperation"><apiName>InsertTextOperation</apiName><shortdesc>
	 The InsertTextOperation class encapsulates a text insertion operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The InsertTextOperation class encapsulates a text insertion operation.
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.edit.xml#EditManager"><linktext>flashx.textLayout.edit.EditManager</linktext></link><link href="flashx.textLayout.events.xml#FlowOperationEvent"><linktext>flashx.textLayout.events.FlowOperationEvent</linktext></link></related-links><apiConstructor id="flashx.textLayout.operations:InsertTextOperation:InsertTextOperation"><apiName>InsertTextOperation</apiName><shortdesc> 
		 Creates an InsertTextOperation object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>Describes the insertion point or range of text.
		 </apiDesc></apiParam><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiDesc>The string to insert.
		 </apiDesc></apiParam><apiParam><apiItemName>deleteSelectionState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiData>null</apiData><apiDesc>Describes the range of text to delete before doing insertion, 
		 if different than the range described by <codeph>operationState</codeph>.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Creates an InsertTextOperation object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flashx.textLayout.operations:InsertTextOperation:redo"><apiName>redo</apiName><shortdesc>
		 Re-executes the operation after it has been undone.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Re-executes the operation after it has been undone.
		 
		 <p>This function is called by the edit manager, when necessary.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.operations:InsertTextOperation:characterFormat:get"><apiName>characterFormat</apiName><shortdesc> 
		 The character format applied to the inserted text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		 The character format applied to the inserted text.
		  
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:InsertTextOperation:deleteSelectionState:get"><apiName>deleteSelectionState</apiName><shortdesc> 
		 The text deleted by this operation, if any.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.edit:SelectionState</apiValueClassifier></apiValueDef><apiDesc> 
		 The text deleted by this operation, if any.
		 
		 <p><codeph>null</codeph> if no text is deleted.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:InsertTextOperation:text:get"><apiName>text</apiName><shortdesc> 
		 The text inserted by this operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc> 
		 The text inserted by this operation. 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.operations:ApplyTCYOperation"><apiName>ApplyTCYOperation</apiName><shortdesc> 
	 The ApplyTCYOperation class encapsulates a TCY transformation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 The ApplyTCYOperation class encapsulates a TCY transformation.
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#TCYElement"><linktext>flashx.textLayout.elements.TCYElement</linktext></link><link href="flashx.textLayout.edit.xml#EditManager"><linktext>flashx.textLayout.edit.EditManager</linktext></link><link href="flashx.textLayout.events.xml#FlowOperationEvent"><linktext>flashx.textLayout.events.FlowOperationEvent</linktext></link></related-links><apiConstructor id="flashx.textLayout.operations:ApplyTCYOperation:ApplyTCYOperation"><apiName>ApplyTCYOperation</apiName><shortdesc> 
		 Creates an ApplyTCYOperation object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>Describes the range of text to which the operation is applied.
		 </apiDesc></apiParam><apiParam><apiItemName>tcyOn</apiItemName><apiType value="Boolean"/><apiDesc>Specifies whether to apply TCY (<codeph>true</codeph>), or remove TCY (<codeph>false</codeph>).
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Creates an ApplyTCYOperation object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flashx.textLayout.operations:ApplyTCYOperation:newTCYElement:get"><apiName>newTCYElement</apiName><shortdesc> 
		 The TCYElement that was created by doOperation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:TCYElement</apiValueClassifier></apiValueDef><apiDesc> 
		 The TCYElement that was created by doOperation.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:ApplyTCYOperation:tcyOn:get"><apiName>tcyOn</apiName><shortdesc> 
		 Indicates whether the operation applies or removes TCY formatting.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc> 
		 Indicates whether the operation applies or removes TCY formatting.
		 
		 <p>If <codeph>true</codeph>, then the operation transforms the range into a 
		 TCY element. If <codeph>false</codeph>, then the operation removes TCY formatting from
		 the first TCY element in the range.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#TCYElement"><linktext>flashx.textLayout.elements.TCYElement</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.operations:ApplyFormatToElementOperation"><apiName>ApplyFormatToElementOperation</apiName><shortdesc>
	 The ApplyFormatToElementOperation class encapsulates a style change to an element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowElementOperation</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The ApplyFormatToElementOperation class encapsulates a style change to an element.
	 
	 <p>This operation applies one or more formats to a flow element.</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.edit.xml#EditManager"><linktext>flashx.textLayout.edit.EditManager</linktext></link><link href="flashx.textLayout.formats.xml#TextLayoutFormat"><linktext>flashx.textLayout.formats.TextLayoutFormat</linktext></link><link href="flashx.textLayout.events.xml#FlowOperationEvent"><linktext>flashx.textLayout.events.FlowOperationEvent</linktext></link></related-links><apiConstructor id="flashx.textLayout.operations:ApplyFormatToElementOperation:ApplyFormatToElementOperation"><apiName>ApplyFormatToElementOperation</apiName><shortdesc> 
		Creates an ApplyFormatToElementOperation object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>Specifies the text flow containing the element to which this operation is applied.
		</apiDesc></apiParam><apiParam><apiItemName>targetElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>specifies the element to which this operation is applied.
		</apiDesc></apiParam><apiParam><apiItemName>format</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>The formats to apply in this operation.
		 
		</apiDesc></apiParam><apiParam><apiItemName>relativeStart</apiItemName><apiType value="int"/><apiData>0</apiData></apiParam><apiParam><apiItemName>relativeEnd</apiItemName><apiType value="int"/><apiData>-1</apiData></apiParam></apiConstructorDef><apiDesc> 
		Creates an ApplyFormatToElementOperation object. 
		
		</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flashx.textLayout.operations:ApplyFormatToElementOperation:format:get"><apiName>format</apiName><shortdesc> 
		 The character formats applied in this operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		 The character formats applied in this operation.
		 
		 <p>If <codeph>null</codeph> no character formats are changed.</p> 
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.operations:ApplyElementStyleNameOperation"><apiName>ApplyElementStyleNameOperation</apiName><shortdesc>
	 The ApplyElementStyleNameOperation class encapsulates a style name change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiDeprecated replacement="ApplyFormatToElementOperation" sinceVersion="2.0"/><apiBaseClassifier>flashx.textLayout.operations:FlowElementOperation</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The ApplyElementStyleNameOperation class encapsulates a style name change.
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/styleName"><linktext>flashx.textLayout.elements.FlowElement.styleName</linktext></link><link href="flashx.textLayout.edit.xml#EditManager"><linktext>flashx.textLayout.edit.EditManager</linktext></link><link href="flashx.textLayout.events.xml#FlowOperationEvent"><linktext>flashx.textLayout.events.FlowOperationEvent</linktext></link></related-links><apiConstructor id="flashx.textLayout.operations:ApplyElementStyleNameOperation:ApplyElementStyleNameOperation"><apiName>ApplyElementStyleNameOperation</apiName><shortdesc> 
		 Creates a ApplyElementStyleNameOperation object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>Describes the current selection.
		 </apiDesc></apiParam><apiParam><apiItemName>targetElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>Specifies the element to change.
		 </apiDesc></apiParam><apiParam><apiItemName>newStyleName</apiItemName><apiType value="String"/><apiDesc>The style name to assign.
		 </apiDesc></apiParam><apiParam><apiItemName>relativeStart</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>An offset from the beginning of the target element.
		 </apiDesc></apiParam><apiParam><apiItemName>relativeEnd</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>An offset from the end of the target element.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Creates a ApplyElementStyleNameOperation object. 
		 
		 <p>If the <codeph>relativeStart</codeph> and <codeph>relativeEnd</codeph> parameters are set, then the existing
		 element is split into multiple elements, the selected portion using the new 
		 style name and the rest using the existing style name.</p>
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flashx.textLayout.operations:ApplyElementStyleNameOperation:newStyleName:get"><apiName>newStyleName</apiName><shortdesc> 
		 The style name assigned by this operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc> 
		 The style name assigned by this operation.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.operations:FlowOperation"><apiName>FlowOperation</apiName><shortdesc> 
	 The FlowOperation class is the base class for all Text Layout Framework operations.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.undo:IOperation</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 The FlowOperation class is the base class for all Text Layout Framework operations. 
	 
	 <p>Operations are transformations of a text flow. An Operation class defines the
	 logic for performing and undoing the transformation. Operations are executed by an
	 edit manager. Most applications do not need to create or manage operations directly
	 (unless implementing a custom edit manager).</p>
	 
	 <p>When an operation is performed, the edit manager dispatches an Operation object 
	 within the FlowOperationEvent object. You can query 
	 this Operation object to decide whether or not to allow the operation, to decide whether 
	 to perform some other operation as well, or to update related user-interface elements.</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.events.xml#FlowOperationEvent"><linktext>flashx.textLayout.events.FlowOperationEvent</linktext></link><link href="flashx.textLayout.edit.xml#EditManager"><linktext>flashx.textLayout.edit.EditManager</linktext></link></related-links><apiConstructor id="flashx.textLayout.operations:FlowOperation:FlowOperation"><apiName>FlowOperation</apiName><shortdesc> 
		 Creates the FlowOperation object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>textFlow</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier><apiDesc>The text flow to which this operation is applied.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Creates the FlowOperation object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flashx.textLayout.operations:FlowOperation:canUndo"><apiName>canUndo</apiName><shortdesc>	
		 Test if this operation be placed on the undo stack.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>true means to push the operation onto the undo stack.  false means do not push this operation.
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>	
		 Test if this operation be placed on the undo stack.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.operations:FlowOperation:doOperation"><apiName>doOperation</apiName><shortdesc> 
		 Executes the operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Boolean <codeph>true</codeph>, if the operation succeeded. Otherwise, <codeph>false</codeph>.
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc> 
		 Executes the operation. 
		 
		 <p>This method must be overridden in derived classes. The base class method does nothing.
		 You should not call <codeph>doOperation()</codeph> directly. The edit manager 
		 calls the method when it executes the operation. </p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.operations:FlowOperation:redo"><apiName>redo</apiName><shortdesc>	
		 Re-executes the operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The SelectionState object passed to the operation when it was performed. This
		 SelectionState object can be the current selection or a selection created specifically
		 for the operation. 
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>	
		 Re-executes the operation. 
		 
		 <p>This method must be overridden in derived classes. The base class method does nothing.
		 You should not call <codeph>redo()</codeph> directly. The edit manager 
		 calls the method when it re-executes the operation. </p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.operations:FlowOperation:undo"><apiName>undo</apiName><shortdesc>	
		 Reverses the operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The SelectionState object passed to the operation when it was performed. This
		 SelectionState object can be the current selection or a selection created specifically
		 for the operation. 
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>	
		 Reverses the operation. 
		 
		 <p>This method must be overridden in derived classes. The base class method does nothing.
		 You should not call <codeph>undo()</codeph> directly. The edit manager 
		 calls the method when it reverses the operation. </p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.operations:FlowOperation:userData"><apiName>userData</apiName><shortdesc> 
		 Arbitrary data associated with an element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value=""/></apiValueDef><apiDesc> 
		 Arbitrary data associated with an element. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:FlowOperation:beginGeneration:get"><apiName>beginGeneration</apiName><shortdesc>
		 The text flow generation before the operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="uint"/></apiValueDef><apiDesc>
		 The text flow generation before the operation.
		   
		 <p>A generation of 0 indicates that the operation did not complete.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:FlowOperation:endGeneration:get"><apiName>endGeneration</apiName><shortdesc> 
		 The text flow generation after the operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="uint"/></apiValueDef><apiDesc> 
		 The text flow generation after the operation.
		 
		 <p>A generation of 0 indicates that the operation did not complete.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:FlowOperation:textFlow:get"><apiName>textFlow</apiName><shortdesc> 
		 The TextFlow object to which this operation is applied.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.elements:TextFlow</apiValueClassifier></apiValueDef><apiDesc> 
		 The TextFlow object to which this operation is applied.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.operations:SplitElementOperation"><apiName>SplitElementOperation</apiName><shortdesc>
	 The SplitElementOperation class encapsulates a change that splits any FlowGroupElement into two elements.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The SplitElementOperation class encapsulates a change that splits any FlowGroupElement into two elements.
	 
	 This operation splits target at operationState.absoluteStart.
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#ParagraphElement"><linktext>flashx.textLayout.elements.ParagraphElement</linktext></link><link href="flashx.textLayout.edit.xml#EditManager"><linktext>flashx.textLayout.edit.EditManager</linktext></link><link href="flashx.textLayout.events.xml#FlowOperationEvent"><linktext>flashx.textLayout.events.FlowOperationEvent</linktext></link></related-links><apiConstructor id="flashx.textLayout.operations:SplitElementOperation:SplitElementOperation"><apiName>SplitElementOperation</apiName><shortdesc> 
		 Creates a SplitElementOperation object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>Describes the point at which to split the element.
		 If a range of text is specified, the contents of the range are deleted.
		 
		 </apiDesc></apiParam><apiParam><apiItemName>targetElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowGroupElement</apiOperationClassifier></apiParam></apiConstructorDef><apiDesc> 
		 Creates a SplitElementOperation object.  This operation deletes a block selection and then splits the target at absoluteStart.  The block selection should not cause target to be deleted.
		 Target is a FlowGroupElement but may not be a LinkElement, TCYElement or SubParagraphGroupElement.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flashx.textLayout.operations:SplitElementOperation:newElement:get"><apiName>newElement</apiName><shortdesc> 
		 Returns the new element created by doOperation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:FlowGroupElement</apiValueClassifier></apiValueDef><apiDesc> 
		 Returns the new element created by doOperation.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:SplitElementOperation:targetElement:get"><apiName>targetElement</apiName><shortdesc> 
		 Specifies the element this operation modifies.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.elements:FlowGroupElement</apiValueClassifier></apiValueDef><apiDesc> 
		 Specifies the element this operation modifies.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.operations:DeleteTextOperation"><apiName>DeleteTextOperation</apiName><shortdesc>
	 The DeleteTextOperation class encapsulates the deletion of a range of text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The DeleteTextOperation class encapsulates the deletion of a range of text.
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.edit.xml#EditManager"><linktext>flashx.textLayout.edit.EditManager</linktext></link><link href="flashx.textLayout.events.xml#FlowOperationEvent"><linktext>flashx.textLayout.events.FlowOperationEvent</linktext></link></related-links><apiConstructor id="flashx.textLayout.operations:DeleteTextOperation:DeleteTextOperation"><apiName>DeleteTextOperation</apiName><shortdesc> 
		 Creates a DeleteTextOperation operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>The original range of text.
		 </apiDesc></apiParam><apiParam><apiItemName>deleteSelectionState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiData>null</apiData><apiDesc>The range of text to delete, if different from the range 
		 described by <codeph>operationState</codeph>. (Set to <codeph>null</codeph> to delete the range
		 described by <codeph>operationState</codeph>.)
		 </apiDesc></apiParam><apiParam><apiItemName>allowMerge</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Set to <codeph>true</codeph> if this operation can be merged with the next or previous operation.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Creates a DeleteTextOperation operation.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flashx.textLayout.operations:DeleteTextOperation:allowMerge:get"><apiName>allowMerge</apiName><shortdesc> 
		 Indicates whether this operation can be merged with operations executed before or after it.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc> 
		 Indicates whether this operation can be merged with operations executed before or after it.
		 
		 <p>Some delete operations, for example, a sequence of backspace keystrokes, can be fruitfully 
		 merged into one operation so that undoing the operation reverses the entire sequence.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:DeleteTextOperation:deleteSelectionState:get"><apiName>deleteSelectionState</apiName><shortdesc> 
		 deleteSelectionState The range of text to delete
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.edit:SelectionState</apiValueClassifier></apiValueDef><apiDesc> 
		 deleteSelectionState The range of text to delete
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.operations:SplitParagraphOperation"><apiName>SplitParagraphOperation</apiName><shortdesc>
	 The SplitParagraphOperation class encapsulates a change that splits a paragraph into two elements.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:SplitElementOperation</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The SplitParagraphOperation class encapsulates a change that splits a paragraph into two elements.
	 
	 <p>The operation creates a new paragraph containing the text from 
	 the specified position to the end of the paragraph. If a range of text is specified, the text 
	 in the range is deleted first.</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#ParagraphElement"><linktext>flashx.textLayout.elements.ParagraphElement</linktext></link><link href="flashx.textLayout.edit.xml#EditManager"><linktext>flashx.textLayout.edit.EditManager</linktext></link><link href="flashx.textLayout.events.xml#FlowOperationEvent"><linktext>flashx.textLayout.events.FlowOperationEvent</linktext></link></related-links><apiConstructor id="flashx.textLayout.operations:SplitParagraphOperation:SplitParagraphOperation"><apiName>SplitParagraphOperation</apiName><shortdesc> 
		 Creates a SplitParagraphOperation object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>Describes the point at which to split the paragraph.
		 If a range of text is specified, the contents of the range are deleted.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Creates a SplitParagraphOperation object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.operations:ClearFormatOnElementOperation"><apiName>ClearFormatOnElementOperation</apiName><shortdesc>
	 The ClearFormatOnElementOperation class encapsulates a style change to an element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowElementOperation</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The ClearFormatOnElementOperation class encapsulates a style change to an element.
	 
	 <p>This operation undefines one or more formats to a flow element.</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.edit.xml#EditManager"><linktext>flashx.textLayout.edit.EditManager</linktext></link><link href="flashx.textLayout.formats.xml#TextLayoutFormat"><linktext>flashx.textLayout.formats.TextLayoutFormat</linktext></link><link href="flashx.textLayout.events.xml#FlowOperationEvent"><linktext>flashx.textLayout.events.FlowOperationEvent</linktext></link><link href="flashx.textLayout.operations.xml#ApplyFormatToElementOperation"><linktext>ApplyFormatToElementOperation</linktext></link></related-links><apiConstructor id="flashx.textLayout.operations:ClearFormatOnElementOperation:ClearFormatOnElementOperation"><apiName>ClearFormatOnElementOperation</apiName><shortdesc> 
		Creates an ClearFormatOnElementOperation object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>Specifies the text flow containing the element to which this operation is applied.
		</apiDesc></apiParam><apiParam><apiItemName>targetElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>specifies the element to which this operation is applied.
		</apiDesc></apiParam><apiParam><apiItemName>format</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>The formats to apply in this operation.
		 
		</apiDesc></apiParam><apiParam><apiItemName>relativeStart</apiItemName><apiType value="int"/><apiData>0</apiData></apiParam><apiParam><apiItemName>relativeEnd</apiItemName><apiType value="int"/><apiData>-1</apiData></apiParam></apiConstructorDef><apiDesc> 
		Creates an ClearFormatOnElementOperation object. 
		
		</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flashx.textLayout.operations:ClearFormatOnElementOperation:format:get"><apiName>format</apiName><shortdesc> 
		 The character formats applied in this operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		 The character formats applied in this operation.
		 
		 <p>If <codeph>null</codeph> no character formats are changed.</p> 
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.operations:MoveChildrenOperation"><apiName>MoveChildrenOperation</apiName><shortdesc>
	 The MoveChildrenOperation class allows moving a set of siblings out of its immediate parent chain, and the operation removes any empty ancestor chain left behind.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The MoveChildrenOperation class allows moving a set of siblings out of its immediate parent chain, and the operation removes any empty ancestor chain left behind.
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement"><linktext>flashx.textLayout.elements.FlowElement</linktext></link><link href="flashx.textLayout.edit.xml#EditManager"><linktext>flashx.textLayout.edit.EditManager</linktext></link><link href="flashx.textLayout.events.xml#FlowOperationEvent"><linktext>flashx.textLayout.events.FlowOperationEvent</linktext></link></related-links><apiConstructor id="flashx.textLayout.operations:MoveChildrenOperation:MoveChildrenOperation"><apiName>MoveChildrenOperation</apiName><shortdesc> 
		 Creates a MoveChildrenOperation object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>Specifies the SelectionState of this operation
		 </apiDesc></apiParam><apiParam><apiItemName>source</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowGroupElement</apiOperationClassifier><apiDesc>Specifies the parent of the item(s) to move.
		 </apiDesc></apiParam><apiParam><apiItemName>sourceIndex</apiItemName><apiType value="int"/><apiDesc>Specifies the index of the first item to move.
		 </apiDesc></apiParam><apiParam><apiItemName>numChildren</apiItemName><apiType value="int"/><apiDesc>Specifies the number of children to move.
		 </apiDesc></apiParam><apiParam><apiItemName>destination</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowGroupElement</apiOperationClassifier><apiDesc>Specifies the new parent of the items.
		 </apiDesc></apiParam><apiParam><apiItemName>destinationIndex</apiItemName><apiType value="int"/><apiDesc>Specifies the new child index of the first element.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Creates a MoveChildrenOperation object. 
		 
		 <p>This operation moves a consecutive number of children of source into the destination
		 context.  Also, if moving the children leaves the source element with no children, then
		 source will be removed.  The removal is done recursively such that if source's parent
		 becomes empty from the removal of source, it too will be deleted, and on up the parent chain.</p>
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flashx.textLayout.operations:MoveChildrenOperation:destinationIndex:get"><apiName>destinationIndex</apiName><shortdesc> Specifies the new child index of the first element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc> Specifies the new child index of the first element.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:MoveChildrenOperation:destination:get"><apiName>destination</apiName><shortdesc> Specifies the new parent of the items.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.elements:FlowGroupElement</apiValueClassifier></apiValueDef><apiDesc> Specifies the new parent of the items.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:MoveChildrenOperation:numChildren:get"><apiName>numChildren</apiName><shortdesc> Specifies the index of the first item to move.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc> Specifies the index of the first item to move.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:MoveChildrenOperation:sourceIndex:get"><apiName>sourceIndex</apiName><shortdesc> Specifies the number of children to move.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc> Specifies the number of children to move.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:MoveChildrenOperation:source:get"><apiName>source</apiName><shortdesc> Specifies the parent of the item(s) to move.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.elements:FlowGroupElement</apiValueClassifier></apiValueDef><apiDesc> Specifies the parent of the item(s) to move.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.operations:ApplyElementTypeNameOperation"><apiName>ApplyElementTypeNameOperation</apiName><shortdesc>
	 The ApplyElementTypeNameOperation class encapsulates a type name change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowElementOperation</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The ApplyElementTypeNameOperation class encapsulates a type name change.
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/typeName"><linktext>flashx.textLayout.elements.FlowElement.typeName</linktext></link><link href="flashx.textLayout.edit.xml#EditManager"><linktext>flashx.textLayout.edit.EditManager</linktext></link><link href="flashx.textLayout.events.xml#FlowOperationEvent"><linktext>flashx.textLayout.events.FlowOperationEvent</linktext></link></related-links><apiConstructor id="flashx.textLayout.operations:ApplyElementTypeNameOperation:ApplyElementTypeNameOperation"><apiName>ApplyElementTypeNameOperation</apiName><shortdesc> 
		 Creates a ApplyElementTypeNameOperation object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>Describes the current selection.
		 </apiDesc></apiParam><apiParam><apiItemName>targetElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>Specifies the element to change.
		 </apiDesc></apiParam><apiParam><apiItemName>typeName</apiItemName><apiType value="String"/><apiDesc>The type name to assign.
		 </apiDesc></apiParam><apiParam><apiItemName>relativeStart</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>An offset from the beginning of the target element.
		 </apiDesc></apiParam><apiParam><apiItemName>relativeEnd</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>An offset from the end of the target element.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Creates a ApplyElementTypeNameOperation object. 
		 
		 <p>If the <codeph>relativeStart</codeph> and <codeph>relativeEnd</codeph> parameters are set, then the existing
		 element is split into multiple elements, the selected portion using the new 
		 type name and the rest using the existing type name.</p>
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flashx.textLayout.operations:ApplyElementTypeNameOperation:typeName:get"><apiName>typeName</apiName><shortdesc> 
		 The type name assigned by this operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc> 
		 The type name assigned by this operation.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.operations:CreateListOperation"><apiName>CreateListOperation</apiName><shortdesc>
	 The CreateListOperation class encapsulates creating list
	 
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The CreateListOperation class encapsulates creating list
	 
	 </apiDesc></apiClassifierDetail><apiConstructor id="flashx.textLayout.operations:CreateListOperation:CreateListOperation"><apiName>CreateListOperation</apiName><shortdesc> 
		 Creates an CreateListOperation object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier></apiParam><apiParam><apiItemName>parent</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowGroupElement</apiOperationClassifier><apiData>null</apiData></apiParam><apiParam><apiItemName>listFormat</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiData>null</apiData></apiParam></apiConstructorDef><apiDesc> 
		 Creates an CreateListOperation object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flashx.textLayout.operations:CreateListOperation:listFormat:get"><apiName>listFormat</apiName><shortdesc> TextLayoutFormat to be applied to the new ListElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> TextLayoutFormat to be applied to the new ListElement. 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:CreateListOperation:newListElement:get"><apiName>newListElement</apiName><shortdesc> The new ListElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:ListElement</apiValueClassifier></apiValueDef><apiDesc> The new ListElement. 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:CreateListOperation:parent:get"><apiName>parent</apiName><shortdesc> 
		 Specifies the element this operation adds a new ListElement to.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.elements:FlowGroupElement</apiValueClassifier></apiValueDef><apiDesc> 
		 Specifies the element this operation adds a new ListElement to.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.operations:FlowTextOperation"><apiName>FlowTextOperation</apiName><shortdesc> 
	 The FlowTextOperation is the base class for operations that transform a range of text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowOperation</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 The FlowTextOperation is the base class for operations that transform a range of text.
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.edit.xml#EditManager"><linktext>flashx.textLayout.edit.EditManager</linktext></link></related-links><apiConstructor id="flashx.textLayout.operations:FlowTextOperation:FlowTextOperation"><apiName>FlowTextOperation</apiName><shortdesc> 
		 Creates the FlowTextOperation object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>Specifies the relevant selection. If relevant to the operation, the 
		 <codeph>operationState</codeph> describes the text range to which this operation applies.
		 Otherwise, <codeph>operationState</codeph> is used to save the current selection state so that
		 it can be restored when the operation is undone.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Creates the FlowTextOperation object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flashx.textLayout.operations:FlowTextOperation:redo"><apiName>redo</apiName><shortdesc>	
		 	
		 Re-executes the operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>The SelectionState object passed to the operation when it was performed. This
		 SelectionState object can be the current selection or a selection created specifically
		 for the operation. 
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>	
		 	
		 Re-executes the operation. 
		 
		 <p>This method must be overridden in derived classes. The base class method does nothing.
		 You should not call <codeph>redo()</codeph> directly. The edit manager 
		 calls the method when it re-executes the operation. </p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.operations:FlowTextOperation:absoluteEnd:get"><apiName>absoluteEnd</apiName><shortdesc> 
		 The absolute end point of the range of text to which this operation is applied.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc> 
		 The absolute end point of the range of text to which this operation is applied. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:FlowTextOperation:absoluteStart:get"><apiName>absoluteStart</apiName><shortdesc> 
		 The absolute start point of the range of text to which this operation is applied.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc> 
		 The absolute start point of the range of text to which this operation is applied.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:FlowTextOperation:originalSelectionState:get"><apiName>originalSelectionState</apiName><shortdesc> 
		 The selection state at the start of the operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.edit:SelectionState</apiValueClassifier></apiValueDef><apiDesc> 
		 The selection state at the start of the operation. 
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.operations:CreateDivOperation"><apiName>CreateDivOperation</apiName><shortdesc>
	 The CreateDivOperation class encapsulates creating DivElement
	 
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The CreateDivOperation class encapsulates creating DivElement
	 
	 </apiDesc></apiClassifierDetail><apiConstructor id="flashx.textLayout.operations:CreateDivOperation:CreateDivOperation"><apiName>CreateDivOperation</apiName><shortdesc> 
		 Creates an CreateDivOperation object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier></apiParam><apiParam><apiItemName>parent</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowGroupElement</apiOperationClassifier><apiData>null</apiData></apiParam><apiParam><apiItemName>format</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiData>null</apiData></apiParam></apiConstructorDef><apiDesc> 
		 Creates an CreateDivOperation object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flashx.textLayout.operations:CreateDivOperation:format:get"><apiName>format</apiName><shortdesc> TextLayoutFormat to be applied to the new DivElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> TextLayoutFormat to be applied to the new DivElement. 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:CreateDivOperation:newDivElement:get"><apiName>newDivElement</apiName><shortdesc> The new DivElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:DivElement</apiValueClassifier></apiValueDef><apiDesc> The new DivElement. 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:CreateDivOperation:parent:get"><apiName>parent</apiName><shortdesc> 
		 Specifies the parent element for the new DivElement
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.elements:FlowGroupElement</apiValueClassifier></apiValueDef><apiDesc> 
		 Specifies the parent element for the new DivElement
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.operations:ModifyInlineGraphicOperation"><apiName>ModifyInlineGraphicOperation</apiName><shortdesc>
	 The InsertInlineGraphicOperation class encapsulates the modification of an existing inline graphic.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The InsertInlineGraphicOperation class encapsulates the modification of an existing inline graphic.
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElement"><linktext>flashx.textLayout.elements.InlineGraphicElement</linktext></link><link href="flashx.textLayout.edit.xml#EditManager"><linktext>flashx.textLayout.edit.EditManager</linktext></link><link href="flashx.textLayout.events.xml#FlowOperationEvent"><linktext>flashx.textLayout.events.FlowOperationEvent</linktext></link></related-links><apiConstructor id="flashx.textLayout.operations:ModifyInlineGraphicOperation:flashx.textLayout.operations:ModifyInlineGraphicOperation"><apiName>ModifyInlineGraphicOperation</apiName><shortdesc> 
		 Creates a ModifyInlineGraphicsOperation object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>Describes the insertion point. 
		 If a range is selected, the operation deletes the contents of that range.
		 </apiDesc></apiParam><apiParam><apiItemName>source</apiItemName><apiType value="Object"/><apiDesc>The graphic source (uri string, URLRequest, DisplayObject, or Class of an embedded asset). 
		 </apiDesc></apiParam><apiParam><apiItemName>width</apiItemName><apiType value="Object"/><apiDesc>The width to assign (number of pixels, percent, or the string 'auto')
		 </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Object"/><apiDesc>The height to assign (number of pixels, percent, or the string 'auto')
		 </apiDesc></apiParam><apiParam><apiItemName>options</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>None supported
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Creates a ModifyInlineGraphicsOperation object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flashx.textLayout.operations:ModifyInlineGraphicOperation:height:get"><apiName>height</apiName><shortdesc conref="flashx.textLayout.elements.InlineGraphicElement#height"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc conref="flashx.textLayout.elements.InlineGraphicElement#height"> 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:ModifyInlineGraphicOperation:options:get"><apiName>options</apiName><shortdesc> 
		 options are not supported
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc> 
		 options are not supported
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:ModifyInlineGraphicOperation:source:get"><apiName>source</apiName><shortdesc conref="flashx.textLayout.elements.InlineGraphicElement#source">	
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc conref="flashx.textLayout.elements.InlineGraphicElement#source">	
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:ModifyInlineGraphicOperation:width:get"><apiName>width</apiName><shortdesc conref="flashx.textLayout.elements.InlineGraphicElement#width"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc conref="flashx.textLayout.elements.InlineGraphicElement#width"> 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.operations:InsertInlineGraphicOperation"><apiName>InsertInlineGraphicOperation</apiName><shortdesc>
	 The InsertInlineGraphicOperation class encapsulates the insertion of an inline
	 graphic into a text flow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The InsertInlineGraphicOperation class encapsulates the insertion of an inline
	 graphic into a text flow.
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElement"><linktext>flashx.textLayout.elements.InlineGraphicElement</linktext></link><link href="flashx.textLayout.edit.xml#EditManager"><linktext>flashx.textLayout.edit.EditManager</linktext></link><link href="flashx.textLayout.events.xml#FlowOperationEvent"><linktext>flashx.textLayout.events.FlowOperationEvent</linktext></link></related-links><apiConstructor id="flashx.textLayout.operations:InsertInlineGraphicOperation:InsertInlineGraphicOperation"><apiName>InsertInlineGraphicOperation</apiName><shortdesc> 
		 Creates an InsertInlineGraphicsOperation object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>Describes the insertion point. 
		 If a range is selected, the operation deletes the contents of that range.
		 </apiDesc></apiParam><apiParam><apiItemName>source</apiItemName><apiType value="Object"/><apiDesc>The graphic source (uri string, URLRequest, DisplayObject, or Class of an embedded asset). 
		 </apiDesc></apiParam><apiParam><apiItemName>width</apiItemName><apiType value="Object"/><apiDesc>The width to assign (number of pixels, percent, or the string 'auto')
		 </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Object"/><apiDesc>The height to assign (number of pixels, percent, or the string 'auto')
		 </apiDesc></apiParam><apiParam><apiItemName>options</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>The float to assign (String value, none for inline with text, left/right/start/end for float)
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Creates an InsertInlineGraphicsOperation object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flashx.textLayout.operations:InsertInlineGraphicOperation:redo"><apiName>redo</apiName><shortdesc>
		 Re-executes the operation after it has been undone.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Re-executes the operation after it has been undone.
		 
		 <p>This function is called by the edit manager, when necessary.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.operations:InsertInlineGraphicOperation:height:get"><apiName>height</apiName><shortdesc conref="flashx.textLayout.elements.InlineGraphicElement#height"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc conref="flashx.textLayout.elements.InlineGraphicElement#height"> 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flashx.textLayout.xml#InlineGraphicElement/height"><linktext>flashx.textLayout.InlineGraphicElement.height</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.operations:InsertInlineGraphicOperation:newInlineGraphicElement:get"><apiName>newInlineGraphicElement</apiName><shortdesc> 
		 The InlineGraphicElement that was created by doOperation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:InlineGraphicElement</apiValueClassifier></apiValueDef><apiDesc> 
		 The InlineGraphicElement that was created by doOperation.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:InsertInlineGraphicOperation:options:get"><apiName>options</apiName><shortdesc conref="flashx.textLayout.elements.InlineGraphicElement#float"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc conref="flashx.textLayout.elements.InlineGraphicElement#float"> 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:InsertInlineGraphicOperation:source:get"><apiName>source</apiName><shortdesc conref="flashx.textLayout.elements.InlineGraphicElement#source">	
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc conref="flashx.textLayout.elements.InlineGraphicElement#source">	
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:InsertInlineGraphicOperation:width:get"><apiName>width</apiName><shortdesc conref="flashx.textLayout.elements.InlineGraphicElement#width"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc conref="flashx.textLayout.elements.InlineGraphicElement#width"> 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.operations:ApplyElementUserStyleOperation"><apiName>ApplyElementUserStyleOperation</apiName><shortdesc>
	 The ApplyElementUserStyleOperation class encapsulates a change in a style value of an element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiDeprecated replacement="ApplyFormatToElementOperation" sinceVersion="2.0"/><apiBaseClassifier>flashx.textLayout.operations:FlowElementOperation</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The ApplyElementUserStyleOperation class encapsulates a change in a style value of an element.
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/userStyles"><linktext>flashx.textLayout.elements.FlowElement.userStyles</linktext></link><link href="flashx.textLayout.edit.xml#EditManager"><linktext>flashx.textLayout.edit.EditManager</linktext></link><link href="flashx.textLayout.events.xml#FlowOperationEvent"><linktext>flashx.textLayout.events.FlowOperationEvent</linktext></link></related-links><apiConstructor id="flashx.textLayout.operations:ApplyElementUserStyleOperation:ApplyElementUserStyleOperation"><apiName>ApplyElementUserStyleOperation</apiName><shortdesc> 
		 Creates a ApplyElementUserStyleOperation object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>Describes the range of text to style.
		 </apiDesc></apiParam><apiParam><apiItemName>targetElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>Specifies the element to change.
		 </apiDesc></apiParam><apiParam><apiItemName>styleName</apiItemName><apiType value="String"/><apiDesc>The name of the style to change.
		 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>The new style value.
		 </apiDesc></apiParam><apiParam><apiItemName>relativeStart</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>An offset from the beginning of the target element.
		 </apiDesc></apiParam><apiParam><apiItemName>relativeEnd</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>An offset from the end of the target element.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Creates a ApplyElementUserStyleOperation object.
		 
		 <p>If the <codeph>relativeStart</codeph> and <codeph>relativeEnd</codeph> parameters are set, then the existing
		 element is split into multiple elements, the selected portion using the new 
		 style value and the rest using the existing style value.</p>
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flashx.textLayout.operations:ApplyElementUserStyleOperation:newValue:get"><apiName>newValue</apiName><shortdesc> 
		 The new style value.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/></apiValueDef><apiDesc> 
		 The new style value.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:ApplyElementUserStyleOperation:styleName:get"><apiName>styleName</apiName><shortdesc> 
		 The name of the style changed.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc> 
		 The name of the style changed. 
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.operations:ApplyElementIDOperation"><apiName>ApplyElementIDOperation</apiName><shortdesc>
	 The ChangeElementIDOperation class encapsulates an element ID change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowElementOperation</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The ChangeElementIDOperation class encapsulates an element ID change.
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement"><linktext>flashx.textLayout.elements.FlowElement</linktext></link><link href="flashx.textLayout.edit.xml#EditManager"><linktext>flashx.textLayout.edit.EditManager</linktext></link><link href="flashx.textLayout.events.xml#FlowOperationEvent"><linktext>flashx.textLayout.events.FlowOperationEvent</linktext></link></related-links><apiConstructor id="flashx.textLayout.operations:ApplyElementIDOperation:ApplyElementIDOperation"><apiName>ApplyElementIDOperation</apiName><shortdesc> 
		 Creates a ChangeElementIDOperation object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>Specifies the selection state before the operation
		 </apiDesc></apiParam><apiParam><apiItemName>targetElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>Specifies the element to change
		 </apiDesc></apiParam><apiParam><apiItemName>newID</apiItemName><apiType value="String"/><apiDesc>The ID to assign
		 </apiDesc></apiParam><apiParam><apiItemName>relativeStart</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>An offset from the beginning of the target element.
		 </apiDesc></apiParam><apiParam><apiItemName>relativeEnd</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>An offset from the end of the target element.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Creates a ChangeElementIDOperation object. 
		 
		 <p>If the <codeph>relativeStart</codeph> or <codeph>relativeEnd</codeph> parameters are set, then the existing
		 element is split into two elements, one using the existing ID and the other
		 using the new ID. If both parameters are set, then the existing element is split into three elements.
		 The first and last elements of the set are both assigned the original ID.</p>
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flashx.textLayout.operations:ApplyElementIDOperation:newID:get"><apiName>newID</apiName><shortdesc> 
		 The ID assigned by this operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc> 
		 The ID assigned by this operation.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.operations:PasteOperation"><apiName>PasteOperation</apiName><shortdesc>
	 The PasteOperation class encapsulates a paste operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The PasteOperation class encapsulates a paste operation.
	 
	 <p>The specified range is replaced by the new content.</p>
	 
	 <p><b>Note:</b> The edit manager is responsible for copying the 
	 contents of the clipboard.</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.edit.xml#EditManager"><linktext>flashx.textLayout.edit.EditManager</linktext></link><link href="flashx.textLayout.events.xml#FlowOperationEvent"><linktext>flashx.textLayout.events.FlowOperationEvent</linktext></link></related-links><apiConstructor id="flashx.textLayout.operations:PasteOperation:PasteOperation"><apiName>PasteOperation</apiName><shortdesc> 
		 Creates a PasteOperation object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>Describes the insertion point or a range of text 
		 to replace.
		 </apiDesc></apiParam><apiParam><apiItemName>textScrap</apiItemName><apiOperationClassifier>flashx.textLayout.edit:TextScrap</apiOperationClassifier><apiDesc>The content to paste into the text flow.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Creates a PasteOperation object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flashx.textLayout.operations:PasteOperation:textScrap:get"><apiName>textScrap</apiName><shortdesc> 
		 textScrap the text being pasted
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.edit:TextScrap</apiValueClassifier></apiValueDef><apiDesc> 
		 textScrap the text being pasted
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.operations:CopyOperation"><apiName>CopyOperation</apiName><shortdesc>
	 The CopyOperation class encapsulates a copy operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The CopyOperation class encapsulates a copy operation.
	 
	 <p><b>Note:</b> The operation is responsible for copying the 
	 text scrap to the clipboard. Undonig a copy operation does not restore
	 the original clipboard state.</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.edit.xml#EditManager"><linktext>flashx.textLayout.edit.EditManager</linktext></link><link href="flashx.textLayout.events.xml#FlowOperationEvent"><linktext>flashx.textLayout.events.FlowOperationEvent</linktext></link></related-links><apiConstructor id="flashx.textLayout.operations:CopyOperation:CopyOperation"><apiName>CopyOperation</apiName><shortdesc> 
		 Creates a CopyOperation object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>The range of text to be copied.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Creates a CopyOperation object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.operations:CompositeOperation"><apiName>CompositeOperation</apiName><shortdesc>
	 The CompositeOperation class encapsulates a group of transformations managed as a unit.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowOperation</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The CompositeOperation class encapsulates a group of transformations managed as a unit.
	 
	 <p>The CompositeOperation class provides a grouping mechanism for combining multiple FlowOperations 
	 into a single atomic operation. Grouping operations allows them to be undone and redone as a unit. 
	 For example, several single character inserts followed by several backspaces can be undone together as if 
	 they were a single operation. Grouping also provides a mechanism for representing
	 complex operations. For example, a replace operation that modifies more than one text ranges
	 can be represented and managed as a single composite operation.</p>
	 
	 <p><b>Note:</b> It can be more efficient to merge individual atomic operations
	  rather than to combine separate operations into a group. For example, several sequential
	  character inserts can easily be represented as a single insert operation,
	  and undoing or redoing that single operation is more efficient than
	  undoing or redoing a group of insert operations.</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.edit.xml#EditManager"><linktext>flashx.textLayout.edit.EditManager</linktext></link><link href="flashx.textLayout.events.xml#FlowOperationEvent"><linktext>flashx.textLayout.events.FlowOperationEvent</linktext></link></related-links><apiConstructor id="flashx.textLayout.operations:CompositeOperation:CompositeOperation"><apiName>CompositeOperation</apiName><shortdesc> 
		 Creates a CompositeOperation object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>operations</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>The operations to group.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Creates a CompositeOperation object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flashx.textLayout.operations:CompositeOperation:addOperation"><apiName>addOperation</apiName><shortdesc> 
		 Adds an additional operation to the end of the list.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>operation</apiItemName><apiOperationClassifier>flashx.textLayout.operations:FlowOperation</apiOperationClassifier></apiParam></apiOperationDef><apiDesc> 
		 Adds an additional operation to the end of the list. 
		 
		 <p>The new operation must operate on the same TextFlow object as 
		 the other operations in the list.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.operations:CompositeOperation:operations:get"><apiName>operations</apiName><shortdesc>
		 An array containing the operations grouped by this composite operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
		 An array containing the operations grouped by this composite operation.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.operations:ApplyLinkOperation"><apiName>ApplyLinkOperation</apiName><shortdesc>
	 The ApplyLinkOperation class encapsulates a link creation or modification operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The ApplyLinkOperation class encapsulates a link creation or modification operation.
	 
	 </apiDesc><example conref="examples\ApplyLinkOperation_example.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#LinkElement"><linktext>flashx.textLayout.elements.LinkElement</linktext></link><link href="flashx.textLayout.edit.xml#EditManager"><linktext>flashx.textLayout.edit.EditManager</linktext></link><link href="flashx.textLayout.events.xml#FlowOperationEvent"><linktext>flashx.textLayout.events.FlowOperationEvent</linktext></link></related-links><apiConstructor id="flashx.textLayout.operations:ApplyLinkOperation:flashx.textLayout.operations:ApplyLinkOperation"><apiName>ApplyLinkOperation</apiName><shortdesc> 
		 Creates an ApplyLinkOperation object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>The text range to which the operation is applied.
		 </apiDesc></apiParam><apiParam><apiItemName>href</apiItemName><apiType value="String"/><apiDesc>The URI to be associated with the link.  If href is an empty string, 
		 the URI of links in the selection are removed.
		 </apiDesc></apiParam><apiParam><apiItemName>target</apiItemName><apiType value="String"/><apiDesc>The target of the link.
		 </apiDesc></apiParam><apiParam><apiItemName>extendToLinkBoundary</apiItemName><apiType value="Boolean"/><apiDesc>Whether to extend the selection to include the entire 
		 text of any existing links overlapped by the selection, and then apply the change.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Creates an ApplyLinkOperation object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flashx.textLayout.operations:ApplyLinkOperation:extendToLinkBoundary:get"><apiName>extendToLinkBoundary</apiName><shortdesc>
		 Whether to extend the selection to include the entire 
		 text of any existing links overlapped by the selection, and then apply the change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 Whether to extend the selection to include the entire 
		 text of any existing links overlapped by the selection, and then apply the change.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:ApplyLinkOperation:href:get"><apiName>href</apiName><shortdesc> 
		 The URI to be associated with the link.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc> 
		 The URI to be associated with the link.  If href is an empty string, 
		 the URI of links in the selection are removed.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:ApplyLinkOperation:newLinkElement:get"><apiName>newLinkElement</apiName><shortdesc> 
		 The LinkElement that was created by doOperation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:LinkElement</apiValueClassifier></apiValueDef><apiDesc> 
		 The LinkElement that was created by doOperation.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:ApplyLinkOperation:target:get"><apiName>target</apiName><shortdesc>
		 The target of the link.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
		 The target of the link.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.operations:UndoOperation"><apiName>UndoOperation</apiName><shortdesc> 
	 The UndoOperation class encapsulates an undo operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowOperation</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 The UndoOperation class encapsulates an undo operation.
	 
	 </apiDesc><example conref="examples\UndoOperation_example.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.edit.xml#EditManager"><linktext>flashx.textLayout.edit.EditManager</linktext></link><link href="flashx.textLayout.events.xml#FlowOperationEvent"><linktext>flashx.textLayout.events.FlowOperationEvent</linktext></link></related-links><apiConstructor id="flashx.textLayout.operations:UndoOperation:UndoOperation"><apiName>UndoOperation</apiName><shortdesc> 
		 Creates an UndoOperation object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>op</apiItemName><apiOperationClassifier>flashx.textLayout.operations:FlowOperation</apiOperationClassifier><apiDesc>The operation to undo.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Creates an UndoOperation object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flashx.textLayout.operations:UndoOperation:operation:get"><apiName>operation</apiName><shortdesc> 
		 The operation to undo.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.operations:FlowOperation</apiValueClassifier></apiValueDef><apiDesc> 
		 The operation to undo. 
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage><apiPackage id="flashx.textLayout.utils"><apiName>flashx.textLayout.utils</apiName><apiDetail/><apiClassifier id="flashx.textLayout.utils:NavigationUtil"><apiName>NavigationUtil</apiName><shortdesc> 
	 Utilities for manipulating a TextRange 
	 The methods of this class are static and must be called using
	 the syntax NavigationUtil.method(parameter).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 Utilities for manipulating a TextRange 
	 The methods of this class are static and must be called using
	 the syntax <codeph>NavigationUtil.method(<i>parameter</i>)</codeph>.
	 
	 </apiDesc></apiClassifierDetail><apiOperation id="flashx.textLayout.utils:NavigationUtil:endOfDocument"><apiName>endOfDocument</apiName><shortdesc>
		 Sets the TextRange at the end of the document.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>true if selection changed.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>range</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextRange</apiOperationClassifier><apiDesc>Indicates that only activeIndex should move
		 </apiDesc></apiParam><apiParam><apiItemName>extendSelection</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc>
		 Sets the TextRange at the end of the document.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.utils:NavigationUtil:endOfLine"><apiName>endOfLine</apiName><shortdesc>
		 Sets the TextRange at the end of the line.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>true if selection changed.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>range</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextRange</apiOperationClassifier><apiDesc>Indicates that only activeIndex should move
		 </apiDesc></apiParam><apiParam><apiItemName>extendSelection</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc>
		 Sets the TextRange at the end of the line.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.utils:NavigationUtil:endOfParagraph"><apiName>endOfParagraph</apiName><shortdesc>
		 Sets the TextRange at the end of the paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>true if selection changed.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>range</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextRange</apiOperationClassifier><apiDesc>Indicates that only activeIndex should move
		 </apiDesc></apiParam><apiParam><apiItemName>extendSelection</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc>
		 Sets the TextRange at the end of the paragraph.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.utils:NavigationUtil:nextAtomPosition"><apiName>nextAtomPosition</apiName><shortdesc> 
		 Returns the absolute position of the next atom.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>flowRoot</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier></apiParam><apiParam><apiItemName>absolutePos</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc> 
		 Returns the absolute position of the next atom.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.utils:NavigationUtil:nextCharacter"><apiName>nextCharacter</apiName><shortdesc>
		 Sets the TextRange forward by one character.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>true if selection changed.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>range</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextRange</apiOperationClassifier><apiDesc>Indicates that only activeIndex should move
		 </apiDesc></apiParam><apiParam><apiItemName>extendSelection</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc>
		 Sets the TextRange forward by one character.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.utils:NavigationUtil:nextLine"><apiName>nextLine</apiName><shortdesc>
		 Sets the TextRange down one line
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>true if selection changed.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>range</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextRange</apiOperationClassifier><apiDesc>Indicates that only activeIndex should move
		 </apiDesc></apiParam><apiParam><apiItemName>extendSelection</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc>
		 Sets the TextRange down one line
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.utils:NavigationUtil:nextPage"><apiName>nextPage</apiName><shortdesc>
		 Sets the TextRange down one page.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>true if selection changed.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>range</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextRange</apiOperationClassifier><apiDesc>Indicates that only activeIndex should move
		 </apiDesc></apiParam><apiParam><apiItemName>extendSelection</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc>
		 Sets the TextRange down one page.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.utils:NavigationUtil:nextWordPosition"><apiName>nextWordPosition</apiName><shortdesc> 
		 Returns the absolute position of the beginning of the next word.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>flowRoot</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier></apiParam><apiParam><apiItemName>absolutePos</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc> 
		 Returns the absolute position of the beginning of the next word.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.utils:NavigationUtil:nextWord"><apiName>nextWord</apiName><shortdesc>
		 Sets the TextRange forward by one word.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>true if selection changed.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>range</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextRange</apiOperationClassifier><apiDesc>Indicates that only activeIndex should move
		 </apiDesc></apiParam><apiParam><apiItemName>extendSelection</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc>
		 Sets the TextRange forward by one word.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.utils:NavigationUtil:previousAtomPosition"><apiName>previousAtomPosition</apiName><shortdesc> 
		 Returns the absolute position of the previous atom.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>flowRoot</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier></apiParam><apiParam><apiItemName>absolutePos</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc> 
		 Returns the absolute position of the previous atom. 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.utils:NavigationUtil:previousCharacter"><apiName>previousCharacter</apiName><shortdesc>
		 Sets the TextRange backward by one character.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>true if selection changed.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>range</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextRange</apiOperationClassifier><apiDesc>Indicates that only activeIndex should move
		 </apiDesc></apiParam><apiParam><apiItemName>extendSelection</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc>
		 Sets the TextRange backward by one character.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.utils:NavigationUtil:previousLine"><apiName>previousLine</apiName><shortdesc>
		 Sets the TextRange up one line.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>true if selection changed.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>range</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextRange</apiOperationClassifier><apiDesc>Indicates that only activeIndex should move
		 </apiDesc></apiParam><apiParam><apiItemName>extendSelection</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc>
		 Sets the TextRange up one line.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.utils:NavigationUtil:previousPage"><apiName>previousPage</apiName><shortdesc>
		 Sets the TextRange up one page.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>true if selection changed.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>range</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextRange</apiOperationClassifier><apiDesc>Indicates that only activeIndex should move
		 </apiDesc></apiParam><apiParam><apiItemName>extendSelection</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc>
		 Sets the TextRange up one page.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.utils:NavigationUtil:previousWordPosition"><apiName>previousWordPosition</apiName><shortdesc> 
		 Returns absolute position of the beginning of the previous word.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>flowRoot</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier></apiParam><apiParam><apiItemName>absolutePos</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc> 
		 Returns absolute position of the beginning of the previous word.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.utils:NavigationUtil:previousWord"><apiName>previousWord</apiName><shortdesc>
		 Sets the TextRange backward by one word.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>true if selection changed.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>range</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextRange</apiOperationClassifier><apiDesc>Indicates that only activeIndex should move
		 </apiDesc></apiParam><apiParam><apiItemName>extendSelection</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc>
		 Sets the TextRange backward by one word.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.utils:NavigationUtil:startOfDocument"><apiName>startOfDocument</apiName><shortdesc>
		 Sets the TextRange at the beginning of the document.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>true if selection changed.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>range</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextRange</apiOperationClassifier><apiDesc>Indicates that only activeIndex should move
		 </apiDesc></apiParam><apiParam><apiItemName>extendSelection</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc>
		 Sets the TextRange at the beginning of the document.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.utils:NavigationUtil:startOfLine"><apiName>startOfLine</apiName><shortdesc>
		 Sets the TextRange at the beginning of the line.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>true if selection changed.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>range</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextRange</apiOperationClassifier><apiDesc>Indicates that only activeIndex should move
		 </apiDesc></apiParam><apiParam><apiItemName>extendSelection</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc>
		 Sets the TextRange at the beginning of the line.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.utils:NavigationUtil:startOfParagraph"><apiName>startOfParagraph</apiName><shortdesc>
		 Sets the TextRange at the beginning of the paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>true if selection changed.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>range</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextRange</apiOperationClassifier><apiDesc>Indicates that only activeIndex should move
		 </apiDesc></apiParam><apiParam><apiItemName>extendSelection</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc>
		 Sets the TextRange at the beginning of the paragraph.
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="flashx.textLayout.utils:CharacterUtil"><apiName>CharacterUtil</apiName><shortdesc> 
	 Utilities for managing and getting information about characters.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 Utilities for managing and getting information about characters.
	 The methods of this class are static and must be called using
	 the syntax <codeph>CharacterUtil.method(<i>parameter</i>)</codeph>.
	 
	 </apiDesc></apiClassifierDetail><apiOperation id="flashx.textLayout.utils:CharacterUtil:isHighSurrogate"><apiName>isHighSurrogate</apiName><shortdesc> 
		 Returns true if the charCode argument is a high word in a surrogate pair.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc><codeph>true</codeph> if <codeph>charCode</codeph> is the high surrogate in a surrogate pair.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>charCode</apiItemName><apiType value="int"/><apiDesc>An integer that represents a character code.
		 Character codes are usually represented in hexadecimal format.
		 For example, the space character's character code can be
		 represented by the number <codeph>0x0020</codeph>.
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Returns <codeph>true</codeph> if the <codeph>charCode</codeph> argument is a high word in a surrogate pair. 
		 A surrogate pair represents a character with a code point that requires more
		 than sixteen bits to express and thus requires a combination
		 of two 16-bit words, a high surrogate and a low surrogate, to embody its code point.
		 <p>This method can be used when processing a series of characters to
		 ensure that you do not inadvertently divide a surrogate pair
		 into incomplete halves.</p>
		 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.utils:CharacterUtil:isLowSurrogate"><apiName>isLowSurrogate</apiName><shortdesc> 
		 Returns true if the charCode argument is a low word in a surrogate pair.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc><codeph>true</codeph> if <codeph>charCode</codeph> is the low surrogate in a surrogate pair.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>charCode</apiItemName><apiType value="int"/><apiDesc>An integer that represents a character code.
		 Character codes are usually represented in hexadecimal format.
		 For example, the space character's character code can be
		 represented by the number <codeph>0x0020</codeph>.
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Returns <codeph>true</codeph> if the <codeph>charCode</codeph> argument is a low word in a surrogate pair. 
		 A surrogate pair represents a character with a code point that requires more
		 than sixteen bits to express and thus requires a combination
		 of two 16-bit words, a high surrogate and a low surrogate, to embody its code point.
		 <p>This method can be used when processing a series of characters to
		 ensure that you do not inadvertently divide a surrogate pair
		 into incomplete halves.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.utils:CharacterUtil:isWhitespace"><apiName>isWhitespace</apiName><shortdesc> 
		 Returns true if charCode is a whitespace character.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc><codeph>true</codeph> if <codeph>charCode</codeph> is a whitespace character. 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>charCode</apiItemName><apiType value="int"/><apiDesc>An integer that represents a character code.
		 Character codes are usually represented in hexadecimal format.
		 For example, the space character's character code can be
		 represented by the number <codeph>0x0020</codeph>.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Returns <codeph>true</codeph> if <codeph>charCode</codeph> is a whitespace character. 
		 <p>The following table describes all characters that this
		 method considers a whitespace character.
		 </p>
		 <adobetable class="innertable">
		     
		     
		     
		     
		     
		     
		     
		     
		     
		     
		     
		     
		     
		     
		     
		     
		     
		     
		     
		     
		     
		     
		     
		     
		     
		     
		     
		  <tgroup cols="3"><thead><row><entry>Character Code</entry><entry>Unicode Character Name</entry><entry>Category</entry></row></thead><tbody><row><entry><codeph>0x0020</codeph></entry><entry>SPACE</entry><entry>Space Separator</entry></row><row><entry><codeph>0x1680</codeph></entry><entry>OGHAM SPACE MARK</entry><entry>Space Separator</entry></row><row><entry><codeph>0x180E</codeph></entry><entry>MONGOLIAN VOWEL SEPARATOR</entry><entry>Space Separator</entry></row><row><entry><codeph>0x2000</codeph></entry><entry>EN QUAD</entry><entry>Space Separator</entry></row><row><entry><codeph>0x2001</codeph></entry><entry>EM QUAD</entry><entry>Space Separator</entry></row><row><entry><codeph>0x2002</codeph></entry><entry>EN SPACE</entry><entry>Space Separator</entry></row><row><entry><codeph>0x2003</codeph></entry><entry>EM SPACE</entry><entry>Space Separator</entry></row><row><entry><codeph>0x2004</codeph></entry><entry>THREE-PER-EM SPACE</entry><entry>Space Separator</entry></row><row><entry><codeph>0x2005</codeph></entry><entry>FOUR-PER-EM SPACE</entry><entry>Space Separator</entry></row><row><entry><codeph>0x2006</codeph></entry><entry>SIX-PER-EM SPACE</entry><entry>Space Separator</entry></row><row><entry><codeph>0x2007</codeph></entry><entry>FIGURE SPACE</entry><entry>Space Separator</entry></row><row><entry><codeph>0x2008</codeph></entry><entry>PUNCTUATION SPACE</entry><entry>Space Separator</entry></row><row><entry><codeph>0x2009</codeph></entry><entry>THIN SPACE</entry><entry>Space Separator</entry></row><row><entry><codeph>0x200A</codeph></entry><entry>HAIR SPACE</entry><entry>Space Separator</entry></row><row><entry><codeph>0x202F</codeph></entry><entry>NARROW NO-BREAK SPACE</entry><entry>Space Separator</entry></row><row><entry><codeph>0x205F</codeph></entry><entry>MEDIUM MATHEMATICAL SPACE</entry><entry>Space Separator</entry></row><row><entry><codeph>0x3000</codeph></entry><entry>IDEOGRAPHIC SPACE</entry><entry>Space Separator</entry></row><row><entry><codeph>0x2028</codeph></entry><entry>LINE SEPARATOR</entry><entry>Line Separator</entry></row><row><entry><codeph>0x2029</codeph></entry><entry>PARAGRAPH SEPARATOR</entry><entry>Paragraph Separator</entry></row><row><entry><codeph>0x0009</codeph></entry><entry>CHARACTER TABULATION</entry><entry>Other</entry></row><row><entry><codeph>0x000A</codeph></entry><entry>LINE FEED</entry><entry>Other</entry></row><row><entry><codeph>0x000B</codeph></entry><entry>LINE TABULATION</entry><entry>Other</entry></row><row><entry><codeph>0x000C</codeph></entry><entry>FORM FEED</entry><entry>Other</entry></row><row><entry><codeph>0x000D</codeph></entry><entry>CARRIAGE RETURN</entry><entry>Other</entry></row><row><entry><codeph>0x0085</codeph></entry><entry>NEXT LINE</entry><entry>Other</entry></row><row><entry><codeph>0x00A0</codeph></entry><entry>NO-BREAK SPACE</entry><entry>Other</entry></row></tbody></tgroup></adobetable>

		 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier></apiPackage><apiPackage id="flashx.textLayout"><apiName>flashx.textLayout</apiName><apiDetail/><apiClassifier id="flashx.textLayout:TextLayoutVersion"><apiName>TextLayoutVersion</apiName><shortdesc> 
	  This class controls the backward-compatibility of the framework.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> 
	  This class controls the backward-compatibility of the framework.
	  With every new release, some aspects of the framework are changed which can affect your application.
	  
	  </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout:TextLayoutVersion:CURRENT_VERSION"><apiName>CURRENT_VERSION</apiName><shortdesc> 
		  The current released version of the Text Layout Framework, encoded as a uint.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x03000000</apiData><apiType value="uint"/></apiValueDef><apiDesc> 
		  The current released version of the Text Layout Framework, encoded as a uint.
		  
		  </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout:TextLayoutVersion:VERSION_1_0"><apiName>VERSION_1_0</apiName><shortdesc> 
		  The version number value of TLF 1.0,
		  encoded numerically as a uint.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x01000000</apiData><apiType value="uint"/></apiValueDef><apiDesc> 
		  The version number value of TLF 1.0,
		  encoded numerically as a <codeph>uint</codeph>.
		  
		  </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout:TextLayoutVersion:VERSION_1_1"><apiName>VERSION_1_1</apiName><shortdesc> 
		  The version number value of TLF 1.1,
		  encoded numerically as a uint.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x01010000</apiData><apiType value="uint"/></apiValueDef><apiDesc> 
		  The version number value of TLF 1.1,
		  encoded numerically as a <codeph>uint</codeph>.
		  
		  </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout:TextLayoutVersion:VERSION_2_0"><apiName>VERSION_2_0</apiName><shortdesc> 
		  The version number value of TLF 2.0,
		  encoded numerically as a uint.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x02000000</apiData><apiType value="uint"/></apiValueDef><apiDesc> 
		  The version number value of TLF 2.0,
		  encoded numerically as a <codeph>uint</codeph>.
		  
		  </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout:TextLayoutVersion:VERSION_3_0"><apiName>VERSION_3_0</apiName><shortdesc> 
		  The version number value of TLF 3.0,
		  encoded numerically as a uint.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x03000000</apiData><apiType value="uint"/></apiValueDef><apiDesc> 
		  The version number value of TLF 3.0,
		  encoded numerically as a <codeph>uint</codeph>.
		  
		  </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage><apiPackage id="flashx.undo"><apiName>flashx.undo</apiName><apiDetail/><apiClassifier id="flashx.undo:IOperation"><apiName>IOperation</apiName><shortdesc> 
	 IOperation defines the interface for operations that can be undone and redone.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc> 
	 IOperation defines the interface for operations that can be undone and redone.
	  
	 </apiDesc></apiClassifierDetail><apiOperation id="flashx.undo:IOperation:flashx.undo:IOperation:performRedo"><apiName>performRedo</apiName><shortdesc> 
		 Reperforms the operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Reperforms the operation.
		 
		 <p>The operation is also responsible for pushing itself onto the undo stack.</p>
		  
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.undo:IOperation:flashx.undo:IOperation:performUndo"><apiName>performUndo</apiName><shortdesc> 
		 Reverses the operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Reverses the operation.
		 
		 <p>The operation is also responsible for pushing itself onto the redo stack.</p> 
		 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="flashx.undo:UndoManager"><apiName>UndoManager</apiName><shortdesc> 
	 The UndoManager class manages the history of editing operations on a text flow so
	 that these operations can be undone and redone.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.undo:IUndoManager</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 The UndoManager class manages the history of editing operations on a text flow so
	 that these operations can be undone and redone.
	 
	 <p>The undo manager maintains two stacks of IOperation objects. When a reversible
	 operation is executed, it is placed on the undo stack. If that operation is undone,
	 it is removed from the undo stack, reversed, and placed on the redo stack. Likewise, 
	 if that operation is then redone, it is removed from the redo stack, re-executed, and
	 then placed onto the undo stack again. If another operation is executed first, the redo 
	 stack is cleared.</p>
	 
	 <p>If the TextFlow is modified directly (not via
	 calls to the edit manager, but directly via calls to the managed FlowElement objects), then the edit manager
	 clears the undo stack to prevent the stack from getting out of sync with the current state.</p>
	 
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.edit.xml#EditManager"><linktext>flashx.textLayout.edit.EditManager</linktext></link></related-links><apiConstructor id="flashx.undo:UndoManager:UndoManager"><apiName>UndoManager</apiName><shortdesc>
		 Creates an UndoManager object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
		 Creates an UndoManager object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flashx.undo:UndoManager:canRedo"><apiName>canRedo</apiName><shortdesc conref="IUndoManager#canRedo()">
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>Boolean <codeph>true</codeph>, if there is an operation on the redo stack that can be redone.
         Otherwise, <codeph>false</codeph>.
         
         </apiDesc></apiReturn></apiOperationDef><apiDesc conref="IUndoManager#canRedo()">
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.undo:UndoManager:canUndo"><apiName>canUndo</apiName><shortdesc conref="IUndoManager#canUndo()">
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>Boolean <codeph>true</codeph>, if there is an operation on the undo stack that can be reversed.
         Otherwise, <codeph>false</codeph>.
         
         </apiDesc></apiReturn></apiOperationDef><apiDesc conref="IUndoManager#canUndo()">
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.undo:UndoManager:clearAll"><apiName>clearAll</apiName><shortdesc conref="IUndoManager#clearAll()">
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="IUndoManager#clearAll()">
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.undo:UndoManager:clearRedo"><apiName>clearRedo</apiName><shortdesc conref="IUndoManager#clearRedo()">
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="IUndoManager#clearRedo()">
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.undo:UndoManager:peekRedo"><apiName>peekRedo</apiName><shortdesc conref="IUndoManager#peekRedo()">
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.undo:IOperation</apiOperationClassifier><apiDesc>The redoable IOperation object, or <codeph>null</codeph>, if no redoable operation
         is on the stack.
         
         </apiDesc></apiReturn></apiOperationDef><apiDesc conref="IUndoManager#peekRedo()">
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.undo:UndoManager:peekUndo"><apiName>peekUndo</apiName><shortdesc conref="IUndoManager#peekUndo()">
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.undo:IOperation</apiOperationClassifier><apiDesc>The undoable IOperation object, or <codeph>null</codeph>, if no undoable operation
         is on the stack.
         
         </apiDesc></apiReturn></apiOperationDef><apiDesc conref="IUndoManager#peekUndo()">
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.undo:UndoManager:popRedo"><apiName>popRedo</apiName><shortdesc conref="IUndoManager#popRedo()">
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.undo:IOperation</apiOperationClassifier><apiDesc>The redoable IOperation object, or <codeph>null</codeph>, if no redoable operation
         is on the stack.
         </apiDesc></apiReturn></apiOperationDef><apiDesc conref="IUndoManager#popRedo()">
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.undo:UndoManager:popUndo"><apiName>popUndo</apiName><shortdesc conref="IUndoManager#popUndo()">
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.undo:IOperation</apiOperationClassifier><apiDesc>The undoable IOperation object, or <codeph>null</codeph>, if no undoable operation
         is on the stack.
         
         </apiDesc></apiReturn></apiOperationDef><apiDesc conref="IUndoManager#popUndo()">
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.undo:UndoManager:pushRedo"><apiName>pushRedo</apiName><shortdesc conref="IUndoManager#pushRedo()">
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>operation</apiItemName><apiOperationClassifier>flashx.undo:IOperation</apiOperationClassifier></apiParam></apiOperationDef><apiDesc conref="IUndoManager#pushRedo()">
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.undo:UndoManager:pushUndo"><apiName>pushUndo</apiName><shortdesc conref="IUndoManager#pushUndo()">
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>operation</apiItemName><apiOperationClassifier>flashx.undo:IOperation</apiOperationClassifier></apiParam></apiOperationDef><apiDesc conref="IUndoManager#pushUndo()">
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.undo:UndoManager:redo"><apiName>redo</apiName><shortdesc conref="IUndoManager#redo()"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="IUndoManager#redo()"> 
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.edit.xml#IEditManager/redo()"><linktext>flashx.textLayout.edit.IEditManager.redo()</linktext></link></related-links></apiOperation><apiOperation id="flashx.undo:UndoManager:undo"><apiName>undo</apiName><shortdesc conref="IUndoManager#undo()"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="IUndoManager#undo()"> 
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.edit.xml#IEditManager/undo()"><linktext>flashx.textLayout.edit.IEditManager.undo()</linktext></link></related-links></apiOperation><apiValue id="flashx.undo:UndoManager:undoAndRedoItemLimit:get"><apiName>undoAndRedoItemLimit</apiName><shortdesc conref="IUndoManager#undoAndRedoItemLimit">
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiTipTexts><apiTipText>The maximum number of undoable or redoable operations to track. 
		 </apiTipText></apiTipTexts></apiValueDef><apiDesc conref="IUndoManager#undoAndRedoItemLimit">
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.undo:IUndoManager"><apiName>IUndoManager</apiName><shortdesc>
     IUndoManager defines the interface for managing the undo and redo stacks.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
     IUndoManager defines the interface for managing the undo and redo stacks.
     
     <p>An undo manager maintains a stack of operations that can be undone and redone.</p>
     
     </apiDesc></apiClassifierDetail><apiOperation id="flashx.undo:IUndoManager:flashx.undo:IUndoManager:canRedo"><apiName>canRedo</apiName><shortdesc>
         Indicates whether there is currently an operation that can be redone.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Boolean <codeph>true</codeph>, if there is an operation on the redo stack that can be redone.
         Otherwise, <codeph>false</codeph>.
         
         </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
         Indicates whether there is currently an operation that can be redone.
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.undo:IUndoManager:flashx.undo:IUndoManager:canUndo"><apiName>canUndo</apiName><shortdesc>
         Indicates whether there is currently an operation that can be undone.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Boolean <codeph>true</codeph>, if there is an operation on the undo stack that can be reversed.
         Otherwise, <codeph>false</codeph>.
         
         </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
         Indicates whether there is currently an operation that can be undone.
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.undo:IUndoManager:flashx.undo:IUndoManager:clearAll"><apiName>clearAll</apiName><shortdesc>
         Clears both the undo and the redo histories.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
         Clears both the undo and the redo histories.
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.undo:IUndoManager:flashx.undo:IUndoManager:clearRedo"><apiName>clearRedo</apiName><shortdesc>
         Clears the redo stack.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
         Clears the redo stack.
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.undo:IUndoManager:flashx.undo:IUndoManager:peekRedo"><apiName>peekRedo</apiName><shortdesc>
         Returns the next operation to be redone.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The redoable IOperation object, or <codeph>null</codeph>, if no redoable operation
         is on the stack.
         
         </apiDesc><apiOperationClassifier>flashx.undo:IOperation</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
         Returns the next operation to be redone.
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.undo:IUndoManager:flashx.undo:IUndoManager:peekUndo"><apiName>peekUndo</apiName><shortdesc>
         Returns the next operation to be undone.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The undoable IOperation object, or <codeph>null</codeph>, if no undoable operation
         is on the stack.
         
         </apiDesc><apiOperationClassifier>flashx.undo:IOperation</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
         Returns the next operation to be undone.
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.undo:IUndoManager:flashx.undo:IUndoManager:popRedo"><apiName>popRedo</apiName><shortdesc>
         Removes the next operation to be redone from the redo stack, and returns it.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The redoable IOperation object, or <codeph>null</codeph>, if no redoable operation
         is on the stack.
         </apiDesc><apiOperationClassifier>flashx.undo:IOperation</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
         Removes the next operation to be redone from the redo stack, and returns it.
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.undo:IUndoManager:flashx.undo:IUndoManager:popUndo"><apiName>popUndo</apiName><shortdesc>
         Removes the next operation to be undone from the undo stack, and returns it.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The undoable IOperation object, or <codeph>null</codeph>, if no undoable operation
         is on the stack.
         
         </apiDesc><apiOperationClassifier>flashx.undo:IOperation</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
         Removes the next operation to be undone from the undo stack, and returns it.
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.undo:IUndoManager:flashx.undo:IUndoManager:pushRedo"><apiName>pushRedo</apiName><shortdesc>
         Adds a redoable operation to the redo stack.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>operation</apiItemName><apiOperationClassifier>flashx.undo:IOperation</apiOperationClassifier></apiParam></apiOperationDef><apiDesc>
         Adds a redoable operation to the redo stack.
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.undo:IUndoManager:flashx.undo:IUndoManager:pushUndo"><apiName>pushUndo</apiName><shortdesc>
         Adds an undoable operation to the undo stack.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>operation</apiItemName><apiOperationClassifier>flashx.undo:IOperation</apiOperationClassifier></apiParam></apiOperationDef><apiDesc>
         Adds an undoable operation to the undo stack.
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.undo:IUndoManager:flashx.undo:IUndoManager:redo"><apiName>redo</apiName><shortdesc> 
         Removes the next IOperation object from the redo stack and calls the performRedo() 
         function of that object.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
         Removes the next IOperation object from the redo stack and calls the performRedo() 
         function of that object.
         
         </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.edit.xml#IEditManager/redo()"><linktext>flashx.textLayout.edit.IEditManager.redo()</linktext></link><link href="flashx.undo.xml#IUndoManager/canRedo()"><linktext>flashx.undo.IUndoManager.canRedo()</linktext></link><link href="flashx.undo.xml#IUndoManager/clearRedo()"><linktext>flashx.undo.IUndoManager.clearRedo()</linktext></link><link href="flashx.undo.xml#IUndoManager/peekRedo()"><linktext>flashx.undo.IUndoManager.peekRedo()</linktext></link><link href="flashx.undo.xml#IUndoManager/pushRedo()"><linktext>flashx.undo.IUndoManager.pushRedo()</linktext></link><link href="flashx.undo.xml#IUndoManager/popRedo()"><linktext>flashx.undo.IUndoManager.popRedo()</linktext></link></related-links></apiOperation><apiOperation id="flashx.undo:IUndoManager:flashx.undo:IUndoManager:undo"><apiName>undo</apiName><shortdesc> 
         Removes the next IOperation object from the undo stack and calls the performUndo() 
         function of that object.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
         Removes the next IOperation object from the undo stack and calls the performUndo() 
         function of that object.
         
         </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.edit.xml#IEditManager/undo()"><linktext>flashx.textLayout.edit.IEditManager.undo()</linktext></link><link href="flashx.undo.xml#IUndoManager/canUndo()"><linktext>flashx.undo.IUndoManager.canUndo()</linktext></link><link href="flashx.undo.xml#IUndoManager/clearUndo()"><linktext>flashx.undo.IUndoManager.clearUndo()</linktext></link><link href="flashx.undo.xml#IUndoManager/peekUndo()"><linktext>flashx.undo.IUndoManager.peekUndo()</linktext></link><link href="flashx.undo.xml#IUndoManager/pushUndo()"><linktext>flashx.undo.IUndoManager.pushUndo()</linktext></link><link href="flashx.undo.xml#IUndoManager/popUndo()"><linktext>flashx.undo.IUndoManager.popUndo()</linktext></link></related-links></apiOperation><apiValue id="flashx.undo:IUndoManager:flashx.undo:IUndoManager:undoAndRedoItemLimit:get"><apiName>undoAndRedoItemLimit</apiName><shortdesc>
         The maximum number of undoable or redoable operations to track.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
         The maximum number of undoable or redoable operations to track.
         
         <p>To disable the undo function, set this value to 0.</p> 
         
         </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage></allClasses>