<?xml version="1.0" encoding="UTF-8"?><allClasses><apiPackage id="flash.text.ime"><apiName>flash.text.ime</apiName><apiClassifier id="flash.text.ime:IIMEClient"><apiName>IIMEClient</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="flash.text.ime:IIMEClient:flash.text.ime:IIMEClient:confirmComposition"><apiName>confirmComposition</apiName><shortdesc>
	Use this callback to end the inline editing session and confirm the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc> the final state of the text in the inline session (the text that got confirmed).
	</apiDesc></apiParam><apiParam><apiItemName>preserveSelection</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc> when true, you should not reset the current selection to the end of the confirmed text.
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	Use this callback to end the inline editing session and confirm the text.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.ime:IIMEClient:flash.text.ime:IIMEClient:getTextBounds"><apiName>getTextBounds</apiName><shortdesc>
	This callback is used by the IME to query the bounding box of the text being edited with the IME client.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.geom:Rectangle"/><apiDesc>the bounding box of the specified range of text, or <codeph>null</codeph> if either or both of the indexes are invalid.
	The same value should be returned independant of whether <codeph>startIndex</codeph> is greater or less than <codeph>endIndex</codeph>.
	</apiDesc></apiReturn><apiParam><apiItemName>startIndex</apiItemName><apiType value="int"/><apiDesc>an integer that specifies the starting location of the range of text for which you need to measure the bounding box.
	</apiDesc></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiType value="int"/><apiDesc>Optional; an integer that specifies the ending location of the range of text for which you need to measure the bounding box.
	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	This callback is used by the IME to query the bounding box of the text being edited with the IME client.
	Use this method to place the candidate window and set the mouse cursor in the IME client when the mouse is over the 
	text field or other component that supports IME.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.ime:IIMEClient:flash.text.ime:IIMEClient:getTextInRange"><apiName>getTextInRange</apiName><shortdesc> 
	 Gets the specified range of text from the component.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/><apiDesc>The requested text, or <codeph>null</codeph> if no text is available in the requested range
	 or if either or both of the indexes are invalid.  The same value should be returned 
	 independant of whether <codeph>startIndex</codeph> is greater or less than <codeph>endIndex</codeph>.
	 
	 </apiDesc></apiReturn><apiParam><apiItemName>startIndex</apiItemName><apiType value="int"/><apiDesc>an integer that specifies the starting location of the range of text to be retrieved.
	 </apiDesc></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiType value="int"/><apiDesc>an integer that specifies the ending location of the range of text to be retrieved.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc> 
	 Gets the specified range of text from the component.  This method is called during IME reconversion.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.ime:IIMEClient:flash.text.ime:IIMEClient:selectRange"><apiName>selectRange</apiName><shortdesc> 
	 Sets the range of selected text in the component.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>anchorIndex</apiItemName><apiType value="int"/><apiDesc>The zero-based index value of the character at the anchor end of the selection
	 </apiDesc></apiParam><apiParam><apiItemName>activeIndex</apiItemName><apiType value="int"/><apiDesc>The zero-based index value of the character at the active end of the selection.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc> 
	 Sets the range of selected text in the component.
	 If either of the arguments is out of bounds the selection should not be changed.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.ime:IIMEClient:flash.text.ime:IIMEClient:updateComposition"><apiName>updateComposition</apiName><shortdesc>
	Callback for updating the contents of the inline editing session.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiDesc> contains the text of the inline edit session from the IME
	</apiDesc></apiParam><apiParam><apiItemName>attributes</apiItemName><apiType value="Vector$flash.text.ime:CompositionAttributeRange"/><apiDesc> contains an array of composition clauses with adornment info 
	</apiDesc></apiParam><apiParam><apiItemName>compositionStartIndex</apiItemName><apiType value="int"/><apiDesc> start of the inline session relative to the start of the text object
	</apiDesc></apiParam><apiParam><apiItemName>compositionEndIndex</apiItemName><apiType value="int"/><apiDesc> end of the inline session relative to the start of the text object
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	Callback for updating the contents of the inline editing session.
	This gets called whenever the text being edited with the IME has changed
	and its contents are used by the client to redraw the entire inline edit session.
	
	</apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="flash.text.ime:CompositionAttributeRange"><apiName>CompositionAttributeRange</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="flash.text.ime:CompositionAttributeRange:CompositionAttributeRange"><apiName>CompositionAttributeRange</apiName><shortdesc>
	 Creates a CompositionAttributeRange object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>relativeStart</apiItemName><apiType value="int"/><apiDesc> The zero based index of the first character included in the character range.
	 </apiDesc></apiParam><apiParam><apiItemName>relativeEnd</apiItemName><apiType value="int"/><apiDesc> The zero based index of the last character included in the character range.
	 </apiDesc></apiParam><apiParam><apiItemName>selected</apiItemName><apiType value="Boolean"/><apiDesc> The selected flag
	 </apiDesc></apiParam><apiParam><apiItemName>converted</apiItemName><apiType value="Boolean"/><apiDesc> The converted flag
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>Constructor for CompositionAttributeRange objects.
	 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	 Creates a CompositionAttributeRange object.
	 
	 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier></apiPackage><apiPackage id="flashx.textLayout.compose"><apiName>flashx.textLayout.compose</apiName><apiClassifier id="flashx.textLayout.compose:StandardFlowComposer"><apiName>StandardFlowComposer</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.compose:IFlowComposer</apiBaseInterface><apiBaseClassifier>flashx.textLayout.compose:FlowComposerBase</apiBaseClassifier></apiClassifierDef><example conref="examples\StandardFlowComposer_ClassExample.as"/></apiClassifierDetail><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:addControllerAt"><apiName>addControllerAt</apiName><shortdesc> 
		 Adds a controller to this IFlowComposer instance at the specified index.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>controller</apiItemName><apiOperationClassifier>flashx.textLayout.container:ContainerController</apiOperationClassifier><apiDesc>The ContainerController object to add.
		 </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>A numeric index that specifies the position in the controller list at which to insert the ContainerController object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Adds a controller to this IFlowComposer instance at the specified index.
		 
		 <p>The list of controllers is 0-based (the first controller has an index of 0).</p>
		 
		 </apiDesc><example conref="examples\StandardFlowComposer_addControllerAt.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:addController"><apiName>addController</apiName><shortdesc> 
		 Adds a controller to this IFlowComposer instance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>controller</apiItemName><apiOperationClassifier>flashx.textLayout.container:ContainerController</apiOperationClassifier><apiDesc>The ContainerController object to add.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Adds a controller to this IFlowComposer instance.
		 
		 <p>The container is added to the end of the container list.</p>
		 
		 </apiDesc><example conref="examples\StandardFlowComposer_addController.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:composeToController"><apiName>composeToController</apiName><shortdesc> 
		 Composes the content of the root element up to and including the container at the specified index.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>true if anything changed.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiData>unknown</apiData><apiDesc>compose at least up to this container in the TextFlow. If controllerIndex is greater than the number of controllers, compose to the end of the last container.
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Composes the content of the root element up to and including the container at the specified index.
		 
		 <p>If the contents of any container up to and including the container at the specified
		 index has changed, the method returns <codeph>true</codeph>. If <codeph>index</codeph> is greater than the number of controllers
		 (or not specified), then all containers are composed.</p>
		 
		 </apiDesc><example conref="examples\StandardFlowComposer_composeToController.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:composeToPosition"><apiName>composeToPosition</apiName><shortdesc> 
		 Composes the content of the root element up to the specified position.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>true if anything changed.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>absolutePosition</apiItemName><apiType value="int"/><apiData>unknown</apiData><apiDesc>compose at least up to this position in the TextFlow. By default or if absolutePosition is past the end of the flow compose to the end of the flow.
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Composes the content of the root element up to the specified position.
		 
		 <p>If the contents of any container up to and including the container holding the content at the specified
		 position has changed, the method returns <codeph>true</codeph>. If <codeph>absolutePosition</codeph> is greater than the length of the TextFlow 
		 (or not specified), then the entire flow is composed.</p>
		 
		 </apiDesc><example conref="examples\StandardFlowComposer_composeToPosition.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:compose"><apiName>compose</apiName><shortdesc> 
		 Calculates how many lines are necessary to display the content in the root element of the flow and the positions of these 
		 lines in the flow's display containers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>true if anything changed.
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc> 
		 Calculates how many lines are necessary to display the content in the root element of the flow and the positions of these 
		 lines in the flow's display containers.
		 
		 <p>The <codeph>compose()</codeph> method only composes content if it has changed since the last composition operation. 
		 Results are saved so that subsequent
		 calls to <codeph>compose()</codeph> or <codeph>updateAllControllers()</codeph> do not perform an additional recomposition
		 if the flow content has not changed.</p>
		 
		 <p>If the contents of any container have changed, the method returns <codeph>true</codeph>.</p>
		 
		 </apiDesc><example conref="examples\StandardFlowComposer_compose.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.compose.xml#StandardFlowComposer/updateAllControllers()"><linktext>updateAllControllers()</linktext></link><link href="flashx.textLayout.compose.xml#StandardFlowComposer/updateToController()"><linktext>updateToController()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:findControllerIndexAtPosition"><apiName>findControllerIndexAtPosition</apiName><shortdesc> 
		 Returns the index of the controller containing the content at the specified position.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/><apiDesc>the index of the container controller or -1 if not found.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>absolutePosition</apiItemName><apiType value="int"/><apiDesc>The position of the content for which the container index is sought.
		 </apiDesc></apiParam><apiParam><apiItemName>preferPrevious</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Specifies which container index to return when the position is between the last element in 
		 one container and the first element in the next.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Returns the index of the controller containing the content at the specified position. 
		 
		 <p>A position can be considered to be the division between two characters or other elements of a text flow. If 
		 the value in <codeph>absolutePosition</codeph> is a position between the last character of one 
		 container and the first character of the next, then the preceding container is returned if
		 the <codeph>preferPrevious</codeph> parameter is set to <codeph>true</codeph> and the later container is returned if
		 the <codeph>preferPrevious</codeph> parameter is set to <codeph>false</codeph>.</p>
		 
		 <p>The method returns -1 if the content at the specified position is not in any container or is outside
		 the range of positions in the text flow.</p>
		 
		 </apiDesc><example conref="examples\StandardFlowComposer_findControllerIndexAtPosition.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:getAbsoluteStart"><apiName>getAbsoluteStart</apiName><shortdesc> 
		 Returns the absolute position of the first content element in the specified ContainerController object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/><apiDesc>the position before the first character or graphic in the ContainerController.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>controller</apiItemName><apiOperationClassifier>flashx.textLayout.container:ContainerController</apiOperationClassifier><apiDesc>A ContainerController object associated with this flow composer.
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Returns the absolute position of the first content element in the specified ContainerController object.
		 
		 <p>A position is calculated by counting the division between two characters or other elements of a text flow. 
		 The position preceding the first element of a flow is zero. An absolute position is the position
		 counting from the beginning of the flow.</p>
		 
		 </apiDesc><example conref="examples\StandardFlowComposer_getAbsoluteStart.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:getControllerAt"><apiName>getControllerAt</apiName><shortdesc> 
		 Returns the ContainerController object at the specified index.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.container:ContainerController</apiOperationClassifier><apiDesc>the ContainerController object at the specified position.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>The index of the ContainerController object to return.
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Returns the ContainerController object at the specified index. 
		 
		 </apiDesc><example conref="examples\StandardFlowComposer_getControllerAt.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:getControllerIndex"><apiName>getControllerIndex</apiName><shortdesc> 
		 Returns the index of the specified ContainerController object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata><asCustoms><player>version AIR 1.5
	 	 </player></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/><apiDesc>the index of the specified ContainerController object or -1 if the controller is not attached to this flow composer.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>controller</apiItemName><apiOperationClassifier>flashx.textLayout.container:ContainerController</apiOperationClassifier><apiDesc>A reference to the ContainerController object to find.
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Returns the index of the specified ContainerController object. 
		 
		 </apiDesc><example conref="examples\StandardFlowComposer_getControllerIndex.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:interactionManagerChanged"><apiName>interactionManagerChanged</apiName><shortdesc>
		 Called by the TextFlow when the interaction manager changes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newInteractionManager</apiItemName><apiOperationClassifier>flashx.textLayout.edit:ISelectionManager</apiOperationClassifier><apiDesc>The new ISelectionManager instance.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Called by the TextFlow when the interaction manager changes. 
		 
		 <p>This function is called automatically. Your code does not typically need to call this
		 method. Classes that extend StandardFlowComposer can override this method to update
		 event listeners and other properties that depend on the interaction manager.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:protected:preCompose"><apiName>preCompose</apiName><shortdesc> Returns true if composition is necessary, false otherwise </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc> Returns true if composition is necessary, false otherwise </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:removeAllControllers"><apiName>removeAllControllers</apiName><shortdesc> 
		 Removes all controllers from this IFlowComposer instance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Removes all controllers from this IFlowComposer instance. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:removeControllerAt"><apiName>removeControllerAt</apiName><shortdesc> 
		 Removes the controller at the specified index from this IFlowComposer instance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>The index of the ContainerController object to remove.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Removes the controller at the specified index from this IFlowComposer instance.
		 
		 </apiDesc><example conref="examples\StandardFlowController_removeControllerAt.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:removeController"><apiName>removeController</apiName><shortdesc> 
		 Removes a controller from this IFlowComposer instance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>controller</apiItemName><apiOperationClassifier>flashx.textLayout.container:ContainerController</apiOperationClassifier><apiDesc>The ContainerController instance to remove.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Removes a controller from this IFlowComposer instance. 
		 
		 </apiDesc><example conref="examples\StandardFlowController_removeController.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:setFocus"><apiName>setFocus</apiName><shortdesc> 
		 Sets the focus to the container that contains the location specified by the absolutePosition
		 parameter.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>absolutePosition</apiItemName><apiType value="int"/><apiDesc>Specifies the position in the text flow of the container to receive focus.
		 </apiDesc></apiParam><apiParam><apiItemName>leanLeft</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>If true and the position is before the first character in a container, sets focus to the end of 
		  the previous container.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Sets the focus to the container that contains the location specified by the <codeph>absolutePosition</codeph>
		 parameter. 
		 
		 <p>The StandardFlowComposer calls the <codeph>setFocus()</codeph> method of the ContainerController object
		 containing the specified text flow position.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#Stage/focus"><linktext>flash.display.Stage.focus</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:setRootElement"><apiName>setRootElement</apiName><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newRootElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:ContainerFormattedElement</apiOperationClassifier></apiParam></apiOperationDef><apiDesc/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:updateAllControllers"><apiName>updateAllControllers</apiName><shortdesc> 
		 Composes the content of the root element and updates the display.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>true if anything changed.
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc> 
		 Composes the content of the root element and updates the display.  
		 
		 <p>Text layout is conducted in two phases: composition and display. In the composition phase,
		 the flow composer calculates how many lines are necessary to display the content as well as the position of these 
		 lines in the flow's display containers. In the display phase, 
		 the flow composer updates the display object children of its containers. The <codeph>updateAllControllers()</codeph>
		 method initiates both phases in sequence. The StandardFlowComposer keeps track of changes to content
		 so that a full cycle of composition and display is only performed when necessary.</p>
		 
		 <p>This method updates all the text lines and the display list immediately and synchronously.</p>
		 
		 <p>If the contents of any container is changed, the method returns <codeph>true</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:updateToController"><apiName>updateToController</apiName><shortdesc> 
		 Composes and updates the display up to and including the container at the specified index.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph>, if anything changed.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiData>unknown</apiData><apiDesc>index of the last container to update (by default updates all containers)
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Composes and updates the display up to and including the container at the specified index.
		 
		 <p>The <codeph>updateToController()</codeph> method composes the content and 
		 updates the display of all containers up to and including the container at the specified index.
		 For example, if you have a chain of 20 containers and specify an index of 10, 
		 <codeph>updateToController()</codeph> ensures that the first through the tenth (indexes 0-9) 
		 containers are composed and displayed. Composition stops at that point. If <codeph>controllerIndex</codeph> 
		 is -1 (or not specified), then all containers are updated.</p>
		 
		 <p>This method updates all the text lines and the display list immediately and synchronously.</p>
		 
		 <p>If the contents of any container is changed, the method returns <codeph>true</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="flashx.textLayout.compose:StandardFlowComposer:StandardFlowComposer"><apiName>StandardFlowComposer</apiName><shortdesc> 
		Creates a StandardFlowComposer object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> 
		Creates a StandardFlowComposer object. 
		
		<p>To use an StandardFlowComposer object, assign it to the
		<codeph>flowComposer</codeph> property of a TextFlow object. Call the <codeph>updateAllControllers()</codeph>
		method to lay out and display the text in the containers attached to the flow composer.</p>
		
		</apiDesc><example conref="examples\StandardFlowComposer_constructor.as"/></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.compose:TextFlowLineLocation"><apiName>TextFlowLineLocation</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="flashx.textLayout.compose:FlowComposerBase"><apiName>FlowComposerBase</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="flashx.textLayout.compose:FlowComposerBase:damage"><apiName>damage</apiName><shortdesc> Mark lines as damaged and needing a recompose.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>startPosition</apiItemName><apiType value="int"/><apiDesc>beginning of range to damage
		 </apiDesc></apiParam><apiParam><apiItemName>damageLength</apiItemName><apiType value="int"/><apiDesc>number of characters to damage
		 </apiDesc></apiParam><apiParam><apiItemName>damageType</apiItemName><apiType value="String"/><apiDesc>type of damage.  One of flashx.textLayout.compose.FlowDamageType
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Mark lines as damaged and needing a recompose.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:FlowComposerBase:findLineAtPosition"><apiName>findLineAtPosition</apiName><shortdesc> 
		Returns the TextFlowLine object containing the content at the specified position.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.compose:TextFlowLine</apiOperationClassifier><apiDesc>the TextFlowLine containing the content at the specified position, or null if not found.
		
		</apiDesc></apiReturn><apiParam><apiItemName>absolutePosition</apiItemName><apiType value="int"/><apiDesc>The position of the content for which you want the TextFlowLine object.
		</apiDesc></apiParam><apiParam><apiItemName>preferPrevious</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>	Specifies which line to return when the position is between the last element of 
		one line and the first element of the next.
		
		</apiDesc></apiParam></apiOperationDef><apiDesc> 
		Returns the TextFlowLine object containing the content at the specified position.
		
		<p>A position can be considered to be the division between two characters or other elements of a text flow. If 
		the value in <codeph>absolutePosition</codeph> is a position between the last element of one 
		line and the first element of the next, then the preceding line is returned if
		the <codeph>preferPrevious</codeph> parameter is set to <codeph>true</codeph> and the later line is returned if
		the <codeph>preferPrevious</codeph> parameter is set to <codeph>false</codeph>.</p>
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:FlowComposerBase:findLineIndexAtPosition"><apiName>findLineIndexAtPosition</apiName><shortdesc> 
		 Returns the sequential line number of the TextFlowLine object that contains the content at the specified position.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/><apiDesc>the index of the text line at the specified position. If not found, treats as past the end and returns the
		 number of lines.
		 	 
		 </apiDesc></apiReturn><apiParam><apiItemName>absolutePosition</apiItemName><apiType value="int"/><apiDesc>The position of the content for which you want the text line.
		 </apiDesc></apiParam><apiParam><apiItemName>preferPrevious</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Specifies which container index to return when the position is between the last line in 
		 one container and the first line in the next.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Returns the sequential line number of the TextFlowLine object that contains the content at the specified position. 
		 
		 <p>The number of the first line is 0 and the number of the last line is equal to the number of lines minus one.
		 If the position specified in <codeph>absolutePosition</codeph> is past the end of the text flow, this method must return
		 the number that will be assigned to the next new line added to the text flow (which is equal to the number of current lines).</p>
		 
		 <p>A position can be considered to be the division between two characters or other elements of a text flow. If 
		 the value in <codeph>absolutePosition</codeph> is a position between the last line of one 
		 container and the first line of the next, then the preceding container is returned if
		 the <codeph>preferPrevious</codeph> parameter is set to <codeph>true</codeph> and the later container is returned if
		 the <codeph>preferPrevious</codeph> parameter is set to <codeph>false</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:FlowComposerBase:getLineAt"><apiName>getLineAt</apiName><shortdesc> 
		 Returns the line with the specified line number.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.compose:TextFlowLine</apiOperationClassifier><apiDesc>the TextFlowLine with the specified line number, or <codeph>null</codeph>, if not found.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	The line number of the TextFlowLine object to return.
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Returns the line with the specified line number. 
		 
		 <p>The list of lines is numbered from zero to the number of lines minus one. If the value in <codeph>index</codeph>
		 is outside the bounds of the list of lines, then this function returns <codeph>null</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:FlowComposerBase:isDamaged"><apiName>isDamaged</apiName><shortdesc> 
		 Indicates whether any TextFlowLine objects between the beginning of the flow and the line containing the content at 
		 the specified position are marked as damaged.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>true if any of the TextFlowLine objects from the start of the flow up to the line containing the content at
		 <codeph>absolutePosition</codeph> are marked as damaged.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>absolutePosition</apiItemName><apiType value="int"/><apiDesc>the last position in the area of interest
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Indicates whether any TextFlowLine objects between the beginning of the flow and the line containing the content at 
		 the specified position are marked as damaged. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:FlowComposerBase:updateLengths"><apiName>updateLengths</apiName><shortdesc> Update the lengths in the lines to maintain mapping to the TextFlow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>startPosition</apiItemName><apiType value="int"/><apiDesc>beginning of change in length
		 </apiDesc></apiParam><apiParam><apiItemName>deltaLength</apiItemName><apiType value="int"/><apiDesc>change in number of characters.
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Update the lengths in the lines to maintain mapping to the TextFlow. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="flashx.textLayout.compose:FlowComposerBase:FlowComposerBase"><apiName>FlowComposerBase</apiName><shortdesc> Constructor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> Constructor. 
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.compose:TextLineRecycler"><apiName>TextLineRecycler</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="flashx.textLayout.compose:TextLineRecycler:addLineForReuse"><apiName>addLineForReuse</apiName><shortdesc>
		 Add a TextLine to the pool for reuse.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>textLine</apiItemName><apiType value="flash.text.engine:TextLine"/></apiParam></apiOperationDef><apiDesc>
		 Add a TextLine to the pool for reuse. TextLines for reuse should have null userData and null parent. 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:TextLineRecycler:getLineForReuse"><apiName>getLineForReuse</apiName><shortdesc>
		 Return a TextLine from the pool for reuse.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="flash.text.engine:TextLine"/></apiReturn></apiOperationDef><apiDesc>
		 Return a TextLine from the pool for reuse. 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="flashx.textLayout.compose:TextFlowLine"><apiName>TextFlowLine</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseInterface>flashx.textLayout.compose:IVerticalJustificationLine</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="flashx.textLayout.compose:TextFlowLine:getBounds"><apiName>getBounds</apiName><shortdesc> 
		 Returns the bounds of the line as a rectangle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.geom:Rectangle"/><apiDesc>a rectangle that represents the boundaries of the line.
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc> 
		 Returns the bounds of the line as a rectangle.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:TextFlowLine:getTextLine"><apiName>getTextLine</apiName><shortdesc> 
		 Returns the flash.text.engine.TextLine object for this line, which might be recreated 
		 if it does not exist due to garbage collection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.text.engine:TextLine"/><apiDesc>object for this line or <codeph>null</codeph> if the TextLine object cannot be 
		 recreated.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>forceValid</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>if true, the TextLine is regenerated, if it exists but is invalid.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Returns the <codeph>flash.text.engine.TextLine</codeph> object for this line, which might be recreated 
		 if it does not exist due to garbage collection. Set <codeph>forceValid</codeph> to <codeph>true</codeph>
		 to cause the TextLine to be regenerated. Returns null if the TextLine cannot be recreated.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.text.engine.TextLine.xml"><linktext>TextLine</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.compose:TextFlowLine:tlf_internal:oldTestLineVisible"><apiName>oldTestLineVisible</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="tlf_internal"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>wmode</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>x</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>w</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>h</apiItemName><apiType value="int"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiConstructor id="flashx.textLayout.compose:TextFlowLine:TextFlowLine"><apiName>TextFlowLine</apiName><shortdesc> Constructor - creates a new TextFlowLine instance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>textLine</apiItemName><apiType value="flash.text.engine:TextLine"/><apiDesc>The TextLine display object to use for this line.
		 </apiDesc></apiParam><apiParam><apiItemName>paragraph</apiItemName><apiOperationClassifier>flashx.textLayout.elements:ParagraphElement</apiOperationClassifier><apiDesc>The paragraph (ParagraphElement) in which to place the line.
		 </apiDesc></apiParam><apiParam><apiItemName>outerTargetWidth</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc>The width the line is composed to, excluding indents.
		 </apiDesc></apiParam><apiParam><apiItemName>lineOffset</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc>The line's offset in pixels from the appropriate container inset (as dictated by paragraph direction and container block progression), prior to alignment of lines in the paragraph. 
		 </apiDesc></apiParam><apiParam><apiItemName>absoluteStart</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>The character position in the text flow at which the line begins.
		 </apiDesc></apiParam><apiParam><apiItemName>numChars</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>The number of characters in the line.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> Constructor - creates a new TextFlowLine instance. 
		  <p><b>Note</b>: No client should call this. It's exposed for writing your own composer.</p>
		 
		 </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.text.engine.TextLine.xml"><linktext>flash.text.engine.TextLine</linktext></link><link href="flashx.textLayout.elements.xml#ParagraphElement"><linktext>flashx.textLayout.elements.ParagraphElement</linktext></link><link href="flashx.textLayout.compose.xml#TextFlowLine/absoluteStart"><linktext>absoluteStart</linktext></link></related-links></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.compose:FlowDamageType"><apiName>FlowDamageType</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="flashx.textLayout.compose:IFlowComposer"><apiName>IFlowComposer</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:addControllerAt"><apiName>addControllerAt</apiName><shortdesc> 
		 Adds a controller to this IFlowComposer instance at the specified index.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>controller</apiItemName><apiOperationClassifier>flashx.textLayout.container:ContainerController</apiOperationClassifier><apiDesc>The ContainerController object to add.
		 </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>A numeric index that specifies the position in the controller list at which to insert the ContainerController object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Adds a controller to this IFlowComposer instance at the specified index.
		 
		 <p>The list of controllers is 0-based (the first controller has an index of 0).</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:addController"><apiName>addController</apiName><shortdesc> 
		 Adds a controller to this IFlowComposer instance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>controller</apiItemName><apiOperationClassifier>flashx.textLayout.container:ContainerController</apiOperationClassifier><apiDesc>The ContainerController object to add.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Adds a controller to this IFlowComposer instance.
		 
		 <p>The container is added to the end of the container list.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:composeToController"><apiName>composeToController</apiName><shortdesc> 
		 Composes the content of the root element up to and including the container at the specified index.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>true if anything changed.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiData>unknown</apiData><apiDesc>compose at least up to this container in the TextFlow. If controllerIndex is greater than the number of controllers, compose to the end of the last container.
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Composes the content of the root element up to and including the container at the specified index.
		 
		 <p>If the contents of any container up to and including the container at the specified
		 index has changed, the method returns <codeph>true</codeph>. If <codeph>index</codeph> is greater than the number of controllers
		 (or not specified), then all containers are composed.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.compose.xml#IFlowComposer/updateAllControllers()"><linktext>updateAllControllers()</linktext></link><link href="flashx.textLayout.compose.xml#IFlowComposer/updateToController()"><linktext>updateToController()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:composeToPosition"><apiName>composeToPosition</apiName><shortdesc> 
		 Composes the content of the root element up to the specified position.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>true if anything changed.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>absolutePosition</apiItemName><apiType value="int"/><apiData>unknown</apiData><apiDesc>compose at least up to this position in the TextFlow. By default or if absolutePosition is past the end of the flow compose to the end of the flow.
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Composes the content of the root element up to the specified position.
		 
		 <p>If the contents of any container up to and including the container holding the content at the specified
		 position has changed, the method returns <codeph>true</codeph>. If <codeph>absolutePosition</codeph> is greater than the length of the TextFlow 
		 (or not specified), then the entire flow is composed.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.compose.xml#IFlowComposer/updateAllControllers()"><linktext>updateAllControllers()</linktext></link><link href="flashx.textLayout.compose.xml#IFlowComposer/updateToController()"><linktext>updateToController()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:compose"><apiName>compose</apiName><shortdesc> 
		 Calculates how many lines are necessary to display the content in the root element of the flow and the positions of these 
		 lines in the flow's display containers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>true if anything changed.
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc> 
		 Calculates how many lines are necessary to display the content in the root element of the flow and the positions of these 
		 lines in the flow's display containers.
		 
		 <p>Implementations of this method should not update the display, but should save the results so that subsequent
		 calls to <codeph>compose()</codeph> or <codeph>updateAllControllers()</codeph> do not perform an additional recomposition
		 if the flow content has not changed.</p>
		 
		 <p>If the contents of any container have changed, the method must return <codeph>true</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.compose.xml#IFlowComposer/updateAllControllers()"><linktext>updateAllControllers()</linktext></link><link href="flashx.textLayout.compose.xml#IFlowComposer/updateToController()"><linktext>updateToController()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:damage"><apiName>damage</apiName><shortdesc> Mark lines as damaged and needing a recompose.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>startPosition</apiItemName><apiType value="int"/><apiDesc>beginning of range to damage
		 </apiDesc></apiParam><apiParam><apiItemName>damageLength</apiItemName><apiType value="int"/><apiDesc>number of characters to damage
		 </apiDesc></apiParam><apiParam><apiItemName>damageType</apiItemName><apiType value="String"/><apiDesc>type of damage.  One of flashx.textLayout.compose.FlowDamageType
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Mark lines as damaged and needing a recompose.
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.compose.xml#FlowDamageType"><linktext>flashx.textLayout.compose.FlowDamageType</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:findControllerIndexAtPosition"><apiName>findControllerIndexAtPosition</apiName><shortdesc> 
		 Returns the index of the controller containing the content at the specified position.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/><apiDesc>the index of the container controller or -1 if not found.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>absolutePosition</apiItemName><apiType value="int"/><apiDesc>The position of the content for which the container index is sought.
		 </apiDesc></apiParam><apiParam><apiItemName>preferPrevious</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Specifies which container index to return when the position is between the last element in 
		 one container and the first element in the next.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Returns the index of the controller containing the content at the specified position. 
		 
		 <p>A position can be considered to be the division between two characters or other elements of a text flow. If 
		 the value in <codeph>absolutePosition</codeph> is a position between the last character of one 
		 container and the first character of the next, then the preceding container is returned if
		 the <codeph>preferPrevious</codeph> parameter is set to <codeph>true</codeph> and the later container is returned if
		 the <codeph>preferPrevious</codeph> parameter is set to <codeph>false</codeph>.</p>
		 
		 <p>The method must return -1 if the content at the specified position is not in any container or is outside
		 the range of positions in the text flow.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:findLineAtPosition"><apiName>findLineAtPosition</apiName><shortdesc> 
		Returns the TextFlowLine object containing the content at the specified position.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.compose:TextFlowLine</apiOperationClassifier><apiDesc>the TextFlowLine containing the content at the specified position, or null if not found.
		
		</apiDesc></apiReturn><apiParam><apiItemName>absolutePosition</apiItemName><apiType value="int"/><apiDesc>The position of the content for which you want the TextFlowLine object.
		</apiDesc></apiParam><apiParam><apiItemName>preferPrevious</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>	Specifies which line to return when the position is between the last element of 
		one line and the first element of the next.
		
		</apiDesc></apiParam></apiOperationDef><apiDesc> 
		Returns the TextFlowLine object containing the content at the specified position.
		
		<p>A position can be considered to be the division between two characters or other elements of a text flow. If 
		the value in <codeph>absolutePosition</codeph> is a position between the last element of one 
		line and the first element of the next, then the preceding line is returned if
		the <codeph>preferPrevious</codeph> parameter is set to <codeph>true</codeph> and the later line is returned if
		the <codeph>preferPrevious</codeph> parameter is set to <codeph>false</codeph>.</p>
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:findLineIndexAtPosition"><apiName>findLineIndexAtPosition</apiName><shortdesc> 
		 Returns the sequential line number of the TextFlowLine object that contains the content at the specified position.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/><apiDesc>the index of the text line at the specified position. If not found, treats as past the end and returns the
		 number of lines.
		 	 
		 </apiDesc></apiReturn><apiParam><apiItemName>absolutePosition</apiItemName><apiType value="int"/><apiDesc>The position of the content for which you want the text line.
		 </apiDesc></apiParam><apiParam><apiItemName>preferPrevious</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Specifies which container index to return when the position is between the last line in 
		 one container and the first line in the next.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Returns the sequential line number of the TextFlowLine object that contains the content at the specified position. 
		 
		 <p>The number of the first line is 0 and the number of the last line is equal to the number of lines minus one.
		 If the position specified in <codeph>absolutePosition</codeph> is past the end of the text flow, this method must return
		 the number that will be assigned to the next new line added to the text flow (which is equal to the number of current lines).</p>
		 
		 <p>A position can be considered to be the division between two characters or other elements of a text flow. If 
		 the value in <codeph>absolutePosition</codeph> is a position between the last line of one 
		 container and the first line of the next, then the preceding container is returned if
		 the <codeph>preferPrevious</codeph> parameter is set to <codeph>true</codeph> and the later container is returned if
		 the <codeph>preferPrevious</codeph> parameter is set to <codeph>false</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:getControllerAt"><apiName>getControllerAt</apiName><shortdesc> 
		 Returns the ContainerController object at the specified index.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.container:ContainerController</apiOperationClassifier><apiDesc>the ContainerController object at the specified position.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>The index of the ContainerController object to return.
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Returns the ContainerController object at the specified index. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:getControllerIndex"><apiName>getControllerIndex</apiName><shortdesc> 
		 Returns the index of the specified ContainerController object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/><apiDesc>the index of the specified ContainerController object or -1 if the controller is not attached to this flow composer.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>controller</apiItemName><apiOperationClassifier>flashx.textLayout.container:ContainerController</apiOperationClassifier><apiDesc>A reference to the ContainerController object to find.
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Returns the index of the specified ContainerController object. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:getLineAt"><apiName>getLineAt</apiName><shortdesc> 
		 Returns the line with the specified line number.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.compose:TextFlowLine</apiOperationClassifier><apiDesc>the TextFlowLine with the specified line number, or <codeph>null</codeph>, if not found.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	The line number of the TextFlowLine object to return.
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Returns the line with the specified line number. 
		 
		 <p>The list of lines is numbered from zero to the number of lines minus one. If the value in <codeph>index</codeph>
		 is outside the bounds of the list of lines, then this function returns <codeph>null</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:interactionManagerChanged"><apiName>interactionManagerChanged</apiName><shortdesc>
		 Called by the TextFlow when the interaction manager changes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newInteractionManager</apiItemName><apiOperationClassifier>flashx.textLayout.edit:ISelectionManager</apiOperationClassifier><apiDesc>The new ISelectionManager instance.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Called by the TextFlow when the interaction manager changes. 
		 
		 <p>Implementations of IFlowComposer should update event listeners and properties
		 that reference the interaction manager.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:isDamaged"><apiName>isDamaged</apiName><shortdesc> 
		 Indicates whether any TextFlowLine objects between the beginning of the flow and the line containing the content at 
		 the specified position are marked as damaged.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>true if any of the TextFlowLine objects from the start of the flow up to the line containing the content at
		 <codeph>absolutePosition</codeph> are marked as damaged.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>absolutePosition</apiItemName><apiType value="int"/><apiDesc>the last position in the area of interest
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Indicates whether any TextFlowLine objects between the beginning of the flow and the line containing the content at 
		 the specified position are marked as damaged. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:removeAllControllers"><apiName>removeAllControllers</apiName><shortdesc> 
		 Removes all controllers from this IFlowComposer instance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Removes all controllers from this IFlowComposer instance. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:removeControllerAt"><apiName>removeControllerAt</apiName><shortdesc> 
		 Removes the controller at the specified index from this IFlowComposer instance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>The index of the ContainerController object to remove.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Removes the controller at the specified index from this IFlowComposer instance.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:removeController"><apiName>removeController</apiName><shortdesc> 
		 Removes a controller from this IFlowComposer instance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>controller</apiItemName><apiOperationClassifier>flashx.textLayout.container:ContainerController</apiOperationClassifier><apiDesc>The ContainerController instance to remove.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Removes a controller from this IFlowComposer instance. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:setFocus"><apiName>setFocus</apiName><shortdesc> 
		 Sets the focus to the container that contains the location specified by the absolutePosition
		 parameter.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>absolutePosition</apiItemName><apiType value="int"/><apiDesc>Specifies the position in the text flow of the container to receive focus.
		 </apiDesc></apiParam><apiParam><apiItemName>preferPrevious</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>If true and the position is the before the first character in a container, sets focus to the end of 
		  the previous container.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Sets the focus to the container that contains the location specified by the <codeph>absolutePosition</codeph>
		 parameter. 
		 
		 <p>It is the responsibility of the implementation to define what setting the focus means. For example, an 
		 implementation could use the built-in <codeph>focus</codeph> property of the Stage object (as long as the
		 containers were InteractiveObjects) or the implementation could manage the focus some other way.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#Stage/focus"><linktext>flash.display.Stage.focus</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:setRootElement"><apiName>setRootElement</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newRootElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:ContainerFormattedElement</apiOperationClassifier></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:updateAllControllers"><apiName>updateAllControllers</apiName><shortdesc> 
		 Composes the content of the root element and updates the display.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>true if anything changed.
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc> 
		 Composes the content of the root element and updates the display.  
		 
		 <p>Text layout is typically conducted in two phases: composition and display. In the composition phase,
		 the flow composer calculates how many lines are necesary to display the content as well as the position of these 
		 lines in the flow's display containers. In the display phase, 
		 the flow composer updates the display object children of its containers. The <codeph>updateAllControllers()</codeph>
		 method is expected to carry out both phases. An efficient implementation will keep track of changes to content
		 so that a full cycle of composition and display is only performed when necessary.</p>
		 
		 <p>This method updates all the text lines and the display list immediately and synchronously.</p>
		 
		 <p>If the contents of any container is changed, the method must return <codeph>true</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:updateLengths"><apiName>updateLengths</apiName><shortdesc> Update the lengths in the lines to maintain mapping to the TextFlow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>startPosition</apiItemName><apiType value="int"/><apiDesc>beginning of change in length
		 </apiDesc></apiParam><apiParam><apiItemName>deltaLength</apiItemName><apiType value="int"/><apiDesc>change in number of characters.
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Update the lengths in the lines to maintain mapping to the TextFlow. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:updateToController"><apiName>updateToController</apiName><shortdesc> 
		 Composes and updates the display up to and including the container at the specified index.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>true if anything changed.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiData>unknown</apiData><apiDesc>index of the last container to update, by default will update all containers
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Composes and updates the display up to and including the container at the specified index.
		 
		 <p>The <codeph>updateToController()</codeph> method is expected to both compose the content and 
		 update the display so that all containers up to and including the container at the specified index are current.
		 For example, if you have a chain of twenty containers and specify an index of 10, 
		 <codeph>updateToController()</codeph> must ensures that the first through the tenth (indexes 0-9) containers
		 are composed and displayed. Composition can stop at that point. If <codeph>controllerIndex</codeph> 
		 is -1 (or not specified), then all containers should be updated.</p>
		 
		 <p>This method updates all the text lines and the display list immediately and synchronously.</p>
		 
		 <p>If the contents of any container is changed, the method must return <codeph>true</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="flashx.textLayout.compose:ISWFContext"><apiName>ISWFContext</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><example conref="examples\EmbeddedFontLineCreator.as"/><example conref="examples\FontConsumer.as"/></apiClassifierDetail><apiOperation id="flashx.textLayout.compose:ISWFContext:flashx.textLayout.compose:ISWFContext:callInContext"><apiName>callInContext</apiName><shortdesc>
	      A way to call a method in a client controlled context.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="any"/><apiDesc>Whatever the function returns, if anything.
	     
	      </apiDesc></apiReturn><apiParam><apiItemName>fn</apiItemName><apiType value="Function"/><apiDesc>The function or method to call
	      </apiDesc></apiParam><apiParam><apiItemName>thisArg</apiItemName><apiType value="Object"/><apiDesc>The this pointer for the function
	      </apiDesc></apiParam><apiParam><apiItemName>argArray</apiItemName><apiType value="Array"/><apiDesc>The arguments for the function
	      </apiDesc></apiParam><apiParam><apiItemName>returns</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>If true, the function returns a value
	     
	      </apiDesc></apiParam></apiOperationDef><apiDesc>
	      A way to call a method in a client controlled context.
	     
	      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flashx.textLayout.compose.xml#Function/apply()"><linktext>Function.apply()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="flashx.textLayout.compose:IVerticalJustificationLine"><apiName>IVerticalJustificationLine</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail></apiClassifier></apiPackage><apiPackage id="flashx.textLayout.container"><apiName>flashx.textLayout.container</apiName><apiClassifier id="flashx.textLayout.container:ColumnState"><apiName>ColumnState</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="flashx.textLayout.container:ColumnState:getColumnAt"><apiName>getColumnAt</apiName><shortdesc> 
		 Returns the area that a column takes within the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.geom:Rectangle"/><apiDesc>The area of the specified column.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>The relative position of the column among all columns in the container, with the first
		 	column at position 0.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Returns the area that a column takes within the container. Allows you to access the area for a 
		 specific column.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="flashx.textLayout.container:ColumnState:ColumnState"><apiName>ColumnState</apiName><shortdesc>
		 Constructor function - creates a ColumnState object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>blockProgression</apiItemName><apiType value="String"/><apiDesc>The direction of lines for the textflow, either BlockProgression.TB (top-to-bottom) or 
		 		BlockProgression.RL (right-to-left).
		 </apiDesc></apiParam><apiParam><apiItemName>columnDirection</apiItemName><apiType value="String"/><apiDesc>The direction of column layout for the text flow, either Direction.RTL (right-to-left) or 
		 		Direction.LTR (left-to-right).
		 </apiDesc></apiParam><apiParam><apiItemName>controller</apiItemName><apiOperationClassifier>flashx.textLayout.container:ContainerController</apiOperationClassifier><apiDesc>A ContainerController instance whose attributes are used to calculate the column values.
		 </apiDesc></apiParam><apiParam><apiItemName>compositionWidth</apiItemName><apiType value="Number"/><apiDesc>The horizontal extent, in pixels, allowed for text inside the container.
		 </apiDesc></apiParam><apiParam><apiItemName>compositionHeight</apiItemName><apiType value="Number"/><apiDesc>The vertical extent, in pixels, allowed for text inside the container.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor function - creates a ColumnState object.
		 
		 If the values of <codeph>controller.compositionWidth</codeph> and <codeph>controller.compositionHeight</codeph> equal
		 <codeph>NaN</codeph> (not a number), the constructor measures the container's contents to determine the actual 
		 composition width and height that feed into ColumnState.
		 
		 Use the constants defined by the <codeph>flashx.textLayout.formats.BlockProgression</codeph> class to 
		 specify the value of the <codeph>blockProgression</codeph> parameter. Use the constants defined by
		 <codeph>flashx.textLayout.formats.Direction</codeph> to specify the value of the <codeph>columnDirection</codeph> 
		 parameter.
		 
		 </apiDesc></apiConstructorDetail><related-links><link href="flashx.textLayout.formats.xml#BlockProgression"><linktext>BlockProgression</linktext></link><link href="flashx.textLayout.formats.xml#Direction"><linktext>Direction</linktext></link></related-links></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.container:ContainerController"><apiName>ContainerController</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.edit:IInteractionEventHandler</apiBaseInterface><apiBaseInterface>flashx.textLayout.formats:ITextLayoutFormat</apiBaseInterface><apiBaseInterface>flashx.textLayout.container:ISandboxSupport</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><example conref="examples\ContainerControllerExample1.as"/><example conref="examples\ContainerControllerExample2.as"/></apiClassifierDetail><apiOperation id="flashx.textLayout.container:ContainerController:activateHandler"><apiName>activateHandler</apiName><shortdesc> Processes the Event.ACTIVATE event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>The Event object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Processes the <codeph>Event.ACTIVATE</codeph> event when the client manages events.
		 
		 </apiDesc><example conref="examples\ContainerController_activateHandlerExample.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#Event/ACTIVATE"><linktext>Event.ACTIVATE</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:protected:addBackgroundShape"><apiName>addBackgroundShape</apiName><shortdesc>
		 Adds a flash.display.Shape object on which background shapes (such as background color) are drawn.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>shape</apiItemName><apiType value="flash.display:Shape"/><apiDesc><codeph>flash.display.Shape</codeph> object to add
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Adds a <codeph>flash.display.Shape</codeph> object on which background shapes (such as background color) are drawn.
		 The default implementation of this method, which may be overriden, adds the object to <codeph>container</codeph>
		 just before the first <codeph>flash.text.engine.TextLine</codeph> child, if one exists, and after the last exisiting
		 child otherwise. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.Shape.xml"><linktext>flash.display.Shape</linktext></link><link href="" invalidHref="flash.text.engine.TextLine.xml"><linktext>flash.text.engine.TextLine</linktext></link><link href="flashx.textLayout.container.xml#ContainerController/container"><linktext>container</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:protected:addInlineGraphicElement"><apiName>addInlineGraphicElement</apiName><shortdesc>
		 Adds a flash.display.DisplayObject object as a descendant of parent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>parent</apiItemName><apiType value="flash.display:DisplayObjectContainer"/><apiDesc>the <codeph>flash.display.DisplayObjectContainer</codeph> object to add the inlineGraphicElement to
		 </apiDesc></apiParam><apiParam><apiItemName>inlineGraphicElement</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>the <codeph>flash.display.DisplayObject</codeph> object to add
		 </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>insertion index of the float in its parent 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Adds a <codeph>flash.display.DisplayObject</codeph> object as a descendant of <codeph>parent</codeph>.
		 The default implementation of this method, which may be overriden, adds the object
		 as a direct child of <codeph>parent</codeph> at the specified index. This is called to add 
		 InlineGraphicElements to the TextLine or container.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.DisplayObjectContainer.xml"><linktext>flash.display.DisplayObjectContainer</linktext></link><link href="" invalidHref="flash.display.DisplayObject.xml"><linktext>flash.display.DisplayObject</linktext></link><link href="flashx.textLayout.container.xml#ContainerController/container"><linktext>container</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:protected:addSelectionContainer"><apiName>addSelectionContainer</apiName><shortdesc>
		 Adds a flash.display.DisplayObjectContainer object to which selection shapes (such as block selection highlight, cursor etc.) are added.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>selectionContainer</apiItemName><apiType value="flash.display:DisplayObjectContainer"/><apiDesc><codeph>flash.display.DisplayObjectContainer</codeph> object to add
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Adds a <codeph>flash.display.DisplayObjectContainer</codeph> object to which selection shapes (such as block selection highlight, cursor etc.) are added.
		 The default implementation of this method, which may be overriden, has the following behavior:
		 The object is added just before first <codeph>flash.text.engine.TextLine</codeph> child of <codeph>container</codeph> if one exists 
		 and the object is opaque and has normal blend mode. 
		 In all other cases, it is added as the last child of <codeph>container</codeph>.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.DisplayObjectContainer.xml"><linktext>flash.display.DisplayObjectContainer</linktext></link><link href="" invalidHref="flash.text.engine.TextLine.xml"><linktext>flash.text.engine.TextLine</linktext></link><link href="flashx.textLayout.container.xml#ContainerController/container"><linktext>container</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:protected:addTextLine"><apiName>addTextLine</apiName><shortdesc>
		 Adds a flash.text.engine.TextLine object as a descendant of container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>textLine</apiItemName><apiType value="flash.text.engine:TextLine"/><apiDesc>the <codeph>flash.text.engine.TextLine</codeph> object to add
		 </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>insertion index of the text line in its parent 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Adds a <codeph>flash.text.engine.TextLine</codeph> object as a descendant of <codeph>container</codeph>.
		 The default implementation of this method, which may be overriden, adds the object
		 as a direct child of <codeph>container</codeph> at the specified index.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.text.engine.TextLine.xml"><linktext>flash.text.engine.TextLine</linktext></link><link href="flashx.textLayout.container.xml#ContainerController/container"><linktext>container</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:autoScrollIfNecessary"><apiName>autoScrollIfNecessary</apiName><shortdesc> 
		 Handle a scroll event during a "drag" selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>mouseX</apiItemName><apiType value="int"/><apiDesc>The horizontal position of the mouse cursor on the stage.
		 </apiDesc></apiParam><apiParam><apiItemName>mouseY</apiItemName><apiType value="int"/><apiDesc>The vertical position of the mouse cursor  on the stage.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Handle a scroll event during a "drag" selection. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:beginMouseCapture"><apiName>beginMouseCapture</apiName><shortdesc> 
		 Called to request clients to begin the forwarding of mouseup and mousemove events from outside a security sandbox.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Called to request clients to begin the forwarding of mouseup and mousemove events from outside a security sandbox.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:clearStyle"><apiName>clearStyle</apiName><shortdesc> Clears the style specified by styleProp from this FlowElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc> Clears the style specified by <codeph>styleProp</codeph> from this FlowElement. Sets the value to
		 <codeph>undefined</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:protected:createContextMenu"><apiName>createContextMenu</apiName><shortdesc> 
		 Creates a context menu for the ContainerController.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="flash.ui:ContextMenu"/></apiReturn></apiOperationDef><apiDesc> 
		 Creates a context menu for the ContainerController. Use the methods of the ContextMenu class to 
		 add items to the menu.
		 <p>You can override this method to define a custom context menu.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.ui.ContextMenu.xml"><linktext>ContextMenu</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:deactivateHandler"><apiName>deactivateHandler</apiName><shortdesc> Processes the Event.DEACTIVATE event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>The Event object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Processes the <codeph>Event.DEACTIVATE</codeph> event when the client manages events. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#Event/DEACTIVATE"><linktext>Event.DEACTIVATE</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:editHandler"><apiName>editHandler</apiName><shortdesc>
		 Processes an edit event (CUT, COPY, PASTE, SELECT_ALL) when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Event object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Processes an edit event (CUT, COPY, PASTE, SELECT_ALL) when the client manages events.
		 
		 </apiDesc><example conref="examples\ContainerController_editHandlerExample.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.events.Event.xml"><linktext>Event</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:endMouseCapture"><apiName>endMouseCapture</apiName><shortdesc> 
		 Called to inform clients that the the forwarding of mouseup and mousemove events from outside a security sandbox is no longer needed.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Called to inform clients that the the forwarding of mouseup and mousemove events from outside a security sandbox is no longer needed.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:focusChangeHandler"><apiName>focusChangeHandler</apiName><shortdesc> 
		 Processes the FocusEvent.KEY_FOCUS_CHANGE and FocusEvent.MOUSE_FOCUS_CHANGE events
		 when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/><apiDesc>The FocusEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Processes the <codeph>FocusEvent.KEY_FOCUS_CHANGE</codeph> and <codeph>FocusEvent.MOUSE_FOCUS_CHANGE</codeph> events
		 when the client manages events.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#FocusEvent/KEY_FOCUS_CHANGE"><linktext>FocusEvent.KEY_FOCUS_CHANGE</linktext></link><link href="" invalidHref="flash.events.xml#FocusEvent/MOUSE_FOCUS_CHANGE"><linktext>FocusEvent.MOUSE_FOCUS_CHANGE</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:focusInHandler"><apiName>focusInHandler</apiName><shortdesc> Processes the FocusEvent.FOCUS_IN event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/><apiDesc>The FocusEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Processes the <codeph>FocusEvent.FOCUS_IN</codeph> event when the client manages events.
		 
		 </apiDesc><example conref="examples\ContainerController_focusInHandlerExample.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#FocusEvent/FOCUS_IN"><linktext>FocusEvent.FOCUS_IN</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:focusOutHandler"><apiName>focusOutHandler</apiName><shortdesc> Processes the FocusEvent.FOCUS_OUT event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/><apiDesc>The FocusEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Processes the <codeph>FocusEvent.FOCUS_OUT</codeph> event when the client manages events.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#FocusEvent/FOCUS_OUT"><linktext>FocusEvent.FOCUS_OUT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:getContentBounds"><apiName>getContentBounds</apiName><shortdesc> 
		 Returns the area that the text occupies, as reflected by the last compose or update operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.geom:Rectangle"/><apiDesc>describes the area that the text occupies.
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc> 
		 Returns the area that the text occupies, as reflected by the last compose or update operation. 
		 The width and the height might be estimated, if the container is scrollable and the text exceeds the 
		 visible area.
		 
		 </apiDesc><example conref="examples\ContainerController_getContentBoundsExample.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.geom.Rectangle.xml"><linktext>Rectangle</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:protected:getFirstTextLineChildIndex"><apiName>getFirstTextLineChildIndex</apiName><shortdesc>
		 Gets the index at which the first text line must appear in its parent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="int"/><apiDesc>the index at which the first text line must appear in its parent.
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Gets the index at which the first text line must appear in its parent.
		 The default implementation of this method, which may be overriden, returns the child index 
		 of the first <codeph>flash.text.engine.TextLine</codeph> child of <codeph>container</codeph>
		 if one exists, and that of the last child of <codeph>container</codeph> otherwise. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.text.engine.TextLine.xml"><linktext>flash.text.engine.TextLine</linktext></link><link href="flashx.textLayout.container.xml#ContainerController/container"><linktext>container</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:getScrollDelta"><apiName>getScrollDelta</apiName><shortdesc> 
		 Figure out the scroll distance required to scroll up or down by the specified number of lines.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>the delta amount of space to scroll
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>numLines</apiItemName><apiType value="int"/><apiDesc>The number of lines to scroll.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Figure out the scroll distance required to scroll up or down by the specified number of lines.
		 Negative numbers scroll upward, bringing more of the top of the TextFlow into view. Positive numbers 
		 scroll downward, bringing the next line from the bottom into full view.
		 
		 <p>When scrolling up, for example, the method makes the next line fully visible. If the next line is partially
		 obscured and the number of lines specified is 1, the partially obscured line becomes fully visible.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:getStyle"><apiName>getStyle</apiName><shortdesc> Returns the value of the style specified by the styleProp parameter.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="any"/><apiDesc>The current value for the specified style.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>The name of the style property whose value you want.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Returns the value of the style specified by the <codeph>styleProp</codeph> parameter.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:imeStartCompositionHandler"><apiName>imeStartCompositionHandler</apiName><shortdesc> Processes the IMEEvent.IME_START_COMPOSITION event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:IMEEvent"/><apiDesc> The IMEEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Processes the <codeph>IMEEvent.IME_START_COMPOSITION</codeph> event when the client manages events.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.IMEEvent.IME_START_COMPOSITION.xml"><linktext>flash.events.IMEEvent.IME_START_COMPOSITION</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:invalidateContents"><apiName>invalidateContents</apiName><shortdesc> 
		 Marks all the text in this container as needing composing.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Marks all the text in this container as needing composing. 
		 
		 </apiDesc><example conref="examples\ContainerController_invalidateContentsExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:isDamaged"><apiName>isDamaged</apiName><shortdesc> 
		 Determines whether the container has text that requires composing.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>true if the container requires composing.
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc> 
		 Determines whether the container has text that requires composing. 
		 
		 </apiDesc><example conref="examples\ContainerController_isDamagedExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:keyDownHandler"><apiName>keyDownHandler</apiName><shortdesc> Processes the KeyboardEvent.KEY_DOWN event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:KeyboardEvent"/><apiDesc>KeyboardEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Processes the <codeph>KeyboardEvent.KEY_DOWN</codeph> event when the client manages events.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#KeyboardEvent/KEY_DOWN"><linktext>KeyboardEvent.KEY_DOWN</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:keyFocusChangeHandler"><apiName>keyFocusChangeHandler</apiName><shortdesc> Processes the FocusEvent.KEY_FOCUS_CHANGE event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/><apiDesc>The FocusEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Processes the <codeph>FocusEvent.KEY_FOCUS_CHANGE</codeph> event when the client manages events.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#FocusEvent/KEY_FOCUS_CHANGE"><linktext>FocusEvent.KEY_FOCUS_CHANGE</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:keyUpHandler"><apiName>keyUpHandler</apiName><shortdesc> Processes the Keyboard.KEY_UP event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:KeyboardEvent"/><apiDesc>The KeyboardEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Processes the <codeph>Keyboard.KEY_UP</codeph> event when the client manages events.
		 
		 </apiDesc><example conref="examples\ContainerController_keyUpHandlerExample.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#KeyboardEvent/KEY_UP"><linktext>KeyboardEvent.KEY_UP</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:menuSelectHandler"><apiName>menuSelectHandler</apiName><shortdesc> 
		 Processes the ContextMenuEvent.MENU_SELECT event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:ContextMenuEvent"/><apiDesc>ContextMenuEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Processes the <codeph>ContextMenuEvent.MENU_SELECT</codeph> event when the client manages events.
		 
		 </apiDesc><example conref="examples\ContainerController_menuSelectHandlerExample.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#ContextMenuEvent/MENU_SELECT"><linktext>ContextMenuEvent.MENU_SELECT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:mouseDoubleClickHandler"><apiName>mouseDoubleClickHandler</apiName><shortdesc> Processes the MouseEvent.DOUBLE_CLICK event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>The MouseEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Processes the <codeph>MouseEvent.DOUBLE_CLICK</codeph> event when the client manages events.
		 
		 </apiDesc><example conref="examples\ContainerController_mouseDoubleClickHandlerExample.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/DOUBLE_CLICK"><linktext>MouseEvent.DOUBLE_CLICK</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:mouseDownHandler"><apiName>mouseDownHandler</apiName><shortdesc> Processes the MouseEvent.MOUSE_DOWN event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>The MouseEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Processes the <codeph>MouseEvent.MOUSE_DOWN</codeph> event when the client manages events. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_DOWN"><linktext>MouseEvent.MOUSE_DOWN</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:mouseMoveHandler"><apiName>mouseMoveHandler</apiName><shortdesc> 
		 Processes the MouseEvent.MOUSE_MOVE event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>The MouseEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Processes the <codeph>MouseEvent.MOUSE_MOVE</codeph> event when the client manages events.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_MOVE"><linktext>MouseEvent.MOUSE_MOVE</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:mouseMoveSomewhere"><apiName>mouseMoveSomewhere</apiName><shortdesc> Client call to forward a mouseMove event from outside a security sandbox.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc> Client call to forward a mouseMove event from outside a security sandbox.  Coordinates of the mouse move are not needed.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:mouseOutHandler"><apiName>mouseOutHandler</apiName><shortdesc> Processes the MouseEvent.MOUSE_OUT event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>The MouseEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Processes the <codeph>MouseEvent.MOUSE_OUT</codeph> event when the client manages events.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_OUT"><linktext>MouseEvent.MOUSE_OUT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:mouseOverHandler"><apiName>mouseOverHandler</apiName><shortdesc> 
		 Processes the MouseEvent.MOUSE_OVER event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>The MouseEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Processes the <codeph>MouseEvent.MOUSE_OVER</codeph> event when the client manages events. 
		 
		 </apiDesc><example conref="examples\ContainerController_mouseOverHandlerExample.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_OVER"><linktext>MouseEvent.MOUSE_OVER</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:mouseUpHandler"><apiName>mouseUpHandler</apiName><shortdesc> 
		 Processes the MouseEvent.MOUSE_UP event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>The MouseEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Processes the <codeph>MouseEvent.MOUSE_UP</codeph> event when the client manages events.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_UP"><linktext>MouseEvent.MOUSE_UP</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:mouseUpSomewhere"><apiName>mouseUpSomewhere</apiName><shortdesc> Client call to forward a mouseUp event from outside a security sandbox.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc> Client call to forward a mouseUp event from outside a security sandbox.  Coordinates of the mouse up are not needed.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:mouseWheelHandler"><apiName>mouseWheelHandler</apiName><shortdesc> Processes the MouseEvent.MOUSE_WHEEL event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>The MouseEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Processes the <codeph>MouseEvent.MOUSE_WHEEL</codeph> event when the client manages events.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_WHEEL"><linktext>MouseEvent.MOUSE_WHEEL</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:protected:removeBackgroundShape"><apiName>removeBackgroundShape</apiName><shortdesc>
		 Removes a flash.display.Shape object on which background shapes (such as background color) are drawn.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>shape</apiItemName><apiType value="flash.display:Shape"/><apiDesc><codeph>flash.display.Shape</codeph> object to remove
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a <codeph>flash.display.Shape</codeph> object on which background shapes (such as background color) are drawn.
		 The default implementation of this method, which may be overriden, removes the object from its <codeph>parent</codeph>.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.Shape.xml"><linktext>flash.display.Shape</linktext></link><link href="" invalidHref="flash.text.engine.TextLine.xml"><linktext>flash.text.engine.TextLine</linktext></link><link href="flashx.textLayout.container.xml#ContainerController/container"><linktext>container</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:protected:removeInlineGraphicElement"><apiName>removeInlineGraphicElement</apiName><shortdesc>
		 Removes a flash.display.DisplayObject object from its parent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>parent</apiItemName><apiType value="flash.display:DisplayObjectContainer"/><apiDesc>the <codeph>flash.display.DisplayObject</codeph> object to remove 
		 
		 </apiDesc></apiParam><apiParam><apiItemName>inlineGraphicElement</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam></apiOperationDef><apiDesc>
		 Removes a <codeph>flash.display.DisplayObject</codeph> object from its parent. 
		 The default implementation of this method, which may be overriden, removes the object
		 from <codeph>container</codeph> if it is a direct child of the latter.
		 
		 This method may be called even if the object is not a descendant of <codeph>parent</codeph>.
		 Any implementation of this method must ensure that no action is taken in this case.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.DisplayObjectContainer.xml"><linktext>flash.display.DisplayObjectContainer</linktext></link><link href="" invalidHref="flash.display.DisplayObject.xml"><linktext>flash.display.DisplayObject</linktext></link><link href="flashx.textLayout.container.xml#ContainerController/container"><linktext>container</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:protected:removeSelectionContainer"><apiName>removeSelectionContainer</apiName><shortdesc>
		 Removes the flash.display.DisplayObjectContainer object which contains selection shapes (such as block selection highlight, cursor etc.).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>selectionContainer</apiItemName><apiType value="flash.display:DisplayObjectContainer"/><apiDesc><codeph>flash.display.DisplayObjectContainer</codeph> object to remove
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes the <codeph>flash.display.DisplayObjectContainer</codeph> object which contains selection shapes (such as block selection highlight, cursor etc.).
		 The default implementation of this method, which may be overriden, removes the object from its parent if one exists.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.DisplayObjectContainer.xml"><linktext>flash.display.DisplayObjectContainer</linktext></link><link href="flashx.textLayout.container.xml#ContainerController/container"><linktext>container</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:protected:removeTextLine"><apiName>removeTextLine</apiName><shortdesc>
		 Removes a flash.text.engine.TextLine object from its parent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>textLine</apiItemName><apiType value="flash.text.engine:TextLine"/><apiDesc>the <codeph>flash.text.engine.TextLine</codeph> object to remove 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a <codeph>flash.text.engine.TextLine</codeph> object from its parent. 
		 The default implementation of this method, which may be overriden, removes the object
		 from <codeph>container</codeph> if it is a direct child of the latter.
		 
		 This method may be called even if the object is not a descendant of <codeph>container</codeph>.
		 Any implementation of this method must ensure that no action is taken in this case.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.text.engine.TextLine.xml"><linktext>flash.text.engine.TextLine</linktext></link><link href="flashx.textLayout.container.xml#ContainerController/container"><linktext>container</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:scrollToRange"><apiName>scrollToRange</apiName><shortdesc> 
		 Scrolls so that the text range is visible in the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/><apiDesc>The end of the selection that is changed when you extend the selection. It can be
		 	either the start or the end of the selection, expressed as an offset from the start of the text flow.
		 </apiDesc></apiParam><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/><apiDesc>  	The stable end of the selection when you extend the selection. It can be either 
		 	the start or the end of the selection.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Scrolls so that the text range is visible in the container.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:selectRange"><apiName>selectRange</apiName><shortdesc> 
		 Sets the range of selected text in a component implementing ITextSupport.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>anchorIndex</apiItemName><apiType value="int"/><apiDesc>The zero-based index value of the character at the anchor end of the selection
		 
		 </apiDesc></apiParam><apiParam><apiItemName>activeIndex</apiItemName><apiType value="int"/><apiDesc>The zero-based index value of the character at the active end of the selection.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Sets the range of selected text in a component implementing ITextSupport.
		 If either of the arguments is out of bounds the selection should not be changed.
		 Components which wish to support inline IME should call into this method.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:setCompositionSize"><apiName>setCompositionSize</apiName><shortdesc> 
		 Sets the width and height allowed for text in the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>w</apiItemName><apiType value="Number"/><apiDesc>The width in pixels that's available for text in the container.  <codeph>NaN</codeph> indicates no specified width.  
		 </apiDesc></apiParam><apiParam><apiItemName>h</apiItemName><apiType value="Number"/><apiDesc>The height in pixels that's available for text in the container.   <codeph>NaN</codeph> indicates no specified height.  
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Sets the width and height allowed for text in the container. Width and height can be specified in pixels or <codeph>NaN</codeph> can be used for either value.  <codeph>NaN</codeph> indicates measure that value. 
		 This can be used to find the widest line and/or the total height of all the content.  When NaN is specified as the width lines are broken with a maximum width of <codeph>TextLine.MAX_LINE_WIDTH</codeph>. 
		 When <codeph>NaN</codeph> is specified as the height the container is assumed to have unlimited height.  The actual measured values can be ready back in <codeph>getContentBounds</codeph>.  
		 When the computed <codeph>blockProgression</codeph> property of <codeph>TextFlow</codeph>
		 is <codeph>BlockProgression.RL</codeph> the meanings of width and height are exchanged.
		 
		 </apiDesc><example conref="examples\ContainerController_setCompositionSizeExample.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.text.engine.xml#TextLine/MAX_LINE_WIDTH"><linktext>flash.text.engine.TextLine.MAX_LINE_WIDTH</linktext></link><link href="flashx.textLayout.formats.xml#BlockProgression"><linktext>flashx.textLayout.formats.BlockProgression</linktext></link><link href="flashx.textLayout.container.xml#ContainerController/getContentBounds()"><linktext>getContentBounds()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:setStyle"><apiName>setStyle</apiName><shortdesc> 
		 Sets the value of the style specified by the styleProp parameter to the value
		 specified by the newValue parameter.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>The name of the style property whose value you want to set.
		 </apiDesc></apiParam><apiParam><apiItemName>newValue</apiItemName><apiType value="any"/><apiDesc>The value that you want to assign to the style.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Sets the value of the style specified by the <codeph>styleProp</codeph> parameter to the value
		 specified by the <codeph>newValue</codeph> parameter.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:softKeyboardActivatingHandler"><apiName>softKeyboardActivatingHandler</apiName><shortdesc> Processes the SoftKeyboardEvent.SOFT_KEYBOARD_ACTIVATING event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc> The SoftKeyboardEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Processes the <codeph>SoftKeyboardEvent.SOFT_KEYBOARD_ACTIVATING</codeph> event when the client manages events.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#SoftKeyboardEvent/SOFT_KEYBOARD_ACTIVATING"><linktext>SoftKeyboardEvent.SOFT_KEYBOARD_ACTIVATING</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:textInputHandler"><apiName>textInputHandler</apiName><shortdesc> Processes the TextEvent.TEXT_INPUT event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:TextEvent"/><apiDesc> The TextEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Processes the <codeph>TextEvent.TEXT_INPUT</codeph> event when the client manages events.
		 
		 </apiDesc><example conref="examples\ContainerController_textInputHandlerExample.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#TextEvent/TEXT_INPUT"><linktext>TextEvent.TEXT_INPUT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:tlf_internal:updateGraphics"><apiName>updateGraphics</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="tlf_internal"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>updateStart</apiItemName><apiType value="int"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:protected:updateVisibleRectangle"><apiName>updateVisibleRectangle</apiName><shortdesc> 
		 If scrolling, sets the scroll rectangle to the container rectangle so that any lines that are 
		 halfway in view are clipped to the scrollable region.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 If scrolling, sets the scroll rectangle to the container rectangle so that any lines that are 
		 halfway in view are clipped to the scrollable region. If not scrolling, clear the
		 scroll rectangle so that no clipping occurs.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="flashx.textLayout.container:ContainerController:ContainerController"><apiName>ContainerController</apiName><shortdesc> 
		 Constructor - creates a ContainerController instance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>container</apiItemName><apiType value="flash.display:Sprite"/><apiDesc>The DisplayObjectContainer in which to manage the text lines.
		 </apiDesc></apiParam><apiParam><apiItemName>compositionWidth</apiItemName><apiType value="Number"/><apiData>100</apiData><apiDesc>The initial width for composing text in the container.
		 </apiDesc></apiParam><apiParam><apiItemName>compositionHeight</apiItemName><apiType value="Number"/><apiData>100</apiData><apiDesc>The initial height for composing text in the container.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Constructor - creates a ContainerController instance. The ContainerController has a default <codeph>compositionWidth</codeph>
		 and <codeph>compositionHeight</codeph> so that some text appears in the container if you don't specify its width
		 height.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.container:TextContainerManager"><apiName>TextContainerManager</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.compose:ISWFContext</apiBaseInterface><apiBaseInterface>flashx.textLayout.edit:IInteractionEventHandler</apiBaseInterface><apiBaseInterface>flashx.textLayout.container:ISandboxSupport</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><example conref="examples\TextContainerManager.as"/></apiClassifierDetail><apiOperation id="flashx.textLayout.container:TextContainerManager:activateHandler"><apiName>activateHandler</apiName><shortdesc> Processes the Event.ACTIVATE event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>The Event object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Processes the <codeph>Event.ACTIVATE</codeph> event when the client manages events.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#Event/ACTIVATE"><linktext>Event.ACTIVATE</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:beginInteraction"><apiName>beginInteraction</apiName><shortdesc> Returns the current ISelectionManager instance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.edit:ISelectionManager</apiOperationClassifier><apiDesc>the interaction manager for this TextContainerManager instance.
		 </apiDesc></apiReturn></apiOperationDef><apiDesc> Returns the current ISelectionManager instance. Converts to TextFlow instance and creates one if necessary. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.edit.xml#ISelectionManager"><linktext>ISelectionManager</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:beginMouseCapture"><apiName>beginMouseCapture</apiName><shortdesc> 
		 Called to request clients to begin the forwarding of mouseup and mousemove events from outside a security sandbox.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Called to request clients to begin the forwarding of mouseup and mousemove events from outside a security sandbox.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:compose"><apiName>compose</apiName><shortdesc> Composes the container text; calls either the factory or updateAllControllers().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> Composes the container text; calls either the factory or <codeph>updateAllControllers()</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:protected:createContextMenu"><apiName>createContextMenu</apiName><shortdesc> Creates a ContextMenu for the TextContainerManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="flash.ui:ContextMenu"/><apiDesc>the created context menu.
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc> Creates a ContextMenu for the TextContainerManager. Use the methods of the ContextMenu 
		  class to add items to the menu. 
		 <p>You can override this method to define a custom context menu.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.ui.ContextMenu.xml"><linktext>ContextMenu</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:protected:createEditManager"><apiName>createEditManager</apiName><shortdesc>Create an edit manager to use for editing.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiOperationClassifier>flashx.textLayout.edit:IEditManager</apiOperationClassifier><apiDesc>the editing manager for this TextContainerManager instance.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>undoManager</apiItemName><apiOperationClassifier>flashx.undo:IUndoManager</apiOperationClassifier><apiDesc>IUndoManager instance for the EditManager being created.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>Create an edit manager to use for editing. Override this method if you have a custom EditManager that you
		 want to use in place of the default.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:protected:createSelectionManager"><apiName>createSelectionManager</apiName><shortdesc>Create a selection manager to use for selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiOperationClassifier>flashx.textLayout.edit:ISelectionManager</apiOperationClassifier><apiDesc>a new SelectionManager instance.
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>Create a selection manager to use for selection. Override this method if you have a custom SelectionManager that you
		 want to use in place of the default.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:deactivateHandler"><apiName>deactivateHandler</apiName><shortdesc> Processes the Event.DEACTIVATE event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>The Event object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Processes the <codeph>Event.DEACTIVATE</codeph> event when the client manages events. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#Event/DEACTIVATE"><linktext>Event.DEACTIVATE</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:drawBackgroundAndSetScrollRect"><apiName>drawBackgroundAndSetScrollRect</apiName><shortdesc>   
		 Returns true if it has filled in the container's scrollRect property.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if it has created the <codeph>scrollRect</codeph> object.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>scrollX</apiItemName><apiType value="Number"/><apiDesc>The starting horizontal position of the scroll rectangle.
		 </apiDesc></apiParam><apiParam><apiItemName>scrollY</apiItemName><apiType value="Number"/><apiDesc>The starting vertical position of the scroll rectangle.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>   
		 Returns <codeph>true</codeph> if it has filled in the container's scrollRect property.  
		 This method enables you to test whether <codeph>scrollRect</codeph> is set without actually accessing the <codeph>scrollRect</codeph> property 
		 which can possibly create a  performance issue. 
		 <p>Override this method to draw a background or a border.  Overriding this method can be tricky as the scrollRect <b>must</b> 
		 be set as specified.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:editHandler"><apiName>editHandler</apiName><shortdesc>
		 Processes an edit event (CUT, COPY, PASTE, SELECT_ALL) when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Event object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Processes an edit event (CUT, COPY, PASTE, SELECT_ALL) when the client manages events.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.Event.xml"><linktext>Event</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:endInteraction"><apiName>endInteraction</apiName><shortdesc> Terminates interaction.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> Terminates interaction. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.edit.xml#ISelectionManager"><linktext>ISelectionManager</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:endMouseCapture"><apiName>endMouseCapture</apiName><shortdesc> 
		 Called to inform clients that the the forwarding of mouseup and mousemove events from outside a security sandbox is no longer needed.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Called to inform clients that the the forwarding of mouseup and mousemove events from outside a security sandbox is no longer needed.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:focusChangeHandler"><apiName>focusChangeHandler</apiName><shortdesc> 
		 Processes the FocusEvent.KEY_FOCUS_CHANGE and FocusEvent.MOUSE_FOCUS_CHANGE events
		 when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/><apiDesc>The FocusEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Processes the <codeph>FocusEvent.KEY_FOCUS_CHANGE</codeph> and <codeph>FocusEvent.MOUSE_FOCUS_CHANGE</codeph> events
		 when the client manages events.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#FocusEvent/KEY_FOCUS_CHANGE"><linktext>FocusEvent.KEY_FOCUS_CHANGE</linktext></link><link href="" invalidHref="flash.events.xml#FocusEvent/MOUSE_FOCUS_CHANGE"><linktext>FocusEvent.MOUSE_FOCUS_CHANGE</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:focusInHandler"><apiName>focusInHandler</apiName><shortdesc> Process a focusIn event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/></apiParam></apiOperationDef><apiDesc> Process a focusIn event.
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:focusOutHandler"><apiName>focusOutHandler</apiName><shortdesc> Processes the FocusEvent.FOCUS_OUT event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/><apiDesc>The FocusEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Processes the <codeph>FocusEvent.FOCUS_OUT</codeph> event when the client manages events.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#FocusEvent/FOCUS_OUT"><linktext>FocusEvent.FOCUS_OUT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:getContentBounds"><apiName>getContentBounds</apiName><shortdesc> Creates a rectangle that shows where the last call to either the compose() 
		 method or the updateContainer() method placed the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.geom:Rectangle"/><apiDesc>the bounds of the content
		 </apiDesc></apiReturn></apiOperationDef><apiDesc> Creates a rectangle that shows where the last call to either the <codeph>compose()</codeph> 
		 method or the <codeph>updateContainer()</codeph> method placed the text.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.container.xml#TextContainerManager/compose()"><linktext>compose()</linktext></link><link href="flashx.textLayout.container.xml#TextContainerManager/updateContainer()"><linktext>updateContainer()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:protected:getFocusedSelectionFormat"><apiName>getFocusedSelectionFormat</apiName><shortdesc> Returns the focusedSelectionFormat - by default get it from the configuration.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiOperationClassifier>flashx.textLayout.edit:SelectionFormat</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> Returns the focusedSelectionFormat - by default get it from the configuration.
		 This can be overridden in the subclass to supply a different SelectionFormat
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:protected:getInactiveSelectionFormat"><apiName>getInactiveSelectionFormat</apiName><shortdesc> Returns the inactiveSelectionFormat - by default get it from the configuration 
		 This can be overridden in the subclass to supply a different SelectionFormat
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiOperationClassifier>flashx.textLayout.edit:SelectionFormat</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> Returns the inactiveSelectionFormat - by default get it from the configuration 
		 This can be overridden in the subclass to supply a different SelectionFormat
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:getLineAt"><apiName>getLineAt</apiName><shortdesc> Return the TextLine at the index from array of composed lines.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.text.engine:TextLine"/><apiDesc>the TextLine that occurs at the specified index.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Finds the line at this index position in the text.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Return the TextLine at the index from array of composed lines.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:getScrollDelta"><apiName>getScrollDelta</apiName><shortdesc> 
		 Figure out the scroll distance required to scroll up or down by the specified number of lines.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>the delta amount of space to scroll
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>numLines</apiItemName><apiType value="int"/><apiDesc>The number of lines to scroll.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Figure out the scroll distance required to scroll up or down by the specified number of lines.
		 Negative numbers scroll upward, bringing more of the top of the TextFlow into view. Positive numbers 
		 scroll downward, bringing the next line from the bottom into full view.
		 
		 <p>When scrolling up, for example, the method makes the next line fully visible. If the next line is partially
		 obscured and the number of lines specified is 1, the partially obscured line becomes fully visible.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:getTextFlow"><apiName>getTextFlow</apiName><shortdesc> The current TextFlow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier><apiDesc>the current TextFlow object
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc> The current TextFlow. Converts this to a full TextFlow representation if it 
		 isn't already one. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:getText"><apiName>getText</apiName><shortdesc>
		 Returns the current text using a separator between paragraphs.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/></apiReturn><apiParam><apiItemName>separator</apiItemName><apiType value="String"/><apiData> </apiData><apiDesc>String to set between paragraphs.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the current text using a separator between paragraphs.
		 The separator can be specified with the <codeph>separator</codeph>
		 argument. The default value of the <codeph>separator</codeph> argument
		 is the Unicode character <codeph>'PARAGRAPH SEPARATOR' (U+2029)</codeph>.
		 
		 <p>Calling the setter discards any attached TextFlow. Any selection is lost.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:protected:getUndoManager"><apiName>getUndoManager</apiName><shortdesc> 
		 Returns the undo manager to use.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiOperationClassifier>flashx.undo:IUndoManager</apiOperationClassifier><apiDesc>new IUndoManager instance.
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc> 
		 Returns the undo manager to use. By default, creates a unique undo manager. 
		 You can override this method in the subclass if you want to customize the undo manager
		 (for example, to use a shared undo manager for multiple TextContainerManager instances).
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:protected:getUnfocusedSelectionFormat"><apiName>getUnfocusedSelectionFormat</apiName><shortdesc> Returns the unfocusedSelectionFormat - by default get it from the configuration 
		 You can override this method in the subclass to supply a different SelectionFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiOperationClassifier>flashx.textLayout.edit:SelectionFormat</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> Returns the unfocusedSelectionFormat - by default get it from the configuration 
		 You can override this method in the subclass to supply a different SelectionFormat.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:imeStartCompositionHandler"><apiName>imeStartCompositionHandler</apiName><shortdesc> Processes the IME_START_COMPOSITION event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:IMEEvent"/><apiDesc> The IMEEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Processes the <codeph>IME_START_COMPOSITION</codeph> event when the client manages events.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#IMEEvent/IME_START_COMPOSITION"><linktext>IMEEvent.IME_START_COMPOSITION</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:invalidateSelectionFormats"><apiName>invalidateSelectionFormats</apiName><shortdesc> Call this if you change the selection formats (SelectionFormat) and want the interactionManager 
		 to update.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> Call this if you change the selection formats (SelectionFormat) and want the interactionManager 
		 to update. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:invalidateUndoManager"><apiName>invalidateUndoManager</apiName><shortdesc> Call this if you are editing, and want to reset the undo manager used for editing.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> Call this if you are editing, and want to reset the undo manager used for editing.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:isDamaged"><apiName>isDamaged</apiName><shortdesc> Returns true if the content needs composing.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if the content needs composing; <codeph>false</codeph> otherwise.
		 </apiDesc></apiReturn></apiOperationDef><apiDesc> Returns <codeph>true</codeph> if the content needs composing. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:keyDownHandler"><apiName>keyDownHandler</apiName><shortdesc> Processes the KeyboardEvent.KEY_DOWN event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:KeyboardEvent"/><apiDesc>KeyboardEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Processes the <codeph>KeyboardEvent.KEY_DOWN</codeph> event when the client manages events.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#KeyboardEvent/KEY_DOWN"><linktext>KeyboardEvent.KEY_DOWN</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:keyFocusChangeHandler"><apiName>keyFocusChangeHandler</apiName><shortdesc> Processes the FocusEvent.KEY_FOCUS_CHANGE event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/><apiDesc>The FocusEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Processes the <codeph>FocusEvent.KEY_FOCUS_CHANGE</codeph> event when the client manages events.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:keyUpHandler"><apiName>keyUpHandler</apiName><shortdesc> Processes the Keyboard.KEY_UP event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:KeyboardEvent"/><apiDesc>The KeyboardEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Processes the <codeph>Keyboard.KEY_UP</codeph> event when the client manages events.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#KeyboardEvent/KEY_UP"><linktext>KeyboardEvent.KEY_UP</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:menuSelectHandler"><apiName>menuSelectHandler</apiName><shortdesc> 
		 Processes the ContextMenuEvent.MENU_SELECT event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:ContextMenuEvent"/><apiDesc>ContextMenuEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Processes the <codeph>ContextMenuEvent.MENU_SELECT</codeph> event when the client manages events.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#ContextMenuEvent/MENU_SELECT"><linktext>ContextMenuEvent.MENU_SELECT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:mouseDoubleClickHandler"><apiName>mouseDoubleClickHandler</apiName><shortdesc> Processes the MouseEvent.DOUBLE_CLICK event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>The MouseEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Processes the <codeph>MouseEvent.DOUBLE_CLICK</codeph> event when the client manages events.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/DOUBLE_CLICK"><linktext>MouseEvent.DOUBLE_CLICK</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:mouseDownHandler"><apiName>mouseDownHandler</apiName><shortdesc> Processes the MouseEvent.MOUSE_DOWN event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>The MouseEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Processes the <codeph>MouseEvent.MOUSE_DOWN</codeph> event when the client manages events. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_DOWN"><linktext>MouseEvent.MOUSE_DOWN</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:mouseMoveHandler"><apiName>mouseMoveHandler</apiName><shortdesc> 
		 Processes the MouseEvent.MOUSE_MOVE event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>The MouseEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Processes the <codeph>MouseEvent.MOUSE_MOVE</codeph> event when the client manages events.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_MOVE"><linktext>MouseEvent.MOUSE_MOVE</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:mouseMoveSomewhere"><apiName>mouseMoveSomewhere</apiName><shortdesc> Client call to forward a mouseMove event from outside a security sandbox.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>e</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc> Client call to forward a mouseMove event from outside a security sandbox.  Coordinates of the mouse move are not needed.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:mouseOutHandler"><apiName>mouseOutHandler</apiName><shortdesc> Processes the MouseEvent.MOUSE_OUT event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>The MouseEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Processes the <codeph>MouseEvent.MOUSE_OUT</codeph> event when the client manages events.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_OUT"><linktext>MouseEvent.MOUSE_OUT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:mouseOverHandler"><apiName>mouseOverHandler</apiName><shortdesc> Process a mouseOver event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/></apiParam></apiOperationDef><apiDesc> Process a mouseOver event.
		</apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_OVER"><linktext>MouseEvent.MOUSE_OVER</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:mouseUpHandler"><apiName>mouseUpHandler</apiName><shortdesc> 
		 Processes the MouseEvent.MOUSE_UP event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>The MouseEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Processes the <codeph>MouseEvent.MOUSE_UP</codeph> event when the client manages events.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_UP"><linktext>MouseEvent.MOUSE_UP</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:mouseUpSomewhere"><apiName>mouseUpSomewhere</apiName><shortdesc> Client call to forward a mouseUp event from outside a security sandbox.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>e</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc> Client call to forward a mouseUp event from outside a security sandbox.  Coordinates of the mouse up are not needed.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:mouseWheelHandler"><apiName>mouseWheelHandler</apiName><shortdesc> Processes the MouseEvent.MOUSE_WHEEL event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>The MouseEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Processes the <codeph>MouseEvent.MOUSE_WHEEL</codeph> event when the client manages events.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_WHEEL"><linktext>MouseEvent.MOUSE_WHEEL</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:resetLine"><apiName>resetLine</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>textLine</apiItemName><apiType value="flash.text.engine:TextLine"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:scrollToRange"><apiName>scrollToRange</apiName><shortdesc> 
		 Scrolls so that the text range is visible in the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/><apiDesc>The end of the selection that is changed when you extend the selection. It can be
		 	either the start or the end of the selection, expressed as an offset from the start of the text flow.
		 </apiDesc></apiParam><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/><apiDesc>  	The stable end of the selection when you extend the selection. It can be either 
		 	the start or the end of the selection.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Scrolls so that the text range is visible in the container.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:setTextFlow"><apiName>setTextFlow</apiName><shortdesc> Sets a TextFlow into this TextContainerManager replacing any existing TextFlow and discarding the 
		 current text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>textFlow</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier></apiParam></apiOperationDef><apiDesc> Sets a TextFlow into this TextContainerManager replacing any existing TextFlow and discarding the 
		 current text. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:setText"><apiName>setText</apiName><shortdesc>
		 Sets the text property to the specified String.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiDesc>the String to set
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Sets the <codeph>text</codeph> property to the specified String.
		 
		 Discards any attached TextFlow. Any selection is lost.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:softKeyboardActivatingHandler"><apiName>softKeyboardActivatingHandler</apiName><shortdesc> Processes the SOFT_KEYBOARD_ACTIVATING event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc> The SoftKeyboardEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Processes the <codeph>SOFT_KEYBOARD_ACTIVATING</codeph> event when the client manages events.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#SoftKeyboardEvent/SOFT_KEYBOARD_ACTIVATING"><linktext>SoftKeyboardEvent.SOFT_KEYBOARD_ACTIVATING</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:textInputHandler"><apiName>textInputHandler</apiName><shortdesc> Processes the TextEvent.TEXT_INPUT event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:TextEvent"/><apiDesc> The TextEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Processes the <codeph>TextEvent.TEXT_INPUT</codeph> event when the client manages events.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#TextEvent/TEXT_INPUT"><linktext>TextEvent.TEXT_INPUT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:updateContainer"><apiName>updateContainer</apiName><shortdesc> Updates the display; calls either the factory or updateAllControllers().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>true if anything changed.
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc> Updates the display; calls either the factory or updateAllControllers().
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="flashx.textLayout.container:TextContainerManager:TextContainerManager"><apiName>TextContainerManager</apiName><shortdesc> Constructor function - creates a TextContainerManager instance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>container</apiItemName><apiType value="flash.display:Sprite"/><apiDesc>The DisplayObjectContainer in which to manage the text lines.
		 </apiDesc></apiParam><apiParam><apiItemName>configuration</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.elements:IConfiguration</apiOperationClassifier><apiDesc>- The IConfiguration instance to use with this TextContainerManager instance. 
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> Constructor function - creates a TextContainerManager instance.
		 
		 For best results:
		 <ol>
		 <li>Start with TextContainerManager.defaultConfiguration and modify it</li>   
		 <li>Share the same Configuration among many InputManagers</li>
		 </ol>
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.container:ISandboxSupport"><apiName>ISandboxSupport</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="flashx.textLayout.container:ISandboxSupport:flashx.textLayout.container:ISandboxSupport:beginMouseCapture"><apiName>beginMouseCapture</apiName><shortdesc> 
		 Called to request clients to begin the forwarding of mouseup and mousemove events from outside a security sandbox.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Called to request clients to begin the forwarding of mouseup and mousemove events from outside a security sandbox.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ISandboxSupport:flashx.textLayout.container:ISandboxSupport:endMouseCapture"><apiName>endMouseCapture</apiName><shortdesc> 
		 Called to inform clients that the the forwarding of mouseup and mousemove events from outside a security sandbox is no longer needed.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Called to inform clients that the the forwarding of mouseup and mousemove events from outside a security sandbox is no longer needed.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ISandboxSupport:flashx.textLayout.container:ISandboxSupport:mouseMoveSomewhere"><apiName>mouseMoveSomewhere</apiName><shortdesc> Client call to forward a mouseMove event from outside a security sandbox.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc> Client call to forward a mouseMove event from outside a security sandbox.  Coordinates of the mouse move are not needed.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ISandboxSupport:flashx.textLayout.container:ISandboxSupport:mouseUpSomewhere"><apiName>mouseUpSomewhere</apiName><shortdesc> Client call to forward a mouseUp event from outside a security sandbox.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc> Client call to forward a mouseUp event from outside a security sandbox.  Coordinates of the mouse up are not needed.
		 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="flashx.textLayout.container:ScrollPolicy"><apiName>ScrollPolicy</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier></apiPackage><apiPackage id="flashx.textLayout.conversion"><apiName>flashx.textLayout.conversion</apiName><apiClassifier id="flashx.textLayout.conversion:IPlainTextExporter"><apiName>IPlainTextExporter</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.conversion:ITextExporter</apiBaseInterface><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="flashx.textLayout.conversion:TextConverter"><apiName>TextConverter</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><example conref="examples\TextConverter_example.as"/></apiClassifierDetail><apiOperation id="flashx.textLayout.conversion:TextConverter:addFormatAt"><apiName>addFormatAt</apiName><shortdesc>
		 Register a new format for import/export, at the specified location.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>   The import converter class to register or null
		 </apiDesc></apiParam><apiParam><apiItemName>format</apiItemName><apiType value="String"/><apiDesc>   The export converter class to register or null
		 </apiDesc></apiParam><apiParam><apiItemName>importerClass</apiItemName><apiType value="Class"/><apiDesc>        The format string tagging the converter classes
		 </apiDesc></apiParam><apiParam><apiItemName>exporterClass</apiItemName><apiType value="Class"/><apiData>null</apiData><apiDesc>The string used as the clipboard format when converting to/from the clipboard. Make this null if the format doesn't support clipboard access.
		 </apiDesc></apiParam><apiParam><apiItemName>clipboardFormat</apiItemName><apiType value="String"/><apiData>null</apiData></apiParam></apiOperationDef><apiDesc>
		 Register a new format for import/export, at the specified location.
		 Location can be significant for clients that have multiple 
		 choices for which format to use, such as when importing from the external clipboard. 
		 Lower numbers indicate higher priority; these converters will be tried first.
		 The new format may support importing and/or exporting.
		 If the format has already been added, then it will be present in multiple locations. The 
		 first one found will be used.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.conversion:TextConverter:addFormat"><apiName>addFormat</apiName><shortdesc>
		 Register a new format for import/export.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>format</apiItemName><apiType value="String"/><apiDesc>   The import converter class to register or null
		 </apiDesc></apiParam><apiParam><apiItemName>importerClass</apiItemName><apiType value="Class"/><apiDesc>   The export converter class to register or null
		 </apiDesc></apiParam><apiParam><apiItemName>exporterClass</apiItemName><apiType value="Class"/><apiDesc>        The format string tagging the converter classes. Formats can be any name, but must be unique. 
		 </apiDesc></apiParam><apiParam><apiItemName>clipboardFormat</apiItemName><apiType value="String"/><apiDesc>The string used as the clipboard format when converting to/from the clipboard. Make this null if the format doesn't support clipboard access.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Register a new format for import/export. The new format will be added at the end,
		 as the lowest priority. Location can be significant for clients that have multiple 
		 choices for which format to use, such as when importing from the external clipboard. 
		 The new format may support importing and/or exporting.
		 If the format has already been added, then it will be present in multiple locations. The 
		 first one found will be used.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.conversion:TextConverter:export"><apiName>export</apiName><shortdesc> 
		 Exports a TextFlow to a specified format.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="Object"/><apiDesc>Object	Exported form of the TextFlow, or null on errors
		 </apiDesc></apiReturn><apiParam><apiItemName>source</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier><apiDesc>Source content
		 </apiDesc></apiParam><apiParam><apiItemName>format</apiItemName><apiType value="String"/><apiDesc>Output format
		 </apiDesc></apiParam><apiParam><apiItemName>conversionType</apiItemName><apiType value="String"/><apiDesc>Type of exported data
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Exports a TextFlow to a specified format. 
		 <p>Use one of the static constants supplied with this class, a MIME type,
		 or a user defined format for user defined exporters to specify 
		 the <codeph>format</codeph> parameter:
		 <ul>
		 <li>TextConverter.TEXT_FIELD_HTML_FORMAT</li>
		 <li>TextConverter.PLAIN_TEXT_FORMAT</li>
		 <li>TextConverter.TEXT_LAYOUT_FORMAT</li>
		 </ul>
		 </p>
		 <p>Specify the type of the exported data in the <codeph>conversionType</codeph> parameter 
		 with one of the static constants supplied by the ConversionType class, or a user defined
		 data type for user defined exporters:
		 <ul>
		 <li>ConversionType.STRING_TYPE</li>
		 <li>ConversionType.XML_TYPE</li>
		 </ul>
		 </p>
		 
		 Returns a representation of the TextFlow in the specified format, or null on errors.
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.conversion.xml#TextConverter/TEXT_FIELD_HTML_FORMAT"><linktext>TEXT_FIELD_HTML_FORMAT</linktext></link><link href="flashx.textLayout.conversion.xml#TextConverter/PLAIN_TEXT_FORMAT"><linktext>PLAIN_TEXT_FORMAT</linktext></link><link href="flashx.textLayout.conversion.xml#TextConverter/TEXT_LAYOUT_FORMAT"><linktext>TEXT_LAYOUT_FORMAT</linktext></link><link href="flashx.textLayout.conversion.xml#ConversionType"><linktext>flashx.textLayout.conversion.ConversionType</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.conversion:TextConverter:getExporter"><apiName>getExporter</apiName><shortdesc> 
		 Creates and returns an export converter, which you can then use to export from 
		 a TextFlow to a source string or XML object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiOperationClassifier>flashx.textLayout.conversion:ITextExporter</apiOperationClassifier><apiDesc>ITextExporter	Text exporter that can export in the specified format
		 </apiDesc></apiReturn><apiParam><apiItemName>format</apiItemName><apiType value="String"/><apiDesc>Target format for exported data
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Creates and returns an export converter, which you can then use to export from 
		 a TextFlow to a source string or XML object. Use this function if 
		 you have many separate exports to perform. It is equivalent to calling 
		 <codeph>flashx.textLayout.conversion.TextConverter.export()</codeph>.
		 <p>Use one of the static constants supplied with this class
		 to specify the <codeph>format</codeph> parameter:
		 <ul>
		 <li>TextConverter.TEXT_FIELD_HTML_FORMAT</li>
		 <li>TextConverter.PLAIN_TEXT_FORMAT</li>
		 <li>TextConverter.TEXT_LAYOUT_FORMAT</li>
		 </ul>
		 </p>
		 <p>If the format has been added multiple times, the first one found will be used.</p>
		 </apiDesc><example conref="examples\getExporter_example.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.conversion.xml#TextConverter/TEXT_FIELD_HTML_FORMAT"><linktext>TEXT_FIELD_HTML_FORMAT</linktext></link><link href="flashx.textLayout.conversion.xml#TextConverter/PLAIN_TEXT_FORMAT"><linktext>PLAIN_TEXT_FORMAT</linktext></link><link href="flashx.textLayout.conversion.xml#TextConverter/TEXT_LAYOUT_FORMAT"><linktext>TEXT_LAYOUT_FORMAT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.conversion:TextConverter:getFormatAt"><apiName>getFormatAt</apiName><shortdesc> Returns the format name for the index'th format.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="String"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc> Returns the format name for the index'th format.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.conversion:TextConverter:getFormatDescriptorAt"><apiName>getFormatDescriptorAt</apiName><shortdesc> Returns the FormatDescriptor for the index'th format.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiOperationClassifier>flashx.textLayout.conversion:FormatDescriptor</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc> Returns the FormatDescriptor for the index'th format. 
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.conversion:TextConverter:getImporter"><apiName>getImporter</apiName><shortdesc> 
		 Creates and returns an import converter, which you can then use to import from a 
		 source string, an XML object, or any user defined data formats to a TextFlow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiOperationClassifier>flashx.textLayout.conversion:ITextImporter</apiOperationClassifier><apiDesc>ITextImporter	Text importer that can import the source data
		 </apiDesc></apiReturn><apiParam><apiItemName>format</apiItemName><apiType value="String"/><apiDesc>Format of source content. Use constants from 
		 					flashx.textLayout.conversion.TextConverter.TEXT_LAYOUT_FORMAT, PLAIN_TEXT_FORMAT, TEXT_FIELD_HTML_FORMAT etc,
		 					a MIME type, or a user defined format.
		 </apiDesc></apiParam><apiParam><apiItemName>config</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.elements:IConfiguration</apiOperationClassifier><apiDesc>   configuration to use during this import. null means take the current default.
		 					You can also set the configuration via the <codeph>ITextImporter.configuration</codeph>
		 					property.
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Creates and returns an import converter, which you can then use to import from a 
		 source string, an XML object, or any user defined data formats to a TextFlow. 
		 Use this method if you have many separate imports to perform, or if you want to 
		 handle errors during import. It is equivalent to calling 
		 <codeph>flashx.textLayout.conversion.TextConverter.importToFlow()</codeph>.
		 <p>Use one of the static constants supplied with this class
		 to specify the <codeph>format</codeph> parameter, a MIME type, or a user defined
		 data format.
		 <ul>
		 <li>TextConverter.TEXT_FIELD_HTML_FORMAT</li>
		 <li>TextConverter.PLAIN_TEXT_FORMAT</li>
		 <li>TextConverter.TEXT_LAYOUT_FORMAT</li>
		 </ul>
		 </p>
		 <p>If the format has been added multiple times, the first one found will be used.</p>
		 </apiDesc><example conref="examples\getImporter_example.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.conversion.xml#TextConverter/TEXT_FIELD_HTML_FORMAT"><linktext>TEXT_FIELD_HTML_FORMAT</linktext></link><link href="flashx.textLayout.conversion.xml#TextConverter/PLAIN_TEXT_FORMAT"><linktext>PLAIN_TEXT_FORMAT</linktext></link><link href="flashx.textLayout.conversion.xml#TextConverter/TEXT_LAYOUT_FORMAT"><linktext>TEXT_LAYOUT_FORMAT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.conversion:TextConverter:importToFlow"><apiName>importToFlow</apiName><shortdesc> 
		 Creates a TextFlow from source content in a specified format.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier><apiDesc>TextFlow that was created from the source, or null on errors.
		 </apiDesc></apiReturn><apiParam><apiItemName>source</apiItemName><apiType value="Object"/><apiDesc>Source content
		 </apiDesc></apiParam><apiParam><apiItemName>format</apiItemName><apiType value="String"/><apiDesc>Format of source content
		 </apiDesc></apiParam><apiParam><apiItemName>config</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.elements:IConfiguration</apiOperationClassifier><apiDesc>   IConfiguration to use when creating new TextFlows
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Creates a TextFlow from source content in a specified format.
		 <p>Use one of the static constants supplied with this class, a MIME type,
		 to specify the <codeph>format</codeph> parameter, or use a user defined
		 value for user-registered importers:
		 <ul>
		 <li>TextConverter.TEXT_FIELD_HTML_FORMAT</li>
		 <li>TextConverter.PLAIN_TEXT_FORMAT</li>
		 <li>TextConverter.TEXT_LAYOUT_FORMAT</li>
		 </ul>
		 </p>
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.conversion.xml#TextConverter/TEXT_FIELD_HTML_FORMAT"><linktext>TEXT_FIELD_HTML_FORMAT</linktext></link><link href="flashx.textLayout.conversion.xml#TextConverter/PLAIN_TEXT_FORMAT"><linktext>PLAIN_TEXT_FORMAT</linktext></link><link href="flashx.textLayout.conversion.xml#TextConverter/TEXT_LAYOUT_FORMAT"><linktext>TEXT_LAYOUT_FORMAT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.conversion:TextConverter:removeFormatAt"><apiName>removeFormatAt</apiName><shortdesc>
		 Remove the format at the index location.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>    The format to remove
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Remove the format at the index location. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.conversion:TextConverter:removeFormat"><apiName>removeFormat</apiName><shortdesc>
		 Remove the format.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>format</apiItemName><apiType value="String"/><apiDesc>    The converter format string to remove
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Remove the format. 
		 If a format was added multiple times, only the first one found is removed.
		 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="flashx.textLayout.conversion:ITextLayoutImporter"><apiName>ITextLayoutImporter</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.conversion:ITextImporter</apiBaseInterface><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="flashx.textLayout.conversion:ITextImporter"><apiName>ITextImporter</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><example conref="examples\ITextImporterExample.as"/></apiClassifierDetail><apiOperation id="flashx.textLayout.conversion:ITextImporter:flashx.textLayout.conversion:ITextImporter:importToFlow"><apiName>importToFlow</apiName><shortdesc> 
         Import text content from an external source and convert it into a TextFlow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier><apiDesc>TextFlow Created from the source.
         
         </apiDesc></apiReturn><apiParam><apiItemName>source</apiItemName><apiType value="Object"/><apiDesc>       The data to convert.
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Import text content from an external source and convert it into a TextFlow.
         </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="flashx.textLayout.conversion:PlainTextExporter"><apiName>PlainTextExporter</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.conversion:IPlainTextExporter</apiBaseInterface><apiBaseClassifier>flashx.textLayout.conversion:ConverterBase</apiBaseClassifier></apiClassifierDef><example conref="examples\PlainTextExporter_example.as"/></apiClassifierDetail><apiOperation id="flashx.textLayout.conversion:PlainTextExporter:export"><apiName>export</apiName><shortdesc> 
		 Export text content from a TextFlow instance in String, or XML, or a user defined format.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Object"/><apiDesc>Object	The exported content
		 </apiDesc></apiReturn><apiParam><apiItemName>source</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier><apiDesc>The TextFlow to export
		 </apiDesc></apiParam><apiParam><apiItemName>conversionType</apiItemName><apiType value="String"/><apiDesc>	Return a String (STRING_TYPE) or XML (XML_TYPE), or any user defined format.
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Export text content from a TextFlow instance in String, or XML, or a user defined format.
		 <p>Set the <codeph>conversionType</codeph> parameter to either of the following values,
		 or a user defined format in user-defined exporters.
		 <ul>
		   <li><codeph>flashx.textLayout.conversion.ConversionType.STRING_TYPE</codeph>;</li>
		   <li><codeph>flashx.textLayout.conversion.ConversionType.XML_TYPE</codeph>.</li>
		 </ul>
		 </p>
		 </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="flashx.textLayout.conversion:PlainTextExporter:PlainTextExporter"><apiName>PlainTextExporter</apiName><shortdesc>
		 Constructor 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
		 Constructor 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.conversion:IHTMLImporter"><apiName>IHTMLImporter</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.conversion:ITextImporter</apiBaseInterface><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="flashx.textLayout.conversion:ConversionType"><apiName>ConversionType</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="flashx.textLayout.conversion:ITextExporter"><apiName>ITextExporter</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="flashx.textLayout.conversion:ITextExporter:flashx.textLayout.conversion:ITextExporter:export"><apiName>export</apiName><shortdesc> 
		 Export text content from a TextFlow instance in String, or XML, or a user defined format.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Object"/><apiDesc>Object	The exported content
		 </apiDesc></apiReturn><apiParam><apiItemName>source</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier><apiDesc>The TextFlow to export
		 </apiDesc></apiParam><apiParam><apiItemName>conversionType</apiItemName><apiType value="String"/><apiDesc>	Return a String (STRING_TYPE) or XML (XML_TYPE), or any user defined format.
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Export text content from a TextFlow instance in String, or XML, or a user defined format.
		 <p>Set the <codeph>conversionType</codeph> parameter to either of the following values,
		 or a user defined format in user-defined exporters.
		 <ul>
		   <li><codeph>flashx.textLayout.conversion.ConversionType.STRING_TYPE</codeph>;</li>
		   <li><codeph>flashx.textLayout.conversion.ConversionType.XML_TYPE</codeph>.</li>
		 </ul>
		 </p>
		 </apiDesc><example conref="examples\ITextExporterExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.conversion.xml#ConversionType"><linktext>flashx.textLayout.conversion.ConversionType</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="flashx.textLayout.conversion:FormatDescriptor"><apiName>FormatDescriptor</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="flashx.textLayout.conversion:FormatDescriptor:FormatDescriptor"><apiName>FormatDescriptor</apiName><shortdesc> Constructor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.0"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>format</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>importerClass</apiItemName><apiType value="Class"/></apiParam><apiParam><apiItemName>exporterClass</apiItemName><apiType value="Class"/></apiParam><apiParam><apiItemName>clipboardFormat</apiItemName><apiType value="String"/></apiParam></apiConstructorDef><apiDesc> Constructor.
         
         </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.conversion:ConverterBase"><apiName>ConverterBase</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier></apiPackage><apiPackage id="flashx.textLayout.edit"><apiName>flashx.textLayout.edit</apiName><apiClassifier id="flashx.textLayout.edit:SelectionManager"><apiName>SelectionManager</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.edit:ISelectionManager</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><example conref="examples\SelectionManager_example.as"/></apiClassifierDetail><apiOperation id="flashx.textLayout.edit:SelectionManager:activateHandler"><apiName>activateHandler</apiName><shortdesc> 
		 Processes an activate event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc> 
		 Processes an activate event.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:deactivateHandler"><apiName>deactivateHandler</apiName><shortdesc> 
		 Processes a deactivate event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc> 
		 Processes a deactivate event.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:doOperation"><apiName>doOperation</apiName><shortdesc> Perform a SelectionManager operation - these may never modify the flow but clients still are able to cancel them.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>op</apiItemName><apiOperationClassifier>flashx.textLayout.operations:FlowOperation</apiOperationClassifier></apiParam></apiOperationDef><apiDesc> Perform a SelectionManager operation - these may never modify the flow but clients still are able to cancel them. 
          
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:editHandler"><apiName>editHandler</apiName><shortdesc> 
		 Processes an edit event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc> 
		 Processes an edit event.
		 
		 <p>Edit events are dispatched for cut, copy, paste, and selectAll commands.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:flushPendingOperations"><apiName>flushPendingOperations</apiName><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:focusChangeHandler"><apiName>focusChangeHandler</apiName><shortdesc> 
		 Processes a focusChange event.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/></apiParam></apiOperationDef><apiDesc> 
		 Processes a focusChange event.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:focusInHandler"><apiName>focusInHandler</apiName><shortdesc> 
		 Processes a focusIn event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/></apiParam></apiOperationDef><apiDesc> 
		 Processes a focusIn event.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:focusOutHandler"><apiName>focusOutHandler</apiName><shortdesc> 
		 Processes a focusOut event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/></apiParam></apiOperationDef><apiDesc> 
		 Processes a focusOut event.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:getCommonCharacterFormat"><apiName>getCommonCharacterFormat</apiName><shortdesc>
		 Gets the character format attributes that are common to all characters in the specified text range or current selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.formats:TextLayoutFormat</apiOperationClassifier><apiDesc>The common character style settings
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>range</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.elements:TextRange</apiOperationClassifier><apiDesc>The optional range of text for which common attributes are requested. If null, the current selection is used. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Gets the character format attributes that are common to all characters in the specified text range or current selection.
		 
		 <p>Format attributes that do not have the same value for all characters in the specified element range or selection are set to 
		 <codeph>null</codeph> in the returned TextLayoutFormat instance.</p>
		 
		 </apiDesc><example conref="examples\SelectionManager_getCommonCharacterFormat.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:getCommonContainerFormat"><apiName>getCommonContainerFormat</apiName><shortdesc>
		 Gets the container format attributes that are common to all containers in the specified text range or current selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.formats:TextLayoutFormat</apiOperationClassifier><apiDesc>The common container style settings
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>range</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.elements:TextRange</apiOperationClassifier><apiDesc>The optional range of text for which common attributes are requested. If null, the current selection is used. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Gets the container format attributes that are common to all containers in the specified text range or current selection.
		 
		 <p>Format attributes that do not have the same value for all containers in the specified element range or selection are set to 
		 <codeph>null</codeph> in the returned TextLayoutFormat instance.</p>
		 
		 </apiDesc><example conref="examples\SelectionManager_getCommonContainerFormat.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:getCommonParagraphFormat"><apiName>getCommonParagraphFormat</apiName><shortdesc>
		 Gets the paragraph format attributes that are common to all paragraphs in the specified text range or current selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.formats:TextLayoutFormat</apiOperationClassifier><apiDesc>The common paragraph style settings
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>range</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.elements:TextRange</apiOperationClassifier><apiDesc>The optional range of text for which common attributes are requested. If null, the current selection is used. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Gets the paragraph format attributes that are common to all paragraphs in the specified text range or current selection.
		 
		 <p>Format attributes that do not have the same value for all paragraphs in the specified element range or selection are set to 
		 <codeph>null</codeph> in the returned TextLayoutFormat instance.</p>
		 
		 </apiDesc><example conref="examples\SelectionManager_getCommonParagraphFormat.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:getSelectionState"><apiName>getSelectionState</apiName><shortdesc>
		 Gets the SelectionState object of the current selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Gets the SelectionState object of the current selection.
		 
		 </apiDesc><example conref="examples\SelectionManager_getSelectionState.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.edit.xml#SelectionState"><linktext>flashx.textLayout.edit.SelectionState</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:hasSelection"><apiName>hasSelection</apiName><shortdesc>
		 Indicates whether there is a selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
		 Indicates whether there is a selection. 
		 
		 <p>Returns <codeph>true</codeph> if there is either a range selection or a point selection. 
		 By default, when a selection manager is first set up, there is no selection (the start and end are -1).</p>
		 
		 </apiDesc><example conref="examples\SelectionManager_hasSelection.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:imeStartCompositionHandler"><apiName>imeStartCompositionHandler</apiName><shortdesc> 
		 Processes an imeStartComposition event
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:IMEEvent"/></apiParam></apiOperationDef><apiDesc> 
		 Processes an imeStartComposition event
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:isRangeSelection"><apiName>isRangeSelection</apiName><shortdesc>
		 Indicates whether the selection covers a range of text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
		 Indicates whether the selection covers a range of text.
		 
		 <p>Returns <codeph>true</codeph> if there is a selection that extends past a single position.</p> 
		 
		 </apiDesc><example conref="examples\SelectionManager_isRangeSelection.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:keyDownHandler"><apiName>keyDownHandler</apiName><shortdesc> 
		Processes a keyDown event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:KeyboardEvent"/></apiParam></apiOperationDef><apiDesc> 
		Processes a keyDown event.
		 
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:keyFocusChangeHandler"><apiName>keyFocusChangeHandler</apiName><shortdesc> 
		Processes a keyFocusChange event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/></apiParam></apiOperationDef><apiDesc> 
		Processes a keyFocusChange event.
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:keyUpHandler"><apiName>keyUpHandler</apiName><shortdesc> 
		Processes a keyUp event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:KeyboardEvent"/></apiParam></apiOperationDef><apiDesc> 
		Processes a keyUp event.
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:menuSelectHandler"><apiName>menuSelectHandler</apiName><shortdesc> 
		 Processes a menuSelect event.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:ContextMenuEvent"/></apiParam></apiOperationDef><apiDesc> 
		 Processes a menuSelect event.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:mouseDoubleClickHandler"><apiName>mouseDoubleClickHandler</apiName><shortdesc> 
		 Processes a mouseDoubleClick event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/></apiParam></apiOperationDef><apiDesc> 
		 Processes a mouseDoubleClick event.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:mouseDownHandler"><apiName>mouseDownHandler</apiName><shortdesc> 
		 Processes a mouseDown event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/></apiParam></apiOperationDef><apiDesc> 
		 Processes a mouseDown event.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:mouseMoveHandler"><apiName>mouseMoveHandler</apiName><shortdesc> 
		 Processes a mouseMove event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/></apiParam></apiOperationDef><apiDesc> 
		 Processes a mouseMove event.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:mouseOutHandler"><apiName>mouseOutHandler</apiName><shortdesc> 
		 Processes a mouseOut event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/></apiParam></apiOperationDef><apiDesc> 
		 Processes a mouseOut event.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:mouseOverHandler"><apiName>mouseOverHandler</apiName><shortdesc> 
		 Processes a mouseOver event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/></apiParam></apiOperationDef><apiDesc> 
		 Processes a mouseOver event.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:mouseUpHandler"><apiName>mouseUpHandler</apiName><shortdesc> 
		 Processes a mouseUp event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/></apiParam></apiOperationDef><apiDesc> 
		 Processes a mouseUp event.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:mouseWheelHandler"><apiName>mouseWheelHandler</apiName><shortdesc> 
		 Processes a mouseWheel event.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/></apiParam></apiOperationDef><apiDesc> 
		 Processes a mouseWheel event.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:notifyInsertOrDelete"><apiName>notifyInsertOrDelete</apiName><shortdesc> 
		 Updates the selection manager when text is inserted or deleted.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>absolutePosition</apiItemName><apiType value="int"/><apiDesc>The point in the text where the change was made.
		 </apiDesc></apiParam><apiParam><apiItemName>length</apiItemName><apiType value="int"/><apiDesc>A positive or negative number indicating how many characters were inserted or deleted.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Updates the selection manager when text is inserted or deleted.
		 
		 <p>Operations must call <codeph>notifyInsertOrDelete</codeph> when changing the text in the text flow. 
		 The selection manager adjusts index-based position indicators accordingly. If you create a new Operation
		 class that changes text in a text flow directly (not using another operation) your operation must call this function 
		 to keep the selection up to date.</p>
		 
		 </apiDesc><example conref="examples\SelectionManager_notifyInsertOrDelete.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:refreshSelection"><apiName>refreshSelection</apiName><shortdesc> 
		 Redisplays the selection shapes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Redisplays the selection shapes. 
		 
		 <p><b>Note:</b> You do not need to call this method directly. It is called automatically.</p>	
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:selectAll"><apiName>selectAll</apiName><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc/></apiOperationDetail><related-links><link href="flashx.textLayout.compose.xml#IFlowComposer"><linktext>flashx.textLayout.compose.IFlowComposer</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:selectRange"><apiName>selectRange</apiName><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc/><example conref="examples\SelectionManager_selectRange.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.compose.xml#IFlowComposer"><linktext>flashx.textLayout.compose.IFlowComposer</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:setFocus"><apiName>setFocus</apiName><shortdesc> 
		 Gives the focus to the first container in the selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Gives the focus to the first container in the selection.
		  
		 </apiDesc><example conref="examples\SelectionManager_setFocus.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:protected:setMouseCursor"><apiName>setMouseCursor</apiName><shortdesc> 
         Set the Mouse cursor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cursor</apiItemName><apiType value="String"/><apiDesc>   New cursor value, MouseCursor.AUTO if mouse is going off text, MouseCursor.IBEAM if mouse is going into text
         
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Set the Mouse cursor. 
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:setSelectionState"><apiName>setSelectionState</apiName><shortdesc>
		 Sets the SelectionState object of the current selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>sel</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier></apiParam></apiOperationDef><apiDesc>
		 Sets the SelectionState object of the current selection.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.edit.xml#SelectionState"><linktext>flashx.textLayout.edit.SelectionState</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:softKeyboardActivatingHandler"><apiName>softKeyboardActivatingHandler</apiName><shortdesc> 
		 Processes an softKeyboardActivating event
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc> 
		 Processes an softKeyboardActivating event
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:SelectionManager:textInputHandler"><apiName>textInputHandler</apiName><shortdesc> 
		 Processes a TextEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:TextEvent"/></apiParam></apiOperationDef><apiDesc> 
		 Processes a TextEvent.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="flashx.textLayout.edit:SelectionManager:SelectionManager"><apiName>SelectionManager</apiName><shortdesc> 
         
         Creates a SelectionManager object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> 
         
         Creates a SelectionManager object.
         
         <p>Assign a SelectionManager object to the <codeph>interactionManager</codeph> property of
         a text flow to enable text selection.</p>
         
         </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.edit:TextScrap"><apiName>TextScrap</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="flashx.textLayout.edit:TextScrap:clone"><apiName>clone</apiName><shortdesc>
		 Creates a duplicate copy of this TextScrap object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.edit:TextScrap</apiOperationClassifier><apiDesc>TextScrap A copy of this TextScrap.
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Creates a duplicate copy of this TextScrap object.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:TextScrap:createTextScrap"><apiName>createTextScrap</apiName><shortdesc>
		 Creates a TextScrap object from a range of text represented by a TextRange object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiOperationClassifier>flashx.textLayout.edit:TextScrap</apiOperationClassifier></apiReturn><apiParam><apiItemName>range</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextRange</apiOperationClassifier><apiDesc>the TextRange object representing the range of text to copy.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Creates a TextScrap object from a range of text represented by a TextRange object.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:TextScrap:tlf_internal:isPlainText"><apiName>isPlainText</apiName><shortdesc> 
		 Returns true if the text is plain text (not formatted)
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="tlf_internal"/><apiReturn><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc> 
		 Returns true if the text is plain text (not formatted)
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:TextScrap:tlf_internal:setPlainText"><apiName>setPlainText</apiName><shortdesc> Marks the TextScrap's content as being either plain or formatted </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="tlf_internal"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>plainText</apiItemName><apiType value="Boolean"/></apiParam></apiOperationDef><apiDesc> Marks the TextScrap's content as being either plain or formatted </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="flashx.textLayout.edit:TextScrap:TextScrap"><apiName>TextScrap</apiName><shortdesc>
		 Creates a TextScrap object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>textFlow</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier><apiDesc>if set, the new TextScrap object contains the entire text flow.
		 Otherwise, the TextScrap object is empty.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Creates a TextScrap object.
		 
		 <p>Use the <codeph>createTextScrap()</codeph> method to create a TextScrap object from
		 a range of text represented by a TextRange object.</p>
		  
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.edit:ElementRange"><apiName>ElementRange</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="flashx.textLayout.edit:ElementRange:createElementRange"><apiName>createElementRange</apiName><shortdesc> 
	 Creates an ElementRange object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiOperationClassifier>flashx.textLayout.edit:ElementRange</apiOperationClassifier></apiReturn><apiParam><apiItemName>textFlow</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier><apiDesc>the text flow
	 </apiDesc></apiParam><apiParam><apiItemName>absoluteStart</apiItemName><apiType value="int"/><apiDesc>absolute text position of the first character in the text range
	 </apiDesc></apiParam><apiParam><apiItemName>absoluteEnd</apiItemName><apiType value="int"/><apiDesc>one beyond the absolute text position of the last character in the text range
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc> 
	 Creates an ElementRange object.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:ElementRange:getCommonCharacterFormat"><apiName>getCommonCharacterFormat</apiName><shortdesc>
	 Gets the character format attributes that are common to all characters in the text range or current selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.formats:TextLayoutFormat</apiOperationClassifier><apiDesc>The common character style settings
	 
	 </apiDesc></apiReturn></apiOperationDef><apiDesc>
	 Gets the character format attributes that are common to all characters in the text range or current selection.
	 
	 <p>Format attributes that do not have the same value for all characters in the element range are set to 
	 <codeph>null</codeph> in the returned TextLayoutFormat instance.</p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:ElementRange:getCommonContainerFormat"><apiName>getCommonContainerFormat</apiName><shortdesc>
		 Gets the container format attributes that are common to all containers in the element range.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.formats:TextLayoutFormat</apiOperationClassifier><apiDesc>The common paragraph style settings
	 
	 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Gets the container format attributes that are common to all containers in the element range.
	 
	 <p>Format attributes that do not have the same value for all containers in the element range are set to 
	 <codeph>null</codeph> in the returned TextLayoutFormat instance.</p>
	 	 
	 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.edit.xml#ISelectionManager/getCommonParagraphFormat"><linktext>flashx.textLayout.edit.ISelectionManager.getCommonParagraphFormat</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.edit:ElementRange:getCommonParagraphFormat"><apiName>getCommonParagraphFormat</apiName><shortdesc>
	 Gets the paragraph format attributes that are common to all paragraphs in the element range.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.formats:TextLayoutFormat</apiOperationClassifier><apiDesc>The common paragraph style settings
	 
	 </apiDesc></apiReturn></apiOperationDef><apiDesc>
	 Gets the paragraph format attributes that are common to all paragraphs in the element range.
	 
	 <p>Format attributes that do not have the same value for all paragraphs in the element range are set to 
	 <codeph>null</codeph> in the returned TextLayoutFormat instance.</p>
	 	 
	 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.edit.xml#ISelectionManager/getCommonParagraphFormat"><linktext>flashx.textLayout.edit.ISelectionManager.getCommonParagraphFormat</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="flashx.textLayout.edit:SelectionState"><apiName>SelectionState</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.elements:TextRange</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="flashx.textLayout.edit:SelectionState:updateRange"><apiName>updateRange</apiName><shortdesc> 
		 Updates the selection range with new anchor or active position values.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="Boolean"/><apiDesc>true if selection is changed
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>newAnchorPosition</apiItemName><apiType value="int"/><apiDesc>the anchor index of the selection.
		 </apiDesc></apiParam><apiParam><apiItemName>newActivePosition</apiItemName><apiType value="int"/><apiDesc>the active index of the selection.
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Updates the selection range with new anchor or active position values.  
		 
		 <p>The <codeph>pointFormat</codeph> styles are cleared if the selection is changed.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="flashx.textLayout.edit:SelectionState:SelectionState"><apiName>SelectionState</apiName><shortdesc> 
		 Creates a SelectionState object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>root</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier><apiDesc>The TextFlow associated with the selection.
		 </apiDesc></apiParam><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/><apiDesc>The anchor index of the selection.
		 </apiDesc></apiParam><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/><apiDesc>The active index of the selection.
		 </apiDesc></apiParam><apiParam><apiItemName>format</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>The TextLayoutFormat to be applied on next character typed when a point selection
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Creates a SelectionState object.
		 
		 <p><b>Note:</b> Do not construct a SelectionState object in order to create a selection. To
		 create a selection in a text flow, call the <codeph>setSelection()</codeph> method of the relevant
		 ISelectionManager instance (which is the SelectionManager or EditManager object assigned 
		 to the <codeph>interactionManager</codeph> property of the text flow).</p>
		 
		 </apiDesc></apiConstructorDetail><related-links><link href="flashx.textLayout.edit.xml#ISelectionManager/getSelectionState()"><linktext>flashx.textLayout.edit.ISelectionManager.getSelectionState()</linktext></link><link href="flashx.textLayout.edit.xml#SelectionManager"><linktext>flashx.textLayout.edit.SelectionManager</linktext></link><link href="flashx.textLayout.edit.xml#EditManager"><linktext>flashx.textLayout.edit.EditManager</linktext></link></related-links></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.edit:IEditManager"><apiName>IEditManager</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.edit:ISelectionManager</apiBaseInterface><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:applyContainerFormat"><apiName>applyContainerFormat</apiName><shortdesc> 
         Applies container styles to any containers in the selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>format</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>   The format to apply to the containers in the range
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Applies container styles to any containers in the selection.
         
         <p>Any style properties in the format object that are <codeph>null</codeph> are left unchanged.</p> 
         
         </apiDesc><example conref="examples\EditManager_applyContainerFormat.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:applyFormatToElement"><apiName>applyFormatToElement</apiName><shortdesc> 
         Applies styles to the specified element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>targetElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>The element to which the styles are applied.
         </apiDesc></apiParam><apiParam><apiItemName>format</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc> The format containing the styles to apply.
         </apiDesc></apiParam><apiParam><apiItemName>relativeStart</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>An offset from the beginning of the element at which to split the element when assigning the new formatting.
         </apiDesc></apiParam><apiParam><apiItemName>relativeEnd</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>An offset from the beginning of the element at which to split the element when applying the new formatting.
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Applies styles to the specified element.
         
         <p>Any style properties in the format object that are <codeph>null</codeph> are left unchanged.
         Only styles that are relevant to the specified element are applied.</p> 
         
         </apiDesc><example conref="examples\EditManager_applyFormatToElement.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:applyFormat"><apiName>applyFormat</apiName><shortdesc> 
         Changes the formats of the specified (or current) selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>leafFormat</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>   The format to apply to leaf elements such as spans and inline graphics.
         </apiDesc></apiParam><apiParam><apiItemName>paragraphFormat</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>  The format to apply to paragraph elements.
         </apiDesc></apiParam><apiParam><apiItemName>containerFormat</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>  The format to apply to the containers.
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Changes the formats of the specified (or current) selection.
         
         <p>Executes an undoable operation that applies the new formats.
         Only style attributes set for the TextLayoutFormat objects are applied.
         Undefined attributes in the format objects are not changed.
         </p>
         
         </apiDesc><example conref="examples\EditManager_applyFormat.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:applyLeafFormat"><apiName>applyLeafFormat</apiName><shortdesc> 
         Changes the format applied to the leaf elements in the 
         specified (or current) selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>format</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>   The format to apply.
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Changes the format applied to the leaf elements in the 
         specified (or current) selection.
         
         <p>Executes an undoable operation that applies the new format to leaf elements such as
         SpanElement and InlineGraphicElement objects.
         Only style attributes set for the TextLayoutFormat objects are applied.
         Undefined attributes in the format object are changed.</p>
         
         </apiDesc><example conref="examples\EditManager_applyLeafFormat.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:applyLink"><apiName>applyLink</apiName><shortdesc> 
         Transforms a selection into a link, or a link into normal text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.elements:LinkElement</apiOperationClassifier><apiDesc>The LinkElement that was created.
         
         </apiDesc></apiReturn><apiParam><apiItemName>href</apiItemName><apiType value="String"/><apiDesc>The uri referenced by the link.
         </apiDesc></apiParam><apiParam><apiItemName>target</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>The target browser window of the link.
         </apiDesc></apiParam><apiParam><apiItemName>extendToLinkBoundary</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Specifies whether to consolidate selection with any overlapping existing links, and then apply the change.
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Transforms a selection into a link, or a link into normal text.
         
         <p>Executes an undoable operation that creates or removes the link.</p>
         
          <p>If a <codeph>target</codeph> parameter is specified, it must be one of the following values:</p>
         <ul>
          <li>"_self"</li>
          <li>"_blank"</li>
          <li>"_parent"</li>
          <li>"_top"</li>
         </ul>
         <p>In browser-hosted runtimes, a target of "_self" replaces the current html page.  
         So, if the SWF content containing the link is in a page within
         a frame or frameset, the linked content loads within that frame.  If the page 
         is at the top level, the linked content opens to replace the original page.  
         A target of "_blank" opens a new browser window with no name.  
         A target of "_parent" replaces the parent of the html page containing the SWF content.  
         A target of "_top" replaces the top-level page in the current browser window.</p>
         
         <p>In other runtimes, such as Adobe AIR, the link opens in the user's default browser and the
         <codeph>target</codeph> parameter is ignored.</p>
         
         <p>The <codeph>extendToLinkBoundary</codeph> parameter determines how the edit manager 
         treats a selection that intersects with one or more existing links. If the parameter is 
         <codeph>true</codeph>, then the operation is applied as a unit to the selection and the
         whole text of the existing links. Thus, a single link is created that spans from
         the beginning of the first link intersected to the end of the last link intersected.
         In contrast, if <codeph>extendToLinkBoundary</codeph> were <codeph>false</codeph> in this situation, 
         the existing partially selected links would be split into two links.</p>
         
         </apiDesc><example conref="examples\EditManager_applyLink.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#LinkElement"><linktext>flashx.textLayout.elements.LinkElement</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:applyParagraphFormat"><apiName>applyParagraphFormat</apiName><shortdesc> 
         Applies paragraph styles to any paragraphs in the selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>format</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>The format to apply to the selected paragraphs.
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Applies paragraph styles to any paragraphs in the selection.
         
         <p>Any style properties in the format object that are <codeph>null</codeph> are left unchanged.</p> 
         
         </apiDesc><example conref="examples\EditManager_applyParagraphFormat.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:applyTCY"><apiName>applyTCY</apiName><shortdesc> 
         Transforms text into a TCY run, or a TCY run into non-TCY text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.elements:TCYElement</apiOperationClassifier><apiDesc>The TCYElement that was created.
         
         </apiDesc></apiReturn><apiParam><apiItemName>tcyOn</apiItemName><apiType value="Boolean"/><apiDesc>Set to <codeph>true</codeph> to apply TCY to a text range, <codeph>false</codeph> to remove TCY. 
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Transforms text into a TCY run, or a TCY run into non-TCY text. 
         
         <p>TCY, or tate-chu-yoko, causes text to draw horizontally within a vertical line, and is 
         used to make small blocks of non-Japanese text or numbers, such as dates, more readable in vertical text.</p>
         
         </apiDesc><example conref="examples\EditManager_applyTCY.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#TCYElement"><linktext>flashx.textLayout.elements.TCYElement</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:beginCompositeOperation"><apiName>beginCompositeOperation</apiName><shortdesc> 
         Begins a new group of operations.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
         Begins a new group of operations. 
         
         <p>All operations executed after the call to <codeph>beginCompositeOperation()</codeph>, and before the 
         matching call to <codeph>endCompositeOperation()</codeph> are executed and grouped together as a single 
         operation that can be undone as a unit.</p> 
         
         <p>A <codeph>beginCompositeOperation</codeph>/<codeph>endCompositeOperation</codeph> block can be nested inside another 
         <codeph>beginCompositeOperation</codeph>/<codeph>endCompositeOperation</codeph> block.</p>
         
         </apiDesc><example conref="examples\EditManager_beginCompositeOperation.as"/></apiOperationDetail><related-links><link href="" invalidHref="flashx.textLayout.edit.IEditManager.endCompositeOperation.xml"><linktext>flashx.textLayout.edit.IEditManager.endCompositeOperation</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:changeElementID"><apiName>changeElementID</apiName><shortdesc>
        Changes the ID of an element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newID</apiItemName><apiType value="String"/><apiDesc>The new ID value.
        </apiDesc></apiParam><apiParam><apiItemName>targetElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>The element to modify.
        </apiDesc></apiParam><apiParam><apiItemName>relativeStart</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>An offset from the beginning of the element at which to split the element when assigning the new ID.
        </apiDesc></apiParam><apiParam><apiItemName>relativeEnd</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>An offset from the beginning of the element at which to split the element when assigning the new ID.
        </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>Specifies the selection to restore when undoing this operation; 
        if <codeph>null</codeph>, the operation saves the current selection.
        
         </apiDesc></apiParam></apiOperationDef><apiDesc>
        Changes the ID of an element.
        
         <p>If the <codeph>relativeStart</codeph> or <codeph>relativeEnd</codeph> parameters are set (to
         anything other than the default values), then the element is split. The parts of the element
         outside this range retain the original ID. Setting both the <codeph>relativeStart</codeph> and 
         <codeph>relativeEnd</codeph> parameters creates elements with duplicate IDs.</p>
         
        </apiDesc><example conref="examples\EditManager_changeElementID.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:changeStyleName"><apiName>changeStyleName</apiName><shortdesc>
        Changes the styleName of an element or part of an element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newName</apiItemName><apiType value="String"/><apiDesc>The name of the new style.
        </apiDesc></apiParam><apiParam><apiItemName>targetElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>Specifies the element to change.
        </apiDesc></apiParam><apiParam><apiItemName>relativeStart</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>An offset from the beginning of the element at which to split the element when assigning the new style.
        </apiDesc></apiParam><apiParam><apiItemName>relativeEnd</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>An offset from the end of the element at which to split the element when assigning the new style.
        </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>Specifies the selection to restore when undoing this operation; 
        if <codeph>null</codeph>, the operation saves the current selection.
        
         </apiDesc></apiParam><apiDeprecated replacement="applyFormatToElement" sinceVersion="2.0"/></apiOperationDef><apiDesc>
        Changes the styleName of an element or part of an element.
         
         <p>If the <codeph>relativeStart</codeph> or <codeph>relativeEnd</codeph> parameters are set (to
         anything other than the default values), then the element is split. The parts of the element
         outside this range retain the original style.</p>
         
        </apiDesc><example conref="examples\EditManager_changeStyleName.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:changeTypeName"><apiName>changeTypeName</apiName><shortdesc>
         Changes the typeName of an element or part of an element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newName</apiItemName><apiType value="String"/><apiDesc>The name of the new type.
         </apiDesc></apiParam><apiParam><apiItemName>targetElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>Specifies the element to change.
         </apiDesc></apiParam><apiParam><apiItemName>relativeStart</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>An offset from the beginning of the element at which to split the element when assigning the new style
         </apiDesc></apiParam><apiParam><apiItemName>relativeEnd</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>An offset from the end of the element at which to split the element when assigning the new style
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>   Specifies the selection to restore when undoing this operation; 
         if <codeph>null</codeph>, the operation saves the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc>
         Changes the typeName of an element or part of an element.
         
         <p>If the <codeph>relativeStart</codeph> or <codeph>relativeEnd</codeph> parameters are set (to
         anything other than the default values), then the element is split. The parts of the element
         outside this range retain the original style.</p>
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:clearFormatOnElement"><apiName>clearFormatOnElement</apiName><shortdesc> 
         Undefines styles to the specified element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>targetElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>The element to which the styles are applied.
         </apiDesc></apiParam><apiParam><apiItemName>format</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc> The format containing the styles to undefine.
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Undefines styles to the specified element.
         
         <p>Any style properties in the format object that are <codeph>undefined</codeph> are left unchanged.
         Any styles that are defined in the specififed format are undefined on the specified element.</p> 
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:clearFormat"><apiName>clearFormat</apiName><shortdesc> 
         Undefines formats of the specified (or current) selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>leafFormat</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>    The format whose set values indicate properties to undefine to LeafFlowElement objects in the selected range.
         </apiDesc></apiParam><apiParam><apiItemName>paragraphFormat</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>The format whose set values indicate properties to undefine to ParagraphElement objects in the selected range.
         </apiDesc></apiParam><apiParam><apiItemName>containerFormat</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>The format whose set values indicate properties to undefine to ContainerController objects in the selected range.
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Undefines formats of the specified (or current) selection.
         
         <p>Executes an undoable operation that undefines the specified formats.
         Only style attributes set for the TextLayoutFormat objects are applied.
         Undefined attributes in the format objects are not changed.
         </p>
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:createDiv"><apiName>createDiv</apiName><shortdesc> Creates a new DivElement that contains the entire range specified in the operationState at the lowest
         common parent element that contains both the start and end points of the range.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.elements:DivElement</apiOperationClassifier><apiDesc>The new DivElement that was created.
         
         </apiDesc></apiReturn><apiParam><apiItemName>parent</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.elements:FlowGroupElement</apiOperationClassifier><apiDesc>   Specifies a parent element for the new DivElement.
         If <codeph>null</codeph> the new parent will be lowest level that contains the SelectionState.
         </apiDesc></apiParam><apiParam><apiItemName>format</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>   Formatting attributes to apply to the new DivElement.
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         </apiDesc></apiParam></apiOperationDef><apiDesc> Creates a new DivElement that contains the entire range specified in the operationState at the lowest
         common parent element that contains both the start and end points of the range. If the start and end
         points are the same, a new DivElement is created at that position with a single child paragraph.
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:createList"><apiName>createList</apiName><shortdesc> Creates a new ListElement that contains the entire range specified in the operationState at the lowest
         common parent element that contains both the start and end points of the range.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.elements:ListElement</apiOperationClassifier><apiDesc>The new ListElement that was created.
         
         </apiDesc></apiReturn><apiParam><apiItemName>parent</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.elements:FlowGroupElement</apiOperationClassifier><apiDesc>Optionally specifies a parent element for the new ListElement.  
         If <codeph>null</codeph> the new parent will be lowest level that contains the SelectionState.
         </apiDesc></apiParam><apiParam><apiItemName>format</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>Formatting attributes to apply to the new ListElement.
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         </apiDesc></apiParam></apiOperationDef><apiDesc> Creates a new ListElement that contains the entire range specified in the operationState at the lowest
         common parent element that contains both the start and end points of the range. Each paragraph within the 
         range will become a ListItemElement in the new ListElement. If the start and end
         points are the same, a new ListElement is created at that position with a single ListItemElement child.
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:createSubParagraphGroup"><apiName>createSubParagraphGroup</apiName><shortdesc> Creates a new SubParagraphGroupElement that contains the entire range specified in the operationState at the lowest
         common parent element that contains both the start and end points of the range.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.elements:SubParagraphGroupElement</apiOperationClassifier><apiDesc>The new SubParagraphGroupElement that was created.
         
         </apiDesc></apiReturn><apiParam><apiItemName>parent</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.elements:FlowGroupElement</apiOperationClassifier><apiDesc>Specifies a parent element for the new SubParagraphGroupElement element.
         If <codeph>null</codeph> the new parent will be lowest level that contains the SelectionState.
         </apiDesc></apiParam><apiParam><apiItemName>format</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>   Formatting attributes to apply to the new SubParagraphGroupElement
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         </apiDesc></apiParam></apiOperationDef><apiDesc> Creates a new SubParagraphGroupElement that contains the entire range specified in the operationState at the lowest
         common parent element that contains both the start and end points of the range. If the start and end
         points are the same, nothing is done.
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:cutTextScrap"><apiName>cutTextScrap</apiName><shortdesc> 
         Deletes the selected area and returns the deleted area in a TextScrap object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.edit:TextScrap</apiOperationClassifier><apiDesc>The TextScrap that was cut.
         
         </apiDesc></apiReturn><apiParam><apiItemName>operationState</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Deletes the selected area and returns the deleted area in a TextScrap object. 
         
         <p>The resulting TextScrap can be posted to the system clipboard or used in a 
         subsequent <codeph>pasteTextOperation()</codeph> operation.</p>
         
         </apiDesc><example conref="examples\EditManager_cutTextScrap.as"/></apiOperationDetail><related-links><link href="" invalidHref="flashx.textLayout.edit.IEditManager.pasteTextScrap.xml"><linktext>flashx.textLayout.edit.IEditManager.pasteTextScrap</linktext></link><link href="" invalidHref="flashx.textLayout.edit.TextClipboard.setContents.xml"><linktext>flashx.textLayout.edit.TextClipboard.setContents</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:deleteNextCharacter"><apiName>deleteNextCharacter</apiName><shortdesc> 
         Deletes a range of text, or, if a point selection is given, deletes the next character.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>operationState</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>   specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Deletes a range of text, or, if a point selection is given, deletes the next character.
         
         </apiDesc><example conref="examples\EditManager_deleteNextCharacter.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:deleteNextWord"><apiName>deleteNextWord</apiName><shortdesc> 
         Deletes the next word.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>operationState</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Deletes the next word.
         
         <p>If a range is selected, the first word of the range is deleted.</p>
         
         </apiDesc><example conref="examples\EditManager_deleteNextWord.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:deletePreviousCharacter"><apiName>deletePreviousCharacter</apiName><shortdesc> 
         Deletes a range of text, or, if a point selection is given, deletes the previous character.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>operationState</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Deletes a range of text, or, if a point selection is given, deletes the previous character.
         
         </apiDesc><example conref="examples\EditManager_deletePreviousCharacter.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:deletePreviousWord"><apiName>deletePreviousWord</apiName><shortdesc> 
         Deletes the previous word.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>operationState</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Deletes the previous word.
         
         <p>If a range is selected, the first word of the range is deleted.</p>
         
         </apiDesc><example conref="examples\EditManager_deletePreviousWord.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:deleteText"><apiName>deleteText</apiName><shortdesc> 
         Deletes a range of text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>operationState</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Deletes a range of text.
         
         </apiDesc><example conref="examples\EditManager_deleteText.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:doOperation"><apiName>doOperation</apiName><shortdesc> 
         Executes a FlowOperation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>operation</apiItemName><apiOperationClassifier>flashx.textLayout.operations:FlowOperation</apiOperationClassifier><apiDesc>a FlowOperation object
          
          </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Executes a FlowOperation.  
          
          <p>The <codeph>doOperation()</codeph> method is called by IEditManager functions that 
          update the text flow. You do not typically need to call this function directly unless 
          you create your own custom operations.</p>
          
          <p>This function proceeds in the following steps:</p>
          <ol>
          <li>Flush any pending operations before performing this operation.</li>
          <li>Send a cancelable flowOperationBegin event.  If canceled this method returns immediately.</li>
          <li>Execute the operation.  The operation returns <codeph>true</codeph> or <codeph>false</codeph>.  
          <codeph>False</codeph> indicates that no changes were made.</li>
          <li>Push the operation onto the undo stack.</li>
          <li>Clear the redo stack.</li>
          <li>Update the display.</li>
          <li>Send a cancelable flowOperationEnd event.</li>
          </ol>
          <p>Exception handling:  If the operation throws an exception, it is caught and the error is 
          attached to the flowOperationEnd event.  If the event is not canceled the error is rethrown.</p>
          
          </apiDesc><example conref="examples\EditManager_doOperation.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:endCompositeOperation"><apiName>endCompositeOperation</apiName><shortdesc> 
         Ends a group of operations.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
         Ends a group of operations. 
         
         <p>All operations executed since the last call to <codeph>beginCompositeOperation()</codeph> are 
         grouped as a CompositeOperation that is then completed. This CompositeOperation object is added 
         to the undo stack or, if this composite operation is nested inside another composite operation, 
         added to the parent operation.</p>
         
         </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flashx.textLayout.edit.IEditManager.beginCompositeOperation.xml"><linktext>flashx.textLayout.edit.IEditManager.beginCompositeOperation</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:insertInlineGraphic"><apiName>insertInlineGraphic</apiName><shortdesc> 
         Inserts an image.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.elements:InlineGraphicElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>source</apiItemName><apiType value="Object"/><apiDesc> Can be either a String interpreted as a uri, a Class interpreted as the class of an Embed DisplayObject, 
                          a DisplayObject instance or a URLRequest. 
          </apiDesc></apiParam><apiParam><apiItemName>width</apiItemName><apiType value="Object"/><apiDesc>  The width of the image to insert (number, percent, or 'auto').
          </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Object"/><apiDesc> The height of the image to insert (number, percent, or 'auto').
          </apiDesc></apiParam><apiParam><apiItemName>options</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>None supported.
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Inserts an image.
         
         <p>The source of the image can be a string containing a URI, URLRequest object, a Class object representing an embedded asset,
         or a DisplayObject instance.</p>
          
         <p>The width and height values can be the number of pixels, a percent, or the string, 'auto', 
         in which case the actual dimension of the graphic is used.</p>
         
         <p>Set the <codeph>float</codeph> to one of the constants defined in the Float class to specify whether
         the image should be displayed to the left or right of any text or inline with the text.</p>
         
          </apiDesc><example conref="examples\EditManager_insertInlineGraphic.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElement"><linktext>flashx.textLayout.elements.InlineGraphicElement</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:insertText"><apiName>insertText</apiName><shortdesc> 
         Inserts text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiDesc>       The string to insert.
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>   Specifies the text in the flow to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Inserts text.
         
         <p>Inserts the text at a position or range in the text. If the location supplied in the 
         <codeph>operationState</codeph> parameter is a range (or the parameter is <codeph>null</codeph> and the
         current selection is a range), then the text currently in the range 
         is replaced by the inserted text.</p>
         
         </apiDesc><example conref="examples\EditManager_insertText.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:modifyInlineGraphic"><apiName>modifyInlineGraphic</apiName><shortdesc> 
         Modifies an existing inline graphic.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>source</apiItemName><apiType value="Object"/><apiDesc> Can be either a String interpreted as a uri, a Class interpreted as the class of an Embed DisplayObject, 
                          a DisplayObject instance or a URLRequest. 
          </apiDesc></apiParam><apiParam><apiItemName>width</apiItemName><apiType value="Object"/><apiDesc>  The new width for the image (number or percent).
          </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Object"/><apiDesc> The new height for the image (number or percent).
          </apiDesc></apiParam><apiParam><apiItemName>options</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>None supported.
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Modifies an existing inline graphic.
         
         <p>Set unchanging properties to the values in the original graphic. (Modifying an existing graphic object
         is typically more efficient than deleting and recreating one.)</p>
         
          </apiDesc><example conref="examples\EditManager_modifyInlineGraphic.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElement"><linktext>flashx.textLayout.elements.InlineGraphicElement</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:moveChildren"><apiName>moveChildren</apiName><shortdesc> Move a set of FlowElements from one FlowGroupElement to another.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>source</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowGroupElement</apiOperationClassifier><apiDesc>   The orginal parent of the elements to be moved.
         </apiDesc></apiParam><apiParam><apiItemName>sourceIndex</apiItemName><apiType value="int"/><apiDesc>  The child index within the source of the first element to be moved.
         </apiDesc></apiParam><apiParam><apiItemName>numChildren</apiItemName><apiType value="int"/><apiDesc>  The number of children being moved.
         </apiDesc></apiParam><apiParam><apiItemName>destination</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowGroupElement</apiOperationClassifier><apiDesc>  The new parent of elements after move.
         </apiDesc></apiParam><apiParam><apiItemName>destinationIndex</apiItemName><apiType value="int"/><apiDesc> The child index within the destination to where elements are moved to.
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>   Specifies the text to which this operation applies, and to which selection returns to upon undo.  
         If <codeph>null</codeph>, the operation applies to the current selection.  If there is no current selection, this parameter must be non-null.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc> Move a set of FlowElements from one FlowGroupElement to another. The desinationElement must be a legal parent type for the children being moved,
         or an exception is thrown.
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:overwriteText"><apiName>overwriteText</apiName><shortdesc> 
         Overwrites the selected text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiDesc>The string to insert.
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Overwrites the selected text.
         
         <p>If the selection is a point selection, the first character is overwritten by the new text.</p>
         
         </apiDesc><example conref="examples\EditManager_overwriteText.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:pasteTextScrap"><apiName>pasteTextScrap</apiName><shortdesc> 
         Pastes the TextScrap into the selected area.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>scrapToPaste</apiItemName><apiOperationClassifier>flashx.textLayout.edit:TextScrap</apiOperationClassifier><apiDesc> The TextScrap to paste.
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Pastes the TextScrap into the selected area.
         
         <p>If a range of text is specified, the text 
         in the range is deleted.</p>
         
         </apiDesc><example conref="examples\EditManager_pasteTextScrap.as"/></apiOperationDetail><related-links><link href="" invalidHref="flashx.textLayout.edit.IEditManager.cutTextScrap.xml"><linktext>flashx.textLayout.edit.IEditManager.cutTextScrap</linktext></link><link href="" invalidHref="flashx.textLayout.edit.TextClipboard.getContents.xml"><linktext>flashx.textLayout.edit.TextClipboard.getContents</linktext></link><link href="flashx.textLayout.edit.xml#TextScrap"><linktext>flashx.textLayout.edit.TextScrap</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:redo"><apiName>redo</apiName><shortdesc> 
         Reperforms the previous undone operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
         Reperforms the previous undone operation.
         
         <p><b>Note:</b> If the IUndoManager associated with this IEditManager is also associated with 
         another IEditManager, then it is possible that the redo operation associated with the other 
         IEditManager is the one redone. This can happen if the FlowOperation of another IEditManager 
         is on top of the redo stack.</p>  
         
         <p>This function does nothing if undo is not turned on.</p>
         
         </apiDesc><example conref="examples\EditManager_redo.as"/></apiOperationDetail><related-links><link href="flashx.undo.xml#IUndoManager/redo()"><linktext>flashx.undo.IUndoManager.redo()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:splitElement"><apiName>splitElement</apiName><shortdesc> Splits the target element at the location specified, creating a new element after the current one.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.elements:FlowGroupElement</apiOperationClassifier><apiDesc>The new paragraph that was created.
         
         </apiDesc></apiReturn><apiParam><apiItemName>target</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowGroupElement</apiOperationClassifier><apiDesc> The element to be split.
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         </apiDesc></apiParam></apiOperationDef><apiDesc> Splits the target element at the location specified, creating a new element after the current one.
         If the operationState is a range, the text within the range is deleted. The new element is created 
         after the text position specified by operationState. Note that splitting a SubParagraphGroupElement 
         will have no effect because they will automatically remerge with the adejacent elements.
         
         <p>An example where you might want to use this is if you have a list, and you want to divide it into two lists.</p>
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:splitParagraph"><apiName>splitParagraph</apiName><shortdesc> 
         Splits the paragraph at the current position, creating a new paragraph after the current one.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.elements:ParagraphElement</apiOperationClassifier><apiDesc>The new paragraph that was created.
         
         </apiDesc></apiReturn><apiParam><apiItemName>operationState</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Splits the paragraph at the current position, creating a new paragraph after the current one.
           
         <p>If a range of text is specified, the text 
         in the range is deleted.</p>
         
         </apiDesc><example conref="examples\EditManager_splitParagraph.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:undo"><apiName>undo</apiName><shortdesc> 
         Reverses the previous operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
         Reverses the previous operation. 
         
         <p><b>Note:</b> If the IUndoManager associated with this IEditManager is also associated with 
         another IEditManager, then it is possible that the undo operation associated with the other 
         IEditManager is the one undone.  This can happen if the FlowOperation of another IEditManager 
         is on top of the undo stack.</p>  
         
         <p>This function does nothing if undo is not turned on.</p>
         
         </apiDesc><example conref="examples\EditManager_undo.as"/></apiOperationDetail><related-links><link href="flashx.undo.xml#IUndoManager/undo()"><linktext>flashx.undo.IUndoManager.undo()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:updateAllControllers"><apiName>updateAllControllers</apiName><shortdesc> Updates the display after an operation has modified it.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> Updates the display after an operation has modified it. Normally this is handled automatically, but call
         this method if <codeph>delayUpdates</codeph> is on, and the display should be updated before the next <codeph>enter_frame</codeph> event. 
         
         </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="flashx.textLayout.edit:ISelectionManager"><apiName>ISelectionManager</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.edit:IInteractionEventHandler</apiBaseInterface><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="flashx.textLayout.edit:ISelectionManager:flashx.textLayout.edit:ISelectionManager:flushPendingOperations"><apiName>flushPendingOperations</apiName><shortdesc>
		 Executes any pending FlowOperations.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Executes any pending FlowOperations. 
		 
		 <p>The execution of some editing operations, such as text insertion, is delayed 
		 until the next enterFrame event. Calling <codeph>flushPendingOperations()</codeph> causes any deferred operations to be executed 
		 immediately.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:ISelectionManager:flashx.textLayout.edit:ISelectionManager:getCommonCharacterFormat"><apiName>getCommonCharacterFormat</apiName><shortdesc>
		 Gets the character format attributes that are common to all characters in the specified text range or current selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.formats:TextLayoutFormat</apiOperationClassifier><apiDesc>The common character style settings
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>range</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.elements:TextRange</apiOperationClassifier><apiDesc>The optional range of text for which common attributes are requested. If null, the current selection is used. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Gets the character format attributes that are common to all characters in the specified text range or current selection.
		 
		 <p>Format attributes that do not have the same value for all characters in the specified element range or selection are set to 
		 <codeph>null</codeph> in the returned TextLayoutFormat instance.</p>
		 
		 </apiDesc><example conref="examples\SelectionManager_getCommonCharacterFormat.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:ISelectionManager:flashx.textLayout.edit:ISelectionManager:getCommonContainerFormat"><apiName>getCommonContainerFormat</apiName><shortdesc>
		 Gets the container format attributes that are common to all containers in the specified text range or current selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.formats:TextLayoutFormat</apiOperationClassifier><apiDesc>The common container style settings
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>range</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.elements:TextRange</apiOperationClassifier><apiDesc>The optional range of text for which common attributes are requested. If null, the current selection is used. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Gets the container format attributes that are common to all containers in the specified text range or current selection.
		 
		 <p>Format attributes that do not have the same value for all containers in the specified element range or selection are set to 
		 <codeph>null</codeph> in the returned TextLayoutFormat instance.</p>
		 
		 </apiDesc><example conref="examples\SelectionManager_getCommonContainerFormat.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:ISelectionManager:flashx.textLayout.edit:ISelectionManager:getCommonParagraphFormat"><apiName>getCommonParagraphFormat</apiName><shortdesc>
		 Gets the paragraph format attributes that are common to all paragraphs in the specified text range or current selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.formats:TextLayoutFormat</apiOperationClassifier><apiDesc>The common paragraph style settings
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>range</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.elements:TextRange</apiOperationClassifier><apiDesc>The optional range of text for which common attributes are requested. If null, the current selection is used. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Gets the paragraph format attributes that are common to all paragraphs in the specified text range or current selection.
		 
		 <p>Format attributes that do not have the same value for all paragraphs in the specified element range or selection are set to 
		 <codeph>null</codeph> in the returned TextLayoutFormat instance.</p>
		 
		 </apiDesc><example conref="examples\SelectionManager_getCommonParagraphFormat.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:ISelectionManager:flashx.textLayout.edit:ISelectionManager:getSelectionState"><apiName>getSelectionState</apiName><shortdesc>
		 Gets the SelectionState object of the current selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Gets the SelectionState object of the current selection.
		 
		 </apiDesc><example conref="examples\SelectionManager_getSelectionState.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.edit.xml#SelectionState"><linktext>flashx.textLayout.edit.SelectionState</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.edit:ISelectionManager:flashx.textLayout.edit:ISelectionManager:hasSelection"><apiName>hasSelection</apiName><shortdesc>
		 Indicates whether there is a selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
		 Indicates whether there is a selection. 
		 
		 <p>Returns <codeph>true</codeph> if there is either a range selection or a point selection. 
		 By default, when a selection manager is first set up, there is no selection (the start and end are -1).</p>
		 
		 </apiDesc><example conref="examples\SelectionManager_hasSelection.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:ISelectionManager:flashx.textLayout.edit:ISelectionManager:isRangeSelection"><apiName>isRangeSelection</apiName><shortdesc>
		 Indicates whether the selection covers a range of text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
		 Indicates whether the selection covers a range of text.
		 
		 <p>Returns <codeph>true</codeph> if there is a selection that extends past a single position.</p> 
		 
		 </apiDesc><example conref="examples\SelectionManager_isRangeSelection.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:ISelectionManager:flashx.textLayout.edit:ISelectionManager:notifyInsertOrDelete"><apiName>notifyInsertOrDelete</apiName><shortdesc> 
		 Updates the selection manager when text is inserted or deleted.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>absolutePosition</apiItemName><apiType value="int"/><apiDesc>The point in the text where the change was made.
		 </apiDesc></apiParam><apiParam><apiItemName>length</apiItemName><apiType value="int"/><apiDesc>A positive or negative number indicating how many characters were inserted or deleted.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Updates the selection manager when text is inserted or deleted.
		 
		 <p>Operations must call <codeph>notifyInsertOrDelete</codeph> when changing the text in the text flow. 
		 The selection manager adjusts index-based position indicators accordingly. If you create a new Operation
		 class that changes text in a text flow directly (not using another operation) your operation must call this function 
		 to keep the selection up to date.</p>
		 
		 </apiDesc><example conref="examples\SelectionManager_notifyInsertOrDelete.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:ISelectionManager:flashx.textLayout.edit:ISelectionManager:refreshSelection"><apiName>refreshSelection</apiName><shortdesc> 
		 Redisplays the selection shapes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Redisplays the selection shapes. 
		 
		 <p><b>Note:</b> You do not need to call this method directly. It is called automatically.</p>	
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:ISelectionManager:flashx.textLayout.edit:ISelectionManager:selectAll"><apiName>selectAll</apiName><shortdesc>
		 Selects the entire flow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Selects the entire flow.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:ISelectionManager:flashx.textLayout.edit:ISelectionManager:selectRange"><apiName>selectRange</apiName><shortdesc>
		 Selects a range of text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/><apiDesc>The anchor point for the new selection, as an absolute position in the TextFlow 
		 </apiDesc></apiParam><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/><apiDesc>The active end of the new selection, as an absolute position in the TextFlow
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Selects a range of text.
		 
		 <p>If a negative number is passed as either of the parameters, then any existing selection is
		 removed.</p>
		 
		 </apiDesc><example conref="examples\SelectionManager_setSelection.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:ISelectionManager:flashx.textLayout.edit:ISelectionManager:setFocus"><apiName>setFocus</apiName><shortdesc> 
		 Gives the focus to the first container in the selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Gives the focus to the first container in the selection.
		  
		 </apiDesc><example conref="examples\SelectionManager_setFocus.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:ISelectionManager:flashx.textLayout.edit:ISelectionManager:setSelectionState"><apiName>setSelectionState</apiName><shortdesc>
		 Sets the SelectionState object of the current selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>state</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier></apiParam></apiOperationDef><apiDesc>
		 Sets the SelectionState object of the current selection.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.edit.xml#SelectionState"><linktext>flashx.textLayout.edit.SelectionState</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="flashx.textLayout.edit:EditManager"><apiName>EditManager</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.edit:IEditManager</apiBaseInterface><apiBaseClassifier>flashx.textLayout.edit:SelectionManager</apiBaseClassifier></apiClassifierDef><example conref="examples\EditManager_example.as"/></apiClassifierDetail><apiOperation id="flashx.textLayout.edit:EditManager:applyContainerFormat"><apiName>applyContainerFormat</apiName><shortdesc> 
         Applies container styles to any containers in the selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>containerFormat</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>   The format to apply to the containers in the range
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Applies container styles to any containers in the selection.
         
         <p>Any style properties in the format object that are <codeph>null</codeph> are left unchanged.</p> 
         
         </apiDesc><example conref="examples\EditManager_applyContainerFormat.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:applyFormatToElement"><apiName>applyFormatToElement</apiName><shortdesc> 
         Applies styles to the specified element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>targetElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>The element to which the styles are applied.
         </apiDesc></apiParam><apiParam><apiItemName>format</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc> The format containing the styles to apply.
         </apiDesc></apiParam><apiParam><apiItemName>relativeStart</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>An offset from the beginning of the element at which to split the element when assigning the new formatting.
         </apiDesc></apiParam><apiParam><apiItemName>relativeEnd</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>An offset from the beginning of the element at which to split the element when applying the new formatting.
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Applies styles to the specified element.
         
         <p>Any style properties in the format object that are <codeph>null</codeph> are left unchanged.
         Only styles that are relevant to the specified element are applied.</p> 
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:applyFormat"><apiName>applyFormat</apiName><shortdesc> 
         Changes the formats of the specified (or current) selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>leafFormat</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>   The format to apply to leaf elements such as spans and inline graphics.
         </apiDesc></apiParam><apiParam><apiItemName>paragraphFormat</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>  The format to apply to paragraph elements.
         </apiDesc></apiParam><apiParam><apiItemName>containerFormat</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>  The format to apply to the containers.
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Changes the formats of the specified (or current) selection.
         
         <p>Executes an undoable operation that applies the new formats.
         Only style attributes set for the TextLayoutFormat objects are applied.
         Undefined attributes in the format objects are not changed.
         </p>
         
         </apiDesc><example conref="examples\EditManager_applyFormat.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:applyLeafFormat"><apiName>applyLeafFormat</apiName><shortdesc> 
         Changes the format applied to the leaf elements in the 
         specified (or current) selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>characterFormat</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>   The format to apply.
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Changes the format applied to the leaf elements in the 
         specified (or current) selection.
         
         <p>Executes an undoable operation that applies the new format to leaf elements such as
         SpanElement and InlineGraphicElement objects.
         Only style attributes set for the TextLayoutFormat objects are applied.
         Undefined attributes in the format object are changed.</p>
         
         </apiDesc><example conref="examples\EditManager_applyLeafFormat.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:applyLink"><apiName>applyLink</apiName><shortdesc> 
         Transforms a selection into a link, or a link into normal text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="+ 10.2" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.elements:LinkElement</apiOperationClassifier><apiDesc>The LinkElement that was created.
         
         </apiDesc></apiReturn><apiParam><apiItemName>href</apiItemName><apiType value="String"/><apiDesc>The uri referenced by the link.
         </apiDesc></apiParam><apiParam><apiItemName>targetString</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>The target browser window of the link.
         </apiDesc></apiParam><apiParam><apiItemName>extendToLinkBoundary</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Specifies whether to consolidate selection with any overlapping existing links, and then apply the change.
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Transforms a selection into a link, or a link into normal text.
         
         <p>Executes an undoable operation that creates or removes the link.</p>
         
          <p>If a <codeph>target</codeph> parameter is specified, it must be one of the following values:</p>
         <ul>
          <li>"_self"</li>
          <li>"_blank"</li>
          <li>"_parent"</li>
          <li>"_top"</li>
         </ul>
         <p>In browser-hosted runtimes, a target of "_self" replaces the current html page.  
         So, if the SWF content containing the link is in a page within
         a frame or frameset, the linked content loads within that frame.  If the page 
         is at the top level, the linked content opens to replace the original page.  
         A target of "_blank" opens a new browser window with no name.  
         A target of "_parent" replaces the parent of the html page containing the SWF content.  
         A target of "_top" replaces the top-level page in the current browser window.</p>
         
         <p>In other runtimes, such as Adobe AIR, the link opens in the user's default browser and the
         <codeph>target</codeph> parameter is ignored.</p>
         
         <p>The <codeph>extendToLinkBoundary</codeph> parameter determines how the edit manager 
         treats a selection that intersects with one or more existing links. If the parameter is 
         <codeph>true</codeph>, then the operation is applied as a unit to the selection and the
         whole text of the existing links. Thus, a single link is created that spans from
         the beginning of the first link intersected to the end of the last link intersected.
         In contrast, if <codeph>extendToLinkBoundary</codeph> were <codeph>false</codeph> in this situation, 
         the existing partially selected links would be split into two links.</p>
         
         </apiDesc><example conref="examples\EditManager_applyLink.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:applyParagraphFormat"><apiName>applyParagraphFormat</apiName><shortdesc> 
         Applies paragraph styles to any paragraphs in the selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>paragraphFormat</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>The format to apply to the selected paragraphs.
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Applies paragraph styles to any paragraphs in the selection.
         
         <p>Any style properties in the format object that are <codeph>null</codeph> are left unchanged.</p> 
         
         </apiDesc><example conref="examples\EditManager_applyParagraphFormat.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:applyTCY"><apiName>applyTCY</apiName><shortdesc> 
         Transforms text into a TCY run, or a TCY run into non-TCY text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="+ 10.2" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.elements:TCYElement</apiOperationClassifier><apiDesc>The TCYElement that was created.
         
         </apiDesc></apiReturn><apiParam><apiItemName>tcyOn</apiItemName><apiType value="Boolean"/><apiDesc>Set to <codeph>true</codeph> to apply TCY to a text range, <codeph>false</codeph> to remove TCY. 
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Transforms text into a TCY run, or a TCY run into non-TCY text. 
         
         <p>TCY, or tate-chu-yoko, causes text to draw horizontally within a vertical line, and is 
         used to make small blocks of non-Japanese text or numbers, such as dates, more readable in vertical text.</p>
         
         </apiDesc><example conref="examples\EditManager_applyTCY.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:beginCompositeOperation"><apiName>beginCompositeOperation</apiName><shortdesc> 
         Begins a new group of operations.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
         Begins a new group of operations. 
         
         <p>All operations executed after the call to <codeph>beginCompositeOperation()</codeph>, and before the 
         matching call to <codeph>endCompositeOperation()</codeph> are executed and grouped together as a single 
         operation that can be undone as a unit.</p> 
         
         <p>A <codeph>beginCompositeOperation</codeph>/<codeph>endCompositeOperation</codeph> block can be nested inside another 
         <codeph>beginCompositeOperation</codeph>/<codeph>endCompositeOperation</codeph> block.</p>
         
         </apiDesc><example conref="examples\EditManager_beginCompositeOperation.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:changeElementID"><apiName>changeElementID</apiName><shortdesc>
        Changes the ID of an element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newID</apiItemName><apiType value="String"/><apiDesc>The new ID value.
        </apiDesc></apiParam><apiParam><apiItemName>targetElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>The element to modify.
        </apiDesc></apiParam><apiParam><apiItemName>relativeStart</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>An offset from the beginning of the element at which to split the element when assigning the new ID.
        </apiDesc></apiParam><apiParam><apiItemName>relativeEnd</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>An offset from the beginning of the element at which to split the element when assigning the new ID.
        </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>Specifies the selection to restore when undoing this operation; 
        if <codeph>null</codeph>, the operation saves the current selection.
        
         </apiDesc></apiParam></apiOperationDef><apiDesc>
        Changes the ID of an element.
        
         <p>If the <codeph>relativeStart</codeph> or <codeph>relativeEnd</codeph> parameters are set (to
         anything other than the default values), then the element is split. The parts of the element
         outside this range retain the original ID. Setting both the <codeph>relativeStart</codeph> and 
         <codeph>relativeEnd</codeph> parameters creates elements with duplicate IDs.</p>
         
        </apiDesc><example conref="examples\EditManager_changeElementID.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:changeStyleName"><apiName>changeStyleName</apiName><shortdesc>
        Changes the styleName of an element or part of an element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newName</apiItemName><apiType value="String"/><apiDesc>The name of the new style.
        </apiDesc></apiParam><apiParam><apiItemName>targetElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>Specifies the element to change.
        </apiDesc></apiParam><apiParam><apiItemName>relativeStart</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>An offset from the beginning of the element at which to split the element when assigning the new style.
        </apiDesc></apiParam><apiParam><apiItemName>relativeEnd</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>An offset from the end of the element at which to split the element when assigning the new style.
        </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>Specifies the selection to restore when undoing this operation; 
        if <codeph>null</codeph>, the operation saves the current selection.
        
         </apiDesc></apiParam><apiDeprecated replacement="applyFormatToElement" sinceVersion="2.0"/></apiOperationDef><apiDesc>
        Changes the styleName of an element or part of an element.
         
         <p>If the <codeph>relativeStart</codeph> or <codeph>relativeEnd</codeph> parameters are set (to
         anything other than the default values), then the element is split. The parts of the element
         outside this range retain the original style.</p>
         
        </apiDesc><example conref="examples\EditManager_changeStyleName.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:changeTypeName"><apiName>changeTypeName</apiName><shortdesc>
         Changes the typeName of an element or part of an element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newName</apiItemName><apiType value="String"/><apiDesc>The name of the new type.
         </apiDesc></apiParam><apiParam><apiItemName>targetElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>Specifies the element to change.
         </apiDesc></apiParam><apiParam><apiItemName>relativeStart</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>An offset from the beginning of the element at which to split the element when assigning the new style
         </apiDesc></apiParam><apiParam><apiItemName>relativeEnd</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>An offset from the end of the element at which to split the element when assigning the new style
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>   Specifies the selection to restore when undoing this operation; 
         if <codeph>null</codeph>, the operation saves the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc>
         Changes the typeName of an element or part of an element.
         
         <p>If the <codeph>relativeStart</codeph> or <codeph>relativeEnd</codeph> parameters are set (to
         anything other than the default values), then the element is split. The parts of the element
         outside this range retain the original style.</p>
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:clearFormatOnElement"><apiName>clearFormatOnElement</apiName><shortdesc> 
         Undefines styles to the specified element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>targetElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>The element to which the styles are applied.
         </apiDesc></apiParam><apiParam><apiItemName>format</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc> The format containing the styles to undefine.
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Undefines styles to the specified element.
         
         <p>Any style properties in the format object that are <codeph>undefined</codeph> are left unchanged.
         Any styles that are defined in the specififed format are undefined on the specified element.</p> 
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:clearFormat"><apiName>clearFormat</apiName><shortdesc> 
         Undefines formats of the specified (or current) selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>leafFormat</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>    The format whose set values indicate properties to undefine to LeafFlowElement objects in the selected range.
         </apiDesc></apiParam><apiParam><apiItemName>paragraphFormat</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>The format whose set values indicate properties to undefine to ParagraphElement objects in the selected range.
         </apiDesc></apiParam><apiParam><apiItemName>containerFormat</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>The format whose set values indicate properties to undefine to ContainerController objects in the selected range.
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Undefines formats of the specified (or current) selection.
         
         <p>Executes an undoable operation that undefines the specified formats.
         Only style attributes set for the TextLayoutFormat objects are applied.
         Undefined attributes in the format objects are not changed.
         </p>
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:createDiv"><apiName>createDiv</apiName><shortdesc> Creates a new DivElement that contains the entire range specified in the operationState at the lowest
         common parent element that contains both the start and end points of the range.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.elements:DivElement</apiOperationClassifier><apiDesc>The new DivElement that was created.
         
         </apiDesc></apiReturn><apiParam><apiItemName>parent</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.elements:FlowGroupElement</apiOperationClassifier><apiDesc>   Specifies a parent element for the new DivElement.
         If <codeph>null</codeph> the new parent will be lowest level that contains the SelectionState.
         </apiDesc></apiParam><apiParam><apiItemName>format</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>   Formatting attributes to apply to the new DivElement.
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         </apiDesc></apiParam></apiOperationDef><apiDesc> Creates a new DivElement that contains the entire range specified in the operationState at the lowest
         common parent element that contains both the start and end points of the range. If the start and end
         points are the same, a new DivElement is created at that position with a single child paragraph.
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:createList"><apiName>createList</apiName><shortdesc> Creates a new ListElement that contains the entire range specified in the operationState at the lowest
         common parent element that contains both the start and end points of the range.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.elements:ListElement</apiOperationClassifier><apiDesc>The new ListElement that was created.
         
         </apiDesc></apiReturn><apiParam><apiItemName>parent</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.elements:FlowGroupElement</apiOperationClassifier><apiDesc>Optionally specifies a parent element for the new ListElement.  
         If <codeph>null</codeph> the new parent will be lowest level that contains the SelectionState.
         </apiDesc></apiParam><apiParam><apiItemName>format</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>Formatting attributes to apply to the new ListElement.
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         </apiDesc></apiParam></apiOperationDef><apiDesc> Creates a new ListElement that contains the entire range specified in the operationState at the lowest
         common parent element that contains both the start and end points of the range. Each paragraph within the 
         range will become a ListItemElement in the new ListElement. If the start and end
         points are the same, a new ListElement is created at that position with a single ListItemElement child.
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:createSubParagraphGroup"><apiName>createSubParagraphGroup</apiName><shortdesc> Creates a new SubParagraphGroupElement that contains the entire range specified in the operationState at the lowest
         common parent element that contains both the start and end points of the range.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.elements:SubParagraphGroupElement</apiOperationClassifier><apiDesc>The new SubParagraphGroupElement that was created.
         
         </apiDesc></apiReturn><apiParam><apiItemName>parent</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.elements:FlowGroupElement</apiOperationClassifier><apiDesc>Specifies a parent element for the new SubParagraphGroupElement element.
         If <codeph>null</codeph> the new parent will be lowest level that contains the SelectionState.
         </apiDesc></apiParam><apiParam><apiItemName>format</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>   Formatting attributes to apply to the new SubParagraphGroupElement
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         </apiDesc></apiParam></apiOperationDef><apiDesc> Creates a new SubParagraphGroupElement that contains the entire range specified in the operationState at the lowest
         common parent element that contains both the start and end points of the range. If the start and end
         points are the same, nothing is done.
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:cutTextScrap"><apiName>cutTextScrap</apiName><shortdesc> 
         Deletes the selected area and returns the deleted area in a TextScrap object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.edit:TextScrap</apiOperationClassifier><apiDesc>The TextScrap that was cut.
         
         </apiDesc></apiReturn><apiParam><apiItemName>operationState</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Deletes the selected area and returns the deleted area in a TextScrap object. 
         
         <p>The resulting TextScrap can be posted to the system clipboard or used in a 
         subsequent <codeph>pasteTextOperation()</codeph> operation.</p>
         
         </apiDesc><example conref="examples\EditManager_cutTextScrap.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.edit.xml#TextScrap"><linktext>flashx.textLayout.edit.TextScrap</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:deleteNextCharacter"><apiName>deleteNextCharacter</apiName><shortdesc> 
         Deletes a range of text, or, if a point selection is given, deletes the next character.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>operationState</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>   specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Deletes a range of text, or, if a point selection is given, deletes the next character.
         
         </apiDesc><example conref="examples\EditManager_deleteNextCharacter.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:deleteNextWord"><apiName>deleteNextWord</apiName><shortdesc> 
         Deletes the next word.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>operationState</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Deletes the next word.
         
         <p>If a range is selected, the first word of the range is deleted.</p>
         
         </apiDesc><example conref="examples\EditManager_deleteNextWord.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:deletePreviousCharacter"><apiName>deletePreviousCharacter</apiName><shortdesc> 
         Deletes a range of text, or, if a point selection is given, deletes the previous character.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>operationState</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Deletes a range of text, or, if a point selection is given, deletes the previous character.
         
         </apiDesc><example conref="examples\EditManager_deletePreviousCharacter.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:deletePreviousWord"><apiName>deletePreviousWord</apiName><shortdesc> 
         Deletes the previous word.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>operationState</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Deletes the previous word.
         
         <p>If a range is selected, the first word of the range is deleted.</p>
         
         </apiDesc><example conref="examples\EditManager_deletePreviousWord.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:deleteText"><apiName>deleteText</apiName><shortdesc> 
         Deletes a range of text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>operationState</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Deletes a range of text.
         
         </apiDesc><example conref="examples\EditManager_deleteText.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:doOperation"><apiName>doOperation</apiName><shortdesc> 
         Executes a FlowOperation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>operation</apiItemName><apiOperationClassifier>flashx.textLayout.operations:FlowOperation</apiOperationClassifier><apiDesc>a FlowOperation object
          
          </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Executes a FlowOperation.  
          
          <p>The <codeph>doOperation()</codeph> method is called by IEditManager functions that 
          update the text flow. You do not typically need to call this function directly unless 
          you create your own custom operations.</p>
          
          <p>This function proceeds in the following steps:</p>
          <ol>
          <li>Flush any pending operations before performing this operation.</li>
          <li>Send a cancelable flowOperationBegin event.  If canceled this method returns immediately.</li>
          <li>Execute the operation.  The operation returns <codeph>true</codeph> or <codeph>false</codeph>.  
          <codeph>False</codeph> indicates that no changes were made.</li>
          <li>Push the operation onto the undo stack.</li>
          <li>Clear the redo stack.</li>
          <li>Update the display.</li>
          <li>Send a cancelable flowOperationEnd event.</li>
          </ol>
          <p>Exception handling:  If the operation throws an exception, it is caught and the error is 
          attached to the flowOperationEnd event.  If the event is not canceled the error is rethrown.</p>
          
          </apiDesc><example conref="examples\EditManager_doOperation.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:endCompositeOperation"><apiName>endCompositeOperation</apiName><shortdesc> 
         Ends a group of operations.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
         Ends a group of operations. 
         
         <p>All operations executed since the last call to <codeph>beginCompositeOperation()</codeph> are 
         grouped as a CompositeOperation that is then completed. This CompositeOperation object is added 
         to the undo stack or, if this composite operation is nested inside another composite operation, 
         added to the parent operation.</p>
         
         </apiDesc><example conref="examples\EditManager_beginCompositeOperation.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:insertInlineGraphic"><apiName>insertInlineGraphic</apiName><shortdesc> 
         Inserts an image.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="+ 10.2" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.elements:InlineGraphicElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>source</apiItemName><apiType value="Object"/><apiDesc> Can be either a String interpreted as a uri, a Class interpreted as the class of an Embed DisplayObject, 
                          a DisplayObject instance or a URLRequest. 
          </apiDesc></apiParam><apiParam><apiItemName>width</apiItemName><apiType value="Object"/><apiDesc>  The width of the image to insert (number, percent, or 'auto').
          </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Object"/><apiDesc> The height of the image to insert (number, percent, or 'auto').
          </apiDesc></apiParam><apiParam><apiItemName>options</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>None supported.
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Inserts an image.
         
         <p>The source of the image can be a string containing a URI, URLRequest object, a Class object representing an embedded asset,
         or a DisplayObject instance.</p>
          
         <p>The width and height values can be the number of pixels, a percent, or the string, 'auto', 
         in which case the actual dimension of the graphic is used.</p>
         
         <p>Set the <codeph>float</codeph> to one of the constants defined in the Float class to specify whether
         the image should be displayed to the left or right of any text or inline with the text.</p>
         
          </apiDesc><example conref="examples\EditManager_insertInlineGraphic.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.text.engine.TextRotation.xml"><linktext>flash.text.engine.TextRotation</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:insertText"><apiName>insertText</apiName><shortdesc> 
         Inserts text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiDesc>       The string to insert.
         </apiDesc></apiParam><apiParam><apiItemName>origOperationState</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>   Specifies the text in the flow to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Inserts text.
         
         <p>Inserts the text at a position or range in the text. If the location supplied in the 
         <codeph>operationState</codeph> parameter is a range (or the parameter is <codeph>null</codeph> and the
         current selection is a range), then the text currently in the range 
         is replaced by the inserted text.</p>
         
         </apiDesc><example conref="examples\EditManager_insertText.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:modifyInlineGraphic"><apiName>modifyInlineGraphic</apiName><shortdesc> 
         Modifies an existing inline graphic.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>source</apiItemName><apiType value="Object"/><apiDesc> Can be either a String interpreted as a uri, a Class interpreted as the class of an Embed DisplayObject, 
                          a DisplayObject instance or a URLRequest. 
          </apiDesc></apiParam><apiParam><apiItemName>width</apiItemName><apiType value="Object"/><apiDesc>  The new width for the image (number or percent).
          </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Object"/><apiDesc> The new height for the image (number or percent).
          </apiDesc></apiParam><apiParam><apiItemName>options</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>None supported.
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Modifies an existing inline graphic.
         
         <p>Set unchanging properties to the values in the original graphic. (Modifying an existing graphic object
         is typically more efficient than deleting and recreating one.)</p>
         
          </apiDesc><example conref="examples\EditManager_modifyInlineGraphic.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:moveChildren"><apiName>moveChildren</apiName><shortdesc> Move a set of FlowElements from one FlowGroupElement to another.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>source</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowGroupElement</apiOperationClassifier><apiDesc>   The orginal parent of the elements to be moved.
         </apiDesc></apiParam><apiParam><apiItemName>sourceIndex</apiItemName><apiType value="int"/><apiDesc>  The child index within the source of the first element to be moved.
         </apiDesc></apiParam><apiParam><apiItemName>numChildren</apiItemName><apiType value="int"/><apiDesc>  The number of children being moved.
         </apiDesc></apiParam><apiParam><apiItemName>destination</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowGroupElement</apiOperationClassifier><apiDesc>  The new parent of elements after move.
         </apiDesc></apiParam><apiParam><apiItemName>destinationIndex</apiItemName><apiType value="int"/><apiDesc> The child index within the destination to where elements are moved to.
         </apiDesc></apiParam><apiParam><apiItemName>selectionState</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>   Specifies the text to which this operation applies, and to which selection returns to upon undo.  
         If <codeph>null</codeph>, the operation applies to the current selection.  If there is no current selection, this parameter must be non-null.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc> Move a set of FlowElements from one FlowGroupElement to another. The desinationElement must be a legal parent type for the children being moved,
         or an exception is thrown.
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:overwriteText"><apiName>overwriteText</apiName><shortdesc> 
         Overwrites the selected text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiDesc>The string to insert.
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Overwrites the selected text.
         
         <p>If the selection is a point selection, the first character is overwritten by the new text.</p>
         
         </apiDesc><example conref="examples\EditManager_overwriteText.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:pasteTextScrap"><apiName>pasteTextScrap</apiName><shortdesc> 
         Pastes the TextScrap into the selected area.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>scrapToPaste</apiItemName><apiOperationClassifier>flashx.textLayout.edit:TextScrap</apiOperationClassifier><apiDesc> The TextScrap to paste.
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Pastes the TextScrap into the selected area.
         
         <p>If a range of text is specified, the text 
         in the range is deleted.</p>
         
         </apiDesc><example conref="examples\EditManager_pasteTextScrap.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.edit.xml#TextScrap"><linktext>flashx.textLayout.edit.TextScrap</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:redo"><apiName>redo</apiName><shortdesc> 
         Reperforms the previous undone operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
         Reperforms the previous undone operation.
         
         <p><b>Note:</b> If the IUndoManager associated with this IEditManager is also associated with 
         another IEditManager, then it is possible that the redo operation associated with the other 
         IEditManager is the one redone. This can happen if the FlowOperation of another IEditManager 
         is on top of the redo stack.</p>  
         
         <p>This function does nothing if undo is not turned on.</p>
         
         </apiDesc><example conref="examples\EditManager_redo.as"/></apiOperationDetail><related-links><link href="flashx.undo.xml#IUndoManager/redo()"><linktext>flashx.undo.IUndoManager.redo()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:splitElement"><apiName>splitElement</apiName><shortdesc> Splits the target element at the location specified, creating a new element after the current one.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.elements:FlowGroupElement</apiOperationClassifier><apiDesc>The new paragraph that was created.
         
         </apiDesc></apiReturn><apiParam><apiItemName>target</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowGroupElement</apiOperationClassifier><apiDesc> The element to be split.
         </apiDesc></apiParam><apiParam><apiItemName>operationState</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         </apiDesc></apiParam></apiOperationDef><apiDesc> Splits the target element at the location specified, creating a new element after the current one.
         If the operationState is a range, the text within the range is deleted. The new element is created 
         after the text position specified by operationState. Note that splitting a SubParagraphGroupElement 
         will have no effect because they will automatically remerge with the adejacent elements.
         
         <p>An example where you might want to use this is if you have a list, and you want to divide it into two lists.</p>
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:splitParagraph"><apiName>splitParagraph</apiName><shortdesc> 
         Splits the paragraph at the current position, creating a new paragraph after the current one.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.elements:ParagraphElement</apiOperationClassifier><apiDesc>The new paragraph that was created.
         
         </apiDesc></apiReturn><apiParam><apiItemName>operationState</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>   Specifies the text to which this operation applies; 
         if <codeph>null</codeph>, the operation applies to the current selection.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc> 
         Splits the paragraph at the current position, creating a new paragraph after the current one.
           
         <p>If a range of text is specified, the text 
         in the range is deleted.</p>
         
         </apiDesc><example conref="examples\EditManager_splitParagraph.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:undo"><apiName>undo</apiName><shortdesc> 
         Reverses the previous operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
         Reverses the previous operation. 
         
         <p><b>Note:</b> If the IUndoManager associated with this IEditManager is also associated with 
         another IEditManager, then it is possible that the undo operation associated with the other 
         IEditManager is the one undone.  This can happen if the FlowOperation of another IEditManager 
         is on top of the undo stack.</p>  
         
         <p>This function does nothing if undo is not turned on.</p>
         
         </apiDesc><example conref="examples\EditManager_undo.as"/></apiOperationDetail><related-links><link href="flashx.undo.xml#IUndoManager/undo()"><linktext>flashx.undo.IUndoManager.undo()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.edit:EditManager:updateAllControllers"><apiName>updateAllControllers</apiName><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc/></apiOperationDetail></apiOperation><apiConstructor id="flashx.textLayout.edit:EditManager:EditManager"><apiName>EditManager</apiName><shortdesc> 
		 Creates an EditManager object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>undoManager</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.undo:IUndoManager</apiOperationClassifier><apiDesc>The UndoManager for the application
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Creates an EditManager object.
		 
		 <p>Assign an EditManager object to the <codeph>interactionManager</codeph> property
		 of a text flow to enable editing of that text flow. </p>
		 
		 <p>To enable support for undoing and redoing changes, pass an 
		 IUndoManager instance to the EditManager constructor. You can use
		 the <codeph>flashx.undo.UndoManager</codeph> class
		 or create a custom IUndoManager instance. Use a custom IUndoManager instance
		 to integrate Text Layout Framework changes with an existing
		 undo manager that is not an instance of the UndoManager class.
		 To create a custom IUndoManager instance, ensure that the class
		 you use to define the undo manager 
		 implements the IUndoManager interface.</p>
		 
		 
		 </apiDesc><example conref="examples\EditManager_constructor.as"/></apiConstructorDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow/interactionManager"><linktext>flashx.textLayout.elements.TextFlow.interactionManager</linktext></link><link href="flashx.undo.xml#IUndoManager"><linktext>flashx.undo.IUndoManager</linktext></link></related-links></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.edit:IInteractionEventHandler"><apiName>IInteractionEventHandler</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="flashx.textLayout.edit:IInteractionEventHandler:flashx.textLayout.edit:IInteractionEventHandler:activateHandler"><apiName>activateHandler</apiName><shortdesc> 
		 Processes an activate event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc> 
		 Processes an activate event.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IInteractionEventHandler:flashx.textLayout.edit:IInteractionEventHandler:deactivateHandler"><apiName>deactivateHandler</apiName><shortdesc> 
		 Processes a deactivate event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc> 
		 Processes a deactivate event.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IInteractionEventHandler:flashx.textLayout.edit:IInteractionEventHandler:editHandler"><apiName>editHandler</apiName><shortdesc> 
		 Processes an edit event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc> 
		 Processes an edit event.
		 
		 <p>Edit events are dispatched for cut, copy, paste, and selectAll commands.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IInteractionEventHandler:flashx.textLayout.edit:IInteractionEventHandler:focusChangeHandler"><apiName>focusChangeHandler</apiName><shortdesc> 
		 Processes a focusChange event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/></apiParam></apiOperationDef><apiDesc> 
		 Processes a focusChange event.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IInteractionEventHandler:flashx.textLayout.edit:IInteractionEventHandler:focusInHandler"><apiName>focusInHandler</apiName><shortdesc> 
		 Processes a focusIn event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/></apiParam></apiOperationDef><apiDesc> 
		 Processes a focusIn event.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IInteractionEventHandler:flashx.textLayout.edit:IInteractionEventHandler:focusOutHandler"><apiName>focusOutHandler</apiName><shortdesc> 
		 Processes a focusOut event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/></apiParam></apiOperationDef><apiDesc> 
		 Processes a focusOut event.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IInteractionEventHandler:flashx.textLayout.edit:IInteractionEventHandler:imeStartCompositionHandler"><apiName>imeStartCompositionHandler</apiName><shortdesc> 
		 Processes an imeStartComposition event
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:IMEEvent"/></apiParam></apiOperationDef><apiDesc> 
		 Processes an imeStartComposition event
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IInteractionEventHandler:flashx.textLayout.edit:IInteractionEventHandler:keyDownHandler"><apiName>keyDownHandler</apiName><shortdesc> 
		Processes a keyDown event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:KeyboardEvent"/></apiParam></apiOperationDef><apiDesc> 
		Processes a keyDown event.
		 
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IInteractionEventHandler:flashx.textLayout.edit:IInteractionEventHandler:keyFocusChangeHandler"><apiName>keyFocusChangeHandler</apiName><shortdesc> 
		Processes a keyFocusChange event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/></apiParam></apiOperationDef><apiDesc> 
		Processes a keyFocusChange event.
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IInteractionEventHandler:flashx.textLayout.edit:IInteractionEventHandler:keyUpHandler"><apiName>keyUpHandler</apiName><shortdesc> 
		Processes a keyUp event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:KeyboardEvent"/></apiParam></apiOperationDef><apiDesc> 
		Processes a keyUp event.
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IInteractionEventHandler:flashx.textLayout.edit:IInteractionEventHandler:menuSelectHandler"><apiName>menuSelectHandler</apiName><shortdesc> 
		 Processes a menuSelect event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:ContextMenuEvent"/></apiParam></apiOperationDef><apiDesc> 
		 Processes a menuSelect event.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IInteractionEventHandler:flashx.textLayout.edit:IInteractionEventHandler:mouseDoubleClickHandler"><apiName>mouseDoubleClickHandler</apiName><shortdesc> 
		 Processes a mouseDoubleClick event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/></apiParam></apiOperationDef><apiDesc> 
		 Processes a mouseDoubleClick event.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IInteractionEventHandler:flashx.textLayout.edit:IInteractionEventHandler:mouseDownHandler"><apiName>mouseDownHandler</apiName><shortdesc> 
		 Processes a mouseDown event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/></apiParam></apiOperationDef><apiDesc> 
		 Processes a mouseDown event.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IInteractionEventHandler:flashx.textLayout.edit:IInteractionEventHandler:mouseMoveHandler"><apiName>mouseMoveHandler</apiName><shortdesc> 
		 Processes a mouseMove event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/></apiParam></apiOperationDef><apiDesc> 
		 Processes a mouseMove event.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IInteractionEventHandler:flashx.textLayout.edit:IInteractionEventHandler:mouseOutHandler"><apiName>mouseOutHandler</apiName><shortdesc> 
		 Processes a mouseOut event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/></apiParam></apiOperationDef><apiDesc> 
		 Processes a mouseOut event.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IInteractionEventHandler:flashx.textLayout.edit:IInteractionEventHandler:mouseOverHandler"><apiName>mouseOverHandler</apiName><shortdesc> 
		 Processes a mouseOver event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/></apiParam></apiOperationDef><apiDesc> 
		 Processes a mouseOver event.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IInteractionEventHandler:flashx.textLayout.edit:IInteractionEventHandler:mouseUpHandler"><apiName>mouseUpHandler</apiName><shortdesc> 
		 Processes a mouseUp event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/></apiParam></apiOperationDef><apiDesc> 
		 Processes a mouseUp event.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IInteractionEventHandler:flashx.textLayout.edit:IInteractionEventHandler:mouseWheelHandler"><apiName>mouseWheelHandler</apiName><shortdesc> 
		 Processes a mouseWheel event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/></apiParam></apiOperationDef><apiDesc> 
		 Processes a mouseWheel event.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IInteractionEventHandler:flashx.textLayout.edit:IInteractionEventHandler:softKeyboardActivatingHandler"><apiName>softKeyboardActivatingHandler</apiName><shortdesc> 
		 Processes an softKeyboardActivating event
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc> 
		 Processes an softKeyboardActivating event
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.edit:IInteractionEventHandler:flashx.textLayout.edit:IInteractionEventHandler:textInputHandler"><apiName>textInputHandler</apiName><shortdesc> 
		 Processes a TextEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:TextEvent"/></apiParam></apiOperationDef><apiDesc> 
		 Processes a TextEvent.
		 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="flashx.textLayout.edit:SelectionFormat"><apiName>SelectionFormat</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="flashx.textLayout.edit:SelectionFormat:equals"><apiName>equals</apiName><shortdesc>
		 Determines whether this SelectionFormat object has the same property values
		 as another SelectionFormat object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph>, if the property values are identical; <codeph>false</codeph>, otherwise.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>selectionFormat</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionFormat</apiOperationClassifier><apiDesc>the SelectionFormat to compare against.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Determines whether this SelectionFormat object has the same property values
		 as another SelectionFormat object.
		  
		 </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="flashx.textLayout.edit:SelectionFormat:SelectionFormat"><apiName>SelectionFormat</apiName><shortdesc> 
		 Creates a SelectionFormat object with the specified properties.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>rangeColor</apiItemName><apiType value="uint"/><apiData>0xffffff</apiData><apiDesc>The color for drawing the highlight.
		 </apiDesc></apiParam><apiParam><apiItemName>rangeAlpha</apiItemName><apiType value="Number"/><apiData>1.0</apiData><apiDesc>The transparency value for drawing the highlight. Valid values are between 0
		 (completely transparent) and 1 (completely opaque, which is the default).
		 </apiDesc></apiParam><apiParam><apiItemName>rangeBlendMode</apiItemName><apiType value="String"/><apiData>difference</apiData><apiDesc>The blend mode for drawing the highlight. Use constants defined in the BlendMode class
		 to set this parameter.
		 </apiDesc></apiParam><apiParam><apiItemName>pointColor</apiItemName><apiType value="uint"/><apiData>0xffffff</apiData><apiDesc>The color for the drawing cursor.
		 </apiDesc></apiParam><apiParam><apiItemName>pointAlpha</apiItemName><apiType value="Number"/><apiData>1.0</apiData><apiDesc>The transparency value for drawing the cursor. Valid values are between 0
		 (completely transparent) and 1 (completely opaque, which is the default).
		 </apiDesc></apiParam><apiParam><apiItemName>pointBlendMode</apiItemName><apiType value="String"/><apiData>difference</apiData><apiDesc>The blend mode for drawing the cursor. Use constants defined in the BlendMode class
		 to set this parameter.
		 </apiDesc></apiParam><apiParam><apiItemName>pointBlinkRate</apiItemName><apiType value="Number"/><apiData>500</apiData><apiDesc>The rate at which the cursor blinks, in milliseconds.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Creates a SelectionFormat object with the specified properties.
		 
		 <p>A SelectionFormat created with the default values will use black for
		 the highlight colors, 1.0 for the alphas, and BlendMode.DIFFERENCE for the blending modes.
		 The cursor blink rate is 500 milliseconds.</p>
		 
		 <p>Setting the <codeph>pointAlpha</codeph> and <codeph>rangeAlpha</codeph> properties to zero disables selection highlighting.</p>
		 
		 <p>Non-zero blink rate is only used when an EditManager is attached to the TextFlow.</p>
		 
		 </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.display.BlendMode.xml"><linktext>flash.display.BlendMode</linktext></link><link href="flashx.textLayout.edit.xml#SelectionFormat/pointAlpha"><linktext>pointAlpha</linktext></link><link href="flashx.textLayout.edit.xml#SelectionFormat/rangeAlpha"><linktext>rangeAlpha</linktext></link></related-links></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.edit:TextClipboard"><apiName>TextClipboard</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="flashx.textLayout.edit:TextClipboard:getContents"><apiName>getContents</apiName><shortdesc>
		 Gets any text on the system clipboard as a TextScrap object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiOperationClassifier>flashx.textLayout.edit:TextScrap</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Gets any text on the system clipboard as a TextScrap object.
		  
		 <p>If the "TEXT_LAYOUT_MARKUP" format is available, this method converts the formatted
		 string into a TextScrap and returns it. Otherwise, if the Clipboard.TEXT_Format is available,
		 this method converts the plain-text string into a TextScrap. If neither clipboard format
		 is available, this method returns <codeph>null</codeph>.</p>
		 
		 <p>Flash Player requires that the <codeph>getContents()</codeph> method be called in a paste event handler. In AIR, 
		 this restriction only applies to content outside of the application security sandbox.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#Event/PASTE"><linktext>flash.events.Event.PASTE</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.edit:TextClipboard:setContents"><apiName>setContents</apiName><shortdesc>
		 Puts a TextScrap onto the system clipboard.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>textScrap</apiItemName><apiOperationClassifier>flashx.textLayout.edit:TextScrap</apiOperationClassifier><apiDesc>The TextScrap to paste into the clipboard.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Puts a TextScrap onto the system clipboard.  
		 
		 <p>The TextScrap is placed onto the system clipboard as both a Text Layout Markup
		 representation and a plain text representation.</p>
		 
		 <p>Flash Player requires a user event (such as a key press or mouse click) before 
		 calling <codeph>setContents()</codeph>. In AIR, this restriction only applies to content outside of 
		 the application security sandbox. </p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#Event/COPY"><linktext>flash.events.Event.COPY</linktext></link><link href="" invalidHref="flash.events.xml#Event/CUT"><linktext>flash.events.Event.CUT</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="flashx.textLayout.edit:EditingMode"><apiName>EditingMode</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier></apiPackage><apiPackage id="flashx.textLayout.elements"><apiName>flashx.textLayout.elements</apiName><apiClassifier id="flashx.textLayout.elements:SubParagraphGroupElementBase"><apiName>SubParagraphGroupElementBase</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.elements:FlowGroupElement</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="flashx.textLayout.elements:SubParagraphGroupElementBase:SubParagraphGroupElementBase"><apiName>SubParagraphGroupElementBase</apiName><shortdesc> Constructor - creates a new SubParagraphGroupElementBase instance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> Constructor - creates a new SubParagraphGroupElementBase instance.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.elements:IConfiguration"><apiName>IConfiguration</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:clone"><apiName>clone</apiName><shortdesc> Creates a writeable clone of the IConfiguration object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.elements:Configuration</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> Creates a writeable clone of the IConfiguration object.
		 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="flashx.textLayout.elements:ContainerFormattedElement"><apiName>ContainerFormattedElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.elements:ParagraphFormattedElement</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="flashx.textLayout.elements:InlineGraphicElementStatus"><apiName>InlineGraphicElementStatus</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="flashx.textLayout.elements:ParagraphElement"><apiName>ParagraphElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flashx.textLayout.elements:ParagraphFormattedElement</apiBaseClassifier></apiClassifierDef><example conref="examples\ParagraphElementExample.as"/><example conref="examples\ParagraphElementExample2.as"/></apiClassifierDetail><apiOperation id="flashx.textLayout.elements:ParagraphElement:tlf_internal:decInteractiveChildrenCount"><apiName>decInteractiveChildrenCount</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="tlf_internal"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:ParagraphElement:findNextAtomBoundary"><apiName>findNextAtomBoundary</apiName><shortdesc> 
		 Scans ahead from the supplied position to find the location
		 in the text of the next atom and returns the index.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/><apiDesc>index in the text of the following atom
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>relativePosition</apiItemName><apiType value="int"/><apiDesc> position in the text to start from, counting from 0
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Scans ahead from the supplied position to find the location
		 in the text of the next atom and returns the index. The term atom refers to 
		 both graphic elements and characters (including groups of combining characters), the 
		 indivisible entities that make up a text line.
		 
		 </apiDesc><example conref="examples\ParagraphElement_findNextAtomBoundary.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.text.engine.TextLine.xml"><linktext>flash.text.engine.TextLine</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:ParagraphElement:findNextWordBoundary"><apiName>findNextWordBoundary</apiName><shortdesc> 
		 Returns the index of the next word boundary in the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/><apiDesc>index in the text of the next word boundary
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>relativePosition</apiItemName><apiType value="int"/><apiDesc> position in the text to start from, counting from 0
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Returns the index of the next word boundary in the text.
		 
		 <p>Scans ahead from the supplied position to find the next position
		 in the text that starts or ends a word. </p>
		 
		 </apiDesc><example conref="examples\ParagraphElement_findNextWordBoundary.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:ParagraphElement:findPreviousAtomBoundary"><apiName>findPreviousAtomBoundary</apiName><shortdesc> 
		 Scans backward from the supplied position to find the location
		 in the text of the previous atom and returns the index.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/><apiDesc>index in the text of the previous cluster
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>relativePosition</apiItemName><apiType value="int"/><apiDesc> position in the text to start from, counting from 0
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Scans backward from the supplied position to find the location
		 in the text of the previous atom and returns the index. The term atom refers to 
		 both graphic elements and characters (including groups of combining characters), the 
		 indivisible entities that make up a text line.
		 
		 </apiDesc><example conref="examples\ParagraphElement_findPreviousAtomBoundary.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.text.engine.TextLine.xml"><linktext>flash.text.engine.TextLine</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:ParagraphElement:findPreviousWordBoundary"><apiName>findPreviousWordBoundary</apiName><shortdesc> 
		 Returns the index of the previous word boundary in the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/><apiDesc>index in the text of the previous word boundary
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>relativePosition</apiItemName><apiType value="int"/><apiDesc> position in the text to start from, counting from 0
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Returns the index of the previous word boundary in the text.
		 
		 <p>Scans backward from the supplied position to find the previous position
		 in the text that starts or ends a word. </p>
		 
		 </apiDesc><example conref="examples\ParagraphElement_findPreviousWordBoundary.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:ParagraphElement:getNextParagraph"><apiName>getNextParagraph</apiName><shortdesc> Returns the paragraph that follows this one, or null if there are no more paragraphs.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.elements:ParagraphElement</apiOperationClassifier><apiDesc>the next paragraph or null if there are no more paragraphs.
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc> Returns the paragraph that follows this one, or null if there are no more paragraphs. 
		 
		 </apiDesc><example conref="examples\ParagraphElement_getNextParagraph.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#ParagraphElement/getPreviousParagraph()"><linktext>getPreviousParagraph()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:ParagraphElement:getPreviousParagraph"><apiName>getPreviousParagraph</apiName><shortdesc> Returns the paragraph that precedes this one, or null, if this paragraph is the first one 
		 in the TextFlow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.elements:ParagraphElement</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> Returns the paragraph that precedes this one, or null, if this paragraph is the first one 
		 in the TextFlow. 
		 
		 </apiDesc><example conref="examples\ParagraphElement_getPreviousParagraph.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#ParagraphElement/getNextParagraph()"><linktext>getNextParagraph()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:ParagraphElement:tlf_internal:hasInteractiveChildren"><apiName>hasInteractiveChildren</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="tlf_internal"/><apiReturn><apiType value="Boolean"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:ParagraphElement:tlf_internal:incInteractiveChildrenCount"><apiName>incInteractiveChildrenCount</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="tlf_internal"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiConstructor id="flashx.textLayout.elements:ParagraphElement:ParagraphElement"><apiName>ParagraphElement</apiName><shortdesc> Constructor - represents a paragraph in a text flow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> Constructor - represents a paragraph in a text flow. 
		
		</apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.elements:ParagraphFormattedElement"><apiName>ParagraphFormattedElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.elements:FlowGroupElement</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="flashx.textLayout.elements:ListItemElement"><apiName>ListItemElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flashx.textLayout.elements:ContainerFormattedElement</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="flashx.textLayout.elements:LinkElement"><apiName>LinkElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier>flashx.textLayout.elements:SubParagraphGroupElementBase</apiBaseClassifier></apiClassifierDef><example conref="examples\LinkElementExample.as"/><example conref="examples\LinkElementEventExample.as"/></apiClassifierDetail><apiOperation id="flashx.textLayout.elements:LinkElement:addEventListener"><apiName>addEventListener</apiName><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>The type of event.
		 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc>The listener function that processes the event. This function must accept an event object 
		 as its only parameter and must return nothing, as this example shows:
		 <p><codeph>function(evt:Event):void</codeph></p>
		 The function can have any name.
		 </apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Determines whether the listener works in the capture phase or the target 
		 and bubbling phases. If <codeph>useCapture</codeph> is set to <codeph>true</codeph>, the  
		 listener processes the event only during the capture phase and not in the target or 
		 bubbling phase. If <codeph>useCapture</codeph> is <codeph>false</codeph>, the listener processes the event only
		 during the target or bubbling phase. To listen for the event in all three phases, call 
		 <codeph>addEventListener()</codeph> twice, once with <codeph>useCapture</codeph> set to <codeph>true</codeph>, 
		 then again with <codeph>useCapture</codeph> set to <codeph>false</codeph>.
		 </apiDesc></apiParam><apiParam><apiItemName>priority</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>	The priority level of the event listener. Priorities are designated by a 32-bit integer. 
		 					The higher the number, the higher the priority. All listeners with priority <i>n</i> 
		 					are processed before listeners of priority <i>n-1</i>. If two or more listeners share 
		 					the same priority, they are processed in the order in which they were added. The default priority is 0. 
		 </apiDesc></apiParam><apiParam><apiItemName>useWeakReference</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Determines whether the reference to the listener is strong or weak. A strong 
		 reference (the default) prevents your listener from being garbage-collected. A weak 
		 reference does not. <p>Class-level member functions are not subject to garbage 
		 collection, so you can set <codeph>useWeakReference</codeph> to <codeph>true</codeph> for 
		 class-level member functions without subjecting them to garbage collection. If you set
		 <codeph>useWeakReference</codeph> to <codeph>true</codeph> for a listener that is a nested inner 
		 function, the function will be garbge-collected and no longer persistent. If you create 
		 references to the inner function (save it in another variable) then it is not 
		 garbage-collected and stays persistent.</p>
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:LinkElement:dispatchEvent"><apiName>dispatchEvent</apiName><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>evt</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:LinkElement:hasEventListener"><apiName>hasEventListener</apiName><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:LinkElement:removeEventListener"><apiName>removeEventListener</apiName><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>The type of event.
		 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc>The listener object to remove.
		 </apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Specifies whether the listener was registered for the capture phase or the target and bubbling phases. If the listener was registered for both the capture phase and the target and bubbling phases, two calls to <codeph>removeEventListener()</codeph> are required to remove both: one call with <codeph>useCapture</codeph> set to <codeph>true</codeph>, and another call with <codeph>useCapture</codeph> set to <codeph>false</codeph>. 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:LinkElement:willTrigger"><apiName>willTrigger</apiName><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc/></apiOperationDetail></apiOperation><apiConstructor id="flashx.textLayout.elements:LinkElement:LinkElement"><apiName>LinkElement</apiName><shortdesc> Constructor - creates a new LinkElement instance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> Constructor - creates a new LinkElement instance.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.elements:TCYElement"><apiName>TCYElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flashx.textLayout.elements:SubParagraphGroupElementBase</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="flashx.textLayout.elements:TCYElement:TCYElement"><apiName>TCYElement</apiName><shortdesc> Constructor - creates a new TCYElement instance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> Constructor - creates a new TCYElement instance.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.elements:SubParagraphGroupElement"><apiName>SubParagraphGroupElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flashx.textLayout.elements:SubParagraphGroupElementBase</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="flashx.textLayout.elements:SubParagraphGroupElement:SubParagraphGroupElement"><apiName>SubParagraphGroupElement</apiName><shortdesc> Constructor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> Constructor. 
         For information on using this class, see <xref href="http://blogs.adobe.com/tlf/2011/01/tlf-2-0-changes-subparagraphgroupelements-and-typename-applied-to-textfieldhtmlimporter-and-cssformatresolver.html">TLF 2.0 SubParagraphGroupElement and typeName</xref>.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.elements:IFormatResolver"><apiName>IFormatResolver</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="flashx.textLayout.elements:IFormatResolver:flashx.textLayout.elements:IFormatResolver:getResolverForNewFlow"><apiName>getResolverForNewFlow</apiName><shortdesc> Returns the format resolver when a TextFlow is copied.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.elements:IFormatResolver</apiOperationClassifier><apiDesc>the format resolver for the copy of the TextFlow.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>oldFlow</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier></apiParam><apiParam><apiItemName>newFlow</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier></apiParam></apiOperationDef><apiDesc> Returns the format resolver when a TextFlow is copied.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:IFormatResolver:flashx.textLayout.elements:IFormatResolver:invalidateAll"><apiName>invalidateAll</apiName><shortdesc> Invalidates any cached formatting information for a TextFlow so that formatting must be recomputed.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>textFlow</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier></apiParam></apiOperationDef><apiDesc> Invalidates any cached formatting information for a TextFlow so that formatting must be recomputed.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:IFormatResolver:flashx.textLayout.elements:IFormatResolver:invalidate"><apiName>invalidate</apiName><shortdesc> Invalidates cached formatting information on this element because, for example, the parent changed, 
		  or the id or the styleName changed or the typeName changed.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>target</apiItemName><apiType value="Object"/></apiParam></apiOperationDef><apiDesc> Invalidates cached formatting information on this element because, for example, the <codeph>parent</codeph> changed, 
		  or the <codeph>id</codeph> or the <codeph>styleName</codeph> changed or the <codeph>typeName</codeph> changed. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:IFormatResolver:flashx.textLayout.elements:IFormatResolver:resolveFormat"><apiName>resolveFormat</apiName><shortdesc> Given a FlowElement or ContainerController object, return any format settings for it.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>format settings for the specified object.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>target</apiItemName><apiType value="Object"/></apiParam></apiOperationDef><apiDesc> Given a FlowElement or ContainerController object, return any format settings for it.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:IFormatResolver:flashx.textLayout.elements:IFormatResolver:resolveUserFormat"><apiName>resolveUserFormat</apiName><shortdesc> Given a FlowElement or ContainerController object and the name of a format property, return the format value
		 or undefined if the value is not found.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="any"/><apiDesc>the value of the specified format for the specified object.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>target</apiItemName><apiType value="Object"/></apiParam><apiParam><apiItemName>userFormat</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc> Given a FlowElement or ContainerController object and the name of a format property, return the format value
		 or <codeph>undefined</codeph> if the value is not found.
		 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="flashx.textLayout.elements:TextFlow"><apiName>TextFlow</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier>flashx.textLayout.elements:ContainerFormattedElement</apiBaseClassifier></apiClassifierDef><example conref="examples\TextFlowExample.as"/></apiClassifierDetail><apiOperation id="flashx.textLayout.elements:TextFlow:addEventListener"><apiName>addEventListener</apiName><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam><apiParam><apiItemName>priority</apiItemName><apiType value="int"/><apiData>0</apiData></apiParam><apiParam><apiItemName>useWeakReference</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:TextFlow:dispatchEvent"><apiName>dispatchEvent</apiName><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:TextFlow:tlf_internal:getBackgroundManager"><apiName>getBackgroundManager</apiName><shortdesc> </shortdesc><prolog><asCustoms><private.>Returns the existing backgroundManager - creating it if it doesn't exist.  Use when adding backgrounds to draw.  </private.></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="tlf_internal"/><apiReturn><apiType value="flashx.textLayout.elements:BackgroundManager"/></apiReturn></apiOperationDef><apiDesc> </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:TextFlow:getElementByID"><apiName>getElementByID</apiName><shortdesc> Returns an element whose id property matches the idName parameter.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>The element whose id matches <codeph>idName</codeph>.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>idName</apiItemName><apiType value="String"/><apiDesc>The <codeph>id</codeph> value of the element to find.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Returns an element whose <codeph>id</codeph> property matches the <codeph>idName</codeph> parameter. Provides
		 the ability to apply a style based on the <codeph>id</codeph>. 
		 
		 <p>For example, the following line sets the style "color" to 0xFF0000 (red), for the
		 element having the <codeph>id</codeph> span1.</p>
		 
		 <codeblock rev="3.0">
		 textFlow.getElementByID("span1").setStyle("color", 0xFF0000);
		 </codeblock>
		 
		 <p><b>Note:</b> In the following code, <codeph>p.addChild(s)</codeph> <i>removes</i> <codeph>s</codeph> 
		 from its original parent and adds it to <codeph>p</codeph>, the new parent.</p>
		 
		 <codeblock rev="3.0">
		 var s:SpanElement = new SpanElement();
		 var p:ParagraphElement = new ParagraphElement();
		 ...
		 s = textFlow.getElementByID("span3") as SpanElement;
		 p.addChild(s);
		 textFlow.addChild(p);
		 </codeblock>
		 
		 </apiDesc><example conref="examples\TextFlow_getElementByIDExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/id"><linktext>FlowElement.id</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:TextFlow:getElementsByStyleName"><apiName>getElementsByStyleName</apiName><shortdesc> Returns all elements that have styleName set to styleNameValue.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Array"/><apiDesc>An array of the elements whose <codeph>styleName</codeph> value matches <codeph>styleNameValue</codeph>. For example,
		 all elements that have the style name "color".
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>styleNameValue</apiItemName><apiType value="String"/><apiDesc>The name of the style for which to find elements that have it set.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Returns all elements that have <codeph>styleName</codeph> set to <codeph>styleNameValue</codeph>.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/styleName"><linktext>FlowElement.styleName</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:TextFlow:getElementsByTypeName"><apiName>getElementsByTypeName</apiName><shortdesc> Returns all elements that have typeName set to typeNameValue.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Array"/><apiDesc>An array of the elements whose <codeph>typeName</codeph> value matches <codeph>typeNameValue</codeph>. For example,
		 all elements that have the type name "foo".
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>typeNameValue</apiItemName><apiType value="String"/><apiDesc>The name of the style for which to find elements that have it set.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Returns all elements that have <codeph>typeName</codeph> set to <codeph>typeNameValue</codeph>.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/styleName"><linktext>FlowElement.styleName</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:TextFlow:hasEventListener"><apiName>hasEventListener</apiName><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:TextFlow:invalidateAllFormats"><apiName>invalidateAllFormats</apiName><shortdesc> Invalidates all formatting information for the TextFlow, forcing it to be recomputed.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> Invalidates all formatting information for the TextFlow, forcing it to be recomputed.
		 Call this method when styles have changed.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#IFormatResolver/invalidateAll()"><linktext>IFormatResolver.invalidateAll()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:TextFlow:removeEventListener"><apiName>removeEventListener</apiName><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:TextFlow:willTrigger"><apiName>willTrigger</apiName><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc/></apiOperationDetail></apiOperation><apiConstructor id="flashx.textLayout.elements:TextFlow:TextFlow"><apiName>TextFlow</apiName><shortdesc> 
		 Constructor - creates a new TextFlow instance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>config</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.elements:IConfiguration</apiOperationClassifier><apiDesc>Specifies the configuration to use for this TextFlow object. If it's null, use 
		 <codeph>TextFlow.defaultConfiguration</codeph> to access configuration values. 
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Constructor - creates a new TextFlow instance.
		 
		 <p>If you provide a <codeph>config</codeph> parameter, the contents of the Configuration object are copied and
		 you cannot make changes. You can access configuration settings, however, through the 
		 <codeph>configuration</codeph> property. If the <codeph>config</codeph> parameter is null, you can access the default
		 configuration settings through the <codeph>defaultConfiguration</codeph> property.</p> 
		 
		 <p>The Configuration object provides a mechanism for setting configurable default attributes on a TextFlow.  
		 While you can't make changes to the Configuration object, you can override default attributes, if necessary, 
		 by setting the attributes of TextFlow and its children.</p>
		 
		 </apiDesc></apiConstructorDetail><related-links><link href="flashx.textLayout.elements.xml#Configuration"><linktext>Configuration</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow/configuration"><linktext>configuration</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow/defaultConfiguration"><linktext>defaultConfiguration</linktext></link></related-links></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.elements:OverflowPolicy"><apiName>OverflowPolicy</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="flashx.textLayout.elements:BreakElement"><apiName>BreakElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flashx.textLayout.elements:SpecialCharacterElement</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="flashx.textLayout.elements:BreakElement:BreakElement"><apiName>BreakElement</apiName><shortdesc> Constructor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> Constructor. 
		
		</apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.elements:GlobalSettings"><apiName>GlobalSettings</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="flashx.textLayout.elements:InlineGraphicElement"><apiName>InlineGraphicElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flashx.textLayout.elements:FlowLeafElement</apiBaseClassifier></apiClassifierDef><example conref="examples\InlineGraphicElementExample.as"/></apiClassifierDetail><apiConstructor id="flashx.textLayout.elements:InlineGraphicElement:InlineGraphicElement"><apiName>InlineGraphicElement</apiName><shortdesc> Constructor - create new InlineGraphicElement object
         
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> Constructor - create new InlineGraphicElement object
         
         </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.elements:FlowLeafElement"><apiName>FlowLeafElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.elements:FlowElement</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="flashx.textLayout.elements:FlowLeafElement:getComputedFontMetrics"><apiName>getComputedFontMetrics</apiName><shortdesc> Returns the FontMetrics object for the span.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.text.engine:FontMetrics"/><apiDesc>font metrics associated with the span
		 </apiDesc></apiReturn></apiOperationDef><apiDesc> Returns the FontMetrics object for the span. The properties of the FontMetrics object describe the 
		 emBox, strikethrough position, strikethrough thickness, underline position, 
		 and underline thickness for the specified font. 
		 
 		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.text.engine.FontMetrics.xml"><linktext>flash.text.engine.FontMetrics</linktext></link><link href="" invalidHref="flash.text.engine.xml#ElementFormat/getFontMetrics()"><linktext>flash.text.engine.ElementFormat.getFontMetrics()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowLeafElement:getNextLeaf"><apiName>getNextLeaf</apiName><shortdesc>
		 Returns the next FlowLeafElement object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.elements:FlowLeafElement</apiOperationClassifier><apiDesc>next FlowLeafElement or null if at the end
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>limitElement</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.elements:FlowGroupElement</apiOperationClassifier><apiDesc>Specifies FlowGroupElement on whose last leaf to stop looking. A value of null (default) 
		 	means search till no more elements.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the next FlowLeafElement object.  
		 
		 </apiDesc><example conref="examples\FlowLeafElement_getNextLeafExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowLeafElement:getPreviousLeaf"><apiName>getPreviousLeaf</apiName><shortdesc>
		 Returns the previous FlowLeafElement object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.elements:FlowLeafElement</apiOperationClassifier><apiDesc>previous leafElement or null if at the end
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>limitElement</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.elements:FlowGroupElement</apiOperationClassifier><apiDesc>Specifies the FlowGroupElement on whose first leaf to stop looking.   null (default) means search till no more elements.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the previous FlowLeafElement object.  
		 
		 </apiDesc><example conref="examples\FlowLeafElement_getPreviousLeafExample.as"/></apiOperationDetail></apiOperation><apiConstructor id="flashx.textLayout.elements:FlowLeafElement:FlowLeafElement"><apiName>FlowLeafElement</apiName><shortdesc> 
		 Base class - invoking new FlowLeafElement() throws an error exception.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> 
		 Base class - invoking new FlowLeafElement() throws an error exception. 
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.elements:Configuration"><apiName>Configuration</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.elements:IConfiguration</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><example conref="examples\ConfigurationExample.as"/></apiClassifierDetail><apiOperation id="flashx.textLayout.elements:Configuration:clone"><apiName>clone</apiName><shortdesc> Creates a clone of the Configuration object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.elements:Configuration</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> Creates a clone of the Configuration object.
		
		</apiDesc></apiOperationDetail></apiOperation><apiConstructor id="flashx.textLayout.elements:Configuration:Configuration"><apiName>Configuration</apiName><shortdesc> Constructor - creates a default configuration.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>initializeWithDefaults</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Specifies whether to initialize the configuration with
		the default values. Default is <codeph>true</codeph>. If set to <codeph>false</codeph>, initializes
		without default values, thereby saving some objects. The <codeph>clone()</codeph> method sets this
		to <codeph>false</codeph> and copies the properties from the original object.
		
		</apiDesc></apiParam></apiConstructorDef><apiDesc> Constructor - creates a default configuration. 
		
		</apiDesc></apiConstructorDetail><related-links><link href="flashx.textLayout.edit.xml#SelectionFormat"><linktext>SelectionFormat</linktext></link><link href="flashx.textLayout.compose.xml#StandardFlowComposer"><linktext>StandardFlowComposer</linktext></link></related-links></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.elements:FlowGroupElement"><apiName>FlowGroupElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.elements:FlowElement</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="flashx.textLayout.elements:FlowGroupElement:addChildAt"><apiName>addChildAt</apiName><shortdesc> 
		 Adds a child FlowElement object at the specified index position.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>The <codeph>index</codeph> is out of range.
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>the added child FlowElement 
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="uint"/><apiDesc>index of the position at which to add the child element, with the first position being 0.
		 </apiDesc></apiParam><apiParam><apiItemName>child</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>The child element to add.
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Adds a child FlowElement object at the specified index position.
		 
		 </apiDesc><example conref="examples\FlowGroupElement_addChildAtExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowGroupElement:addChild"><apiName>addChild</apiName><shortdesc> 
		 Appends a child FlowElement object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>the added child FlowElement 
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>child</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>The child element to append.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Appends a child FlowElement object. The new child is added to the end of the children list.
		 
		 </apiDesc><example conref="examples\FlowGroupElement_addChildExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowGroupElement:findChildIndexAtPosition"><apiName>findChildIndexAtPosition</apiName><shortdesc>
		 Given a relative text position, find the index of the first child FlowElement that contains the relative position.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/><apiDesc>index of first child element containing <codeph>relativePosition</codeph>
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>relativePosition</apiItemName><apiType value="int"/><apiDesc>	the position relative to this element
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Given a relative text position, find the index of the first child FlowElement that contains the relative position. 
		 More than one child can contain relative position because of zero length FlowElements.
		  
		 <p>Examine the children to find the FlowElement that contains the relative position. The supplied relative position 
		 is relative to this FlowElement.</p>
		 
		 </apiDesc><example conref="examples\FlowGroupElement_findChildIndexAtPositionExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowGroupElement:findLeaf"><apiName>findLeaf</apiName><shortdesc>
		 Given a relative text position, find the leaf element that contains the position.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.elements:FlowLeafElement</apiOperationClassifier><apiDesc>the leaf element containing the relative position.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>relativePosition</apiItemName><apiType value="int"/><apiDesc>relative text index to look up.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Given a relative text position, find the leaf element that contains the position. 
		 
		 <p>Looks down the flow element hierarchy to find the FlowLeafElement that 
		 contains the specified position. The specified position 
		 is relative to this FlowElement object.</p>
		 
		 </apiDesc><example conref="examples\FlowGroupElement_findLeafExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowGroupElement:getChildAt"><apiName>getChildAt</apiName><shortdesc> 
		 Returns the FlowElement child at the specified index.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>the child FlowElement object at the specified position.
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>the position at which to find the FlowElement object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Returns the FlowElement child at the specified index.
		 
		 </apiDesc><example conref="examples\FlowGroupElement_getChildAtExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowGroupElement:getChildIndex"><apiName>getChildIndex</apiName><shortdesc> 
		 Searches in children for the specified FlowElement object and returns its index position.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/><apiDesc>The index position of the specified chilc.  If <codeph>child</codeph> is not found, returns -1.
		  
		 </apiDesc></apiReturn><apiParam><apiItemName>child</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>The FlowElement object item to locate among the children.
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Searches in children for the specified FlowElement object and returns its index position.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowGroupElement:getFirstLeaf"><apiName>getFirstLeaf</apiName><shortdesc>
		 Returns the first FlowLeafElement descendant of this group.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.elements:FlowLeafElement</apiOperationClassifier><apiDesc>the first FlowLeafElement object.
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Returns the first FlowLeafElement descendant of this group.
		 
		 </apiDesc><example conref="examples\FlowGroupElement_getFirstLeafExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowGroupElement:getLastLeaf"><apiName>getLastLeaf</apiName><shortdesc>
		 Returns the last FlowLeafElement descendent of this group.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.elements:FlowLeafElement</apiOperationClassifier><apiDesc>the last FlowLeafElement object.
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Returns the last FlowLeafElement descendent of this group.
		 
		 </apiDesc><example conref="examples\FlowGroupElement_getLastLeafExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowGroupElement:getText"><apiName>getText</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="String"/></apiReturn><apiParam><apiItemName>relativeStart</apiItemName><apiType value="int"/><apiData>0</apiData></apiParam><apiParam><apiItemName>relativeEnd</apiItemName><apiType value="int"/><apiData>-1</apiData></apiParam><apiParam><apiItemName>paragraphSeparator</apiItemName><apiType value="String"/><apiData> </apiData></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowGroupElement:removeChildAt"><apiName>removeChildAt</apiName><shortdesc> 
		 Removes the child FlowElement object at the specified index position.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>The <codeph>index</codeph> is out of range.
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>the child FlowElement object removed from the specified position.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="uint"/><apiDesc>position at which to remove the child element.
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Removes the child FlowElement object at the specified index position.
		 
		 </apiDesc><example conref="examples\FlowGroupElement_removeChildAtExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowGroupElement:removeChild"><apiName>removeChild</apiName><shortdesc> 
		 Removes the specified child FlowElement object from the group.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>The <codeph>child</codeph> is not found.
		 
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>the removed child FlowElement object 
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>child</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>The child element to remove.
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Removes the specified child FlowElement object from the group.
		 
		 </apiDesc><example conref="examples\FlowGroupElement_removeChildExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowGroupElement:replaceChildren"><apiName>replaceChildren</apiName><shortdesc>
		 Replaces child elements in the group with the specified new elements.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>The <codeph>beginChildIndex</codeph> or <codeph>endChildIndex</codeph> specified is out of range.
	     
	     </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>beginChildIndex</apiItemName><apiType value="int"/><apiDesc>The index value for the start position of the replacement range in the children array.
		 </apiDesc></apiParam><apiParam><apiItemName>endChildIndex</apiItemName><apiType value="int"/><apiDesc>The index value following the end position of the replacement range in the children array.
		 </apiDesc></apiParam><apiParam><apiItemName>rest</apiItemName><apiType value="restParam"/><apiDesc>The elements to replace the specified range of elements. Can be a sequence containing flow elements or
		 arrays or vectors thereof.
		  
	     </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Replaces child elements in the group with the specified new elements. Use the <codeph>beginChildIndex</codeph> and
		 <codeph>endChildIndex</codeph> parameters to govern the operation as follows:
		 <p><ul>
		 <li>To delete elements, do not pass any replacement elements.</li>
		 <li>To insert elements, pass the same value for <codeph>beginChildIndex</codeph> and <codeph>endChildIndex</codeph>.  
		 The new elements is inserted before the specified index.</li>
		 <li>To append elements, pass <codeph>numChildren</codeph> for <codeph>beginChildIndex</codeph> and <codeph>endChildIndex</codeph>.</li>
		 </ul></p>
		 <p>Otherwise, this method replaces the specified elements, starting with the element at <codeph>beginChildIndex</codeph> 
		 and up to but not including <codeph>endChildIndex</codeph>.</p>
		 
		 </apiDesc><example conref="examples\FlowGroupElement_replaceChildrenExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowGroupElement:splitAtIndex"><apiName>splitAtIndex</apiName><shortdesc> 
		 Splits this object at the position specified by the childIndex parameter.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>if <codeph>childIndex</codeph> is greater than the length of the children.
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>flashx.textLayout.elements:FlowGroupElement</apiOperationClassifier><apiDesc>the new FlowGroupElement object.
		 </apiDesc></apiReturn><apiParam><apiItemName>childIndex</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc> 
		 Splits this object at the position specified by the <codeph>childIndex</codeph> parameter. If this group element has 
		 a parent, creates a shallow copy of this object and replaces its children with the elements up to the index. Moves 
		 elements following <codeph>childIndex</codeph> into the copy.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="flashx.textLayout.elements:FlowGroupElement:FlowGroupElement"><apiName>FlowGroupElement</apiName><shortdesc> Base class - invoking new FlowGroupElement() throws an error exception.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> Base class - invoking <codeph>new FlowGroupElement()</codeph> throws an error exception.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.elements:SpanElement"><apiName>SpanElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.elements:FlowLeafElement</apiBaseClassifier></apiClassifierDef><example conref="SpanElementExample.as"/></apiClassifierDetail><apiOperation id="flashx.textLayout.elements:SpanElement:replaceText"><apiName>replaceText</apiName><shortdesc> 
		 Updates the text in text span based on the specified start and end positions.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>The <codeph>relativeStartPosition</codeph> or <codeph>relativeEndPosition</codeph> specified is out of 
		 range or a surrogate pair is being split as a result of the replace.
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>relativeStartPosition</apiItemName><apiType value="int"/><apiDesc>The index position of the beginning of the text to be replaced, 
		   relative to the start of the span. The first character in the span is at position 0.
		  </apiDesc></apiParam><apiParam><apiItemName>relativeEndPosition</apiItemName><apiType value="int"/><apiDesc>The index one position after the last character of the text to be replaced, 
		   relative to the start of the span. Set this value equal to <codeph>relativeStartPos</codeph>
		   for an insert. 
		  </apiDesc></apiParam><apiParam><apiItemName>textValue</apiItemName><apiType value="String"/><apiDesc>The replacement text or the text to add, as the case may be.
		 
		  </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Updates the text in text span based on the specified start and end positions. To insert text, set the end position
		 equal to the start position. To append text to the existing text in the span, set the start position and the
		 end position equal to the length of the existing text.
		 
		 <p>The replaced text includes the start character and up to but not including the end character.</p>
		 
		  </apiDesc><example conref="SpanElement_replaceTextExample.as"/></apiOperationDetail></apiOperation><apiConstructor id="flashx.textLayout.elements:SpanElement:SpanElement"><apiName>SpanElement</apiName><shortdesc> Constructor - creates a SpanElement object to hold a run of text in a paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> Constructor - creates a SpanElement object to hold a run of text in a paragraph.
		
		</apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.elements:LinkState"><apiName>LinkState</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><example conref="examples\LinkStateExample.as"/></apiClassifierDetail></apiClassifier><apiClassifier id="flashx.textLayout.elements:DivElement"><apiName>DivElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flashx.textLayout.elements:ContainerFormattedElement</apiBaseClassifier></apiClassifierDef><example conref="examples\DivElementExample.as"/></apiClassifierDetail></apiClassifier><apiClassifier id="flashx.textLayout.elements:FlowElement"><apiName>FlowElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.formats:ITextLayoutFormat</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="flashx.textLayout.elements:FlowElement:clearStyle"><apiName>clearStyle</apiName><shortdesc> Clears the style specified by the styleProp parameter from this FlowElement object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>The name of the style to clear.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Clears the style specified by the <codeph>styleProp</codeph> parameter from this FlowElement object. Sets 
		 the value to <codeph>undefined</codeph>.
		 
		 </apiDesc><example conref="examples\FlowElement_clearStyleExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/getStyle()"><linktext>getStyle()</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement/setStyle()"><linktext>setStyle()</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement/userStyles"><linktext>userStyles</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:deepCopy"><apiName>deepCopy</apiName><shortdesc>
		 Makes a deep copy of this FlowElement object, including any children, copying the content between the two specified
		 character positions and returning the copy as a FlowElement object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>the object created by the deep copy operation.
		 </apiDesc></apiReturn><apiParam><apiItemName>relativeStart</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>relative text position of the first character to copy. First position is 0.
		 </apiDesc></apiParam><apiParam><apiItemName>relativeEnd</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>relative text position of the last character to copy. A value of -1 indicates copy to end.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Makes a deep copy of this FlowElement object, including any children, copying the content between the two specified
		 character positions and returning the copy as a FlowElement object.
		 
		 <p>With no arguments, <codeph>deepCopy()</codeph> defaults to copying the entire element.</p>
		 
		 </apiDesc><example conref="examples\FlowElement_deepCopyExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/shallowCopy()"><linktext>shallowCopy()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:equalUserStyles"><apiName>equalUserStyles</apiName><shortdesc> Compare the userStyles of this with otherElement's userStyles.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>true if the user styles are equal; false otherwise.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>otherElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>the FlowElement object with which to compare user styles
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Compare the userStyles of this with otherElement's userStyles. 
		 
		 </apiDesc><example conref="examples\FlowElement_equalUserStylesExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/getStyle()"><linktext>getStyle()</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement/setStyle()"><linktext>setStyle()</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement/userStyles"><linktext>userStyles</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:getAbsoluteStart"><apiName>getAbsoluteStart</apiName><shortdesc>
		 Returns the start location of the element in the text flow as an absolute index.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/><apiDesc>The index of the start of the element from the start of the TextFlow object.
 		 
 		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Returns the start location of the element in the text flow as an absolute index. The first character in the flow
		 is position 0.
		 
		 </apiDesc><example conref="examples\FlowElement_getAbsoluteStartExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/parentRelativeStart"><linktext>parentRelativeStart</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:getCharAtPosition"><apiName>getCharAtPosition</apiName><shortdesc> 
		Returns the character at the specified position, relative to this FlowElement object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/><apiDesc>String containing the character.
		
		</apiDesc></apiReturn><apiParam><apiItemName>relativePosition</apiItemName><apiType value="int"/><apiDesc>The relative position of the character in this FlowElement object.
		</apiDesc></apiParam></apiOperationDef><apiDesc> 
		Returns the character at the specified position, relative to this FlowElement object. The first
		character is at relative position 0.
		
		</apiDesc><example conref="examples\FlowElement_getCharAtPositionExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/getCharCodeAtPosition()"><linktext>getCharCodeAtPosition()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:getCharCodeAtPosition"><apiName>getCharCodeAtPosition</apiName><shortdesc> Returns the character code at the specified position, relative to this FlowElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/><apiDesc>the Unicode value for the character at the specified position.
		
		</apiDesc></apiReturn><apiParam><apiItemName>relativePosition</apiItemName><apiType value="int"/><apiDesc>	The relative position of the character in this FlowElement object.
		
		</apiDesc></apiParam></apiOperationDef><apiDesc> Returns the character code at the specified position, relative to this FlowElement. The first
		character is at relative position 0.
		
		</apiDesc><example conref="examples\FlowElement_getCharCodeAtPositionExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/getCharAtPosition()"><linktext>getCharAtPosition()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:getElementRelativeStart"><apiName>getElementRelativeStart</apiName><shortdesc>
		 Returns the start of this element relative to an ancestor element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/><apiDesc>the offset of this element.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>ancestorElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>The element from which you want to find the relative start of this element.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the start of this element relative to an ancestor element. Assumes that the
		 ancestor element is in the parent chain. If the ancestor element is the parent, this is the
		 same as <codeph>this.parentRelativeStart</codeph>.  If the ancestor element is the grandparent, this is the same as 
		 <codeph>parentRelativeStart</codeph> plus <codeph>parent.parentRelativeStart</codeph> and so on.
		 
		 </apiDesc><example conref="examples\FlowElement_getElementRelativeStartExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/getAbsoluteStart()"><linktext>getAbsoluteStart()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:getNextSibling"><apiName>getNextSibling</apiName><shortdesc> Returns the next FlowElement sibling in the text flow hierarchy.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>the next FlowElement object of the same type, or null if there is no sibling.
		
		</apiDesc></apiReturn></apiOperationDef><apiDesc> Returns the next FlowElement sibling in the text flow hierarchy. 
		
		</apiDesc><example conref="examples\FlowElement_getNextSiblingExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/getPreviousSibling()"><linktext>getPreviousSibling()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:getParagraph"><apiName>getParagraph</apiName><shortdesc>
		 Returns the ParagraphElement object associated with this element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.elements:ParagraphElement</apiOperationClassifier><apiDesc>the ParagraphElement object that's associated with this FlowElement object.
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Returns the ParagraphElement object associated with this element. It looks up the text flow hierarchy and returns 
		 the first ParagraphElement object.
		 
		 </apiDesc><example conref="examples\FlowElement_getParagraphExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/getTextFlow()"><linktext>getTextFlow()</linktext></link><link href="flashx.textLayout.elements.xml#ParagraphElement"><linktext>ParagraphElement</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:getPreviousSibling"><apiName>getPreviousSibling</apiName><shortdesc> Returns the previous FlowElement sibling in the text flow hierarchy.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>the previous FlowElement object of the same type, or null if there is no previous sibling.
		
		</apiDesc></apiReturn></apiOperationDef><apiDesc> Returns the previous FlowElement sibling in the text flow hierarchy. 
		
		</apiDesc><example conref="examples\FlowElement_getPreviousSiblingExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/getNextSibling()"><linktext>getNextSibling()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:getStyle"><apiName>getStyle</apiName><shortdesc> Returns the value of the style specified by the styleProp parameter, which specifies
		 the style name and can include any user style name.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="any"/><apiDesc>The value of the specified style. The type varies depending on the type of the style being
		 accessed. Returns <codeph>undefined</codeph> if the style is not set.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>The name of the style whose value is to be retrieved.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Returns the value of the style specified by the <codeph>styleProp</codeph> parameter, which specifies
		 the style name and can include any user style name. Accesses an existing span, paragraph, text flow,
		 or container style. Searches the parent tree if the style's value is <codeph>undefined</codeph> on a 
		 particular element.
		 
		 </apiDesc><example conref="examples\FlowElement_getStyleExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/clearStyle()"><linktext>clearStyle()</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement/setStyle()"><linktext>setStyle()</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement/userStyles"><linktext>userStyles</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:getTextFlow"><apiName>getTextFlow</apiName><shortdesc>
		 Climbs the text flow hierarchy to return the root TextFlow object for the element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier><apiDesc>The root TextFlow object for this FlowElement object.
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Climbs the text flow hierarchy to return the root TextFlow object for the element.
		 
		 </apiDesc><example conref="examples\FlowElement_getTextFlowExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:getText"><apiName>getText</apiName><shortdesc> 
		 Gets the specified range of text from a flow element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/><apiDesc>The requested text.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>relativeStart</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>The starting position of the range of text to be retrieved, relative to the start of the FlowElement
		 </apiDesc></apiParam><apiParam><apiItemName>relativeEnd</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>The ending position of the range of text to be retrieved, relative to the start of the FlowElement, -1 for up to the end of the element
		 </apiDesc></apiParam><apiParam><apiItemName>paragraphSeparator</apiItemName><apiType value="String"/><apiData> </apiData><apiDesc>character to put between paragraphs
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Gets the specified range of text from a flow element.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:initialized"><apiName>initialized</apiName><shortdesc> Called for MXML objects after the implementing object has been created and all component properties specified on the MXML tag have been initialized.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>document</apiItemName><apiType value="Object"/><apiDesc>The MXML document that created the object.
		 </apiDesc></apiParam><apiParam><apiItemName>id</apiItemName><apiType value="String"/><apiDesc>The identifier used by document to refer to this object.
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Called for MXML objects after the implementing object has been created and all component properties specified on the MXML tag have been initialized. 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:setStyle"><apiName>setStyle</apiName><shortdesc> Sets the style specified by the styleProp parameter to the value specified by the
		newValue parameter.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>The name of the style to set.
		</apiDesc></apiParam><apiParam><apiItemName>newValue</apiItemName><apiType value="any"/><apiDesc>The value to which to set the style.
		
		</apiDesc></apiParam></apiOperationDef><apiDesc> Sets the style specified by the <codeph>styleProp</codeph> parameter to the value specified by the
		<codeph>newValue</codeph> parameter. You can set a span, paragraph, text flow, or container style, including
		any user name-value pair.
		
		<p><b>Note:</b> If you assign a custom style, Text Layout Framework can import and export it but
		compiled MXML cannot support it.</p>
		
		</apiDesc><example conref="examples\FlowElement_setStyleExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/clearStyle()"><linktext>clearStyle()</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement/getStyle()"><linktext>getStyle()</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement/userStyles"><linktext>userStyles</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:shallowCopy"><apiName>shallowCopy</apiName><shortdesc>
		 Makes a copy of this FlowElement object, copying the content between two specified character positions.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>the object created by the copy operation.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>relativeStart</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>The relative text position of the first character to copy. First position is 0.
		 </apiDesc></apiParam><apiParam><apiItemName>relativeEnd</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>The relative text position of the last character to copy. A value of -1 indicates copy to end.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Makes a copy of this FlowElement object, copying the content between two specified character positions.
		 It returns the copy as a new FlowElement object. Unlike <codeph>deepCopy()</codeph>, <codeph>shallowCopy()</codeph> does
		 not copy any of the children of this FlowElement object. 
		 
		 <p>With no arguments, <codeph>shallowCopy()</codeph> defaults to copying all of the content.</p>
		 
		 </apiDesc><example conref="examples\FlowElement_shallowCopyExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/deepCopy()"><linktext>deepCopy()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:splitAtPosition"><apiName>splitAtPosition</apiName><shortdesc> 
		 Splits this FlowElement object at the position specified by the relativePosition parameter, which is
		 a relative position in the text for this element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>if <codeph>relativePosition</codeph> is greater than <codeph>textLength</codeph>, or less than 0.
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>the new object, which contains the content of the original object, starting at the specified position.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>relativePosition</apiItemName><apiType value="int"/><apiDesc>the position at which to split the content of the original object, with the first position being 0.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Splits this FlowElement object at the position specified by the <codeph>relativePosition</codeph> parameter, which is
		 a relative position in the text for this element. This method splits only SpanElement and FlowGroupElement 
		 objects.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="flashx.textLayout.elements:FlowElement:FlowElement"><apiName>FlowElement</apiName><shortdesc> Base class - invoking new FlowElement() throws an error exception.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> Base class - invoking <codeph>new FlowElement()</codeph> throws an error exception.
		
		</apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.elements:TextRange"><apiName>TextRange</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="flashx.textLayout.elements:TextRange:updateRange"><apiName>updateRange</apiName><shortdesc> Update the range with new anchor or active position values.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>true if selection is changed.
		 </apiDesc></apiReturn><apiParam><apiItemName>newAnchorPosition</apiItemName><apiType value="int"/><apiDesc>the anchor index of the selection.
		  </apiDesc></apiParam><apiParam><apiItemName>newActivePosition</apiItemName><apiType value="int"/><apiDesc>the active index of the selection.
		  </apiDesc></apiParam></apiOperationDef><apiDesc> Update the range with new anchor or active position values.
		
		</apiDesc></apiOperationDetail></apiOperation><apiConstructor id="flashx.textLayout.elements:TextRange:TextRange"><apiName>TextRange</apiName><shortdesc> Constructor - creates a new TextRange instance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>root</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier><apiDesc>the TextFlow associated with the selection.
		 </apiDesc></apiParam><apiParam><apiItemName>anchorIndex</apiItemName><apiType value="int"/><apiDesc>the index position of the anchor in the selection. The first position in the text is position 0.
		 </apiDesc></apiParam><apiParam><apiItemName>activeIndex</apiItemName><apiType value="int"/><apiDesc>the index position of the active location in the selection. The first position in the text is position 0. 
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> Constructor - creates a new TextRange instance.  A TextRange can be (-1,-1), indicating no range, or a pair of 
		values from 0 to <codeph>TextFlow.textLength</codeph>.
		
		</apiDesc></apiConstructorDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/textLength"><linktext>FlowElement.textLength</linktext></link></related-links></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.elements:TabElement"><apiName>TabElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flashx.textLayout.elements:SpecialCharacterElement</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="flashx.textLayout.elements:TabElement:TabElement"><apiName>TabElement</apiName><shortdesc> Constructor - creates a new TabElement instance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> Constructor - creates a new TabElement instance. 
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.elements:ListElement"><apiName>ListElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.elements:ContainerFormattedElement</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="flashx.textLayout.elements:SpecialCharacterElement"><apiName>SpecialCharacterElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.elements:SpanElement</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="flashx.textLayout.elements:SpecialCharacterElement:SpecialCharacterElement"><apiName>SpecialCharacterElement</apiName><shortdesc>  
		 Base class - invoking new SpecialCharacterElement() throws an error exception.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>  
		 Base class - invoking <codeph>new SpecialCharacterElement()</codeph> throws an error exception.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier></apiPackage><apiPackage id="flashx.textLayout.events"><apiName>flashx.textLayout.events</apiName><apiClassifier id="flashx.textLayout.events:StatusChangeEvent"><apiName>StatusChangeEvent</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><example conref="examples\StatusChangeEvent_example.as"/></apiClassifierDetail><apiConstructor id="flashx.textLayout.events:StatusChangeEvent:StatusChangeEvent"><apiName>StatusChangeEvent</apiName><shortdesc> Creates an event object that contains information about a status change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>	The type of the event. Event listeners can access this information through the
		 inherited <codeph>type</codeph> property. There is only one type of StatusChangeEvent: 
		 <codeph>StatusChangeEvent.INLINE_GRAPHIC_STATUS_CHANGE</codeph>; 
		 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>	Indicates whether an event is a bubbling event.This event does not bubble.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>	Indicates whether the behavior associated with the event can be prevented.
		 This event cannot be cancelled.
		 </apiDesc></apiParam><apiParam><apiItemName>element</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>The FlowElement instance that has experienced a change in status.
		 </apiDesc></apiParam><apiParam><apiItemName>status</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>The FlowElement instance's new status.
		 </apiDesc></apiParam><apiParam><apiItemName>errorEvent</apiItemName><apiType value="flash.events:ErrorEvent"/><apiData>null</apiData><apiDesc>The ErrorEvent object, if any, associated with the status.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> Creates an event object that contains information about a status change.
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.events:FlowElementMouseEvent"><apiName>FlowElementMouseEvent</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><example conref="examples\FlowElementMouseEvent_example.as"/></apiClassifierDetail><apiConstructor id="flashx.textLayout.events:FlowElementMouseEvent:FlowElementMouseEvent"><apiName>FlowElementMouseEvent</apiName><shortdesc> 
		 Creates an event object that contains information about mouse activity.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc> The type of the event. Event listeners can access this information through the
		 inherited <codeph>type</codeph> property. There are six types:
		 <codeph>FlowElementMouseEvent.CLICK</codeph>; <codeph>FlowElementMouseEvent.MOUSE_DOWN</codeph>; <codeph>FlowElementMouseEvent.MOUSE_MOVE</codeph>;
		 <codeph>FlowElementMouseEvent.MOUSE_UP</codeph>; <codeph>FlowElementMouseEvent.ROLL_OVER</codeph>; and <codeph>FlowElementMouseEvent.ROLL_OUT</codeph>.
		 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Determines whether the Event object participates in the bubbling phase of the
		 event flow. FlowElementMouseEvent objects do not bubble.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Determines whether the Event object can be canceled. Event listeners can
		 access this information through the inherited <codeph>cancelable</codeph> property. FlowElementMouseEvent
		 objects can be cancelled. You can cancel the default behavior associated with this event
		 by calling the <codeph>preventDefault()</codeph> method in your event listener.
		 </apiDesc></apiParam><apiParam><apiItemName>flowElement</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>The instance of FlowElement, currently a LinkElement, associated with this
		 event. Event listeners can access this information through the <codeph>flowElement</codeph> property.
		 </apiDesc></apiParam><apiParam><apiItemName>originalEvent</apiItemName><apiType value="flash.events:MouseEvent"/><apiData>null</apiData><apiDesc>The original mouse event that occurred on the flowElement. Event listeners can 
		 access this information through the <codeph>originalEvent</codeph> property.

		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Creates an event object that contains information about mouse activity.
		 Event objects are passed as parameters to event listeners. Use the
		 constructor if you plan to manually dispatch an event. You do not need
		 to use the constructor to listen for FlowElementMouseEvent objects
		 generated by a FlowElement.
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.events:CompositionCompleteEvent"><apiName>CompositionCompleteEvent</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><example conref="examples\CompositionCompleteEvent_example.as"/></apiClassifierDetail><apiConstructor id="flashx.textLayout.events:CompositionCompleteEvent:CompositionCompleteEvent"><apiName>CompositionCompleteEvent</apiName><shortdesc> Constructor
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>event type - use the static property COMPOSITION_COMPLETE.
		 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Indicates whether an event is a bubbling event. This event does not bubble.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Indicates whether the behavior associated with the event can be prevented.
		 This event cannot be cancelled.
		 </apiDesc></apiParam><apiParam><apiItemName>textFlow</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier><apiDesc>The TextFlow which was composed
		 </apiDesc></apiParam><apiParam><apiItemName>compositionStart</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>start of composition, in terms of an index into the text flow.
		 </apiDesc></apiParam><apiParam><apiItemName>compositionLength</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>length number of characters composed
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> Constructor
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.events:DamageEvent"><apiName>DamageEvent</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><example conref="examples\DamageEvent_example.as"/></apiClassifierDetail><apiConstructor id="flashx.textLayout.events:DamageEvent:DamageEvent"><apiName>DamageEvent</apiName><shortdesc> Constructor
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>text index of the start of the damage
		 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>length of text that was damaged
		 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam><apiParam><apiItemName>textFlow</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier></apiParam><apiParam><apiItemName>damageAbsoluteStart</apiItemName><apiType value="int"/><apiData>0</apiData></apiParam><apiParam><apiItemName>damageLength</apiItemName><apiType value="int"/><apiData>0</apiData></apiParam></apiConstructorDef><apiDesc> Constructor
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.events:SelectionEvent"><apiName>SelectionEvent</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><example conref="examples\SelectionEvent_example.as"/></apiClassifierDetail><apiConstructor id="flashx.textLayout.events:SelectionEvent:SelectionEvent"><apiName>SelectionEvent</apiName><shortdesc> 
		 Creates an event object that contains information about a flow operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>	The type of the event. Event listeners can access this information through the
		 inherited <codeph>type</codeph> property. There is only one type of SelectionEvent: 
		 <codeph>SelectionEvent.SELECTION_CHANGE</codeph>; 
		 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>	Indicates whether an event is a bubbling event.This event does not bubble.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>	Indicates whether the behavior associated with the event can be prevented.
		 </apiDesc></apiParam><apiParam><apiItemName>selectionState</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>	An object of type ElementRange that describes the range of text selected.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Creates an event object that contains information about a flow operation.
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.events:FlowOperationEvent"><apiName>FlowOperationEvent</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><example conref="examples\FlowOperationEvent_example.as"/></apiClassifierDetail><apiConstructor id="flashx.textLayout.events:FlowOperationEvent:FlowOperationEvent"><apiName>FlowOperationEvent</apiName><shortdesc> Creates an event object that contains information about a flow operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>		The type of the event. Event listeners can access this information through the
		 inherited <codeph>type</codeph> property. There are two types: 
		 <codeph>FlowOperationEvent.FLOW_OPERATION_BEGIN</codeph>; 
		 <codeph>FlowOperationEvent.FLOW_OPERATION_END</codeph>.
		 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>		Indicates whether an event is a bubbling event.This event does not bubble.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>	Indicates whether the behavior associated with the event can be prevented.
		 This event can be cancelled by calling the <codeph>Event.preventDefault()</codeph> method in
		 your event handler function.
		 </apiDesc></apiParam><apiParam><apiItemName>operation</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.operations:FlowOperation</apiOperationClassifier><apiDesc>	The FlowOperation that is about to commence or that has just ended.
		 </apiDesc></apiParam><apiParam><apiItemName>level</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>		Any Error generating during the operation.
		 </apiDesc></apiParam><apiParam><apiItemName>error</apiItemName><apiType value="Error"/><apiData>null</apiData></apiParam></apiConstructorDef><apiDesc> Creates an event object that contains information about a flow operation.
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.events:ScrollEvent"><apiName>ScrollEvent</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.events:TextLayoutEvent</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="flashx.textLayout.events:ScrollEvent:ScrollEvent"><apiName>ScrollEvent</apiName><shortdesc>
		  Constructor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>The event type; indicates the action that caused the event.
		 
		  </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Specifies whether the event can bubble
		  up the display list hierarchy.
		 
		  </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Specifies whether the behavior associated with the event
		  can be prevented.
		 
		 
		  </apiDesc></apiParam><apiParam><apiItemName>direction</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>The change in scroll position, expressed in pixels.
		  
		 </apiDesc></apiParam><apiParam><apiItemName>delta</apiItemName><apiType value="Number"/><apiData>unknown</apiData></apiParam></apiConstructorDef><apiDesc>
		  Constructor.
		 
		  Scroll events are dispatched when a container has scrolled. 
		 
		  </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.events:TextLayoutEvent"><apiName>TextLayoutEvent</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><example conref="examples\TextLayoutEvent_example.as"/></apiClassifierDetail><apiConstructor id="flashx.textLayout.events:TextLayoutEvent:TextLayoutEvent"><apiName>TextLayoutEvent</apiName><shortdesc>
		  The TextLayoutEvent class represents the event object passed to
		  the event listener for many Text Layout events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiConstructorDef><apiDesc>
		  The TextLayoutEvent class represents the event object passed to
		  the event listener for many Text Layout events.
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.events:ScrollEventDirection"><apiName>ScrollEventDirection</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="flashx.textLayout.events:UpdateCompleteEvent"><apiName>UpdateCompleteEvent</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><example conref="examples\DamageEvent_example.as"/></apiClassifierDetail><apiConstructor id="flashx.textLayout.events:UpdateCompleteEvent:UpdateCompleteEvent"><apiName>UpdateCompleteEvent</apiName><shortdesc> Constructor
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>event type - use the static property UPDATE_COMPLETE.
		 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Indicates whether an event is a bubbling event. This event does not bubble.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Indicates whether the behavior associated with the event can be prevented.
		 This event cannot be cancelled.
		 </apiDesc></apiParam><apiParam><apiItemName>textFlow</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier><apiDesc>The ContainerController whose container was updated
		 </apiDesc></apiParam><apiParam><apiItemName>controller</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.container:ContainerController</apiOperationClassifier><apiDesc>The TextFlow which was updated
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> Constructor
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier></apiPackage><apiPackage id="flashx.textLayout.factory"><apiName>flashx.textLayout.factory</apiName><apiClassifier id="flashx.textLayout.factory:TruncationOptions"><apiName>TruncationOptions</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="flashx.textLayout.factory:TruncationOptions:TruncationOptions"><apiName>TruncationOptions</apiName><shortdesc> 
		 Creates a TruncationOptions object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>truncationIndicator</apiItemName><apiType value="String"/><apiData>unknown</apiData><apiDesc>the string used to indicate that text has been truncated. 
		 It appears at the end of the composed text. The default value is the horizontal ellipsis (U+2026).
		 </apiDesc></apiParam><apiParam><apiItemName>lineCountLimit</apiItemName><apiType value="int"/><apiData>unknown</apiData><apiDesc>specifies a truncation criterion in the form of the maximum 
		 number of lines allowed. The default value of <codeph>NO_LINE_COUNT_LIMIT</codeph> 
		 indicates that there is no line count limit.
		 </apiDesc></apiParam><apiParam><apiItemName>truncationIndicatorFormat</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>specifies the format for the truncation indicator. 
		 A null format (the default value) specifies that the truncation indicator assume 
		 the format of content just before the truncation point. The <codeph>TextLineFactory</codeph> 
		 methods that take a simple string as input also ignore this parameter and implement 
		 the default behavior.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Creates a TruncationOptions object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.factory:StringTextLineFactory"><apiName>StringTextLineFactory</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.factory:TextLineFactoryBase</apiBaseClassifier></apiClassifierDef><example conref="examples\StringTextLineFactory_example.as"/></apiClassifierDetail><apiOperation id="flashx.textLayout.factory:StringTextLineFactory:createTextLines"><apiName>createTextLines</apiName><shortdesc> 
		 Creates TextLine objects using the text currently assigned to this factory object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>callback</apiItemName><apiType value="Function"/><apiDesc>The callback function called for each TextLine object created.
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Creates TextLine objects using the text currently assigned to this factory object.
		 
		 <p>The text lines are created using the currently assigned text and formats and
		 are composed to fit the bounds assigned to the <codeph>compositionBounds</codeph> property.
		 As each line is created, the factory calls the function specified in the 
		 <codeph>callback</codeph> parameter. This function is passed the TextLine object and
		 is responsible for displaying the line.</p>
		 
		 <p>To create a different set of lines, change any properties desired and call
		 <codeph>createTextLines()</codeph> again.</p>
		  
		 <p>Note that the scroll policies of the factory will control how many lines are generated.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="flashx.textLayout.factory:StringTextLineFactory:StringTextLineFactory"><apiName>StringTextLineFactory</apiName><shortdesc> 
		 Creates a StringTextLineFactory object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>configuration</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.elements:IConfiguration</apiOperationClassifier><apiDesc>The configuration object used to set the properties of the 
		 internal TextFlow object used to compose lines produced by this factory. 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Creates a StringTextLineFactory object.  
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.factory:TextLineFactoryBase"><apiName>TextLineFactoryBase</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="flashx.textLayout.factory:TextLineFactoryBase:getContentBounds"><apiName>getContentBounds</apiName><shortdesc>
		 The smallest rectangle in which the layed-out content fits.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.geom:Rectangle"/></apiReturn></apiOperationDef><apiDesc>
		 The smallest rectangle in which the layed-out content fits.
		 
		 <p><b>Note:</b> Truncated lines are not included in the size calculation.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="flashx.textLayout.factory:TextLineFactoryBase:TextLineFactoryBase"><apiName>TextLineFactoryBase</apiName><shortdesc> 
		 Base-class constructor for text line factories.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> 
		 Base-class constructor for text line factories.
		  
 		 <p><b>Note:</b> Application code does not typically need to create or use a TextLineFactoryBase object directly.
		 Use one of the derived text factory classes instead.</p>
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.factory:TextFlowTextLineFactory"><apiName>TextFlowTextLineFactory</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.factory:TextLineFactoryBase</apiBaseClassifier></apiClassifierDef><example conref="examples\TextFlowTextLineFactory_example.as"><swfblock conref="examples\TextFlowTextLineFactory_example.swf"/></example></apiClassifierDetail><apiOperation id="flashx.textLayout.factory:TextFlowTextLineFactory:createTextLines"><apiName>createTextLines</apiName><shortdesc>
		 Creates TextLine objects from the specified text flow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>callback</apiItemName><apiType value="Function"/><apiDesc>function to call with each generated TextLine object.  
		 The callback will be called with a Shape object representing any background color (if present), 
		 and with TextLine objects for the text.
		 </apiDesc></apiParam><apiParam><apiItemName>textFlow</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier><apiDesc>The TextFlow from which the lines are created.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Creates TextLine objects from the specified text flow.
		 
		 <p>The text lines are composed to fit the bounds assigned to the <codeph>compositionBounds</codeph> property.
		 As each line is created, the factory calls the function specified in the 
		 <codeph>callback</codeph> parameter. This function is passed the TextLine object and
		 is responsible for displaying the line. If a line has a background color, the factory also calls the
		 callback function with a Shape object containing a rectangle of the background color.</p>
		 
		 <p>Note that the scroll policies of the factory will control how many lines are generated.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="flashx.textLayout.factory:TextFlowTextLineFactory:TextFlowTextLineFactory"><apiName>TextFlowTextLineFactory</apiName><shortdesc> 
		 Creates a TextFlowTextLineFactory object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> 
		 Creates a TextFlowTextLineFactory object. 
		 
 		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier></apiPackage><apiPackage id="flashx.textLayout.formats"><apiName>flashx.textLayout.formats</apiName><apiClassifier id="flashx.textLayout.formats:TLFTypographicCase"><apiName>TLFTypographicCase</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="flashx.textLayout.formats:BreakStyle"><apiName>BreakStyle</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="flashx.textLayout.formats:VerticalAlign"><apiName>VerticalAlign</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="flashx.textLayout.formats:ColorName"><apiName>ColorName</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="flashx.textLayout.formats:ListStylePosition"><apiName>ListStylePosition</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="flashx.textLayout.formats:BaselineOffset"><apiName>BaselineOffset</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="flashx.textLayout.formats:BaselineShift"><apiName>BaselineShift</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="flashx.textLayout.formats:JustificationRule"><apiName>JustificationRule</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="flashx.textLayout.formats:TabStopFormat"><apiName>TabStopFormat</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.formats:ITabStopFormat</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><example conref="examples\TabStopFormat_example.as"/></apiClassifierDetail><apiOperation id="flashx.textLayout.formats:TabStopFormat:apply"><apiName>apply</apiName><shortdesc>
		 Replaces property values in this TabStopFormat object with the values of properties that are set in
		 the incoming ITabStopFormat instance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>incoming</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITabStopFormat</apiOperationClassifier><apiDesc>instance whose property values are applied to this TabStopFormat object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Replaces property values in this TabStopFormat object with the values of properties that are set in
		 the <codeph>incoming</codeph> ITabStopFormat instance. Properties that are <codeph>undefined</codeph> in the <codeph>incoming</codeph>
		 ITabStopFormat instance are not changed in this object.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.formats:TabStopFormat:concatInheritOnly"><apiName>concatInheritOnly</apiName><shortdesc>
		 Concatenates the values of properties in the incoming ITabStopFormat instance
		 with the values of this TabStopFormat object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>incoming</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITabStopFormat</apiOperationClassifier><apiDesc>instance from which values are concatenated.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Concatenates the values of properties in the <codeph>incoming</codeph> ITabStopFormat instance
		 with the values of this TabStopFormat object. In this (the receiving) TabStopFormat object, properties whose values are <codeph>FormatValue.INHERIT</codeph>,
		 and inheriting properties whose values are <codeph>undefined</codeph> will get new values from the <codeph>incoming</codeph> object.
		 All other property values will remain unmodified.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue/INHERIT"><linktext>flashx.textLayout.formats.FormatValue.INHERIT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.formats:TabStopFormat:concat"><apiName>concat</apiName><shortdesc>
		 Concatenates the values of properties in the incoming ITabStopFormat instance
		 with the values of this TabStopFormat object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>incoming</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITabStopFormat</apiOperationClassifier><apiDesc>instance from which values are concatenated.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Concatenates the values of properties in the <codeph>incoming</codeph> ITabStopFormat instance
		 with the values of this TabStopFormat object. In this (the receiving) TabStopFormat object, properties whose values are <codeph>FormatValue.INHERIT</codeph>,
		 and inheriting properties whose values are <codeph>undefined</codeph> will get new values from the <codeph>incoming</codeph> object.
		 Non-inheriting properties whose values are <codeph>undefined</codeph> will get their default values.
		 All other property values will remain unmodified.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue/INHERIT"><linktext>flashx.textLayout.formats.FormatValue.INHERIT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.formats:TabStopFormat:copy"><apiName>copy</apiName><shortdesc>
		 Copies TabStopFormat settings from the values ITabStopFormat instance into this TabStopFormat object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>values</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITabStopFormat</apiOperationClassifier><apiDesc>optional instance from which to copy values.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Copies TabStopFormat settings from the <codeph>values</codeph> ITabStopFormat instance into this TabStopFormat object.
		 If <codeph>values</codeph> is <codeph>null</codeph>, this TabStopFormat object is initialized with undefined values for all properties.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.formats:TabStopFormat:getStyle"><apiName>getStyle</apiName><shortdesc>
		 Return the value of the style specified by the styleProp parameter
		 which specifies the style name.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="any"/><apiDesc>The value of the specified style.  The type varies depending on the type of the style being
		 accessed.  Returns <codeph>undefined</codeph> if the style is not set.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>styleName</apiItemName><apiType value="String"/><apiDesc>The name of the style whose value is to be retrieved.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Return the value of the style specified by the <codeph>styleProp</codeph> parameter
		 which specifies the style name.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.formats:TabStopFormat:isEqual"><apiName>isEqual</apiName><shortdesc>
		 Compares properties in ITabStopFormat instance p1 with properties in ITabStopFormat instance p2
		 and returns true if all properties match.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="Boolean"/><apiDesc>true if all properties match, false otherwise.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>p1</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITabStopFormat</apiOperationClassifier><apiDesc>instance to compare to <codeph>p2</codeph>.
		 </apiDesc></apiParam><apiParam><apiItemName>p2</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITabStopFormat</apiOperationClassifier><apiDesc>instance to compare to <codeph>p1</codeph>.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Compares properties in ITabStopFormat instance <codeph>p1</codeph> with properties in ITabStopFormat instance <codeph>p2</codeph>
		 and returns <codeph>true</codeph> if all properties match.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.formats:TabStopFormat:removeClashing"><apiName>removeClashing</apiName><shortdesc>
		 Sets properties in this TabStopFormat object to undefined if they do not match those in the
		 incoming ITabStopFormat instance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>incoming</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITabStopFormat</apiOperationClassifier><apiDesc>instance against which to compare this TabStopFormat object's property values.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Sets properties in this TabStopFormat object to <codeph>undefined</codeph> if they do not match those in the
		 <codeph>incoming</codeph> ITabStopFormat instance.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.formats:TabStopFormat:removeMatching"><apiName>removeMatching</apiName><shortdesc>
		 Sets properties in this TabStopFormat object to undefined if they match those in the incoming
		 ITabStopFormat instance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>incoming</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITabStopFormat</apiOperationClassifier><apiDesc>instance against which to compare this TabStopFormat object's property values.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Sets properties in this TabStopFormat object to <codeph>undefined</codeph> if they match those in the <codeph>incoming</codeph>
		 ITabStopFormat instance.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.formats:TabStopFormat:setStyle"><apiName>setStyle</apiName><shortdesc>
		 Set the value of the style specified by the styleProp parameter
		 which specifies the style name to value.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleName</apiItemName><apiType value="String"/><apiDesc>The name of the style whose value is to be set.
		 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>The value to set.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Set the value of the style specified by the <codeph>styleProp</codeph> parameter
		 which specifies the style name to <codeph>value</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="flashx.textLayout.formats:TabStopFormat:TabStopFormat"><apiName>TabStopFormat</apiName><shortdesc>
		 Creates a new TabStopFormat object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>initialValues</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.formats:ITabStopFormat</apiOperationClassifier><apiDesc>optional instance from which to copy initial values.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Creates a new TabStopFormat object. All settings are empty or, optionally, are initialized from the
		 supplied <codeph>initialValues</codeph> object.
		 
		 </apiDesc></apiConstructorDetail><related-links><link href="flashx.textLayout.formats.xml#TabStopFormat/defaultFormat"><linktext>defaultFormat</linktext></link></related-links></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.formats:BackgroundColor"><apiName>BackgroundColor</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="flashx.textLayout.formats:Direction"><apiName>Direction</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="flashx.textLayout.formats:WhiteSpaceCollapse"><apiName>WhiteSpaceCollapse</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="flashx.textLayout.formats:ITextLayoutFormat"><apiName>ITextLayoutFormat</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:getStyle"><apiName>getStyle</apiName><shortdesc>
		 Return the value of the style specified by the styleProp parameter
		 which specifies the style name.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="any"/><apiDesc>The value of the specified style.  The type varies depending on the type of the style being
		 accessed.  Returns <codeph>undefined</codeph> if the style is not set.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>styleName</apiItemName><apiType value="String"/><apiDesc>The name of the style whose value is to be retrieved.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Return the value of the style specified by the <codeph>styleProp</codeph> parameter
		 which specifies the style name.
		 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="flashx.textLayout.formats:TextLayoutFormat"><apiName>TextLayoutFormat</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.formats:ITextLayoutFormat</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><example conref="examples\TextLayoutFormatExample.as"/><example conref="examples\TextLayoutFormatExample2.as"/></apiClassifierDetail><apiOperation id="flashx.textLayout.formats:TextLayoutFormat:apply"><apiName>apply</apiName><shortdesc>
		 Replaces property values in this TextLayoutFormat object with the values of properties that are set in
		 the incoming ITextLayoutFormat instance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>incoming</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>instance whose property values are applied to this TextLayoutFormat object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Replaces property values in this TextLayoutFormat object with the values of properties that are set in
		 the <codeph>incoming</codeph> ITextLayoutFormat instance. Properties that are <codeph>undefined</codeph> in the <codeph>incoming</codeph>
		 ITextLayoutFormat instance are not changed in this object.
		 
		 </apiDesc><example conref="examples\TextLayoutFormat_applyExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.formats:TextLayoutFormat:concatInheritOnly"><apiName>concatInheritOnly</apiName><shortdesc>
		 Concatenates the values of properties in the incoming ITextLayoutFormat instance
		 with the values of this TextLayoutFormat object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>incoming</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>instance from which values are concatenated.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Concatenates the values of properties in the <codeph>incoming</codeph> ITextLayoutFormat instance
		 with the values of this TextLayoutFormat object. In this (the receiving) TextLayoutFormat object, properties whose values are <codeph>FormatValue.INHERIT</codeph>,
		 and inheriting properties whose values are <codeph>undefined</codeph> will get new values from the <codeph>incoming</codeph> object.
		 All other property values will remain unmodified.
		 
		 </apiDesc><example conref="examples\TextLayoutFormat_concatInheritOnlyExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue/INHERIT"><linktext>flashx.textLayout.formats.FormatValue.INHERIT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.formats:TextLayoutFormat:concat"><apiName>concat</apiName><shortdesc>
		 Concatenates the values of properties in the incoming ITextLayoutFormat instance
		 with the values of this TextLayoutFormat object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>incoming</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>instance from which values are concatenated.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Concatenates the values of properties in the <codeph>incoming</codeph> ITextLayoutFormat instance
		 with the values of this TextLayoutFormat object. In this (the receiving) TextLayoutFormat object, properties whose values are <codeph>FormatValue.INHERIT</codeph>,
		 and inheriting properties whose values are <codeph>undefined</codeph> will get new values from the <codeph>incoming</codeph> object.
		 Non-inheriting properties whose values are <codeph>undefined</codeph> will get their default values.
		 All other property values will remain unmodified.
		 
		 </apiDesc><example conref="examples\TextLayoutFormat_concatExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue/INHERIT"><linktext>flashx.textLayout.formats.FormatValue.INHERIT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.formats:TextLayoutFormat:copy"><apiName>copy</apiName><shortdesc>
		 Copies TextLayoutFormat settings from the values ITextLayoutFormat instance into this TextLayoutFormat object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>incoming</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>optional instance from which to copy values.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Copies TextLayoutFormat settings from the <codeph>values</codeph> ITextLayoutFormat instance into this TextLayoutFormat object.
		 If <codeph>values</codeph> is <codeph>null</codeph>, this TextLayoutFormat object is initialized with undefined values for all properties.
		 </apiDesc><example conref="examples\TextLayoutFormat_copyExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.formats:TextLayoutFormat:createTextLayoutFormat"><apiName>createTextLayoutFormat</apiName><shortdesc>
		 Creates a new TextLayoutFormat object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiOperationClassifier>flashx.textLayout.formats:TextLayoutFormat</apiOperationClassifier></apiReturn><apiParam><apiItemName>initialValues</apiItemName><apiType value="Object"/><apiDesc>optional instance from which to copy initial values. If an TextLayoutFormat object values are copied.
		 Otherwise initialValues is treated like a Dictionary or Object and iterated over.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Creates a new TextLayoutFormat object. All settings are empty or, optionally, are initialized from the
		 supplied <codeph>initialValues</codeph> object.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.formats:TextLayoutFormat:getStyle"><apiName>getStyle</apiName><shortdesc> Returns the value of the style specified by the styleProp parameter, which specifies
		 the style name.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="any"/><apiDesc>The value of the specified style. The type varies depending on the type of the style being
		 accessed. Returns <codeph>undefined</codeph> if the style is not set.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>The name of the style whose value is to be retrieved.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Returns the value of the style specified by the <codeph>styleProp</codeph> parameter, which specifies
		 the style name.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.formats:TextLayoutFormat:isEqual"><apiName>isEqual</apiName><shortdesc>
		 Compares properties in ITextLayoutFormat instance p1 with properties in ITextLayoutFormat instance p2
		 and returns true if all properties match.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="Boolean"/><apiDesc>true if all properties match, false otherwise.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>p1</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>instance to compare to <codeph>p2</codeph>.
		 </apiDesc></apiParam><apiParam><apiItemName>p2</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>instance to compare to <codeph>p1</codeph>.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Compares properties in ITextLayoutFormat instance <codeph>p1</codeph> with properties in ITextLayoutFormat instance <codeph>p2</codeph>
		 and returns <codeph>true</codeph> if all properties match.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.formats:TextLayoutFormat:removeClashing"><apiName>removeClashing</apiName><shortdesc>
		 Sets properties in this TextLayoutFormat object to undefined if they do not match those in the
		 incoming ITextLayoutFormat instance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>incoming</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>instance against which to compare this TextLayoutFormat object's property values.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Sets properties in this TextLayoutFormat object to <codeph>undefined</codeph> if they do not match those in the
		 <codeph>incoming</codeph> ITextLayoutFormat instance.
		 
		 </apiDesc><example conref="examples\TextLayoutFormat_removeClashingExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.formats:TextLayoutFormat:removeMatching"><apiName>removeMatching</apiName><shortdesc>
		 Sets properties in this TextLayoutFormat object to undefined if they match those in the incoming
		 ITextLayoutFormat instance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>incoming</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>instance against which to compare this TextLayoutFormat object's property values.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Sets properties in this TextLayoutFormat object to <codeph>undefined</codeph> if they match those in the <codeph>incoming</codeph>
		 ITextLayoutFormat instance.
		 
		 </apiDesc><example conref="examples\TextLayoutFormat_removeMatchingExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.formats:TextLayoutFormat:setStyle"><apiName>setStyle</apiName><shortdesc> Sets the style specified by the styleProp parameter to the value specified by the
		 newValue parameter.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>The name of the style to set.
		 </apiDesc></apiParam><apiParam><apiItemName>newValue</apiItemName><apiType value="any"/><apiDesc>The value to which to set the style.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Sets the style specified by the <codeph>styleProp</codeph> parameter to the value specified by the
		 <codeph>newValue</codeph> parameter. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="flashx.textLayout.formats:TextLayoutFormat:TextLayoutFormat"><apiName>TextLayoutFormat</apiName><shortdesc>
		 Creates a new TextLayoutFormat object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>initialValues</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>optional instance from which to copy initial values.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Creates a new TextLayoutFormat object. All settings are empty or, optionally, are initialized from the
		 supplied <codeph>initialValues</codeph> object.
		 
		 </apiDesc></apiConstructorDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/defaultFormat"><linktext>defaultFormat</linktext></link></related-links></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.formats:Float"><apiName>Float</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="flashx.textLayout.formats:LineBreak"><apiName>LineBreak</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="flashx.textLayout.formats:BlockProgression"><apiName>BlockProgression</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="flashx.textLayout.formats:Suffix"><apiName>Suffix</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="flashx.textLayout.formats:IListMarkerFormat"><apiName>IListMarkerFormat</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.formats:ITextLayoutFormat</apiBaseInterface><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="flashx.textLayout.formats:ClearFloats"><apiName>ClearFloats</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="flashx.textLayout.formats:TextAlign"><apiName>TextAlign</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><example conref="examples\TextAlignExample.as"/></apiClassifierDetail></apiClassifier><apiClassifier id="flashx.textLayout.formats:LeadingModel"><apiName>LeadingModel</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="flashx.textLayout.formats:TextJustify"><apiName>TextJustify</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="flashx.textLayout.formats:FormatValue"><apiName>FormatValue</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="flashx.textLayout.formats:ListStyleType"><apiName>ListStyleType</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="flashx.textLayout.formats:ListMarkerFormat"><apiName>ListMarkerFormat</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.formats:IListMarkerFormat</apiBaseInterface><apiBaseClassifier>flashx.textLayout.formats:TextLayoutFormat</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="flashx.textLayout.formats:ListMarkerFormat:createListMarkerFormat"><apiName>createListMarkerFormat</apiName><shortdesc>
		 Creates a new ListMarkerFormat object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiOperationClassifier>flashx.textLayout.formats:ListMarkerFormat</apiOperationClassifier><apiDesc>The new ListMarkerFormat object.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>initialValues</apiItemName><apiType value="Object"/><apiDesc>Optional instance from which to copy initial values. If the object is of type IListMarkerFormat or ITextLayoutFormat, the values are copied.  
		 Otherwise the <codeph>initialValues</codeph> parameter is treated like a Dictionary or Object and iterated over.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Creates a new ListMarkerFormat object. All settings are empty or, optionally, are initialized from the
		 supplied <codeph>initialValues</codeph> object.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.formats.xml#ListMarkerFormat/defaultFormat"><linktext>defaultFormat</linktext></link></related-links></apiOperation><apiConstructor id="flashx.textLayout.formats:ListMarkerFormat:ListMarkerFormat"><apiName>ListMarkerFormat</apiName><shortdesc> Create a ListMarkerFormat that holds all the properties possible for a list marker.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>initialValues</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.formats:IListMarkerFormat</apiOperationClassifier><apiDesc>An optional instance from which to copy initial values.
		 
		  </apiDesc></apiParam></apiConstructorDef><apiDesc> Create a ListMarkerFormat that holds all the properties possible for a list marker.  
		 
		  </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.formats:ITabStopFormat"><apiName>ITabStopFormat</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="flashx.textLayout.formats:ITabStopFormat:flashx.textLayout.formats:ITabStopFormat:getStyle"><apiName>getStyle</apiName><shortdesc>
		 Return the value of the style specified by the styleProp parameter
		 which specifies the style name.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="any"/><apiDesc>The value of the specified style.  The type varies depending on the type of the style being
		 accessed.  Returns <codeph>undefined</codeph> if the style is not set.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>styleName</apiItemName><apiType value="String"/><apiDesc>The name of the style whose value is to be retrieved.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Return the value of the style specified by the <codeph>styleProp</codeph> parameter
		 which specifies the style name.
		 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="flashx.textLayout.formats:TextDecoration"><apiName>TextDecoration</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier></apiPackage><apiPackage id="flashx.textLayout.operations"><apiName>flashx.textLayout.operations</apiName><apiClassifier id="flashx.textLayout.operations:CreateSubParagraphGroupOperation"><apiName>CreateSubParagraphGroupOperation</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="flashx.textLayout.operations:CreateSubParagraphGroupOperation:CreateSubParagraphGroupOperation"><apiName>CreateSubParagraphGroupOperation</apiName><shortdesc> 
		 Constructor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>selection over which to apply the operation.  
		 </apiDesc></apiParam><apiParam><apiItemName>parent</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.elements:FlowGroupElement</apiOperationClassifier><apiDesc>optional parent for the spge element.  If not specified one is chosen based on the selection
		 </apiDesc></apiParam><apiParam><apiItemName>format</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>optional format to set in the new spge element.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Constructor.
		 
		 This operation creates a single SubParagraphGroupElement in the first paragraph of the selection range.  That paragraph must have at least one character selected the paragraph terminator does not count towards that selection.
		 Specifying the spgeParent creates an SubParagraphGroupElement int he part of the selection range included by that spgeParent.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.operations:FlowElementOperation"><apiName>FlowElementOperation</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="flashx.textLayout.operations:FlowElementOperation:FlowElementOperation"><apiName>FlowElementOperation</apiName><shortdesc> 
		 Creates a FlowElementOperation object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>Specifies the TextFlow object this operation acts upon.
		 </apiDesc></apiParam><apiParam><apiItemName>targetElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>Specifies the element this operation modifies.
		 </apiDesc></apiParam><apiParam><apiItemName>relativeStart</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>An offset from the beginning of the <codeph>targetElement</codeph>.
		 </apiDesc></apiParam><apiParam><apiItemName>relativeEnd</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>An offset from the end of the <codeph>targetElement</codeph>.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Creates a FlowElementOperation object.
		  
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.operations:CutOperation"><apiName>CutOperation</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="flashx.textLayout.operations:CutOperation:flashx.textLayout.operations:CutOperation"><apiName>CutOperation</apiName><shortdesc> 
		 Creates a CutOperation object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>The range of text to be cut.
		 </apiDesc></apiParam><apiParam><apiItemName>scrapToCut</apiItemName><apiOperationClassifier>flashx.textLayout.edit:TextScrap</apiOperationClassifier><apiDesc>A copy of the deleted text.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Creates a CutOperation object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.operations:ApplyFormatOperation"><apiName>ApplyFormatOperation</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier></apiClassifierDef><example conref="examples\ApplyFormatOperation_example.as"/></apiClassifierDetail><apiConstructor id="flashx.textLayout.operations:ApplyFormatOperation:ApplyFormatOperation"><apiName>ApplyFormatOperation</apiName><shortdesc> 
		 Creates an ApplyFormatOperation object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>Defines the text range to which the format is applied.
		  </apiDesc></apiParam><apiParam><apiItemName>leafFormat</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc> The format to apply to LeafFlowElement objects in the selected range.
		  </apiDesc></apiParam><apiParam><apiItemName>paragraphFormat</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>The format to apply to ParagraphElement objects in the selected range.
		  </apiDesc></apiParam><apiParam><apiItemName>containerFormat</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>The format to apply to containers in the selected range.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Creates an ApplyFormatOperation object.
		 
		  </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.operations:ClearFormatOperation"><apiName>ClearFormatOperation</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier></apiClassifierDef><example conref="examples\ApplyFormatOperation_example.as"/></apiClassifierDetail><apiOperation id="flashx.textLayout.operations:ClearFormatOperation:redo"><apiName>redo</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiConstructor id="flashx.textLayout.operations:ClearFormatOperation:ClearFormatOperation"><apiName>ClearFormatOperation</apiName><shortdesc> 
		 Creates an ClearFormatOperation object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>Defines the text range to which the format is applied.
		  </apiDesc></apiParam><apiParam><apiItemName>leafFormat</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc> The format whose set values indicate properties to undefine to LeafFlowElement objects in the selected range.
		  </apiDesc></apiParam><apiParam><apiItemName>paragraphFormat</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>The format whose set values indicate properties to undefine to ParagraphElement objects in the selected range.
		  </apiDesc></apiParam><apiParam><apiItemName>containerFormat</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>The format whose set values indicate properties to undefine to ContainerController objects in the selected range.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Creates an ClearFormatOperation object.
		 
		  </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.operations:RedoOperation"><apiName>RedoOperation</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowOperation</apiBaseClassifier></apiClassifierDef><example conref="examples\RedoOperation_example.as"/></apiClassifierDetail><apiConstructor id="flashx.textLayout.operations:RedoOperation:RedoOperation"><apiName>RedoOperation</apiName><shortdesc> 
		 Creates a RedoOperation object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>operation</apiItemName><apiOperationClassifier>flashx.textLayout.operations:FlowOperation</apiOperationClassifier><apiDesc>The operation to redo.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Creates a RedoOperation object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.operations:InsertTextOperation"><apiName>InsertTextOperation</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="flashx.textLayout.operations:InsertTextOperation:redo"><apiName>redo</apiName><shortdesc>
		 Re-executes the operation after it has been undone.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Re-executes the operation after it has been undone.
		 
		 <p>This function is called by the edit manager, when necessary.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="flashx.textLayout.operations:InsertTextOperation:InsertTextOperation"><apiName>InsertTextOperation</apiName><shortdesc> 
		 Creates an InsertTextOperation object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>Describes the insertion point or range of text.
		 </apiDesc></apiParam><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiDesc>The string to insert.
		 </apiDesc></apiParam><apiParam><apiItemName>deleteSelectionState</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>Describes the range of text to delete before doing insertion, 
		 if different than the range described by <codeph>operationState</codeph>.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Creates an InsertTextOperation object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.operations:ApplyTCYOperation"><apiName>ApplyTCYOperation</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="flashx.textLayout.operations:ApplyTCYOperation:ApplyTCYOperation"><apiName>ApplyTCYOperation</apiName><shortdesc> 
		 Creates an ApplyTCYOperation object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>Describes the range of text to which the operation is applied.
		 </apiDesc></apiParam><apiParam><apiItemName>tcyOn</apiItemName><apiType value="Boolean"/><apiDesc>Specifies whether to apply TCY (<codeph>true</codeph>), or remove TCY (<codeph>false</codeph>).
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Creates an ApplyTCYOperation object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.operations:ApplyFormatToElementOperation"><apiName>ApplyFormatToElementOperation</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowElementOperation</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="flashx.textLayout.operations:ApplyFormatToElementOperation:ApplyFormatToElementOperation"><apiName>ApplyFormatToElementOperation</apiName><shortdesc> 
		Creates an ApplyFormatToElementOperation object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>Specifies the text flow containing the element to which this operation is applied.
		</apiDesc></apiParam><apiParam><apiItemName>targetElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>specifies the element to which this operation is applied.
		</apiDesc></apiParam><apiParam><apiItemName>format</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>The formats to apply in this operation.
		 
		</apiDesc></apiParam><apiParam><apiItemName>relativeStart</apiItemName><apiType value="int"/><apiData>0</apiData></apiParam><apiParam><apiItemName>relativeEnd</apiItemName><apiType value="int"/><apiData>-1</apiData></apiParam></apiConstructorDef><apiDesc> 
		Creates an ApplyFormatToElementOperation object. 
		
		</apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.operations:ApplyElementStyleNameOperation"><apiName>ApplyElementStyleNameOperation</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiDeprecated replacement="ApplyFormatToElementOperation" sinceVersion="2.0"/><apiBaseClassifier>flashx.textLayout.operations:FlowElementOperation</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="flashx.textLayout.operations:ApplyElementStyleNameOperation:ApplyElementStyleNameOperation"><apiName>ApplyElementStyleNameOperation</apiName><shortdesc> 
		 Creates a ApplyElementStyleNameOperation object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>Describes the current selection.
		 </apiDesc></apiParam><apiParam><apiItemName>targetElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>Specifies the element to change.
		 </apiDesc></apiParam><apiParam><apiItemName>newStyleName</apiItemName><apiType value="String"/><apiDesc>The style name to assign.
		 </apiDesc></apiParam><apiParam><apiItemName>relativeStart</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>An offset from the beginning of the target element.
		 </apiDesc></apiParam><apiParam><apiItemName>relativeEnd</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>An offset from the end of the target element.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Creates a ApplyElementStyleNameOperation object. 
		 
		 <p>If the <codeph>relativeStart</codeph> and <codeph>relativeEnd</codeph> parameters are set, then the existing
		 element is split into multiple elements, the selected portion using the new 
		 style name and the rest using the existing style name.</p>
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.operations:FlowOperation"><apiName>FlowOperation</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.undo:IOperation</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="flashx.textLayout.operations:FlowOperation:canUndo"><apiName>canUndo</apiName><shortdesc>	
		 Test if this operation be placed on the undo stack.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>true means to push the operation onto the undo stack.  false means do not push this operation.
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>	
		 Test if this operation be placed on the undo stack.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.operations:FlowOperation:doOperation"><apiName>doOperation</apiName><shortdesc> 
		 Executes the operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>Boolean <codeph>true</codeph>, if the operation succeeded. Otherwise, <codeph>false</codeph>.
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc> 
		 Executes the operation. 
		 
		 <p>This method must be overridden in derived classes. The base class method does nothing.
		 You should not call <codeph>doOperation()</codeph> directly. The edit manager 
		 calls the method when it executes the operation. </p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.operations:FlowOperation:redo"><apiName>redo</apiName><shortdesc>	
		 Re-executes the operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>The SelectionState object passed to the operation when it was performed. This
		 SelectionState object can be the current selection or a selection created specifically
		 for the operation. 
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>	
		 Re-executes the operation. 
		 
		 <p>This method must be overridden in derived classes. The base class method does nothing.
		 You should not call <codeph>redo()</codeph> directly. The edit manager 
		 calls the method when it re-executes the operation. </p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.operations:FlowOperation:undo"><apiName>undo</apiName><shortdesc>	
		 Reverses the operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>The SelectionState object passed to the operation when it was performed. This
		 SelectionState object can be the current selection or a selection created specifically
		 for the operation. 
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>	
		 Reverses the operation. 
		 
		 <p>This method must be overridden in derived classes. The base class method does nothing.
		 You should not call <codeph>undo()</codeph> directly. The edit manager 
		 calls the method when it reverses the operation. </p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="flashx.textLayout.operations:FlowOperation:FlowOperation"><apiName>FlowOperation</apiName><shortdesc> 
		 Creates the FlowOperation object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>textFlow</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier><apiDesc>The text flow to which this operation is applied.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Creates the FlowOperation object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.operations:SplitElementOperation"><apiName>SplitElementOperation</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="flashx.textLayout.operations:SplitElementOperation:SplitElementOperation"><apiName>SplitElementOperation</apiName><shortdesc> 
		 Creates a SplitElementOperation object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>Describes the point at which to split the element.
		 If a range of text is specified, the contents of the range are deleted.
		 
		 </apiDesc></apiParam><apiParam><apiItemName>targetElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowGroupElement</apiOperationClassifier></apiParam></apiConstructorDef><apiDesc> 
		 Creates a SplitElementOperation object.  This operation deletes a block selection and then splits the target at absoluteStart.  The block selection should not cause target to be deleted.
		 Target is a FlowGroupElement but may not be a LinkElement, TCYElement or SubParagraphGroupElement.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.operations:DeleteTextOperation"><apiName>DeleteTextOperation</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="flashx.textLayout.operations:DeleteTextOperation:DeleteTextOperation"><apiName>DeleteTextOperation</apiName><shortdesc> 
		 Creates a DeleteTextOperation operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>The original range of text.
		 </apiDesc></apiParam><apiParam><apiItemName>deleteSelectionState</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>The range of text to delete, if different from the range 
		 described by <codeph>operationState</codeph>. (Set to <codeph>null</codeph> to delete the range
		 described by <codeph>operationState</codeph>.)
		 </apiDesc></apiParam><apiParam><apiItemName>allowMerge</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Set to <codeph>true</codeph> if this operation can be merged with the next or previous operation.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Creates a DeleteTextOperation operation.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.operations:SplitParagraphOperation"><apiName>SplitParagraphOperation</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:SplitElementOperation</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="flashx.textLayout.operations:SplitParagraphOperation:SplitParagraphOperation"><apiName>SplitParagraphOperation</apiName><shortdesc> 
		 Creates a SplitParagraphOperation object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>Describes the point at which to split the paragraph.
		 If a range of text is specified, the contents of the range are deleted.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Creates a SplitParagraphOperation object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.operations:ClearFormatOnElementOperation"><apiName>ClearFormatOnElementOperation</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowElementOperation</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="flashx.textLayout.operations:ClearFormatOnElementOperation:ClearFormatOnElementOperation"><apiName>ClearFormatOnElementOperation</apiName><shortdesc> 
		Creates an ClearFormatOnElementOperation object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>Specifies the text flow containing the element to which this operation is applied.
		</apiDesc></apiParam><apiParam><apiItemName>targetElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>specifies the element to which this operation is applied.
		</apiDesc></apiParam><apiParam><apiItemName>format</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>The formats to apply in this operation.
		 
		</apiDesc></apiParam><apiParam><apiItemName>relativeStart</apiItemName><apiType value="int"/><apiData>0</apiData></apiParam><apiParam><apiItemName>relativeEnd</apiItemName><apiType value="int"/><apiData>-1</apiData></apiParam></apiConstructorDef><apiDesc> 
		Creates an ClearFormatOnElementOperation object. 
		
		</apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.operations:MoveChildrenOperation"><apiName>MoveChildrenOperation</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="flashx.textLayout.operations:MoveChildrenOperation:MoveChildrenOperation"><apiName>MoveChildrenOperation</apiName><shortdesc> 
		 Creates a MoveChildrenOperation object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>Specifies the SelectionState of this operation
		 </apiDesc></apiParam><apiParam><apiItemName>source</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowGroupElement</apiOperationClassifier><apiDesc>Specifies the parent of the item(s) to move.
		 </apiDesc></apiParam><apiParam><apiItemName>sourceIndex</apiItemName><apiType value="int"/><apiDesc>Specifies the index of the first item to move.
		 </apiDesc></apiParam><apiParam><apiItemName>numChildren</apiItemName><apiType value="int"/><apiDesc>Specifies the number of children to move.
		 </apiDesc></apiParam><apiParam><apiItemName>destination</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowGroupElement</apiOperationClassifier><apiDesc>Specifies the new parent of the items.
		 </apiDesc></apiParam><apiParam><apiItemName>destinationIndex</apiItemName><apiType value="int"/><apiDesc>Specifies the new child index of the first element.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Creates a MoveChildrenOperation object. 
		 
		 <p>This operation moves a consecutive number of children of source into the destination
		 context.  Also, if moving the children leaves the source element with no children, then
		 source will be removed.  The removal is done recursively such that if source's parent
		 becomes empty from the removal of source, it too will be deleted, and on up the parent chain.</p>
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.operations:ApplyElementTypeNameOperation"><apiName>ApplyElementTypeNameOperation</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowElementOperation</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="flashx.textLayout.operations:ApplyElementTypeNameOperation:ApplyElementTypeNameOperation"><apiName>ApplyElementTypeNameOperation</apiName><shortdesc> 
		 Creates a ApplyElementTypeNameOperation object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>Describes the current selection.
		 </apiDesc></apiParam><apiParam><apiItemName>targetElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>Specifies the element to change.
		 </apiDesc></apiParam><apiParam><apiItemName>typeName</apiItemName><apiType value="String"/><apiDesc>The type name to assign.
		 </apiDesc></apiParam><apiParam><apiItemName>relativeStart</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>An offset from the beginning of the target element.
		 </apiDesc></apiParam><apiParam><apiItemName>relativeEnd</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>An offset from the end of the target element.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Creates a ApplyElementTypeNameOperation object. 
		 
		 <p>If the <codeph>relativeStart</codeph> and <codeph>relativeEnd</codeph> parameters are set, then the existing
		 element is split into multiple elements, the selected portion using the new 
		 type name and the rest using the existing type name.</p>
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.operations:CreateListOperation"><apiName>CreateListOperation</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="flashx.textLayout.operations:CreateListOperation:CreateListOperation"><apiName>CreateListOperation</apiName><shortdesc> 
		 Creates an CreateListOperation object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier></apiParam><apiParam><apiItemName>parent</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.elements:FlowGroupElement</apiOperationClassifier></apiParam><apiParam><apiItemName>listFormat</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier></apiParam></apiConstructorDef><apiDesc> 
		 Creates an CreateListOperation object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.operations:FlowTextOperation"><apiName>FlowTextOperation</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowOperation</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="flashx.textLayout.operations:FlowTextOperation:redo"><apiName>redo</apiName><shortdesc>	
		 	
		 Re-executes the operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>The SelectionState object passed to the operation when it was performed. This
		 SelectionState object can be the current selection or a selection created specifically
		 for the operation. 
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>	
		 	
		 Re-executes the operation. 
		 
		 <p>This method must be overridden in derived classes. The base class method does nothing.
		 You should not call <codeph>redo()</codeph> directly. The edit manager 
		 calls the method when it re-executes the operation. </p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="flashx.textLayout.operations:FlowTextOperation:FlowTextOperation"><apiName>FlowTextOperation</apiName><shortdesc> 
		 Creates the FlowTextOperation object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>Specifies the relevant selection. If relevant to the operation, the 
		 <codeph>operationState</codeph> describes the text range to which this operation applies.
		 Otherwise, <codeph>operationState</codeph> is used to save the current selection state so that
		 it can be restored when the operation is undone.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Creates the FlowTextOperation object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.operations:CreateDivOperation"><apiName>CreateDivOperation</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="flashx.textLayout.operations:CreateDivOperation:CreateDivOperation"><apiName>CreateDivOperation</apiName><shortdesc> 
		 Creates an CreateDivOperation object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier></apiParam><apiParam><apiItemName>parent</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.elements:FlowGroupElement</apiOperationClassifier></apiParam><apiParam><apiItemName>format</apiItemName><apiData>null</apiData><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier></apiParam></apiConstructorDef><apiDesc> 
		 Creates an CreateDivOperation object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.operations:ModifyInlineGraphicOperation"><apiName>ModifyInlineGraphicOperation</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="flashx.textLayout.operations:ModifyInlineGraphicOperation:flashx.textLayout.operations:ModifyInlineGraphicOperation"><apiName>ModifyInlineGraphicOperation</apiName><shortdesc> 
		 Creates a ModifyInlineGraphicsOperation object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>Describes the insertion point. 
		 If a range is selected, the operation deletes the contents of that range.
		 </apiDesc></apiParam><apiParam><apiItemName>source</apiItemName><apiType value="Object"/><apiDesc>The graphic source (uri string, URLRequest, DisplayObject, or Class of an embedded asset). 
		 </apiDesc></apiParam><apiParam><apiItemName>width</apiItemName><apiType value="Object"/><apiDesc>The width to assign (number of pixels, percent, or the string 'auto')
		 </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Object"/><apiDesc>The height to assign (number of pixels, percent, or the string 'auto')
		 </apiDesc></apiParam><apiParam><apiItemName>options</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>None supported
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Creates a ModifyInlineGraphicsOperation object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.operations:InsertInlineGraphicOperation"><apiName>InsertInlineGraphicOperation</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="flashx.textLayout.operations:InsertInlineGraphicOperation:redo"><apiName>redo</apiName><shortdesc>
		 Re-executes the operation after it has been undone.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Re-executes the operation after it has been undone.
		 
		 <p>This function is called by the edit manager, when necessary.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="flashx.textLayout.operations:InsertInlineGraphicOperation:InsertInlineGraphicOperation"><apiName>InsertInlineGraphicOperation</apiName><shortdesc> 
		 Creates an InsertInlineGraphicsOperation object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>Describes the insertion point. 
		 If a range is selected, the operation deletes the contents of that range.
		 </apiDesc></apiParam><apiParam><apiItemName>source</apiItemName><apiType value="Object"/><apiDesc>The graphic source (uri string, URLRequest, DisplayObject, or Class of an embedded asset). 
		 </apiDesc></apiParam><apiParam><apiItemName>width</apiItemName><apiType value="Object"/><apiDesc>The width to assign (number of pixels, percent, or the string 'auto')
		 </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Object"/><apiDesc>The height to assign (number of pixels, percent, or the string 'auto')
		 </apiDesc></apiParam><apiParam><apiItemName>options</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>The float to assign (String value, none for inline with text, left/right/start/end for float)
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Creates an InsertInlineGraphicsOperation object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.operations:ApplyElementUserStyleOperation"><apiName>ApplyElementUserStyleOperation</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiDeprecated replacement="ApplyFormatToElementOperation" sinceVersion="2.0"/><apiBaseClassifier>flashx.textLayout.operations:FlowElementOperation</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="flashx.textLayout.operations:ApplyElementUserStyleOperation:ApplyElementUserStyleOperation"><apiName>ApplyElementUserStyleOperation</apiName><shortdesc> 
		 Creates a ApplyElementUserStyleOperation object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>Describes the range of text to style.
		 </apiDesc></apiParam><apiParam><apiItemName>targetElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>Specifies the element to change.
		 </apiDesc></apiParam><apiParam><apiItemName>styleName</apiItemName><apiType value="String"/><apiDesc>The name of the style to change.
		 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>The new style value.
		 </apiDesc></apiParam><apiParam><apiItemName>relativeStart</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>An offset from the beginning of the target element.
		 </apiDesc></apiParam><apiParam><apiItemName>relativeEnd</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>An offset from the end of the target element.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Creates a ApplyElementUserStyleOperation object.
		 
		 <p>If the <codeph>relativeStart</codeph> and <codeph>relativeEnd</codeph> parameters are set, then the existing
		 element is split into multiple elements, the selected portion using the new 
		 style value and the rest using the existing style value.</p>
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.operations:ApplyElementIDOperation"><apiName>ApplyElementIDOperation</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowElementOperation</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="flashx.textLayout.operations:ApplyElementIDOperation:ApplyElementIDOperation"><apiName>ApplyElementIDOperation</apiName><shortdesc> 
		 Creates a ChangeElementIDOperation object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>Specifies the selection state before the operation
		 </apiDesc></apiParam><apiParam><apiItemName>targetElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>Specifies the element to change
		 </apiDesc></apiParam><apiParam><apiItemName>newID</apiItemName><apiType value="String"/><apiDesc>The ID to assign
		 </apiDesc></apiParam><apiParam><apiItemName>relativeStart</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>An offset from the beginning of the target element.
		 </apiDesc></apiParam><apiParam><apiItemName>relativeEnd</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>An offset from the end of the target element.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Creates a ChangeElementIDOperation object. 
		 
		 <p>If the <codeph>relativeStart</codeph> or <codeph>relativeEnd</codeph> parameters are set, then the existing
		 element is split into two elements, one using the existing ID and the other
		 using the new ID. If both parameters are set, then the existing element is split into three elements.
		 The first and last elements of the set are both assigned the original ID.</p>
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.operations:PasteOperation"><apiName>PasteOperation</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="flashx.textLayout.operations:PasteOperation:PasteOperation"><apiName>PasteOperation</apiName><shortdesc> 
		 Creates a PasteOperation object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>Describes the insertion point or a range of text 
		 to replace.
		 </apiDesc></apiParam><apiParam><apiItemName>textScrap</apiItemName><apiOperationClassifier>flashx.textLayout.edit:TextScrap</apiOperationClassifier><apiDesc>The content to paste into the text flow.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Creates a PasteOperation object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.operations:CopyOperation"><apiName>CopyOperation</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="flashx.textLayout.operations:CopyOperation:CopyOperation"><apiName>CopyOperation</apiName><shortdesc> 
		 Creates a CopyOperation object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>The range of text to be copied.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Creates a CopyOperation object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.operations:CompositeOperation"><apiName>CompositeOperation</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowOperation</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="flashx.textLayout.operations:CompositeOperation:addOperation"><apiName>addOperation</apiName><shortdesc> 
		 Adds an additional operation to the end of the list.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>operation</apiItemName><apiOperationClassifier>flashx.textLayout.operations:FlowOperation</apiOperationClassifier></apiParam></apiOperationDef><apiDesc> 
		 Adds an additional operation to the end of the list. 
		 
		 <p>The new operation must operate on the same TextFlow object as 
		 the other operations in the list.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiConstructor id="flashx.textLayout.operations:CompositeOperation:CompositeOperation"><apiName>CompositeOperation</apiName><shortdesc> 
		 Creates a CompositeOperation object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>operations</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>The operations to group.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Creates a CompositeOperation object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.operations:ApplyLinkOperation"><apiName>ApplyLinkOperation</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier></apiClassifierDef><example conref="examples\ApplyLinkOperation_example.as"/></apiClassifierDetail><apiConstructor id="flashx.textLayout.operations:ApplyLinkOperation:flashx.textLayout.operations:ApplyLinkOperation"><apiName>ApplyLinkOperation</apiName><shortdesc> 
		 Creates an ApplyLinkOperation object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>operationState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiDesc>The text range to which the operation is applied.
		 </apiDesc></apiParam><apiParam><apiItemName>href</apiItemName><apiType value="String"/><apiDesc>The URI to be associated with the link.  If href is an empty string, 
		 the URI of links in the selection are removed.
		 </apiDesc></apiParam><apiParam><apiItemName>target</apiItemName><apiType value="String"/><apiDesc>The target of the link.
		 </apiDesc></apiParam><apiParam><apiItemName>extendToLinkBoundary</apiItemName><apiType value="Boolean"/><apiDesc>Whether to extend the selection to include the entire 
		 text of any existing links overlapped by the selection, and then apply the change.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Creates an ApplyLinkOperation object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.operations:UndoOperation"><apiName>UndoOperation</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowOperation</apiBaseClassifier></apiClassifierDef><example conref="examples\UndoOperation_example.as"/></apiClassifierDetail><apiConstructor id="flashx.textLayout.operations:UndoOperation:UndoOperation"><apiName>UndoOperation</apiName><shortdesc> 
		 Creates an UndoOperation object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>op</apiItemName><apiOperationClassifier>flashx.textLayout.operations:FlowOperation</apiOperationClassifier><apiDesc>The operation to undo.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Creates an UndoOperation object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier></apiPackage><apiPackage id="flashx.textLayout.utils"><apiName>flashx.textLayout.utils</apiName><apiClassifier id="flashx.textLayout.utils:NavigationUtil"><apiName>NavigationUtil</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="flashx.textLayout.utils:NavigationUtil:endOfDocument"><apiName>endOfDocument</apiName><shortdesc>
		 Sets the TextRange at the end of the document.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="Boolean"/><apiDesc>true if selection changed.
		 </apiDesc></apiReturn><apiParam><apiItemName>range</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextRange</apiOperationClassifier><apiDesc>Indicates that only activeIndex should move
		 </apiDesc></apiParam><apiParam><apiItemName>extendSelection</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc>
		 Sets the TextRange at the end of the document.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.utils:NavigationUtil:endOfLine"><apiName>endOfLine</apiName><shortdesc>
		 Sets the TextRange at the end of the line.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="Boolean"/><apiDesc>true if selection changed.
		 </apiDesc></apiReturn><apiParam><apiItemName>range</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextRange</apiOperationClassifier><apiDesc>Indicates that only activeIndex should move
		 </apiDesc></apiParam><apiParam><apiItemName>extendSelection</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc>
		 Sets the TextRange at the end of the line.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.utils:NavigationUtil:endOfParagraph"><apiName>endOfParagraph</apiName><shortdesc>
		 Sets the TextRange at the end of the paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="Boolean"/><apiDesc>true if selection changed.
		 </apiDesc></apiReturn><apiParam><apiItemName>range</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextRange</apiOperationClassifier><apiDesc>Indicates that only activeIndex should move
		 </apiDesc></apiParam><apiParam><apiItemName>extendSelection</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc>
		 Sets the TextRange at the end of the paragraph.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.utils:NavigationUtil:nextAtomPosition"><apiName>nextAtomPosition</apiName><shortdesc> 
		 Returns the absolute position of the next atom.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>flowRoot</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier></apiParam><apiParam><apiItemName>absolutePos</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc> 
		 Returns the absolute position of the next atom.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.utils:NavigationUtil:nextCharacter"><apiName>nextCharacter</apiName><shortdesc>
		 Sets the TextRange forward by one character.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="Boolean"/><apiDesc>true if selection changed.
		 </apiDesc></apiReturn><apiParam><apiItemName>range</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextRange</apiOperationClassifier><apiDesc>Indicates that only activeIndex should move
		 </apiDesc></apiParam><apiParam><apiItemName>extendSelection</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc>
		 Sets the TextRange forward by one character.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.utils:NavigationUtil:nextLine"><apiName>nextLine</apiName><shortdesc>
		 Sets the TextRange down one line
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="Boolean"/><apiDesc>true if selection changed.
		 </apiDesc></apiReturn><apiParam><apiItemName>range</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextRange</apiOperationClassifier><apiDesc>Indicates that only activeIndex should move
		 </apiDesc></apiParam><apiParam><apiItemName>extendSelection</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc>
		 Sets the TextRange down one line
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.utils:NavigationUtil:nextPage"><apiName>nextPage</apiName><shortdesc>
		 Sets the TextRange down one page.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="Boolean"/><apiDesc>true if selection changed.
		 </apiDesc></apiReturn><apiParam><apiItemName>range</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextRange</apiOperationClassifier><apiDesc>Indicates that only activeIndex should move
		 </apiDesc></apiParam><apiParam><apiItemName>extendSelection</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc>
		 Sets the TextRange down one page.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.utils:NavigationUtil:nextWordPosition"><apiName>nextWordPosition</apiName><shortdesc> 
		 Returns the absolute position of the beginning of the next word.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>flowRoot</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier></apiParam><apiParam><apiItemName>absolutePos</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc> 
		 Returns the absolute position of the beginning of the next word.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.utils:NavigationUtil:nextWord"><apiName>nextWord</apiName><shortdesc>
		 Sets the TextRange forward by one word.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="Boolean"/><apiDesc>true if selection changed.
		 </apiDesc></apiReturn><apiParam><apiItemName>range</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextRange</apiOperationClassifier><apiDesc>Indicates that only activeIndex should move
		 </apiDesc></apiParam><apiParam><apiItemName>extendSelection</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc>
		 Sets the TextRange forward by one word.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.utils:NavigationUtil:previousAtomPosition"><apiName>previousAtomPosition</apiName><shortdesc> 
		 Returns the absolute position of the previous atom.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>flowRoot</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier></apiParam><apiParam><apiItemName>absolutePos</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc> 
		 Returns the absolute position of the previous atom. 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.utils:NavigationUtil:previousCharacter"><apiName>previousCharacter</apiName><shortdesc>
		 Sets the TextRange backward by one character.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="Boolean"/><apiDesc>true if selection changed.
		 </apiDesc></apiReturn><apiParam><apiItemName>range</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextRange</apiOperationClassifier><apiDesc>Indicates that only activeIndex should move
		 </apiDesc></apiParam><apiParam><apiItemName>extendSelection</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc>
		 Sets the TextRange backward by one character.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.utils:NavigationUtil:previousLine"><apiName>previousLine</apiName><shortdesc>
		 Sets the TextRange up one line.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="Boolean"/><apiDesc>true if selection changed.
		 </apiDesc></apiReturn><apiParam><apiItemName>range</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextRange</apiOperationClassifier><apiDesc>Indicates that only activeIndex should move
		 </apiDesc></apiParam><apiParam><apiItemName>extendSelection</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc>
		 Sets the TextRange up one line.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.utils:NavigationUtil:previousPage"><apiName>previousPage</apiName><shortdesc>
		 Sets the TextRange up one page.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="Boolean"/><apiDesc>true if selection changed.
		 </apiDesc></apiReturn><apiParam><apiItemName>range</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextRange</apiOperationClassifier><apiDesc>Indicates that only activeIndex should move
		 </apiDesc></apiParam><apiParam><apiItemName>extendSelection</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc>
		 Sets the TextRange up one page.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.utils:NavigationUtil:previousWordPosition"><apiName>previousWordPosition</apiName><shortdesc> 
		 Returns absolute position of the beginning of the previous word.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>flowRoot</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier></apiParam><apiParam><apiItemName>absolutePos</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc> 
		 Returns absolute position of the beginning of the previous word.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.utils:NavigationUtil:previousWord"><apiName>previousWord</apiName><shortdesc>
		 Sets the TextRange backward by one word.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="Boolean"/><apiDesc>true if selection changed.
		 </apiDesc></apiReturn><apiParam><apiItemName>range</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextRange</apiOperationClassifier><apiDesc>Indicates that only activeIndex should move
		 </apiDesc></apiParam><apiParam><apiItemName>extendSelection</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc>
		 Sets the TextRange backward by one word.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.utils:NavigationUtil:startOfDocument"><apiName>startOfDocument</apiName><shortdesc>
		 Sets the TextRange at the beginning of the document.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="Boolean"/><apiDesc>true if selection changed.
		 </apiDesc></apiReturn><apiParam><apiItemName>range</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextRange</apiOperationClassifier><apiDesc>Indicates that only activeIndex should move
		 </apiDesc></apiParam><apiParam><apiItemName>extendSelection</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc>
		 Sets the TextRange at the beginning of the document.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.utils:NavigationUtil:startOfLine"><apiName>startOfLine</apiName><shortdesc>
		 Sets the TextRange at the beginning of the line.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="Boolean"/><apiDesc>true if selection changed.
		 </apiDesc></apiReturn><apiParam><apiItemName>range</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextRange</apiOperationClassifier><apiDesc>Indicates that only activeIndex should move
		 </apiDesc></apiParam><apiParam><apiItemName>extendSelection</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc>
		 Sets the TextRange at the beginning of the line.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.utils:NavigationUtil:startOfParagraph"><apiName>startOfParagraph</apiName><shortdesc>
		 Sets the TextRange at the beginning of the paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="Boolean"/><apiDesc>true if selection changed.
		 </apiDesc></apiReturn><apiParam><apiItemName>range</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextRange</apiOperationClassifier><apiDesc>Indicates that only activeIndex should move
		 </apiDesc></apiParam><apiParam><apiItemName>extendSelection</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc>
		 Sets the TextRange at the beginning of the paragraph.
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="flashx.textLayout.utils:CharacterUtil"><apiName>CharacterUtil</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="flashx.textLayout.utils:CharacterUtil:isHighSurrogate"><apiName>isHighSurrogate</apiName><shortdesc> 
		 Returns true if the charCode argument is a high word in a surrogate pair.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if <codeph>charCode</codeph> is the high surrogate in a surrogate pair.
		 </apiDesc></apiReturn><apiParam><apiItemName>charCode</apiItemName><apiType value="int"/><apiDesc>An integer that represents a character code.
		 Character codes are usually represented in hexadecimal format.
		 For example, the space character's character code can be
		 represented by the number <codeph>0x0020</codeph>.
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Returns <codeph>true</codeph> if the <codeph>charCode</codeph> argument is a high word in a surrogate pair. 
		 A surrogate pair represents a character with a code point that requires more
		 than sixteen bits to express and thus requires a combination
		 of two 16-bit words, a high surrogate and a low surrogate, to embody its code point.
		 <p>This method can be used when processing a series of characters to
		 ensure that you do not inadvertently divide a surrogate pair
		 into incomplete halves.</p>
		 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.utils:CharacterUtil:isLowSurrogate"><apiName>isLowSurrogate</apiName><shortdesc> 
		 Returns true if the charCode argument is a low word in a surrogate pair.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if <codeph>charCode</codeph> is the low surrogate in a surrogate pair.
		 </apiDesc></apiReturn><apiParam><apiItemName>charCode</apiItemName><apiType value="int"/><apiDesc>An integer that represents a character code.
		 Character codes are usually represented in hexadecimal format.
		 For example, the space character's character code can be
		 represented by the number <codeph>0x0020</codeph>.
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Returns <codeph>true</codeph> if the <codeph>charCode</codeph> argument is a low word in a surrogate pair. 
		 A surrogate pair represents a character with a code point that requires more
		 than sixteen bits to express and thus requires a combination
		 of two 16-bit words, a high surrogate and a low surrogate, to embody its code point.
		 <p>This method can be used when processing a series of characters to
		 ensure that you do not inadvertently divide a surrogate pair
		 into incomplete halves.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.utils:CharacterUtil:isWhitespace"><apiName>isWhitespace</apiName><shortdesc> 
		 Returns true if charCode is a whitespace character.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> if <codeph>charCode</codeph> is a whitespace character. 
		 </apiDesc></apiReturn><apiParam><apiItemName>charCode</apiItemName><apiType value="int"/><apiDesc>An integer that represents a character code.
		 Character codes are usually represented in hexadecimal format.
		 For example, the space character's character code can be
		 represented by the number <codeph>0x0020</codeph>.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Returns <codeph>true</codeph> if <codeph>charCode</codeph> is a whitespace character. 
		 <p>The following table describes all characters that this
		 method considers a whitespace character.
		 </p>
		 <adobetable class="innertable">
		     
		     
		     
		     
		     
		     
		     
		     
		     
		     
		     
		     
		     
		     
		     
		     
		     
		     
		     
		     
		     
		     
		     
		     
		     
		     
		     
		  <tgroup cols="3"><thead><row><entry>Character Code</entry><entry>Unicode Character Name</entry><entry>Category</entry></row></thead><tbody><row><entry><codeph>0x0020</codeph></entry><entry>SPACE</entry><entry>Space Separator</entry></row><row><entry><codeph>0x1680</codeph></entry><entry>OGHAM SPACE MARK</entry><entry>Space Separator</entry></row><row><entry><codeph>0x180E</codeph></entry><entry>MONGOLIAN VOWEL SEPARATOR</entry><entry>Space Separator</entry></row><row><entry><codeph>0x2000</codeph></entry><entry>EN QUAD</entry><entry>Space Separator</entry></row><row><entry><codeph>0x2001</codeph></entry><entry>EM QUAD</entry><entry>Space Separator</entry></row><row><entry><codeph>0x2002</codeph></entry><entry>EN SPACE</entry><entry>Space Separator</entry></row><row><entry><codeph>0x2003</codeph></entry><entry>EM SPACE</entry><entry>Space Separator</entry></row><row><entry><codeph>0x2004</codeph></entry><entry>THREE-PER-EM SPACE</entry><entry>Space Separator</entry></row><row><entry><codeph>0x2005</codeph></entry><entry>FOUR-PER-EM SPACE</entry><entry>Space Separator</entry></row><row><entry><codeph>0x2006</codeph></entry><entry>SIX-PER-EM SPACE</entry><entry>Space Separator</entry></row><row><entry><codeph>0x2007</codeph></entry><entry>FIGURE SPACE</entry><entry>Space Separator</entry></row><row><entry><codeph>0x2008</codeph></entry><entry>PUNCTUATION SPACE</entry><entry>Space Separator</entry></row><row><entry><codeph>0x2009</codeph></entry><entry>THIN SPACE</entry><entry>Space Separator</entry></row><row><entry><codeph>0x200A</codeph></entry><entry>HAIR SPACE</entry><entry>Space Separator</entry></row><row><entry><codeph>0x202F</codeph></entry><entry>NARROW NO-BREAK SPACE</entry><entry>Space Separator</entry></row><row><entry><codeph>0x205F</codeph></entry><entry>MEDIUM MATHEMATICAL SPACE</entry><entry>Space Separator</entry></row><row><entry><codeph>0x3000</codeph></entry><entry>IDEOGRAPHIC SPACE</entry><entry>Space Separator</entry></row><row><entry><codeph>0x2028</codeph></entry><entry>LINE SEPARATOR</entry><entry>Line Separator</entry></row><row><entry><codeph>0x2029</codeph></entry><entry>PARAGRAPH SEPARATOR</entry><entry>Paragraph Separator</entry></row><row><entry><codeph>0x0009</codeph></entry><entry>CHARACTER TABULATION</entry><entry>Other</entry></row><row><entry><codeph>0x000A</codeph></entry><entry>LINE FEED</entry><entry>Other</entry></row><row><entry><codeph>0x000B</codeph></entry><entry>LINE TABULATION</entry><entry>Other</entry></row><row><entry><codeph>0x000C</codeph></entry><entry>FORM FEED</entry><entry>Other</entry></row><row><entry><codeph>0x000D</codeph></entry><entry>CARRIAGE RETURN</entry><entry>Other</entry></row><row><entry><codeph>0x0085</codeph></entry><entry>NEXT LINE</entry><entry>Other</entry></row><row><entry><codeph>0x00A0</codeph></entry><entry>NO-BREAK SPACE</entry><entry>Other</entry></row></tbody></tgroup></adobetable>

		 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier></apiPackage><apiPackage id="flashx.textLayout"><apiName>flashx.textLayout</apiName><apiClassifier id="flashx.textLayout:TextLayoutVersion"><apiName>TextLayoutVersion</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier></apiPackage><apiPackage id="flashx.undo"><apiName>flashx.undo</apiName><apiClassifier id="flashx.undo:IOperation"><apiName>IOperation</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="flashx.undo:IOperation:flashx.undo:IOperation:performRedo"><apiName>performRedo</apiName><shortdesc> 
		 Reperforms the operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Reperforms the operation.
		 
		 <p>The operation is also responsible for pushing itself onto the undo stack.</p>
		  
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.undo:IOperation:flashx.undo:IOperation:performUndo"><apiName>performUndo</apiName><shortdesc> 
		 Reverses the operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Reverses the operation.
		 
		 <p>The operation is also responsible for pushing itself onto the redo stack.</p> 
		 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="flashx.undo:UndoManager"><apiName>UndoManager</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.undo:IUndoManager</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="flashx.undo:UndoManager:canRedo"><apiName>canRedo</apiName><shortdesc>
         Indicates whether there is currently an operation that can be redone.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>Boolean <codeph>true</codeph>, if there is an operation on the redo stack that can be redone.
         Otherwise, <codeph>false</codeph>.
         
         </apiDesc></apiReturn></apiOperationDef><apiDesc>
         Indicates whether there is currently an operation that can be redone.
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.undo:UndoManager:canUndo"><apiName>canUndo</apiName><shortdesc>
         Indicates whether there is currently an operation that can be undone.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>Boolean <codeph>true</codeph>, if there is an operation on the undo stack that can be reversed.
         Otherwise, <codeph>false</codeph>.
         
         </apiDesc></apiReturn></apiOperationDef><apiDesc>
         Indicates whether there is currently an operation that can be undone.
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.undo:UndoManager:clearAll"><apiName>clearAll</apiName><shortdesc>
         Clears both the undo and the redo histories.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
         Clears both the undo and the redo histories.
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.undo:UndoManager:clearRedo"><apiName>clearRedo</apiName><shortdesc>
         Clears the redo stack.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
         Clears the redo stack.
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.undo:UndoManager:peekRedo"><apiName>peekRedo</apiName><shortdesc>
         Returns the next operation to be redone.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.undo:IOperation</apiOperationClassifier><apiDesc>The redoable IOperation object, or <codeph>null</codeph>, if no redoable operation
         is on the stack.
         
         </apiDesc></apiReturn></apiOperationDef><apiDesc>
         Returns the next operation to be redone.
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.undo:UndoManager:peekUndo"><apiName>peekUndo</apiName><shortdesc>
         Returns the next operation to be undone.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.undo:IOperation</apiOperationClassifier><apiDesc>The undoable IOperation object, or <codeph>null</codeph>, if no undoable operation
         is on the stack.
         
         </apiDesc></apiReturn></apiOperationDef><apiDesc>
         Returns the next operation to be undone.
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.undo:UndoManager:popRedo"><apiName>popRedo</apiName><shortdesc>
         Removes the next operation to be redone from the redo stack, and returns it.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.undo:IOperation</apiOperationClassifier><apiDesc>The redoable IOperation object, or <codeph>null</codeph>, if no redoable operation
         is on the stack.
         </apiDesc></apiReturn></apiOperationDef><apiDesc>
         Removes the next operation to be redone from the redo stack, and returns it.
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.undo:UndoManager:popUndo"><apiName>popUndo</apiName><shortdesc>
         Removes the next operation to be undone from the undo stack, and returns it.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.undo:IOperation</apiOperationClassifier><apiDesc>The undoable IOperation object, or <codeph>null</codeph>, if no undoable operation
         is on the stack.
         
         </apiDesc></apiReturn></apiOperationDef><apiDesc>
         Removes the next operation to be undone from the undo stack, and returns it.
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.undo:UndoManager:pushRedo"><apiName>pushRedo</apiName><shortdesc>
         Adds a redoable operation to the redo stack.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>operation</apiItemName><apiOperationClassifier>flashx.undo:IOperation</apiOperationClassifier></apiParam></apiOperationDef><apiDesc>
         Adds a redoable operation to the redo stack.
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.undo:UndoManager:pushUndo"><apiName>pushUndo</apiName><shortdesc>
         Adds an undoable operation to the undo stack.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>operation</apiItemName><apiOperationClassifier>flashx.undo:IOperation</apiOperationClassifier></apiParam></apiOperationDef><apiDesc>
         Adds an undoable operation to the undo stack.
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.undo:UndoManager:redo"><apiName>redo</apiName><shortdesc> 
         Removes the next IOperation object from the redo stack and calls the performRedo() 
         function of that object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
         Removes the next IOperation object from the redo stack and calls the performRedo() 
         function of that object.
         
         </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.edit.xml#IEditManager/redo()"><linktext>flashx.textLayout.edit.IEditManager.redo()</linktext></link></related-links></apiOperation><apiOperation id="flashx.undo:UndoManager:undo"><apiName>undo</apiName><shortdesc> 
         Removes the next IOperation object from the undo stack and calls the performUndo() 
         function of that object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
         Removes the next IOperation object from the undo stack and calls the performUndo() 
         function of that object.
         
         </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.edit.xml#IEditManager/undo()"><linktext>flashx.textLayout.edit.IEditManager.undo()</linktext></link></related-links></apiOperation><apiConstructor id="flashx.undo:UndoManager:UndoManager"><apiName>UndoManager</apiName><shortdesc>
		 Creates an UndoManager object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
		 Creates an UndoManager object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.undo:IUndoManager"><apiName>IUndoManager</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="flashx.undo:IUndoManager:flashx.undo:IUndoManager:canRedo"><apiName>canRedo</apiName><shortdesc>
         Indicates whether there is currently an operation that can be redone.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>Boolean <codeph>true</codeph>, if there is an operation on the redo stack that can be redone.
         Otherwise, <codeph>false</codeph>.
         
         </apiDesc></apiReturn></apiOperationDef><apiDesc>
         Indicates whether there is currently an operation that can be redone.
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.undo:IUndoManager:flashx.undo:IUndoManager:canUndo"><apiName>canUndo</apiName><shortdesc>
         Indicates whether there is currently an operation that can be undone.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>Boolean <codeph>true</codeph>, if there is an operation on the undo stack that can be reversed.
         Otherwise, <codeph>false</codeph>.
         
         </apiDesc></apiReturn></apiOperationDef><apiDesc>
         Indicates whether there is currently an operation that can be undone.
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.undo:IUndoManager:flashx.undo:IUndoManager:clearAll"><apiName>clearAll</apiName><shortdesc>
         Clears both the undo and the redo histories.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
         Clears both the undo and the redo histories.
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.undo:IUndoManager:flashx.undo:IUndoManager:clearRedo"><apiName>clearRedo</apiName><shortdesc>
         Clears the redo stack.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
         Clears the redo stack.
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.undo:IUndoManager:flashx.undo:IUndoManager:peekRedo"><apiName>peekRedo</apiName><shortdesc>
         Returns the next operation to be redone.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.undo:IOperation</apiOperationClassifier><apiDesc>The redoable IOperation object, or <codeph>null</codeph>, if no redoable operation
         is on the stack.
         
         </apiDesc></apiReturn></apiOperationDef><apiDesc>
         Returns the next operation to be redone.
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.undo:IUndoManager:flashx.undo:IUndoManager:peekUndo"><apiName>peekUndo</apiName><shortdesc>
         Returns the next operation to be undone.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.undo:IOperation</apiOperationClassifier><apiDesc>The undoable IOperation object, or <codeph>null</codeph>, if no undoable operation
         is on the stack.
         
         </apiDesc></apiReturn></apiOperationDef><apiDesc>
         Returns the next operation to be undone.
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.undo:IUndoManager:flashx.undo:IUndoManager:popRedo"><apiName>popRedo</apiName><shortdesc>
         Removes the next operation to be redone from the redo stack, and returns it.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.undo:IOperation</apiOperationClassifier><apiDesc>The redoable IOperation object, or <codeph>null</codeph>, if no redoable operation
         is on the stack.
         </apiDesc></apiReturn></apiOperationDef><apiDesc>
         Removes the next operation to be redone from the redo stack, and returns it.
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.undo:IUndoManager:flashx.undo:IUndoManager:popUndo"><apiName>popUndo</apiName><shortdesc>
         Removes the next operation to be undone from the undo stack, and returns it.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.undo:IOperation</apiOperationClassifier><apiDesc>The undoable IOperation object, or <codeph>null</codeph>, if no undoable operation
         is on the stack.
         
         </apiDesc></apiReturn></apiOperationDef><apiDesc>
         Removes the next operation to be undone from the undo stack, and returns it.
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.undo:IUndoManager:flashx.undo:IUndoManager:pushRedo"><apiName>pushRedo</apiName><shortdesc>
         Adds a redoable operation to the redo stack.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>operation</apiItemName><apiOperationClassifier>flashx.undo:IOperation</apiOperationClassifier></apiParam></apiOperationDef><apiDesc>
         Adds a redoable operation to the redo stack.
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.undo:IUndoManager:flashx.undo:IUndoManager:pushUndo"><apiName>pushUndo</apiName><shortdesc>
         Adds an undoable operation to the undo stack.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>operation</apiItemName><apiOperationClassifier>flashx.undo:IOperation</apiOperationClassifier></apiParam></apiOperationDef><apiDesc>
         Adds an undoable operation to the undo stack.
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.undo:IUndoManager:flashx.undo:IUndoManager:redo"><apiName>redo</apiName><shortdesc> 
         Removes the next IOperation object from the redo stack and calls the performRedo() 
         function of that object.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
         Removes the next IOperation object from the redo stack and calls the performRedo() 
         function of that object.
         
         </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.edit.xml#IEditManager/redo()"><linktext>flashx.textLayout.edit.IEditManager.redo()</linktext></link><link href="flashx.undo.xml#IUndoManager/canRedo()"><linktext>flashx.undo.IUndoManager.canRedo()</linktext></link><link href="flashx.undo.xml#IUndoManager/clearRedo()"><linktext>flashx.undo.IUndoManager.clearRedo()</linktext></link><link href="flashx.undo.xml#IUndoManager/peekRedo()"><linktext>flashx.undo.IUndoManager.peekRedo()</linktext></link><link href="flashx.undo.xml#IUndoManager/pushRedo()"><linktext>flashx.undo.IUndoManager.pushRedo()</linktext></link><link href="flashx.undo.xml#IUndoManager/popRedo()"><linktext>flashx.undo.IUndoManager.popRedo()</linktext></link></related-links></apiOperation><apiOperation id="flashx.undo:IUndoManager:flashx.undo:IUndoManager:undo"><apiName>undo</apiName><shortdesc> 
         Removes the next IOperation object from the undo stack and calls the performUndo() 
         function of that object.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
         Removes the next IOperation object from the undo stack and calls the performUndo() 
         function of that object.
         
         </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.edit.xml#IEditManager/undo()"><linktext>flashx.textLayout.edit.IEditManager.undo()</linktext></link><link href="flashx.undo.xml#IUndoManager/canUndo()"><linktext>flashx.undo.IUndoManager.canUndo()</linktext></link><link href="flashx.undo.xml#IUndoManager/clearUndo()"><linktext>flashx.undo.IUndoManager.clearUndo()</linktext></link><link href="flashx.undo.xml#IUndoManager/peekUndo()"><linktext>flashx.undo.IUndoManager.peekUndo()</linktext></link><link href="flashx.undo.xml#IUndoManager/pushUndo()"><linktext>flashx.undo.IUndoManager.pushUndo()</linktext></link><link href="flashx.undo.xml#IUndoManager/popUndo()"><linktext>flashx.undo.IUndoManager.popUndo()</linktext></link></related-links></apiOperation></apiClassifier></apiPackage></allClasses>