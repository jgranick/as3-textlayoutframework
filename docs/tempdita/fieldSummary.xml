<?xml version="1.0" encoding="UTF-8"?><allClasses><apiPackage id="flash.text.ime"><apiName>flash.text.ime</apiName><apiClassifier id="flash.text.ime:IIMEClient"><apiName>IIMEClient</apiName><shortdesc>
Interface for IME (input method editor) clients.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
Interface for IME (input method editor) clients.  Components based on the flash.text.engine package must implement 
this interface to support editing text inline using an IME. This interface is not used with TextField objects. 
TextLayoutFramework (TLF) uses this interface to support inline IME, so clients using TLF do not need to implement this 
interface. 
<p>To support inline IME, set the <codeph>imeClient</codeph> property of an <codeph>ImeEvent.IME_START_COMPOSITION</codeph> event to
an object which implements this interface.</p>

</apiDesc></apiClassifierDetail><apiValue id="flash.text.ime:IIMEClient:flash.text.ime:IIMEClient:compositionEndIndex:get"><apiName>compositionEndIndex</apiName><shortdesc> 
	 The zero-based character index value of the end of the current edit session text (i.e.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 
	 The zero-based character index value of the end of the current edit session text (i.e.
	 all text in the inline session that is still not yet confirmed to the document).
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.ime:IIMEClient:flash.text.ime:IIMEClient:compositionStartIndex:get"><apiName>compositionStartIndex</apiName><shortdesc> 
	 The zero-based character index value of the start of the current edit session text (i.e.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 
	 The zero-based character index value of the start of the current edit session text (i.e.
	 all text in the inline session that is still not yet confirmed to the document).
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.ime:IIMEClient:flash.text.ime:IIMEClient:selectionActiveIndex:get"><apiName>selectionActiveIndex</apiName><shortdesc> 
	 The zero-based character index value of the last character in the current selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 
	 The zero-based character index value of the last character in the current selection.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.ime:IIMEClient:flash.text.ime:IIMEClient:selectionAnchorIndex:get"><apiName>selectionAnchorIndex</apiName><shortdesc> 
	 The zero-based character index value of the first character in the current selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 
	 The zero-based character index value of the first character in the current selection.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.ime:IIMEClient:flash.text.ime:IIMEClient:verticalTextLayout:get"><apiName>verticalTextLayout</apiName><shortdesc> 
	 Indicates whether the text in the component is vertical or not.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc> 
	 Indicates whether the text in the component is vertical or not.  This will affect the positioning
	 of the candidate window (beside vertical text, below horizontal text).
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.ime:CompositionAttributeRange"><apiName>CompositionAttributeRange</apiName><shortdesc>
The CompositionAttributeRange class represents a range of composition attributes for use with IME events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
The CompositionAttributeRange class represents a range of composition attributes for use with IME events. 
For example, when editing text in the IME, the text is divided by the IME into composition ranges.
These composition ranges are flagged as selected (i.e. currently being lengthened, shortened, or edited),
and/or converted (i.e. they have made one pass through the IME dictionary lookup already).

<p>By convention, the client should adorn these composition ranges with underlining or hiliting according to
the flags.</p>

<p>For example:</p>
<codeblock>
     !converted              = thick gray underline (raw text)
     !selected &amp;&amp; converted  = thin black underline
      selected &amp;&amp; converted  = thick black underline
</codeblock>
</apiDesc></apiClassifierDetail><apiValue id="flash.text.ime:CompositionAttributeRange:converted"><apiName>converted</apiName><shortdesc>
	 The converted flag, meaning this clause has been processed by the IME
	 and is awaiting acceptance/confirmation by the user
	 
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/></apiVersion></asMetadata><asCustoms><helpid>
	 
	 </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Boolean"/></apiValueDef><apiDesc>
	 The converted flag, meaning this clause has been processed by the IME
	 and is awaiting acceptance/confirmation by the user
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.ime:CompositionAttributeRange:relativeEnd"><apiName>relativeEnd</apiName><shortdesc>
	 The relative end of the composition clause, relative to the beginning
	 of the inline edit session.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/></apiVersion></asMetadata><asCustoms><helpid>
	 
	 </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="int"/></apiValueDef><apiDesc>
	 The relative end of the composition clause, relative to the beginning
	 of the inline edit session.
	 i.e. 0 = the start of the text the IME can see (there may be text 
	 before that in the edit field)
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.ime:CompositionAttributeRange:relativeStart"><apiName>relativeStart</apiName><shortdesc>
	 The relative start from the beginning of the inline edit session
	 i.e.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/></apiVersion></asMetadata><asCustoms><helpid>
	 
	 </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="int"/></apiValueDef><apiDesc>
	 The relative start from the beginning of the inline edit session
	 i.e. 0 = the start of the text the IME can see (there may be text 
	 before that in the edit field)
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.ime:CompositionAttributeRange:selected"><apiName>selected</apiName><shortdesc>
	 The selected flag, meaning this composition clause is active and 
	 being lengthened or shortened or edited with the IME, and the neighboring
	 clauses are not.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/></apiVersion></asMetadata><asCustoms><helpid>
	 
	 </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Boolean"/></apiValueDef><apiDesc>
	 The selected flag, meaning this composition clause is active and 
	 being lengthened or shortened or edited with the IME, and the neighboring
	 clauses are not.
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage><apiPackage id="flashx.textLayout.compose"><apiName>flashx.textLayout.compose</apiName><apiClassifier id="flashx.textLayout.compose:StandardFlowComposer"><apiName>StandardFlowComposer</apiName><shortdesc> 
	The StandardFlowComposer class provides a standard composer and container manager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.compose:IFlowComposer</apiBaseInterface><apiBaseClassifier>flashx.textLayout.compose:FlowComposerBase</apiBaseClassifier></apiClassifierDef><apiDesc> 
	The StandardFlowComposer class provides a standard composer and container manager. 
	
	<p>Each call to <codeph>compose()</codeph> or <codeph>updateAllControllers()</codeph> normalizes the text flow as a first step.  
	The normalizing process checks the parts of the TextFlow object that were modified and takes the following steps:
	<ol>
	<li> Deletes empty FlowLeafElement and SubParagraphGroupElement objects.</li>
	<li> Merges sibling spans that have identical attributes.</li>
	<li> Adds an empty paragraph if a flow is empty.</li>
 	</ol>
 	</p>
	
	<p>To use a StandardFlowComposer, assign it to the
	<codeph>flowComposer</codeph> property of a TextFlow object. Call the <codeph>updateAllControllers()</codeph>
	method to lay out and display the text in the containers attached to the flow composer.</p>
	
	<p><b>Note:</b> For simple, static text flows, you can also use the one of the text line factory classes.
	These factory classes will typically create lines with less overhead than a flow composer, but do not
	support editing, dynamic changes, or user interaction.</p>
	
	</apiDesc><example/></apiClassifierDetail><apiValue id="flashx.textLayout.compose:StandardFlowComposer:composing:get"><apiName>composing</apiName><shortdesc> 
		 True, if the flow composer is currently performing a composition operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc> 
		 True, if the flow composer is currently performing a composition operation. 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:StandardFlowComposer:numControllers:get"><apiName>numControllers</apiName><shortdesc> 
		 The number of containers assigned to this IFlowComposer instance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 
		 The number of containers assigned to this IFlowComposer instance. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:StandardFlowComposer:rootElement:get"><apiName>rootElement</apiName><shortdesc> 
		 The root element associated with this IFlowComposer instance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:ContainerFormattedElement</apiValueClassifier></apiValueDef><apiDesc> 
		 The root element associated with this IFlowComposer instance. 
		 
		 <p>Only a TextFlow object can be a root element.</p>
		  
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.compose:TextFlowLineLocation"><apiName>TextFlowLineLocation</apiName><shortdesc> 
	 The TextFlowLineLocation class is an enumeration class that defines constants for specifying the location
	 of a line within a paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 The TextFlowLineLocation class is an enumeration class that defines constants for specifying the location
	 of a line within a paragraph.
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.compose:TextFlowLineLocation:FIRST"><apiName>FIRST</apiName><shortdesc> Specifies the first line in a paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1</apiData><apiType value="uint"/></apiValueDef><apiDesc> Specifies the first line in a paragraph. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLineLocation:LAST"><apiName>LAST</apiName><shortdesc> Specifies the last line in a paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>4</apiData><apiType value="uint"/></apiValueDef><apiDesc> Specifies the last line in a paragraph.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLineLocation:MIDDLE"><apiName>MIDDLE</apiName><shortdesc> Specifies a middle line in a paragraph - neither the first nor the last line.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2</apiData><apiType value="uint"/></apiValueDef><apiDesc> Specifies a middle line in a paragraph - neither the first nor the last line. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLineLocation:ONLY"><apiName>ONLY</apiName><shortdesc> Specifies both the first and last lines in a paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>5</apiData><apiType value="uint"/></apiValueDef><apiDesc> Specifies both the first and last lines in a paragraph.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.compose:FlowComposerBase"><apiName>FlowComposerBase</apiName><shortdesc> 
	 The FlowComposerBase class is the base class for Text Layout Framework flow composer classes, which control the 
	 composition of text lines in ContainerController objects.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><Exclude kind="method" name="checkFirstDamage"/><Exclude kind="method" name="debugCheckTextFlowLines"/><Exclude kind="property" name="lines"/><Exclude kind="method" name="addLine"/><Exclude kind="method" name="initializeLines"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 The FlowComposerBase class is the base class for Text Layout Framework flow composer classes, which control the 
	 composition of text lines in ContainerController objects.
	 
	 <p>FlowComposerBase is a utility class that implements methods and properties that are common
	 to several types of flow composer. Application code would not typically instantiate or use this class
	 (unless extending it to create a custom flow composer).</p>
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.compose:FlowComposerBase:damageAbsoluteStart:get"><apiName>damageAbsoluteStart</apiName><shortdesc>
		 The absolute position immediately preceding the first element in the text
		 flow that requires composition and updating.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 The absolute position immediately preceding the first element in the text
		 flow that requires composition and updating.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:FlowComposerBase:numLines:get"><apiName>numLines</apiName><shortdesc> 
		 The total number of lines composed in the flow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 
		 The total number of lines composed in the flow.  By default TLF does not compose the entire flow and this value may be innacruate.
		 Use composeToPosition to get all lines composed.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:FlowComposerBase:swfContext:get"><apiName>swfContext</apiName><shortdesc> 
		The ISWFContext instance used to make FTE calls as needed.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.compose:ISWFContext</apiValueClassifier></apiValueDef><apiDesc> 
		The ISWFContext instance used to make FTE calls as needed. 
		
		<p>By default, the ISWFContext implementation is this FlowComposerBase object.
		Applications can provide a custom implementation to use fonts
		embedded in a different SWF file or to cache and reuse text lines.</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#ISWFContext"><linktext>flashx.textLayout.compose.ISWFContext</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.compose:FlowComposerBase:textFlow:get"><apiName>textFlow</apiName><shortdesc> 
		The TextFlow object to which this flow composer is attached.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:TextFlow</apiValueClassifier></apiValueDef><apiDesc> 
		The TextFlow object to which this flow composer is attached. 
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>flashx.textLayout.elements.TextFlow</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.compose:TextLineRecycler"><apiName>TextLineRecycler</apiName><shortdesc> 
	 The TextLineRecycler class provides support for recycling of TextLines.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 The TextLineRecycler class provides support for recycling of TextLines.  Some player versions support a recreateTextLine.  Passing TextLines
	 to the recycler makes them available for reuse.  This improves Player performance.
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.compose:TextLineRecycler:textLineRecyclerEnabled:get"><apiName>textLineRecyclerEnabled</apiName><shortdesc> Controls if the TLF recycler enabled.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc> Controls if the TLF recycler enabled.   It can only be enabled in 10.1 or later players.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.compose:TextFlowLine"><apiName>TextFlowLine</apiName><shortdesc> 
	 The TextFlowLine class represents a single line of text in a text flow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseInterface>flashx.textLayout.compose:IVerticalJustificationLine</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 The TextFlowLine class represents a single line of text in a text flow.
	 
	 <p>Use this class to access information about how a line of text has been composed: its position, 
	 height, width, and so on. When the text flow (TextFlow) is modified, the lines immediately before and at the  
	 site of the modification are marked as invalid because they need to be recomposed. Lines after
	 the site of the modification might not be damaged immediately, but they might be regenerated once the
	 text is composed. You can access a TextFlowLine that has been damaged, but any values you access
	 reflect the old state of the TextFlow. When the TextFlow is recomposed, it generates new lines and you can 
	 get the new line for a given position by calling <codeph>TextFlow.flowComposer.findLineAtPosition()</codeph>.</p>
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.compose:TextFlowLine:absoluteStart:get"><apiName>absoluteStart</apiName><shortdesc> 
		 The location of the line as an absolute character position in the TextFlow object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 
		 The location of the line as an absolute character position in the TextFlow object.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>flashx.textLayout.elements.TextFlow</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:ascent:get"><apiName>ascent</apiName><shortdesc/><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:columnIndex:get"><apiName>columnIndex</apiName><shortdesc> The number of the column in which the line has been placed, with the first column being 0.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> The number of the column in which the line has been placed, with the first column being 0.
		 	
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:controller:get"><apiName>controller</apiName><shortdesc> 
		 The controller (ContainerController object) for the container in which the line has been placed.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.container:ContainerController</apiValueClassifier></apiValueDef><apiDesc> 
		 The controller (ContainerController object) for the container in which the line has been placed.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.container.xml#ContainerController"><linktext>flashx.textLayout.container.ContainerController</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:descent:get"><apiName>descent</apiName><shortdesc/><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:height:get"><apiName>height</apiName><shortdesc> The height of the line in pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> The height of the line in pixels.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:lineOffset:get"><apiName>lineOffset</apiName><shortdesc> 
		 The line's offset in pixels from the appropriate container inset (as dictated by paragraph direction and container block progression), 
		 prior to alignment of lines in the paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> 
		 The line's offset in pixels from the appropriate container inset (as dictated by paragraph direction and container block progression), 
		 prior to alignment of lines in the paragraph.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:location:get"><apiName>location</apiName><shortdesc> 
		 One of the values from TextFlowLineLocation for specifying a line's location within a paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 
		 One of the values from TextFlowLineLocation for specifying a line's location within a paragraph.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#ParagraphElement"><linktext>flashx.textLayout.elements.ParagraphElement</linktext></link><link href="flashx.textLayout.compose.xml#TextFlowLineLocation"><linktext>TextFlowLineLocation</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:paragraph:get"><apiName>paragraph</apiName><shortdesc> 
		 The paragraph (ParagraphElement) in which the line resides.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:ParagraphElement</apiValueClassifier></apiValueDef><apiDesc> 
		 The paragraph (ParagraphElement) in which the line resides.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#ParagraphElement"><linktext>flashx.textLayout.elements.ParagraphElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:spaceAfter:get"><apiName>spaceAfter</apiName><shortdesc> 
		 The amount of space to leave after the line.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> 
		 The amount of space to leave after the line.
		 <p>If the line is the last line of a paragraph that has a space-after, the line will have
		 a <codeph>spaceAfter</codeph> value. If the line comes at the bottom of a column, then the <codeph>spaceAfter</codeph>
		 is ignored. Otherwise, the line comes before another line in the column, and the following line must be positioned vertically to
		 insure that there is at least this much space left between this last line of the paragraph and the first
		 line of the following paragraph.</p> 
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/paragraphSpaceAfter"><linktext>TextLayoutFormat.paragraphSpaceAfter</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:spaceBefore:get"><apiName>spaceBefore</apiName><shortdesc> 
		 The amount of space to leave before the line.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> 
		 The amount of space to leave before the line.
		 <p>If the line is the first line of a paragraph that has a space-before applied, the line will have
		 a <codeph>spaceBefore</codeph> value. If the line comes at the top of a column, <codeph>spaceBefore</codeph> is ignored. 
		 Otherwise, the line follows another line in the column, and it is positioned vertically to insure that there is
		 at least this much space left between this line and the last line of the preceding paragraph.</p> 
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/paragraphSpaceBefore"><linktext>TextLayoutFormat.paragraphSpaceBefore</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:textHeight:get"><apiName>textHeight</apiName><shortdesc>
		 The height of the text line, which is equal to ascent plus descent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 The height of the text line, which is equal to <codeph>ascent</codeph> plus <codeph>descent</codeph>. The 
		 value is calculated based on the difference between the baselines that bound the line, either 
		 ideographic top and bottom or ascent and descent depending on whether the baseline at y=0 
		 is ideographic (for example, TextBaseline.IDEOGRAPHIC_TOP) or not. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextBaseline.xml"><linktext>TextBaseline</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:textLength:get"><apiName>textLength</apiName><shortdesc> 
		 The number of characters to the next line, including trailing spaces.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 
		 The number of characters to the next line, including trailing spaces. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:textLineExists:get"><apiName>textLineExists</apiName><shortdesc> 
		 Indicates whether the flash.text.engine.TextLine object for this TextFlowLine exists.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc> 
		 Indicates whether the <codeph>flash.text.engine.TextLine</codeph> object for this TextFlowLine exists.  
		 The value is <codeph>true</codeph> if the TextLine object has <i>not</i> been garbage collected and 
		 <codeph>false</codeph> if it has been.
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextLine.xml"><linktext>TextLine</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:unjustifiedTextWidth:get"><apiName>unjustifiedTextWidth</apiName><shortdesc> 
		 The width of the line if it was not justified.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata><asCustoms><internal>TBD: add graphic of justified line
		 
		 </internal></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> 
		 The width of the line if it was not justified. For unjustified text, this value is the same as <codeph>textLength</codeph>. 
		 For justified text, this value is what the length would have been without justification, and <codeph>textLength</codeph> 
		 represents the actual line width. For example, when the following String is justified and assigned a width of 500, it 
		 has an actual width of 500 but an unjustified width of 268.9921875. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:validity:get"><apiName>validity</apiName><shortdesc> The validity of the line.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc> The validity of the line. 
		 <p>A line can be invalid if the text, the attributes applied to it, or the controller settings have
		 changed since the line was created. An invalid line can still be displayed, and you can use it, but the values
		 used will be the values at the time it was created. The line returned by <codeph>getTextLine()</codeph> also will be in an
		 invalid state. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#TextFlowLine/getTextLine()"><linktext>getTextLine()</linktext></link><link href="" invalidHref="flash.text.engine.xml#TextLine/validity"><linktext>TextLine.validity</linktext></link><link href="flashx.textLayout.compose.xml#FlowDamageType/GEOMETRY"><linktext>FlowDamageType.GEOMETRY</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:x:get"><apiName>x</apiName><shortdesc> 
		 The horizontal position of the line relative to its container, expressed as the offset in pixels from the 
		 left of the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc> 
		 The horizontal position of the line relative to its container, expressed as the offset in pixels from the 
		 left of the container.
		 <p><b>Note: </b>Although this property is technically <codeph>read-write</codeph>, 
		 you should treat it as <codeph>read-only</codeph>. The setter exists only to satisfy the
		 requirements of the IVerticalJustificationLine interface that defines both a getter and setter for this property.
		 Use of the setter, though possible, will lead to unpredictable results.
		 </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#TextFlowLine/y"><linktext>y</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:y:get"><apiName>y</apiName><shortdesc> 
		 The vertical position of the line relative to its container, expressed as the offset in pixels from the top 
		 of the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc> 
		 The vertical position of the line relative to its container, expressed as the offset in pixels from the top 
		 of the container.
		 <p><b>Note: </b>Although this property is technically <codeph>read-write</codeph>, 
		 you should treat it as <codeph>read-only</codeph>. The setter exists only to satisfy the
		 requirements of the IVerticalJustificationLine interface that defines both a getter and setter for this property.
		 Use of the setter, though possible, will lead to unpredictable results.
		 </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#TextFlowLine/x"><linktext>x</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.compose:FlowDamageType"><apiName>FlowDamageType</apiName><shortdesc>
	  The FlowDamageType class is an enumeration class that defines types of damage for damage methods and events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  The FlowDamageType class is an enumeration class that defines types of damage for damage methods and events.
	 When the text content is updated, these changes are reflected in the TextLines after an update. TextLines are 
	 marked with a flag that specifies whether or not they are valid, or up to date with all text
	 changes. When the text is first updated, all lines are marked valid or static. After the text has been changed,
	 and before the next update, lines will be marked with a FlowDamageType that specifies what about the line
	 is invalid. Once the update is done, lines will again be marked as valid or static.
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.compose:FlowDamageType:GEOMETRY"><apiName>GEOMETRY</apiName><shortdesc>
		 Value is used to set the validity property if the line has been invalidated by other lines 
		 moving around.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>geometry</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 Value is used to set the <codeph>validity</codeph> property if the line has been invalidated by other lines 
		 moving around. For instance, a line above may have been created, so this line needs to be moved down.
		 The text line might or might not need recreating at the next compose operation. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#TextFlowLine/validity"><linktext>flashx.textLayout.compose.TextFlowLine.validity</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.compose:FlowDamageType:INVALID"><apiName>INVALID</apiName><shortdesc> 
		 Value is used to set the validity property if the text content has changed since the
		 line was originally created.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>invalid</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		 Value is used to set the <codeph>validity</codeph> property if the text content has changed since the
		 line was originally created. Invalid lines needs to be recreated before they are used for selection
		 or to display the text content changes.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#TextFlowLine/validity"><linktext>flashx.textLayout.compose.TextFlowLine.validity</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.compose:IFlowComposer"><apiName>IFlowComposer</apiName><shortdesc>
	 IFlowComposer defines the interface for managing the layout and display of a text flow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 IFlowComposer defines the interface for managing the layout and display of a text flow.
	 
	 <p>Text flows displayed with a flow composer implementation can be dynamic and interactive.
	 A flow composer manages one or more display controller. Each controller is associated with
	 a display object container (such as a Sprite) through which the lines created for the text
	 flow are ultimately displayed. The following diagram illustrates the relationship between TextFlow,
	 IFlowComposer, ContainerController, and DisplayObjectContainer objects:</p>
	 
	 <p><adobeimage alt="IFlowComposer" href="../../../images/textLayout_singleController.gif"/></p>
	 
	 <p>A flow composer calculates which portion of a text flow fits in each container and 
	 adds the appropriate text lines to the container's display object. The IFlowComposer interface 
	 defines separate methods for layout calculations and for updating the display. IFlowComposer also 
	 defines methods for incrementally composing and updating a text flow. These methods can be used 
	 to avoid blocking the user interface when updating long text flows.</p>
	 
	 <p>In addition to managing text composition and display, a flow composer controls which container has focus, 
	 manages the display of the selection highlight (which can cross container boundaries), and provides
	 direct access to all the TextLine objects in the flow.</p>
	 
	 <p>To use an IFlowComposer implementation, assign an instance of that implementation to the
	 <codeph>flowComposer</codeph> property of a TextFlow object. Call the <codeph>updateAllControllers()</codeph>
	 method to lay out and display the text in the containers attached to the flow composer.</p>
	 
	 <p><b>Note:</b> For simple, static text flows, you can also use the one of the text line factory classes.
	 These factory classes will typically create lines with less overhead than a flow composer, but do not
	 support editing, dynamic changes, or user interaction.</p>
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:composing:get"><apiName>composing</apiName><shortdesc> 
		 True, if the flow composer is currently performing a composition operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc> 
		 True, if the flow composer is currently performing a composition operation.
		  
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:damageAbsoluteStart:get"><apiName>damageAbsoluteStart</apiName><shortdesc> 
		 The first invalid position in the root element, as an absolute position from the start of the flow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 
		 The first invalid position in the root element, as an absolute position from the start of the flow.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:numControllers:get"><apiName>numControllers</apiName><shortdesc> 
		 The number of containers assigned to this IFlowComposer instance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 
		 The number of containers assigned to this IFlowComposer instance. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:numLines:get"><apiName>numLines</apiName><shortdesc> 
		 The total number of lines composed in the flow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 
		 The total number of lines composed in the flow.  By default TLF does not compose the entire flow and this value may be innacruate.
		 Use composeToPosition to get all lines composed.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:rootElement:get"><apiName>rootElement</apiName><shortdesc> 
		 The root element associated with this IFlowComposer instance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:ContainerFormattedElement</apiValueClassifier></apiValueDef><apiDesc> 
		 The root element associated with this IFlowComposer instance. 
		 
		 <p>Only a TextFlow object can be a root element.</p>
		  
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#ContainerFormattedElement"><linktext>ContainerFormattedElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:swfContext:get"><apiName>swfContext</apiName><shortdesc> 
		 The ISWFContext instance to be used for calls that must be made in a specific SWF context  
		 
		 Implementations of IFlowComposer should allow this property to be set so that users
		 of the interface can create lines in a different SWF context than the one containing the 
		 implementation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.compose:ISWFContext</apiValueClassifier></apiValueDef><apiDesc> 
		 The ISWFContext instance to be used for calls that must be made in a specific SWF context  
		 
		 <p>Implementations of IFlowComposer should allow this property to be set so that users
		 of the interface can create lines in a different SWF context than the one containing the 
		 implementation.  A default implementation of ISWFContext should also be supplied.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flashx.elements.ISWFContext.xml"><linktext>ISWFContext</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.compose:ISWFContext"><apiName>ISWFContext</apiName><shortdesc> 
	 The ISWFContext interface allows a SWF file to share its context with other SWF files that load it.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc> 
	 The ISWFContext interface allows a SWF file to share its context with other SWF files that load it.
	 An application that loads a SWF file of type ISWFContext can call methods in the context of the loaded SWF file.
	 The main usage is for calling the FTE TextLine creation methods.
	 
	 <p>There are two reasons for an application to use 
	 this interface to control TextLine creation: </p>
	 <ul>
	   <li><b>Reuse an embedded font: </b> if an application wants to use a font embedded in a loaded SWF file,
	 the application can access the font if a TextLine
	 is created in the context of the loaded SWF file.</li>
	   <li><b>Reuse existing TextLine instances</b>: reusing existing TextLine instances can result in faster recompose times. 
	 TLF reuses existing TextLine instances internally. TLF reuses 
	 a TextLine by calling <codeph>TextBlock.recreateTextLine()</codeph>
	 instead of <codeph>TextBlock.createTextLine()</codeph> when TLF recognizes that a TextLine is extant.</li>
	 </ul>
	 
	 
	 <p>Your application may have additional TextLine instances that can be reused. 
	 To manually reuse existing TextLine instances:</p>
	 <ol>
	   <li>trap calls to <codeph>TextBlock.createTextLine()</codeph>, then</li>
	   <li>call <codeph>TextBlock.recreateTextLine()</codeph> with the extant TextLine instance instead 
	 of <codeph>TextBlock.createTextLine()</codeph>.</li>
	 </ol>
	 <p>Please note, however, that the <codeph>TextBlock.recreateTextLine()</codeph> is available
	 only in Flash Player 10.1 and later.</p>
	 
	 </apiDesc><example/><example/></apiClassifierDetail></apiClassifier><apiClassifier id="flashx.textLayout.compose:IVerticalJustificationLine"><apiName>IVerticalJustificationLine</apiName><shortdesc> 
	 The IVerticalJustificationLine interface defines the methods and properties required to allow
	 the vertical justification of text lines.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc> 
	 The IVerticalJustificationLine interface defines the methods and properties required to allow
	 the vertical justification of text lines.
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.compose:IVerticalJustificationLine:flashx.textLayout.compose:IVerticalJustificationLine:ascent:get"><apiName>ascent</apiName><shortdesc/><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:IVerticalJustificationLine:flashx.textLayout.compose:IVerticalJustificationLine:descent:get"><apiName>descent</apiName><shortdesc/><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:IVerticalJustificationLine:flashx.textLayout.compose:IVerticalJustificationLine:height:get"><apiName>height</apiName><shortdesc> The height of the line in pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> The height of the line in pixels.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:IVerticalJustificationLine:flashx.textLayout.compose:IVerticalJustificationLine:x:get"><apiName>x</apiName><shortdesc> 
		 The horizontal position of the line relative to its container, expressed as the offset in pixels from the 
		 left of the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc> 
		 The horizontal position of the line relative to its container, expressed as the offset in pixels from the 
		 left of the container.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#IVerticalJustificationLine/y"><linktext>y</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.compose:IVerticalJustificationLine:flashx.textLayout.compose:IVerticalJustificationLine:y:get"><apiName>y</apiName><shortdesc> 
		 The vertical position of the line relative to its container, expressed as the offset in pixels from the top 
		 of the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc> 
		 The vertical position of the line relative to its container, expressed as the offset in pixels from the top 
		 of the container.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#IVerticalJustificationLine/x"><linktext>x</linktext></link></related-links></apiValue></apiClassifier></apiPackage><apiPackage id="flashx.textLayout.container"><apiName>flashx.textLayout.container</apiName><apiClassifier id="flashx.textLayout.container:ColumnState"><apiName>ColumnState</apiName><shortdesc> 
	 The ColumnState class calculates the sizes and locations of columns using
	 the width of the container and the container attributes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 The ColumnState class calculates the sizes and locations of columns using
	 the width of the container and the container attributes. You can create instances of this class 
	 independently to calculate column values, or you can get the column values that 
	 were used for the text after the container has been composed or updated (redrawn).
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.container:ColumnState:columnCount:get"><apiName>columnCount</apiName><shortdesc> 
		 The number of columns in the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 
		 The number of columns in the container. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ColumnState:columnGap:get"><apiName>columnGap</apiName><shortdesc> 
		 The amount of space, in pixels, left between columns in the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> 
		 The amount of space, in pixels, left between columns in the container.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ColumnState:columnWidth:get"><apiName>columnWidth</apiName><shortdesc> 
		 The width of columns, in pixels, in the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> 
		 The width of columns, in pixels, in the container. 
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.container:ContainerController"><apiName>ContainerController</apiName><shortdesc> 
	 The ContainerController class defines the relationship between a TextFlow object and a container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.edit:IInteractionEventHandler</apiBaseInterface><apiBaseInterface>flashx.textLayout.formats:ITextLayoutFormat</apiBaseInterface><apiBaseInterface>flashx.textLayout.container:ISandboxSupport</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 The ContainerController class defines the relationship between a TextFlow object and a container.
	 A TextFlow may have one or more rectangular areas that can hold text; the text is said to be flowing
	 through the containers. Each container is a Sprite that is the parent DisplayObject for the TextLines.
	 Each container has a ContainerController that manages the container; the controller holds the target 
	 width and height for the text area, populates the container with TextLines, and handles scrolling. A
	 controller also has a format associated with it that allows some formatting attributes to be applied 
	 to the text in the container. This allows, for instance, a TextFlow to have one container where the
	 text appears in a single column, and a second container in the same TextFlow with two column text. Not
	 all formatting attributes that can be applied to the container will affect the text; only the ones that
	 affect container-level layout. The diagram below illustrates the relationship between the TextFlow,
	 its flowComposer, and the display list.
	 
	 <p><adobeimage alt="IContainerController" href="../../../images/textLayout_multiController.gif"/></p>
	 
	 </apiDesc><example/><example/></apiClassifierDetail><apiValue id="flashx.textLayout.container:ContainerController:tlf_internal:_mouseWheelListenerAttached"><apiName>_mouseWheelListenerAttached</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="tlf_internal"/><apiDynamic/><apiData>false</apiData><apiType value="Boolean"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:absoluteStart:get"><apiName>absoluteStart</apiName><shortdesc> 
		 Returns the first character in the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 
		 Returns the first character in the container. If this is not the first container in the flow,
		 this value is updated when the text is composed, that is when the IFlowComposer's <codeph>compose()</codeph> or 
		 <codeph>updateAllControllers()</codeph> methods are called.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#IFlowComposer"><linktext>flashx.textLayout.compose.IFlowComposer</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:alignmentBaseline:get"><apiName>alignmentBaseline</apiName><shortdesc>
		 TextLayoutFormat:
		 Specifies the baseline to which the dominant baseline aligns.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Specifies the baseline to which the dominant baseline aligns. For example, if you set <codeph>dominantBaseline</codeph> to ASCENT, setting <codeph>alignmentBaseline</codeph> to DESCENT aligns the top of the text with the DESCENT baseline, or below the line.  The largest element in the line generally determines the baselines.<p><adobeimage alt="baselines" href="../../../images/textLayout_baselines.jpg"/></p>
		 <p>Legal values are TextBaseline.ROMAN, TextBaseline.ASCENT, TextBaseline.DESCENT, TextBaseline.IDEOGRAPHIC_TOP, TextBaseline.IDEOGRAPHIC_CENTER, TextBaseline.IDEOGRAPHIC_BOTTOM, TextBaseline.USE_DOMINANT_BASELINE, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of TextBaseline.USE_DOMINANT_BASELINE.</p>
		 </apiDesc><example/></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextBaseline.xml"><linktext>flash.text.engine.TextBaseline</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:backgroundAlpha:get"><apiName>backgroundAlpha</apiName><shortdesc>
		 TextLayoutFormat:
		 Alpha (transparency) value for the background (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Alpha (transparency) value for the background (adopts default value if undefined during cascade). A value of 0 is fully transparent, and a value of 1 is fully opaque. Display objects with alpha set to 0 are active, even though they are invisible.
		 <p>Legal values are numbers from 0 to 1 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of 1.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:backgroundColor:get"><apiName>backgroundColor</apiName><shortdesc>
		 TextLayoutFormat:
		 Background color of the text (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Background color of the text (adopts default value if undefined during cascade). Can be either the constant value  <codeph>BackgroundColor.TRANSPARENT</codeph>, or a hexadecimal value that specifies the three 8-bit RGB (red, green, blue) values; for example, 0xFF0000 is red and 0x00FF00 is green.
		 <p>Legal values as a string are BackgroundColor.TRANSPARENT, FormatValue.INHERIT and uints from 0x0 to 0xffffffff.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of BackgroundColor.TRANSPARENT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BackgroundColor"><linktext>flashx.textLayout.formats.BackgroundColor</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:baselineShift:get"><apiName>baselineShift</apiName><shortdesc>
		 TextLayoutFormat:
		 Amount to shift the baseline from the dominantBaseline value.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Amount to shift the baseline from the <codeph>dominantBaseline</codeph> value. Units are in pixels, or a percentage of <codeph>fontSize</codeph> (in which case, enter a string value, like 140%).  Positive values shift the line up for horizontal text (right for vertical) and negative values shift it down for horizontal (left for vertical). 
		 <p>Legal values are BaselineShift.SUPERSCRIPT, BaselineShift.SUBSCRIPT, FormatValue.INHERIT.</p>
		 <p>Legal values as a number are from -1000 to 1000.</p>
		 <p>Legal values as a percent are numbers from -1000 to 1000.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.0.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BaselineShift"><linktext>flashx.textLayout.formats.BaselineShift</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:blockProgression:get"><apiName>blockProgression</apiName><shortdesc>
		 TextLayoutFormat:
		 Specifies a vertical or horizontal progression of line placement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Specifies a vertical or horizontal progression of line placement.
		 Lines are either placed top-to-bottom (<codeph>BlockProgression.TB</codeph>, used for horizontal text) or right-to-left (<codeph>BlockProgression.RL</codeph>, used for vertical text).
		 <p>Legal values are BlockProgression.RL, BlockProgression.TB, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of BlockProgression.TB.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BlockProgression"><linktext>flashx.textLayout.formats.BlockProgression</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:breakOpportunity:get"><apiName>breakOpportunity</apiName><shortdesc>
		 TextLayoutFormat:
		 Controls where lines are allowed to break when breaking wrapping text into multiple lines.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Controls where lines are allowed to break when breaking wrapping text into multiple lines. Set to <codeph>BreakOpportunity.AUTO</codeph> to break text normally. Set to <codeph>BreakOpportunity.NONE</codeph> to <i>not</i> break the text unless the text would overrun the measure and there are no other places to break the line. Set to <codeph>BreakOpportunity.ANY</codeph> to allow the line to break anywhere, rather than just between words. Set to <codeph>BreakOpportunity.ALL</codeph> to have each typographic cluster put on a separate line (useful for text on a path).
		 <p>Legal values are BreakOpportunity.ALL, BreakOpportunity.ANY, BreakOpportunity.AUTO, BreakOpportunity.NONE, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of BreakOpportunity.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.BreakOpportunity.xml"><linktext>flash.text.engine.BreakOpportunity</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:cffHinting:get"><apiName>cffHinting</apiName><shortdesc>
		 TextLayoutFormat:
		 The type of CFF hinting used for this text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 The type of CFF hinting used for this text. CFF hinting determines whether the Flash runtime forces strong horizontal stems to fit to a sub pixel grid or not. This property applies only if the <codeph>renderingMode</codeph> property is set to <codeph>RenderingMode.CFF</codeph>, and the font is embedded (<codeph>fontLookup</codeph> property is set to <codeph>FontLookup.EMBEDDED_CFF</codeph>). At small screen sizes, hinting produces a clear, legible text for human readers.
		 <p>Legal values are CFFHinting.NONE, CFFHinting.HORIZONTAL_STEM, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of CFFHinting.HORIZONTAL_STEM.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.CFFHinting.xml"><linktext>flash.text.engine.CFFHinting</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:clearFloats:get"><apiName>clearFloats</apiName><shortdesc>
		 TextLayoutFormat:
		 Controls how text wraps around a float.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Controls how text wraps around a float. A value of none allows the text to wrap most closely around a float. A value of left causes the text to skip over any portion of the container that has a left float, and a value of right causes the text to skip over any portion of the container that has a right float. A value of both causes the text to skip over any floats.
		 <p>Legal values are ClearFloats.START, ClearFloats.END, ClearFloats.LEFT, ClearFloats.RIGHT, ClearFloats.BOTH, ClearFloats.NONE, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of ClearFloats.NONE.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#ClearFloats"><linktext>flashx.textLayout.formats.ClearFloats</linktext></link><link href="flashx.textLayout.formats.xml#ClearFloats"><linktext>flashx.textLayout.formats.ClearFloats</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:color:get"><apiName>color</apiName><shortdesc>
		 TextLayoutFormat:
		 Color of the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Color of the text. A hexadecimal number that specifies three 8-bit RGB (red, green, blue) values; for example, 0xFF0000 is red and 0x00FF00 is green. It can also be enum value {BLACK, GREEN, GRAY, BLUE, SILVER, LIME, OLIVE, WHITE, YELLOW, MAROON, NAVY, RED, PURPLE, TEAL, FUCHSIA, AQUA, MAGENTA, CYAN}
		 <p>Legal values as a string are ColorName.BLACK, ColorName.GREEN, ColorName.GRAY, ColorName.BLUE, ColorName.SILVER, ColorName.LIME, ColorName.OLIVE, ColorName.WHITE, ColorName.YELLOW, ColorName.MAROON, ColorName.NAVY, ColorName.RED, ColorName.PURPLE, ColorName.TEAL, ColorName.FUCHSIA, ColorName.AQUA, ColorName.MAGENTA, ColorName.CYAN, FormatValue.INHERIT and uints from 0x0 to 0xffffffff.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#ColorName"><linktext>flashx.textLayout.formats.ColorName</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:columnBreakAfter:get"><apiName>columnBreakAfter</apiName><shortdesc>
		 TextLayoutFormat:
		 Controls column after before the element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Controls column after before the element.
		 <p>Legal values are BreakStyle.AUTO, BreakStyle.ALWAYS, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of BreakStyle.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BreakStyle"><linktext>flashx.textLayout.formats.BreakStyle</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:columnBreakBefore:get"><apiName>columnBreakBefore</apiName><shortdesc>
		 TextLayoutFormat:
		 Controls column break before the element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Controls column break before the element.
		 <p>Legal values are BreakStyle.AUTO, BreakStyle.ALWAYS, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of BreakStyle.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BreakStyle"><linktext>flashx.textLayout.formats.BreakStyle</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:columnCount:get"><apiName>columnCount</apiName><shortdesc>
		 TextLayoutFormat:
		 Number of text columns (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Number of text columns (adopts default value if undefined during cascade).
		 The column number overrides the  other column settings. Value is an integer, or <codeph>FormatValue.AUTO</codeph> if unspecified. If <codeph>columnCount</codeph> is not specified,<codeph>columnWidth</codeph> is used to create as many columns as can fit in the container.
		 <p>Legal values as a string are FormatValue.AUTO, FormatValue.INHERIT and from ints from 1 to 50.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of FormatValue.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:columnGap:get"><apiName>columnGap</apiName><shortdesc>
		 TextLayoutFormat:
		 Specifies the amount of gutter space, in pixels, to leave between the columns (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Specifies the amount of gutter space, in pixels, to leave between the columns (adopts default value if undefined during cascade).
		 Value is a Number
		 <p>Legal values are numbers from 0 to 1000 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of 20.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:columnState:get"><apiName>columnState</apiName><shortdesc> 
		 Returns a ColumnState object, which describes the number and characteristics of columns in
		 the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.container:ColumnState</apiValueClassifier></apiValueDef><apiDesc> 
		 Returns a ColumnState object, which describes the number and characteristics of columns in
		 the container. These values are updated when the text is recomposed, either as a result
		 of <codeph>IFlowComposer.compose()</codeph> or <codeph>IFlowComposer.updateAllControllers()</codeph>.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.container.xml#ColumnState"><linktext>ColumnState</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:columnWidth:get"><apiName>columnWidth</apiName><shortdesc>
		 TextLayoutFormat:
		 Column width in pixels (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Column width in pixels (adopts default value if undefined during cascade).
		 If you specify the width of the columns, but not the count, TextLayout will create as many columns of that width as possible, given the  container width and <codeph>columnGap</codeph> settings. Any remainder space is left after the last column. Value is a Number.
		 <p>Legal values as a string are FormatValue.AUTO, FormatValue.INHERIT and numbers from 0 to 8000.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of FormatValue.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:compositionHeight:get"><apiName>compositionHeight</apiName><shortdesc> 
		 Returns the vertical extent allowed for text inside the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> 
		 Returns the vertical extent allowed for text inside the container. The value is specified in pixels.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.container.xml#ContainerController/setCompositionSize()"><linktext>setCompositionSize()</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:compositionWidth:get"><apiName>compositionWidth</apiName><shortdesc> 
		 Returns the horizontal extent allowed for text inside the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> 
		 Returns the horizontal extent allowed for text inside the container. The value is specified in pixels.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.container.xml#ContainerController/setCompositionSize()"><linktext>setCompositionSize()</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:computedFormat:get"><apiName>computedFormat</apiName><shortdesc> 
		 Returns an ITextLayoutFormat instance with the attributes applied to this container, including the attributes inherited from its
		 root element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		 Returns an ITextLayoutFormat instance with the attributes applied to this container, including the attributes inherited from its
		 root element.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.container.xml#ContainerController/rootElement"><linktext>rootElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:containerBreakAfter:get"><apiName>containerBreakAfter</apiName><shortdesc>
		 TextLayoutFormat:
		 Controls container after before the element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Controls container after before the element.
		 <p>Legal values are BreakStyle.AUTO, BreakStyle.ALWAYS, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of BreakStyle.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BreakStyle"><linktext>flashx.textLayout.formats.BreakStyle</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:containerBreakBefore:get"><apiName>containerBreakBefore</apiName><shortdesc>
		 TextLayoutFormat:
		 Controls container break before the element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Controls container break before the element.
		 <p>Legal values are BreakStyle.AUTO, BreakStyle.ALWAYS, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of BreakStyle.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BreakStyle"><linktext>flashx.textLayout.formats.BreakStyle</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:container:get"><apiName>container</apiName><shortdesc> 
		 Returns the container display object that holds the text lines for this ContainerController instance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:Sprite"/></apiValueDef><apiDesc> 
		 Returns the container display object that holds the text lines for this ContainerController instance. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.container.xml#ContainerController/ContainerController()"><linktext>ContainerController()</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:coreStyles:get"><apiName>coreStyles</apiName><shortdesc> Returns the coreStyles on this ContainerController.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc> Returns the <codeph>coreStyles</codeph> on this ContainerController.  Note that the getter makes a copy of the core 
		 styles dictionary. The returned object includes the formats that are defined by TextLayoutFormat and are in TextLayoutFormat.description. The
		 returned object consists of an array of <i>stylename-value</i> pairs.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat"><linktext>flashx.textLayout.formats.TextLayoutFormat</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:digitCase:get"><apiName>digitCase</apiName><shortdesc>
		 TextLayoutFormat:
		 The type of digit case used for this text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 The type of digit case used for this text. Setting the value to <codeph>DigitCase.OLD_STYLE</codeph> approximates lowercase letterforms with varying ascenders and descenders. The figures are proportionally spaced. This style is only available in selected typefaces, most commonly in a supplemental or expert font. The <codeph>DigitCase.LINING</codeph> setting has all-cap height and is typically monospaced to line up in charts.<p><adobeimage alt="digitCase" href="../../../images/textLayout_digitcase.gif"/></p>
		 <p>Legal values are DigitCase.DEFAULT, DigitCase.LINING, DigitCase.OLD_STYLE, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of DigitCase.DEFAULT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.DigitCase.xml"><linktext>flash.text.engine.DigitCase</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:digitWidth:get"><apiName>digitWidth</apiName><shortdesc>
		 TextLayoutFormat:
		 Type of digit width used for this text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Type of digit width used for this text. This can be <codeph>DigitWidth.PROPORTIONAL</codeph>, which looks best for individual numbers, or <codeph>DigitWidth.TABULAR</codeph>, which works best for numbers in tables, charts, and vertical rows.<p><adobeimage alt="digitWidth" href="../../../images/textLayout_digitwidth.gif"/></p>
		 <p>Legal values are DigitWidth.DEFAULT, DigitWidth.PROPORTIONAL, DigitWidth.TABULAR, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of DigitWidth.DEFAULT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.DigitWidth.xml"><linktext>flash.text.engine.DigitWidth</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:direction:get"><apiName>direction</apiName><shortdesc>
		 TextLayoutFormat:
		 Specifies the default bidirectional embedding level of the text in the text block.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Specifies the default bidirectional embedding level of the text in the text block. 
		 Left-to-right reading order, as in Latin-style scripts, or right-to-left reading order, as in Arabic or Hebrew. This property also affects column direction when it is applied at the container level. Columns can be either left-to-right or right-to-left, just like text. Below are some examples:<p><adobeimage alt="direction" href="../../../images/textLayout_direction.gif"/></p>
		 <p>Legal values are Direction.LTR, Direction.RTL, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of Direction.LTR.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#Direction"><linktext>flashx.textLayout.formats.Direction</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:dominantBaseline:get"><apiName>dominantBaseline</apiName><shortdesc>
		 TextLayoutFormat:
		 Specifies which element baseline snaps to the alignmentBaseline to determine the vertical position of the element on the line.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Specifies which element baseline snaps to the <codeph>alignmentBaseline</codeph> to determine the vertical position of the element on the line. A value of <codeph>TextBaseline.AUTO</codeph> selects the dominant baseline based on the <codeph>locale</codeph> property of the parent paragraph.  For Japanese and Chinese, the selected baseline value is <codeph>TextBaseline.IDEOGRAPHIC_CENTER</codeph>; for all others it is <codeph>TextBaseline.ROMAN</codeph>. These baseline choices are determined by the choice of font and the font size.<p><adobeimage alt="baselines" href="../../../images/textLayout_baselines.jpg"/></p>
		 <p>Legal values are FormatValue.AUTO, TextBaseline.ROMAN, TextBaseline.ASCENT, TextBaseline.DESCENT, TextBaseline.IDEOGRAPHIC_TOP, TextBaseline.IDEOGRAPHIC_CENTER, TextBaseline.IDEOGRAPHIC_BOTTOM, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of FormatValue.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextBaseline.xml"><linktext>flash.text.engine.TextBaseline</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:firstBaselineOffset:get"><apiName>firstBaselineOffset</apiName><shortdesc>
		 TextLayoutFormat:
		 Specifies the baseline position of the first line in the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Specifies the baseline position of the first line in the container. Which baseline this property refers to depends on the container-level locale.  For Japanese and Chinese, it is <codeph>TextBaseline.IDEOGRAPHIC_BOTTOM</codeph>; for all others it is <codeph>TextBaseline.ROMAN</codeph>.
		 The offset from the top inset (or right inset if <codeph>blockProgression</codeph> is RL) of the container to the baseline of the first line can be either <codeph>BaselineOffset.ASCENT</codeph>, meaning equal to the ascent of the line, <codeph>BaselineOffset.LINE_HEIGHT</codeph>, meaning equal to the height of that first line, or any fixed-value number to specify an absolute distance. <codeph>BaselineOffset.AUTO</codeph> aligns the ascent of the line with the container top inset.<p><adobeimage alt="firstBaselineOffset1" href="../../../images/textLayout_FBO1.png"/><adobeimage alt="firstBaselineOffset2" href="../../../images/textLayout_FBO2.png"/><adobeimage alt="firstBaselineOffset3" href="../../../images/textLayout_FBO3.png"/><adobeimage alt="firstBaselineOffset4" href="../../../images/textLayout_FBO4.png"/></p>
		 <p>Legal values as a string are BaselineOffset.AUTO, BaselineOffset.ASCENT, BaselineOffset.LINE_HEIGHT, FormatValue.INHERIT and numbers from 0 to 1000.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of BaselineOffset.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BaselineOffset"><linktext>flashx.textLayout.formats.BaselineOffset</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:flowComposer:get"><apiName>flowComposer</apiName><shortdesc> 
		 Returns the flow composer object that composes and highlights text into the container that this 
		 controller manages.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.compose:IFlowComposer</apiValueClassifier></apiValueDef><apiDesc> 
		 Returns the flow composer object that composes and highlights text into the container that this 
		 controller manages. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#IFlowComposer"><linktext>flashx.textLayout.compose.IFlowComposer</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:fontFamily:get"><apiName>fontFamily</apiName><shortdesc>
		 TextLayoutFormat:
		  The name of the font to use, or a comma-separated list of font names.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		  The name of the font to use, or a comma-separated list of font names. The Flash runtime renders the element with the first available font in the list. For example Arial, Helvetica, _sans causes the player to search for Arial, then Helvetica if Arial is not found, then _sans if neither is found.
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of Arial.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:fontLookup:get"><apiName>fontLookup</apiName><shortdesc>
		 TextLayoutFormat:
		 Font lookup to use.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Font lookup to use. Specifying <codeph>FontLookup.DEVICE</codeph> uses the fonts installed on the system that is running the SWF file. Device fonts result in a smaller movie size, but text is not always rendered the same across different systems and platforms. Specifying <codeph>FontLookup.EMBEDDED_CFF</codeph> uses font outlines embedded in the published SWF file. Embedded fonts increase the size of the SWF file (sometimes dramatically), but text is consistently displayed in the chosen font.
		 <p>Legal values are FontLookup.DEVICE, FontLookup.EMBEDDED_CFF, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of FontLookup.DEVICE.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontLookup.xml"><linktext>flash.text.engine.FontLookup</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:fontSize:get"><apiName>fontSize</apiName><shortdesc>
		 TextLayoutFormat:
		 The size of the text in pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 The size of the text in pixels.
		 <p>Legal values are numbers from 1 to 720 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 12.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:fontStyle:get"><apiName>fontStyle</apiName><shortdesc>
		 TextLayoutFormat:
		 Style of text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Style of text. May be <codeph>FontPosture.NORMAL</codeph>, for use in plain text, or <codeph>FontPosture.ITALIC</codeph> for italic. This property applies only to device fonts (<codeph>fontLookup</codeph> property is set to flash.text.engine.FontLookup.DEVICE).
		 <p>Legal values are FontPosture.NORMAL, FontPosture.ITALIC, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of FontPosture.NORMAL.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontPosture.xml"><linktext>flash.text.engine.FontPosture</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:fontWeight:get"><apiName>fontWeight</apiName><shortdesc>
		 TextLayoutFormat:
		 Weight of text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Weight of text. May be <codeph>FontWeight.NORMAL</codeph> for use in plain text, or <codeph>FontWeight.BOLD</codeph>. Applies only to device fonts (<codeph>fontLookup</codeph> property is set to flash.text.engine.FontLookup.DEVICE).
		 <p>Legal values are FontWeight.NORMAL, FontWeight.BOLD, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of FontWeight.NORMAL.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontWeight.xml"><linktext>flash.text.engine.FontWeight</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:format:get"><apiName>format</apiName><shortdesc> 
		 Stores the ITextLayoutFormat object that contains the attributes for this container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		 Stores the ITextLayoutFormat object that contains the attributes for this container. 
		 The controller inherits the container properties from the TextFlow of which it is part. 
		 This property allows different controllers in the same text flow to have, for example, 
		 different column settings or padding.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>flashx.textLayout.formats.ITextLayoutFormat</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:horizontalScrollPolicy:get"><apiName>horizontalScrollPolicy</apiName><shortdesc> 
		 Specifies the horizontal scrolling policy, which you can set by assigning one of the constants of
		 the ScrollPolicy class: ON, OFF, or AUTO.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc> 
		 Specifies the horizontal scrolling policy, which you can set by assigning one of the constants of
		 the ScrollPolicy class: ON, OFF, or AUTO.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.container.xml#ScrollPolicy"><linktext>ScrollPolicy</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:horizontalScrollPosition:get"><apiName>horizontalScrollPosition</apiName><shortdesc> Specifies the current horizontal scroll location on the stage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc> Specifies the current horizontal scroll location on the stage. The value specifies the number of
		 pixels from the left.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:interactionManager:get"><apiName>interactionManager</apiName><shortdesc>
		 The InteractionManager associated with this TextFlow object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.edit:ISelectionManager</apiValueClassifier></apiValueDef><apiDesc>
		 The InteractionManager associated with this TextFlow object.
		 <p>Controls all selection and editing on the text. If the TextFlow is not selectable, 
		 the interactionManager is null. To make the TextFlow editable, assign a interactionManager
		 that is both an ISelectionManager and an IEditManager. To make a TextFlow that is read-only
		 and allows selection, assign a interactionManager that is an ISelectionManager only. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow/interactionManager"><linktext>flashx.textLayout.elements.TextFlow.interactionManager</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:tlf_internal:interactiveObjects:get"><apiName>interactiveObjects</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="tlf_internal"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.utils:Dictionary"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:justificationRule:get"><apiName>justificationRule</apiName><shortdesc>
		 TextLayoutFormat:
		 Rule used to justify text in a paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Rule used to justify text in a paragraph.
		 Default value is <codeph>FormatValue.AUTO</codeph>, which justifies text based on the paragraph's <codeph>locale</codeph> property. For all languages except Japanese and Chinese, <codeph>FormatValue.AUTO</codeph> becomes <codeph>JustificationRule.SPACE</codeph>, which adds extra space to the space characters.  For Japanese and Chinese, <codeph>FormatValue.AUTO</codeph> becomes <codeph>JustficationRule.EAST_ASIAN</codeph>. In part, justification changes the spacing of punctuation. In Roman text the comma and Japanese periods take a full character's width but in East Asian text only half of a character's width. Also, in the East Asian text the spacing between sequential punctuation marks becomes tighter, obeying traditional East Asian typographic conventions. Note, too, in the example below the leading that is applied to the second line of the paragraphs. In the East Asian version, the last two lines push left. In the Roman version, the second and following lines push left.<p><adobeimage alt="justificationRule" href="../../../images/textLayout_justificationrule.png"/></p>
		 <p>Legal values are JustificationRule.EAST_ASIAN, JustificationRule.SPACE, FormatValue.AUTO, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of FormatValue.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#JustificationRule"><linktext>flashx.textLayout.formats.JustificationRule</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:justificationStyle:get"><apiName>justificationStyle</apiName><shortdesc>
		 TextLayoutFormat:
		 The style used for justification of the paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 The style used for justification of the paragraph. Used only in conjunction with a <codeph>justificationRule</codeph> setting of <codeph>JustificationRule.EAST_ASIAN</codeph>.
		 Default value of <codeph>FormatValue.AUTO</codeph> is resolved to <codeph>JustificationStyle.PUSH_IN_KINSOKU</codeph> for all locales.  The constants defined by the JustificationStyle class specify options for handling kinsoku characters, which are Japanese characters that cannot appear at either the beginning or end of a line. If you want looser text, specify <codeph>JustificationStyle.PUSH-OUT-ONLY</codeph>. If you want behavior that is like what you get with the  <codeph>justificationRule</codeph> of <codeph>JustificationRule.SPACE</codeph>, use <codeph>JustificationStyle.PRIORITIZE-LEAST-ADJUSTMENT</codeph>.
		 <p>Legal values are JustificationStyle.PRIORITIZE_LEAST_ADJUSTMENT, JustificationStyle.PUSH_IN_KINSOKU, JustificationStyle.PUSH_OUT_ONLY, FormatValue.AUTO, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of FormatValue.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.JustificationStyle.xml"><linktext>flash.text.engine.JustificationStyle</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:kerning:get"><apiName>kerning</apiName><shortdesc>
		 TextLayoutFormat:
		 Kerning adjusts the pixels between certain character pairs to improve readability.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Kerning adjusts the pixels between certain character pairs to improve readability. Kerning is supported for all fonts with kerning tables.
		 <p>Legal values are Kerning.ON, Kerning.OFF, Kerning.AUTO, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of Kerning.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.Kerning.xml"><linktext>flash.text.engine.Kerning</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:leadingModel:get"><apiName>leadingModel</apiName><shortdesc>
		 TextLayoutFormat:
		 Specifies the leading model, which is a combination of leading basis and leading direction.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Specifies the leading model, which is a combination of leading basis and leading direction.
		 Leading basis is the baseline to which the <codeph>lineHeight</codeph> property refers. Leading direction determines whether the <codeph>lineHeight</codeph> property refers to the distance of a line's baseline from that of the line before it or the line after it. The default value of <codeph>FormatValue.AUTO</codeph> is resolved based on the paragraph's <codeph>locale</codeph> property.  For Japanese and Chinese, it is <codeph>LeadingModel.IDEOGRAPHIC_TOP_DOWN</codeph> and for all others it is <codeph>LeadingModel.ROMAN_UP</codeph>.<p><b>Leading Basis:</b></p><p><adobeimage alt="leadingBasis1" href="../../../images/textLayout_LB1.png"/>    <adobeimage alt="leadingBasis2" href="../../../images/textLayout_LB2.png"/>    <adobeimage alt="leadingBasis3" href="../../../images/textLayout_LB3.png"/></p><p><b>Leading Direction:</b></p><p><adobeimage alt="leadingDirection1" href="../../../images/textLayout_LD1.png"/>    <adobeimage alt="leadingDirection2" href="../../../images/textLayout_LD2.png"/>    <adobeimage alt="leadingDirection3" href="../../../images/textLayout_LD3.png"/></p>
		 <p>Legal values are LeadingModel.ROMAN_UP, LeadingModel.IDEOGRAPHIC_TOP_UP, LeadingModel.IDEOGRAPHIC_CENTER_UP, LeadingModel.IDEOGRAPHIC_TOP_DOWN, LeadingModel.IDEOGRAPHIC_CENTER_DOWN, LeadingModel.APPROXIMATE_TEXT_FIELD, LeadingModel.ASCENT_DESCENT_UP, LeadingModel.BOX, LeadingModel.AUTO, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of LeadingModel.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#LeadingModel"><linktext>flashx.textLayout.formats.LeadingModel</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:ligatureLevel:get"><apiName>ligatureLevel</apiName><shortdesc>
		 TextLayoutFormat:
		 Controls which of the ligatures that are defined in the font may be used in the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Controls which of the ligatures that are defined in the font may be used in the text. The ligatures that appear for each of these settings is dependent on the font. A ligature occurs where two or more letter-forms are joined as a single glyph. Ligatures usually replace consecutive characters sharing common components, such as the letter pairs 'fi', 'fl', or 'ae'. They are used with both Latin and Non-Latin character sets. The ligatures enabled by the values of the LigatureLevel class - <codeph>MINIMUM</codeph>, <codeph>COMMON</codeph>, <codeph>UNCOMMON</codeph>, and <codeph>EXOTIC</codeph> - are additive. Each value enables a new set of ligatures, but also includes those of the previous types.<p><b>Note: </b>When working with Arabic or Syriac fonts, <codeph>ligatureLevel</codeph> must be set to MINIMUM or above.</p><p><adobeimage alt="ligatureLevel" href="../../../images/textLayout_ligatures.png"/></p>
		 <p>Legal values are LigatureLevel.MINIMUM, LigatureLevel.COMMON, LigatureLevel.UNCOMMON, LigatureLevel.EXOTIC, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of LigatureLevel.COMMON.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.LigatureLevel.xml"><linktext>flash.text.engine.LigatureLevel</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:lineBreak:get"><apiName>lineBreak</apiName><shortdesc>
		 TextLayoutFormat:
		 Controls word wrapping within the container (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Controls word wrapping within the container (adopts default value if undefined during cascade).
		 Text in the container may be set to fit the width of the container (<codeph>LineBreak.TO_FIT</codeph>), or can be set to break only at explicit return or line feed characters (<codeph>LineBreak.EXPLICIT</codeph>).
		 <p>Legal values are LineBreak.EXPLICIT, LineBreak.TO_FIT, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of LineBreak.TO_FIT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#LineBreak"><linktext>flashx.textLayout.formats.LineBreak</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:lineHeight:get"><apiName>lineHeight</apiName><shortdesc>
		 TextLayoutFormat:
		 Leading controls for the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Leading controls for the text. The distance from the baseline of the previous or the next line (based on <codeph>LeadingModel</codeph>) to the baseline of the current line is equal to the maximum amount of the leading applied to any character in the line. This is either a number or a percent.  If specifying a percent, enter a string value, like 140%.<p><adobeimage alt="lineHeight1" href="../../../images/textLayout_lineHeight1.jpg"/><adobeimage alt="lineHeight2" href="../../../images/textLayout_lineHeight2.jpg"/></p>
		 <p>Legal values as a number are from -720 to 720.</p>
		 <p>Legal values as a percent are numbers from -1000% to 1000%.</p>
		 <p>Legal values include FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 120%.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:lineThrough:get"><apiName>lineThrough</apiName><shortdesc>
		 TextLayoutFormat:
		 If true, applies strikethrough, a line drawn through the middle of the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 If <codeph>true</codeph>, applies strikethrough, a line drawn through the middle of the text.
		 <p>Legal values are true, false and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of false.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:linkActiveFormat:get"><apiName>linkActiveFormat</apiName><shortdesc>
		 TextLayoutFormat:
		 Defines the formatting attributes used for links in normal state.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Defines the formatting attributes used for links in normal state. This value will cascade down the hierarchy and apply to any links that are descendants.
		 Accepts <codeph>inherit</codeph>, an <codeph>ITextLayoutFormat</codeph> or converts an array of objects with key and value as members to a TextLayoutFormat.
		 <p>Legal values include FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of null.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:linkHoverFormat:get"><apiName>linkHoverFormat</apiName><shortdesc>
		 TextLayoutFormat:
		 Defines the formatting attributes used for links in hover state, when the mouse is within the bounds (rolling over) a link.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Defines the formatting attributes used for links in hover state, when the mouse is within the bounds (rolling over) a link. This value will cascade down the hierarchy and apply to any links that are descendants.
		 Accepts <codeph>inherit</codeph>, an <codeph>ITextLayoutFormat</codeph> or converts an array of objects with key and value as members to a TextLayoutFormat.
		 <p>Legal values include FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of null.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:linkNormalFormat:get"><apiName>linkNormalFormat</apiName><shortdesc>
		 TextLayoutFormat:
		 Defines the formatting attributes used for links in normal state.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Defines the formatting attributes used for links in normal state. This value will cascade down the hierarchy and apply to any links that are descendants.
		 Accepts <codeph>inherit</codeph>, an <codeph>ITextLayoutFormat</codeph> or converts an array of objects with key and value as members to a TextLayoutFormat.
		 <p>Legal values include FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of null.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:listAutoPadding:get"><apiName>listAutoPadding</apiName><shortdesc>
		 TextLayoutFormat:
		 This specifies an auto indent for the start edge of lists when the padding value of the list on that side is auto.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 This specifies an auto indent for the start edge of lists when the padding value of the list on that side is <codeph>auto</codeph>.
		 <p>Legal values are numbers from -1000 to 1000 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 40.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:listMarkerFormat:get"><apiName>listMarkerFormat</apiName><shortdesc>
		 TextLayoutFormat:
		 Defines the formatting attributes list markers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Defines the formatting attributes list markers. This value will cascade down the hierarchy and apply to any links that are descendants.
		 Accepts <codeph>inherit</codeph>, an <codeph>IListMarkerFormat</codeph> or converts an array of objects with key and value as members to a ListMarkerFormat.
		 <p>Legal values include FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of null.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:listStylePosition:get"><apiName>listStylePosition</apiName><shortdesc>
		 TextLayoutFormat:
		 Legal values are ListStylePosition.INSIDE, ListStylePosition.OUTSIDE, FormatValue.INHERIT.
		 Default value is undefined indicating not set.
		 If undefined during the cascade this property will inherit its value from an ancestor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 <p>Legal values are ListStylePosition.INSIDE, ListStylePosition.OUTSIDE, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of ListStylePosition.OUTSIDE.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#ListStylePosition"><linktext>flashx.textLayout.formats.ListStylePosition</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:listStyleType:get"><apiName>listStyleType</apiName><shortdesc>
		 TextLayoutFormat:
		 Legal values are ListStyleType.UPPER_ALPHA, ListStyleType.LOWER_ALPHA, ListStyleType.UPPER_ROMAN, ListStyleType.LOWER_ROMAN, ListStyleType.NONE, ListStyleType.DISC, ListStyleType.CIRCLE, ListStyleType.SQUARE, ListStyleType.BOX, ListStyleType.CHECK, ListStyleType.DIAMOND, ListStyleType.HYPHEN, ListStyleType.ARABIC_INDIC, ListStyleType.BENGALI, ListStyleType.DECIMAL, ListStyleType.DECIMAL_LEADING_ZERO, ListStyleType.DEVANAGARI, ListStyleType.GUJARATI, ListStyleType.GURMUKHI, ListStyleType.KANNADA, ListStyleType.PERSIAN, ListStyleType.THAI, ListStyleType.URDU, ListStyleType.CJK_EARTHLY_BRANCH, ListStyleType.CJK_HEAVENLY_STEM, ListStyleType.HANGUL, ListStyleType.HANGUL_CONSTANT, ListStyleType.HIRAGANA, ListStyleType.HIRAGANA_IROHA, ListStyleType.KATAKANA, ListStyleType.KATAKANA_IROHA, ListStyleType.LOWER_ALPHA, ListStyleType.LOWER_GREEK, ListStyleType.LOWER_LATIN, ListStyleType.UPPER_ALPHA, ListStyleType.UPPER_GREEK, ListStyleType.UPPER_LATIN, FormatValue.INHERIT.
		 Default value is undefined indicating not set.
		 If undefined during the cascade this property will inherit its value from an ancestor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 <p>Legal values are ListStyleType.UPPER_ALPHA, ListStyleType.LOWER_ALPHA, ListStyleType.UPPER_ROMAN, ListStyleType.LOWER_ROMAN, ListStyleType.NONE, ListStyleType.DISC, ListStyleType.CIRCLE, ListStyleType.SQUARE, ListStyleType.BOX, ListStyleType.CHECK, ListStyleType.DIAMOND, ListStyleType.HYPHEN, ListStyleType.ARABIC_INDIC, ListStyleType.BENGALI, ListStyleType.DECIMAL, ListStyleType.DECIMAL_LEADING_ZERO, ListStyleType.DEVANAGARI, ListStyleType.GUJARATI, ListStyleType.GURMUKHI, ListStyleType.KANNADA, ListStyleType.PERSIAN, ListStyleType.THAI, ListStyleType.URDU, ListStyleType.CJK_EARTHLY_BRANCH, ListStyleType.CJK_HEAVENLY_STEM, ListStyleType.HANGUL, ListStyleType.HANGUL_CONSTANT, ListStyleType.HIRAGANA, ListStyleType.HIRAGANA_IROHA, ListStyleType.KATAKANA, ListStyleType.KATAKANA_IROHA, ListStyleType.LOWER_ALPHA, ListStyleType.LOWER_GREEK, ListStyleType.LOWER_LATIN, ListStyleType.UPPER_ALPHA, ListStyleType.UPPER_GREEK, ListStyleType.UPPER_LATIN, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of ListStyleType.DISC.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#ListStyleType"><linktext>flashx.textLayout.formats.ListStyleType</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:locale:get"><apiName>locale</apiName><shortdesc>
		 TextLayoutFormat:
		 The locale of the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 The locale of the text. Controls case transformations and shaping. Standard locale identifiers as described in Unicode Technical Standard #35 are used. For example en, en_US and en-US are all English, ja is Japanese. 
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of en.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:tlf_internal:oldInteractiveObjects:get"><apiName>oldInteractiveObjects</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="tlf_internal"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:paddingBottom:get"><apiName>paddingBottom</apiName><shortdesc>
		 TextLayoutFormat:
		 Bottom inset in pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Bottom inset in pixels.  Default of auto is zero except in lists which get a start side padding of 45.  (adopts default value if undefined during cascade).
		 Space between the bottom edge of the container and the text.  Value is a Number  or auto. <p> With horizontal text, in scrollable containers with multiple columns, the first and following columns will show the padding as blank space at the bottom of the container, but for the last column, if the text doesn't all fit, you may have to scroll in order to see the padding.</p>
		 <p>Legal values as a string are FormatValue.AUTO, FormatValue.INHERIT and numbers from -8000 to 8000.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of FormatValue.AUTO.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#Configuration/autoListElementStartPadding"><linktext>flashx.textLayout.elements.Configuration.autoListElementStartPadding</linktext></link><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:paddingLeft:get"><apiName>paddingLeft</apiName><shortdesc>
		 TextLayoutFormat:
		 Left inset in pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Left inset in pixels.  Default of auto is zero except in lists which get a start side padding of 45. (adopts default value if undefined during cascade).
		 Space between the left edge of the container and the text.  Value is a Number or auto.<p> With vertical text, in scrollable containers with multiple columns, the first and following columns will show the padding as blank space at the end of the container, but for the last column, if the text doesn't all fit, you may have to scroll in order to see the padding.</p>
		 <p>Legal values as a string are FormatValue.AUTO, FormatValue.INHERIT and numbers from -8000 to 8000.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of FormatValue.AUTO.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#Configuration/autoListElementStartPadding"><linktext>flashx.textLayout.elements.Configuration.autoListElementStartPadding</linktext></link><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:paddingRight:get"><apiName>paddingRight</apiName><shortdesc>
		 TextLayoutFormat:
		 Right inset in pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Right inset in pixels.  Default of auto is zero except in lists which get a start side padding of 45. (adopts default value if undefined during cascade).
		 Space between the right edge of the container and the text.  Value is a Number or auto. 
		 <p>Legal values as a string are FormatValue.AUTO, FormatValue.INHERIT and numbers from -8000 to 8000.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of FormatValue.AUTO.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#Configuration/autoListElementStartPadding"><linktext>flashx.textLayout.elements.Configuration.autoListElementStartPadding</linktext></link><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:paddingTop:get"><apiName>paddingTop</apiName><shortdesc>
		 TextLayoutFormat:
		 Top inset in pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Top inset in pixels.  Default of auto is zero except in lists which get a start side padding of 45. (adopts default value if undefined during cascade).
		 Space between the top edge of the container and the text.  Value is a Number or auto.
		 <p>Legal values as a string are FormatValue.AUTO, FormatValue.INHERIT and numbers from -8000 to 8000.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of FormatValue.AUTO.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#Configuration/autoListElementStartPadding"><linktext>flashx.textLayout.elements.Configuration.autoListElementStartPadding</linktext></link><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:paragraphEndIndent:get"><apiName>paragraphEndIndent</apiName><shortdesc>
		 TextLayoutFormat:
		 A Number that specifies, in pixels, the amount to indent the paragraph's end edge.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 A Number that specifies, in pixels, the amount to indent the paragraph's end edge. Refers to the right edge in left-to-right text and the left edge in right-to-left text. 
		 <p>Legal values are numbers from 0 to 8000 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:paragraphSpaceAfter:get"><apiName>paragraphSpaceAfter</apiName><shortdesc>
		 TextLayoutFormat:
		 A Number that specifies the amount of space, in pixels, to leave after the paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 A Number that specifies the amount of space, in pixels, to leave after the paragraph.
		 Collapses in tandem with  <codeph>paragraphSpaceBefore</codeph>.
		 <p>Legal values are numbers from 0 to 8000 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:paragraphSpaceBefore:get"><apiName>paragraphSpaceBefore</apiName><shortdesc>
		 TextLayoutFormat:
		 A Number that specifies the amount of space, in pixels, to leave before the paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 A Number that specifies the amount of space, in pixels, to leave before the paragraph. 
		 Collapses in tandem with <codeph>paragraphSpaceAfter</codeph>.
		 <p>Legal values are numbers from 0 to 8000 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:paragraphStartIndent:get"><apiName>paragraphStartIndent</apiName><shortdesc>
		 TextLayoutFormat:
		 A Number that specifies, in pixels, the amount to indent the paragraph's start edge.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 A Number that specifies, in pixels, the amount to indent the paragraph's start edge. Refers to the left edge in left-to-right text and the right edge in right-to-left text. 
		 <p>Legal values are numbers from 0 to 8000 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:renderingMode:get"><apiName>renderingMode</apiName><shortdesc>
		 TextLayoutFormat:
		 The rendering mode used for this text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 The rendering mode used for this text.  Applies only to embedded fonts (<codeph>fontLookup</codeph> property is set to <codeph>FontLookup.EMBEDDED_CFF</codeph>).
		 <p>Legal values are RenderingMode.NORMAL, RenderingMode.CFF, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of RenderingMode.CFF.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.RenderingMode.xml"><linktext>flash.text.engine.RenderingMode</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:rootElement:get"><apiName>rootElement</apiName><shortdesc> 
		 Returns the root element that appears in the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:ContainerFormattedElement</apiValueClassifier></apiValueDef><apiDesc> 
		 Returns the root element that appears in the container. The root element could be a DivElement or TextFlow
		 instance, for example.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#ContainerFormattedElement"><linktext>flashx.textLayout.elements.ContainerFormattedElement</linktext></link><link href="flashx.textLayout.elements.xml#DivElement"><linktext>flashx.textLayout.elements.DivElement</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>flashx.textLayout.elements.TextFlow</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:styleName:get"><apiName>styleName</apiName><shortdesc>
		 TextLayoutFormat:
		 Assigns an identifying class to the element, making it possible to set a style for the element by referencing the styleName.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Assigns an identifying class to the element, making it possible to set a style for the element by referencing the <codeph>styleName</codeph>.
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of null.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:styles:get"><apiName>styles</apiName><shortdesc> Returns the styles on this ContainerController.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc> Returns the styles on this ContainerController.  Note that the getter makes a copy of the  
		 styles dictionary. The returned object includes all styles set in the format property including core and user styles. The
		 returned object consists of an array of <i>stylename-value</i> pairs.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat"><linktext>flashx.textLayout.formats.TextLayoutFormat</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:tabStops:get"><apiName>tabStops</apiName><shortdesc>
		 TextLayoutFormat:
		 Specifies the tab stops associated with the paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Specifies the tab stops associated with the paragraph.
		 Setters can take an array of TabStopFormat, a condensed string representation, undefined, or <codeph>FormatValue.INHERIT</codeph>. The condensed string representation is always converted into an array of TabStopFormat. <p>The string-based format is a list of tab stops, where each tab stop is delimited by one or more spaces.</p><p>A tab stop takes the following form: &lt;alignment type&gt;&lt;alignment position&gt;|&lt;alignment token&gt;.</p><p>The alignment type is a single character, and can be S, E, C, or D (or lower-case equivalents). S or s for start, E or e for end, C or c for center, D or d for decimal. The alignment type is optional, and if its not specified will default to S.</p><p>The alignment position is a Number, and is specified according to FXG spec for Numbers (decimal or scientific notation). The alignment position is required.</p><p>The vertical bar is used to separate the alignment position from the alignment token, and should only be present if the alignment token is present.</p><p> The alignment token is optional if the alignment type is D, and should not be present if the alignment type is anything other than D. The alignment token may be any sequence of characters terminated by the space that ends the tab stop (for the last tab stop, the terminating space is optional; end of alignment token is implied). A space may be part of the alignment token if it is escaped with a backslash (\ ). A backslash may be part of the alignment token if it is escaped with another backslash (\\). If the alignment type is D, and the alignment token is not specified, it will take on the default value of null.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of null.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TabStopFormat"><linktext>flashx.textLayout.formats.TabStopFormat</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:textAlignLast:get"><apiName>textAlignLast</apiName><shortdesc>
		 TextLayoutFormat:
		 Alignment of the last (or only) line in the paragraph relative to the container in justified text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Alignment of the last (or only) line in the paragraph relative to the container in justified text.
		 If <codeph>textAlign</codeph> is set to <codeph>TextAlign.JUSTIFY</codeph>, <codeph>textAlignLast</codeph> specifies how the last line (or only line, if this is a one line block) is aligned. Values are similar to <codeph>textAlign</codeph>.
		 <p>Legal values are TextAlign.LEFT, TextAlign.RIGHT, TextAlign.CENTER, TextAlign.JUSTIFY, TextAlign.START, TextAlign.END, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of TextAlign.START.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextAlign"><linktext>flashx.textLayout.formats.TextAlign</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:textAlign:get"><apiName>textAlign</apiName><shortdesc>
		 TextLayoutFormat:
		 Alignment of lines in the paragraph relative to the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Alignment of lines in the paragraph relative to the container.
		 <codeph>TextAlign.LEFT</codeph> aligns lines along the left edge of the container. <codeph>TextAlign.RIGHT</codeph> aligns on the right edge. <codeph>TextAlign.CENTER</codeph> positions the line equidistant from the left and right edges. <codeph>TextAlign.JUSTIFY</codeph> spreads the lines out so they fill the space. <codeph>TextAlign.START</codeph> is equivalent to setting left in left-to-right text, or right in right-to-left text. <codeph>TextAlign.END</codeph> is equivalent to setting right in left-to-right text, or left in right-to-left text.
		 <p>Legal values are TextAlign.LEFT, TextAlign.RIGHT, TextAlign.CENTER, TextAlign.JUSTIFY, TextAlign.START, TextAlign.END, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of TextAlign.START.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextAlign"><linktext>flashx.textLayout.formats.TextAlign</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:textAlpha:get"><apiName>textAlpha</apiName><shortdesc>
		 TextLayoutFormat:
		 Alpha (transparency) value for the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Alpha (transparency) value for the text. A value of 0 is fully transparent, and a value of 1 is fully opaque. Display objects with <codeph>textAlpha</codeph> set to 0 are active, even though they are invisible.
		 <p>Legal values are numbers from 0 to 1 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 1.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:textDecoration:get"><apiName>textDecoration</apiName><shortdesc>
		 TextLayoutFormat:
		 Decoration on text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Decoration on text. Use to apply underlining; default is none.
		 <p>Legal values are TextDecoration.NONE, TextDecoration.UNDERLINE, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of TextDecoration.NONE.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextDecoration"><linktext>flashx.textLayout.formats.TextDecoration</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:textFlow:get"><apiName>textFlow</apiName><shortdesc> 
		 Returns the TextFlow object whose content appears in the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:TextFlow</apiValueClassifier></apiValueDef><apiDesc> 
		 Returns the TextFlow object whose content appears in the container. Either the <codeph>textFlow</codeph> and  
		 <codeph>rootElement</codeph> values are the same, or this is the root element's TextFlow object. For example,
		 if the container's root element is a DivElement, the value would be the TextFlow object to which the
		 DivElement belongs.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:textIndent:get"><apiName>textIndent</apiName><shortdesc>
		 TextLayoutFormat:
		 A Number that specifies, in pixels, the amount to indent the first line of the paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 A Number that specifies, in pixels, the amount to indent the first line of the paragraph.
		 A negative indent will push the line into the margin, and possibly out of the container.
		 <p>Legal values are numbers from -8000 to 8000 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:textJustify:get"><apiName>textJustify</apiName><shortdesc>
		 TextLayoutFormat:
		 Specifies options for justifying text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Specifies options for justifying text.
		 Default value is <codeph>TextJustify.INTER_WORD</codeph>, meaning that extra space is added to the space characters. <codeph>TextJustify.DISTRIBUTE</codeph> adds extra space to space characters and between individual letters. Used only in conjunction with a <codeph>justificationRule</codeph> value of <codeph>JustificationRule.SPACE</codeph>.
		 <p>Legal values are TextJustify.INTER_WORD, TextJustify.DISTRIBUTE, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of TextJustify.INTER_WORD.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextJustify"><linktext>flashx.textLayout.formats.TextJustify</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:textLength:get"><apiName>textLength</apiName><shortdesc> Returns the total number of characters in the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> Returns the total number of characters in the container. This can include text that is not currently in view,
		 if the container is scrollable. This value is updated when the text is composed (when the IFlowComposer's <codeph>compose()</codeph> 
		 or <codeph>updateAllControllers()</codeph> methods are called).
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#IFlowComposer"><linktext>flashx.textLayout.compose.IFlowComposer</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:textRotation:get"><apiName>textRotation</apiName><shortdesc>
		 TextLayoutFormat:
		 Determines the number of degrees to rotate this text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Determines the number of degrees to rotate this text.
		 <p>Legal values are TextRotation.ROTATE_0, TextRotation.ROTATE_180, TextRotation.ROTATE_270, TextRotation.ROTATE_90, TextRotation.AUTO, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of TextRotation.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextRotation.xml"><linktext>flash.text.engine.TextRotation</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:trackingLeft:get"><apiName>trackingLeft</apiName><shortdesc>
		 TextLayoutFormat:
		 Number in pixels (or percent of fontSize, like 120%) indicating the amount of tracking (manual kerning) to be applied to the left of each character.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Number in pixels (or percent of <codeph>fontSize</codeph>, like 120%) indicating the amount of tracking (manual kerning) to be applied to the left of each character. If kerning is enabled, the <codeph>trackingLeft</codeph> value is added to the values in the kerning table for the font. If kerning is disabled, the <codeph>trackingLeft</codeph> value is used as a manual kerning value. Supports both positive and negative values. 
		 <p>Legal values as a number are from -1000 to 1000.</p>
		 <p>Legal values as a percent are numbers from -1000% to 1000%.</p>
		 <p>Legal values include FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:trackingRight:get"><apiName>trackingRight</apiName><shortdesc>
		 TextLayoutFormat:
		 Number in pixels (or percent of fontSize, like 120%) indicating the amount of tracking (manual kerning) to be applied to the right of each character.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Number in pixels (or percent of <codeph>fontSize</codeph>, like 120%) indicating the amount of tracking (manual kerning) to be applied to the right of each character.  If kerning is enabled, the <codeph>trackingRight</codeph> value is added to the values in the kerning table for the font. If kerning is disabled, the <codeph>trackingRight</codeph> value is used as a manual kerning value. Supports both positive and negative values. 
		 <p>Legal values as a number are from -1000 to 1000.</p>
		 <p>Legal values as a percent are numbers from -1000% to 1000%.</p>
		 <p>Legal values include FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:typographicCase:get"><apiName>typographicCase</apiName><shortdesc>
		 TextLayoutFormat:
		 The type of typographic case used for this text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 The type of typographic case used for this text. Here are some examples:<p><adobeimage alt="typographicCase" href="../../../images/textLayout_typographiccase.png"/></p>
		 <p>Legal values are TLFTypographicCase.DEFAULT, TLFTypographicCase.CAPS_TO_SMALL_CAPS, TLFTypographicCase.UPPERCASE, TLFTypographicCase.LOWERCASE, TLFTypographicCase.LOWERCASE_TO_SMALL_CAPS, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of TLFTypographicCase.DEFAULT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TLFTypographicCase"><linktext>flashx.textLayout.formats.TLFTypographicCase</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:userStyles:get"><apiName>userStyles</apiName><shortdesc> Allows you to read and write user styles on a ContainerController object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc> Allows you to read and write user styles on a ContainerController object.  Note that reading this property
		 makes a copy of the userStyles set in the format of this element. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:verticalAlign:get"><apiName>verticalAlign</apiName><shortdesc>
		 TextLayoutFormat:
		 Vertical alignment or justification (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Vertical alignment or justification (adopts default value if undefined during cascade).
		 Determines how TextFlow elements align within the container.
		 <p>Legal values are VerticalAlign.TOP, VerticalAlign.MIDDLE, VerticalAlign.BOTTOM, VerticalAlign.JUSTIFY, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of VerticalAlign.TOP.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#VerticalAlign"><linktext>flashx.textLayout.formats.VerticalAlign</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:verticalScrollPolicy:get"><apiName>verticalScrollPolicy</apiName><shortdesc> Specifies the vertical scrolling policy, which you can set by assigning one of the constants of the ScrollPolicy
		 class: ON, OFF, or, AUTO.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc> Specifies the vertical scrolling policy, which you can set by assigning one of the constants of the ScrollPolicy
		 class: ON, OFF, or, AUTO.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.container.xml#ScrollPolicy"><linktext>ScrollPolicy</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:verticalScrollPosition:get"><apiName>verticalScrollPosition</apiName><shortdesc> Specifies the current vertical scroll location on the stage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc> Specifies the current vertical scroll location on the stage. The value specifies the number of 
		 pixels from the top.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:whiteSpaceCollapse:get"><apiName>whiteSpaceCollapse</apiName><shortdesc>
		 TextLayoutFormat:
		 Collapses or preserves whitespace when importing text into a TextFlow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Collapses or preserves whitespace when importing text into a TextFlow. <codeph>WhiteSpaceCollapse.PRESERVE</codeph> retains all whitespace characters. <codeph>WhiteSpaceCollapse.COLLAPSE</codeph> removes newlines, tabs, and leading or trailing spaces within a block of imported text. Line break tags () and Unicode line separator characters are retained.
		 <p>Legal values are WhiteSpaceCollapse.PRESERVE, WhiteSpaceCollapse.COLLAPSE, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of WhiteSpaceCollapse.COLLAPSE.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#WhiteSpaceCollapse"><linktext>flashx.textLayout.formats.WhiteSpaceCollapse</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:wordSpacing:get"><apiName>wordSpacing</apiName><shortdesc>
		 TextLayoutFormat:
		 Specifies the optimum, minimum, and maximum spacing (as a multiplier of the width of a normal space) between words to use during justification.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Specifies the optimum, minimum, and maximum spacing (as a multiplier of the width of a normal space) between words to use during justification.
		 The optimum space is used to indicate the desired size of a space, as a fraction of the value defined in the font. The minimum and maximum values are the used when textJustify is distribute to determine how wide or narrow the spaces between the words may grow before letter spacing is used to justify the line.
		 <p>Legal values as a percent are numbers from -1000% to 1000%.</p>
		 <p>Legal values include FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 100%, 50%, 150%.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:containerControllerInitialFormat:set"><apiName>containerControllerInitialFormat</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.container:TextContainerManager"><apiName>TextContainerManager</apiName><shortdesc> Manages text in a container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><Exclude kind="method" name="callInContext"/><Exclude kind="method" name="getBaseSWFContext"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.compose:ISWFContext</apiBaseInterface><apiBaseInterface>flashx.textLayout.edit:IInteractionEventHandler</apiBaseInterface><apiBaseInterface>flashx.textLayout.container:ISandboxSupport</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc> Manages text in a container. Assumes that it manages all children of the container. 
	 Consider using TextContainerManager for better performance in cases where there is a 
	 one container per TextFlow, and the TextFlow is not the main focus, is static text, or
	 is infrequently selected. Good for text in form fields, for example.
	 
	 </apiDesc><example/></apiClassifierDetail><apiValue id="flashx.textLayout.container:TextContainerManager:compositionHeight:get"><apiName>compositionHeight</apiName><shortdesc> Returns the vertical extent allowed for text inside the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc> Returns the vertical extent allowed for text inside the container. The value is specified in pixels. 
		 <p>After setting this property, the text in the container is damaged and requires composing.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:compositionWidth:get"><apiName>compositionWidth</apiName><shortdesc> Returns the horizontal extent allowed for text inside the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc> Returns the horizontal extent allowed for text inside the container. The value is specified in pixels.
		 
		 <p>After setting this property, the text in the container is damaged and requires composing.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:configuration:get"><apiName>configuration</apiName><shortdesc> The Configuration object for this TextContainerManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:IConfiguration</apiValueClassifier></apiValueDef><apiDesc> The Configuration object for this TextContainerManager. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flashx.textLayout.IConfiguration.xml"><linktext>IConfiguration</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:container:get"><apiName>container</apiName><shortdesc> Returns the container (DisplayObjectContainer) that holds the text that this TextContainerManager manages.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:Sprite"/></apiValueDef><apiDesc> Returns the container (DisplayObjectContainer) that holds the text that this TextContainerManager manages.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.container.xml#ContainerController/container"><linktext>ContainerController.container</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:defaultConfiguration:get"><apiName>defaultConfiguration</apiName><shortdesc> The default configuration for this TextContainerManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:IConfiguration</apiValueClassifier></apiValueDef><apiDesc> The default configuration for this TextContainerManager. Column and padding attributes
		 are set to <codeph>FormatValue.INHERIT</codeph>.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#IConfiguration"><linktext>IConfiguration</linktext></link><link href="flashx.textLayout.formats.xml#FormatValue/INHERIT"><linktext>FormatValue.INHERIT</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:editingMode:get"><apiName>editingMode</apiName><shortdesc> Editing mode of this TextContainerManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc> Editing mode of this TextContainerManager. Modes are reading only, reading and selection permitted, 
		 and editing (reading, selection, and writing)  permitted. Use the constant values of the EditingMode
		 class to set this property. 
		 <p>Default value is READ_WRITE.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.edit.xml#EditingMode"><linktext>EditingMode</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:horizontalScrollPolicy:get"><apiName>horizontalScrollPolicy</apiName><shortdesc> 
		 Controls whether the factory generates all text lines or stops when the container bounds are filled. 
		 Specifies the horizontal scrolling policy, which you can set by assigning one of the constants of
		 the ScrollPolicy class: ON, OFF, or AUTO.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc><p class="- topic/p "> 
		 Controls whether the factory generates all text lines or stops when the container bounds are filled.
		 
		 </p> 
		 Specifies the horizontal scrolling policy, which you can set by assigning one of the constants of
		 the ScrollPolicy class: ON, OFF, or AUTO.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:horizontalScrollPosition:get"><apiName>horizontalScrollPosition</apiName><shortdesc> Specifies the current horizontal scroll location on the stage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc> Specifies the current horizontal scroll location on the stage. The value specifies the number of
		 pixels from the left.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:hostFormat:get"><apiName>hostFormat</apiName><shortdesc> Sets the format when display just a string.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> Sets the format when display just a string.  If displaying a TextFlow this has no immediate effect.  The supplied ITextLayoutFormat is not copied.  Modifying it without calling this setter has indeterminate effects. </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:numLines:get"><apiName>numLines</apiName><shortdesc> 
		 The total number of lines composed in the flow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 
		 The total number of lines composed in the flow.  By default TLF does not compose the entire flow and this value may be innacruate.
		 Use composeToPosition to get all lines composed.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:preserveSelectionOnSetText:get"><apiName>preserveSelectionOnSetText</apiName><shortdesc> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata><asCustoms><public>
		 It's <code>_preserveSelectionOnSetText</code> to decide whether or not TLF preserve selection state during setText().
		 
		 The default value is false, which means <code>setText()</code> does not preserve original selection state, 
		 <code>setText()</code> acts as what it was. If <code>_preserveSelectionOnSetText</code> is true, 
		 the original selection state is preserved during <code>setText()</code>.  
		 
		 </public></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc> </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:swfContext:get"><apiName>swfContext</apiName><shortdesc> 
		Optional ISWFContext instance used to make FTE calls as needed in the proper swf context.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.compose:ISWFContext</apiValueClassifier></apiValueDef><apiDesc> 
		Optional ISWFContext instance used to make FTE calls as needed in the proper swf context. 
		
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#ISWFContext"><linktext>flashx.textLayout.compose.ISWFContext</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:verticalScrollPolicy:get"><apiName>verticalScrollPolicy</apiName><shortdesc> 
		 Controls whether the factory generates all text lines or stops when the container bounds are filled. Specifies the vertical scrolling policy, which you can set by assigning one of the constants of the ScrollPolicy
		 class: ON, OFF, or, AUTO.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc><p class="- topic/p "> 
		 Controls whether the factory generates all text lines or stops when the container bounds are filled.
		 
		 </p> Specifies the vertical scrolling policy, which you can set by assigning one of the constants of the ScrollPolicy
		 class: ON, OFF, or, AUTO.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:verticalScrollPosition:get"><apiName>verticalScrollPosition</apiName><shortdesc> Specifies the current vertical scroll location on the stage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc> Specifies the current vertical scroll location on the stage. The value specifies the number of 
		 pixels from the top.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.container:ISandboxSupport"><apiName>ISandboxSupport</apiName><shortdesc> Interface to support TLF content in a sub-application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc> Interface to support TLF content in a sub-application. When an application is loaded in an untrusted context,
	 mouse events that occur outside of the untrusted application's bounds are not delivered. Clients can handle this
	 by implementing ISandboxSupport. 
	 
	 </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="flashx.textLayout.container:ScrollPolicy"><apiName>ScrollPolicy</apiName><shortdesc>
	  The ScrollPolicy class is an enumeration class that defines values for setting the horizontalScrollPolicy and 
	  verticalScrollPolicy properties of the ContainerController class, which defines a text flow 
	  container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  The ScrollPolicy class is an enumeration class that defines values for setting the <codeph>horizontalScrollPolicy</codeph> and 
	  <codeph>verticalScrollPolicy</codeph> properties of the ContainerController class, which defines a text flow 
	  container. 
	 
	  </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.container:ScrollPolicy:AUTO"><apiName>AUTO</apiName><shortdesc> 
		 Specifies that scrolling is to occur if the content exceeds the container's dimension.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>auto</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		 Specifies that scrolling is to occur if the content exceeds the container's dimension. The runtime calculates 
		 the number of lines that overflow the container and the user can navigate to them with cursor keys, by drag selecting,
		 or by rotating the mouse wheel. You can also cause scrolling to occur by setting the corresponding position value, 
		 either <codeph>ContainerController.horizontalScrollPosition</codeph> or <codeph>ContainerController.verticalScrollPosition</codeph>. Also, the runtime can automatically 
		 scroll the contents of the container during editing.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ScrollPolicy:OFF"><apiName>OFF</apiName><shortdesc> 
		 Causes the runtime to not display overflow lines, which means that the user cannot navigate to them.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>off</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		 Causes the runtime to not display overflow lines, which means that the user cannot navigate to them. 
		 In this case, setting the corresponding <codeph>ContainerController.horizontalScrollPosition</codeph> and 
		 <codeph>ContainerController.verticalScrollPosition</codeph> properties have no effect. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ScrollPolicy:ON"><apiName>ON</apiName><shortdesc> 
		 Specifies that scrolling is available to access content that exceeds the container's dimension.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>on</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		 Specifies that scrolling is available to access content that exceeds the container's dimension. The runtime calculates the 
		 number of lines that overflow the container and allows the user to scroll them into view with the cursor keys, by drag selecting, 
		 or by rotating the mouse wheel. You can also scroll by setting the corresponding position value, either 
		 <codeph>ContainerController.horizontalScrollPosition</codeph> or <codeph>ContainerController.verticalScrollPosition</codeph>. Also, the runtime can automatically scroll the contents 
		 of the container during editing.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage><apiPackage id="flashx.textLayout.conversion"><apiName>flashx.textLayout.conversion</apiName><apiClassifier id="flashx.textLayout.conversion:IPlainTextExporter"><apiName>IPlainTextExporter</apiName><shortdesc> This interface should be implemented by converters that export plain text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.0"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.conversion:ITextExporter</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc> This interface should be implemented by converters that export plain text. Clients that have explicitly
	 created an exporter using TextConverter.getExporter may control the export process by calling into these methods on the 
	 exporter.
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.conversion:IPlainTextExporter:flashx.textLayout.conversion:IPlainTextExporter:paragraphSeparator:get"><apiName>paragraphSeparator</apiName><shortdesc> Specifies the character sequence used (in a text flow's plain-text equivalent) to separate paragraphs.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc> Specifies the character sequence used (in a text flow's plain-text equivalent) to separate paragraphs.
		 The paragraph separator is not added after the last paragraph. 
		 
		 <p>This property applies to the <codeph>PLAIN_TEXT_FORMAT</codeph> exporter.</p>
		 
		 <p>The default value is "\n".</p> 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.conversion:IPlainTextExporter:flashx.textLayout.conversion:IPlainTextExporter:stripDiscretionaryHyphens:get"><apiName>stripDiscretionaryHyphens</apiName><shortdesc> This property indicates whether discretionary hyphens in the text should be stripped during the export process.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc> This property indicates whether discretionary hyphens in the text should be stripped during the export process.
		 Discretionary hyphens, also known as "soft hyphens", indicate where to break a word in case the word must be
		 split between two lines. The Unicode character for discretionary hyphens is <codeph>\u00AD</codeph>.
		 <p>If this property is set to <codeph>true</codeph>, discretionary hyphens that are in the original text will not be in the exported text, 
		 even if they are part of the original text. If <codeph>false</codeph>, discretionary hyphens will be in the exported text.</p>
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.conversion:TextConverter"><apiName>TextConverter</apiName><shortdesc> 
	 This is the gateway class for handling import and export.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 This is the gateway class for handling import and export. It serves as a unified access point to the 
	 conversion functionality in the Text Layout Framework. It contains a registry for predefined as well
	 as user defined input and/or output converters, plus a set of conversion methods.
	 <p>
	 The format of the converted data is not predefined; user written converters are free to accept and return
	 any format of their choice. Common formats are strings, XML, and ByteArray instances. Converter authors 
	 should document which formats are supported.
	 </p>
	 </apiDesc><example/></apiClassifierDetail><apiValue id="flashx.textLayout.conversion:TextConverter:PLAIN_TEXT_FORMAT"><apiName>PLAIN_TEXT_FORMAT</apiName><shortdesc> 
		 Plain text format.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>plainTextFormat</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		 Plain text format.
		 Use this for creating a TextFlow from a simple, unformatted String, 
		 or for creating a simple, unformatted String from a TextFlow.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.conversion:TextConverter:TEXT_FIELD_HTML_FORMAT"><apiName>TEXT_FIELD_HTML_FORMAT</apiName><shortdesc> 
		 HTML format.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>textFieldHTMLFormat</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		 HTML format.
		 Use this for importing from, or exporting to, a TextFlow using the HTML fomat.
		 The Text Layout Framework HTML supports a subset of the tags and attributes supported by
		 the TextField class in the <codeph>flash.text</codeph> package.
		 <p>The following table lists the HTML tags and attributes supported for the import
		 and export process (tags and attributes supported by TextField, but not supported by 
		 the Text Layout Framework are specifically described as not supported):</p>
		 
		 
		 <adobetable class="innertable">
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 <tgroup cols="2"><thead><row><entry>
		 Tag
		 </entry><entry>
		 Description
		 </entry></row></thead><tbody><row>
		 
		 <entry>
		 Anchor tag
		 </entry>
		 
		 <entry>
		 The <codeph>&lt;a&gt;</codeph> tag creates a hypertext link and supports the following attributes:
		 <ul>
		 
		 <li>
		 <codeph>target</codeph>: Specifies the name of the target window where you load the page. 
		 Options include <codeph>_self</codeph>, <codeph>_blank</codeph>, <codeph>_parent</codeph>, and 
		 <codeph>_top</codeph>. The <codeph>_self</codeph> option specifies the current frame in the current window, 
		 <codeph>_blank</codeph> specifies a new window, <codeph>_parent</codeph> specifies the parent of the 
		 current frame, and <codeph>_top</codeph> specifies the top-level frame in the current window. 
		 </li>
		 
		 <li>
		 <codeph>href</codeph>: Specifies a URL. The URL can 
		 be either absolute or relative to the location of the SWF file that 
		 is loading the page. An example of an absolute reference to a URL is 
		 <codeph>http://www.adobe.com</codeph>; an example of a relative reference is 
		 <codeph>/index.html</codeph>. Absolute URLs must be prefixed with 
		 http://; otherwise, Flash treats them as relative URLs. 
		 <b>Note: Unlike the TextField class, </b>ActionScript <codeph>link</codeph> events 
		 are not supported. Neither are
		 <codeph>a:link</codeph>, <codeph>a:hover</codeph>, and <codeph>a:active</codeph> styles.
		 </li>
		 
		 </ul>
		 
		 </entry>
		 </row><row>
		 
		 <entry>
		 Bold tag
		 </entry>
		 
		 <entry>
		 The <codeph>&lt;b&gt;</codeph> tag renders text as bold. A bold typeface must be available for the font used.
		 </entry>
		 </row><row>
		 
		 <entry>
		 Break tag
		 </entry>
		 <entry>
		 The <codeph>&lt;br&gt;</codeph> tag creates a line break in the text.
		 </entry>
		 </row><row>
		 
		 <entry>
		 Font tag
		 </entry>
		 
		 <entry>
		 The <codeph>&lt;font&gt;</codeph> tag specifies a font or list of fonts to display the text.The font tag 
		 supports the following attributes:
		 <ul>
		 
		 <li>
		 <codeph>color</codeph>: Only hexadecimal color (<codeph>#FFFFFF</codeph>) values are supported. 
		 </li>
		 
		 <li>
		 <codeph>face</codeph>: Specifies the name of the font to use. As shown in the following example, 
		 you can specify a list of comma-delimited font names, in which case Flash Player selects the first available 
		 font. If the specified font is not installed on the local computer system or isn't embedded in the SWF file, 
		 Flash Player selects a substitute font. 
		 </li>
		 
		 <li>
		 <codeph>size</codeph>: Specifies the size of the font. You can use absolute pixel sizes, such as 16 or 18 
		 or relative point sizes, such as +2 or -4. 
		 </li>
		 
		 <li>
		 <codeph>letterspacing</codeph>: Specifies the tracking (manual kerning) in pixels to be applied to the right of each character. 
		 </li>
		 
		 <li>
		 <codeph>kerning</codeph>: Specifies whether kerning is enabled or disabled. A non-zero value enables kerning, while zero disables it.  
		 </li>
		 
		 </ul>
		 
		 </entry>
		 </row><row>
		 
		 <entry>
		 Image tag
		 </entry>
		 
		 <entry>
		 The <codeph>&lt;img&gt;</codeph> tag lets you embed external image files (JPEG, GIF, PNG), SWF files, and 
		 movie clips inside text.  
		 
		  <p>The <codeph>&lt;img&gt;</codeph> tag supports the following attributes: </p>
		 
		 <ul>
		 
		 <li>
		 <codeph>src</codeph>: Specifies the URL to an image or SWF file, or the linkage identifier for a movie clip 
		 symbol in the library. This attribute is required; all other attributes are optional. External files (JPEG, GIF, PNG, 
		 and SWF files) do not show until they are downloaded completely. 
		 </li>
		 
		 <li>
		 <codeph>width</codeph>: The width of the image, SWF file, or movie clip being inserted, in pixels. 
		 </li>
		 
		 <li>
		 <codeph>height</codeph>: The height of the image, SWF file, or movie clip being inserted, in pixels. 
		 </li>
		 </ul>
		 <p><b>Note: </b> Unlike the TextField class, the following attributes are not supported:
		 <codeph>align</codeph>, <codeph>hspace</codeph>, <codeph>vspace</codeph>,  <codeph>id</codeph>, and <codeph>checkPolicyFile</codeph>.</p>
		 
		 </entry>
		 </row><row>
		 
		 <entry>
		 Italic tag
		 </entry>
		 
		 <entry>
		 The <codeph>&lt;i&gt;</codeph> tag displays the tagged text in italics. An italic typeface must be available 
		 for the font used.
		 </entry>
		 </row><row>
		 
		 <entry>
		 <i>List item tag</i>
		 </entry>
		 
		 <entry>
		 <b>Note: </b> Unlike the TextField class, the List item tag is not supported.
		 </entry>
		 </row><row>
		 
		 <entry>
		 Paragraph tag
		 </entry>
		 
		 <entry>
		 The <codeph>&lt;p&gt;</codeph> tag creates a new paragraph. 
		 
		 The <codeph>&lt;p&gt;</codeph> tag supports the following attributes:
		 <ul>
		 
		 <li>
		 align: Specifies alignment of text within the paragraph; valid values are <codeph>left</codeph>, <codeph>right</codeph>, <codeph>justify</codeph>, and <codeph>center</codeph>. 
		 </li>
		 
		 <li>
		 class: Specifies a class name that can be used for styling 
		 </li>
		 
		 </ul>
		 
		 </entry>
		 </row><row>
		 
		 <entry>
		 Span tag
		 </entry>
		 
		 <entry>
		 
		 The <codeph>&lt;span&gt;</codeph> tag supports the following attributes:
		 
		 <ul>
		 
		 <li>
		 class: Specifies a class name that can be used for styling. While span tags are often used to set a style defined in a style sheet,
		 TLFTextField instances do not support style sheets. The span tag is available for TLFTextField instances to refer to a class with 
		 style properties.</li>
		 <li> You can also put properties directly in the span tag: 
		 <codeph>&lt;span fontFamily="Arial"&gt;Hi there&lt;/span&gt;</codeph>. However, nested span tags are not supported.
		 </li>
		 
		 </ul>
		 
		 </entry>
		 </row><row>
		 
		 <entry>
		 Text format tag
		 </entry>
		 
		 <entry>
		  <p>The <codeph>&lt;textformat&gt;</codeph> tag lets you use a subset of paragraph formatting 
		 properties of the TextFormat class within text fields, including line leading, indentation, 
		 margins, and tab stops. You can combine <codeph>&lt;textformat&gt;</codeph> tags with the 
		 built-in HTML tags. </p>
		 
		  <p>The <codeph>&lt;textformat&gt;</codeph> tag has the following attributes: </p>
		 <ul>
		 
		 
		 <li>
		 <codeph>indent</codeph>: Specifies the indentation from the left margin to the first character 
		 in the paragraph; corresponds to <codeph>TextFormat.indent</codeph>. Both positive and negative 
		 numbers are acceptable. 
		 </li>
		 
		 <li>
		 <codeph>blockindent</codeph>: Specifies the indentation applied to all lines of the paragraph.
		 </li>
		 
		 <li>
		 <codeph>leftmargin</codeph>: Specifies the left margin of the paragraph, in points; corresponds 
		 to <codeph>TextFormat.leftMargin</codeph>. 
		 </li>
		 
		 <li>
		 <codeph>rightmargin</codeph>: Specifies the right margin of the paragraph, in points; corresponds 
		 to <codeph>TextFormat.rightMargin</codeph>. 
		 </li>
		 
		 	<li>
		 <codeph>leading</codeph>: Specifies the leading (line height) measured in pixels between a line's ascent and the previous line's descent
		 </li>
		 
		 	<li>
		 <codeph>tabstops</codeph>: Specifies a comma-separated list of tab stop positions for the paragraph. 
		 </li>
		 </ul>
		 
		 </entry>
		 </row><row>
		 
		 <entry>
		 Underline tag
		 </entry>
		 
		 <entry>
		 The <codeph>&lt;u&gt;</codeph> tag underlines the tagged text.
		 </entry>
		 </row></tbody></tgroup></adobetable>
		 
		 <p>When an unknown tag is imported the <codeph>textFieldHTMLFormat</codeph> importer will either set a single FlowElement's typeName property to that tag name
		 or create a DivElement or a SubParagraphGroupElement with its typeName property set to the tag name.</p>
		 <p>The <codeph>textFieldHTMLFormat</codeph> exporter will export <codeph>typeName</codeph> as the XML tag when it is different from the default.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/typeName"><linktext>flashx.textLayout.elements.FlowElement.typeName</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.conversion:TextConverter:TEXT_LAYOUT_FORMAT"><apiName>TEXT_LAYOUT_FORMAT</apiName><shortdesc> 
		 TextLayout Format.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>textLayoutFormat</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		 TextLayout Format.
		 Use this for importing from, or exporting to, a TextFlow using the TextLayout markup format.
		 Text Layout format will detect the following errors:
		 <ul>
		 <li>Unexpected namespace</li>
		 <li>Unknown element</li>
		 <li>Unknown attribute</li>
		 </ul>
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.conversion:TextConverter:numFormats:get"><apiName>numFormats</apiName><shortdesc> Number of formats.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> Number of formats.
		</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.conversion:ITextLayoutImporter"><apiName>ITextLayoutImporter</apiName><shortdesc> This interface should be implemented by converters that import TextLayout structured data.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.0"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.conversion:ITextImporter</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc> This interface should be implemented by converters that import TextLayout structured data. Clients that have explicitly
	 created an importer using TextConverter.getImporter may control the import process by calling into these methods on the 
	 importer.
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.conversion:ITextLayoutImporter:flashx.textLayout.conversion:ITextLayoutImporter:imageSourceResolveFunction:get"><apiName>imageSourceResolveFunction</apiName><shortdesc> This property allows specification of a function to modify the source property supplied to an &amp;lt;img&amp;gt; element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.0"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc> This property allows specification of a function to modify the source property supplied to an <codeph>&lt;img&gt;</codeph> element. 
		 Sample use would be to modify relative paths to some caller specified root path.  The function takes the string set in the markup and returns the actual string
		 to be used.  
		 
		 <p>Note that by default relative paths are relative to the loaded SWF.  One use of this function is to make relative paths relative to some other location.</p>
		 
		 <p>The resolver function should look like this:</p>
		 <codeph>function resolver(src:String):String</codeph>
		 <p>It takes as an input parameter the value of src on the incoming img element, and returns the adjusted value.</p>
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.conversion:ITextImporter"><apiName>ITextImporter</apiName><shortdesc> 
     Interface for importing text content into a TextFlow from an external source.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc> 
     Interface for importing text content into a TextFlow from an external source. 
     The TextConverter class creates importers with no constructor arguments.
     
     </apiDesc><example/></apiClassifierDetail><apiValue id="flashx.textLayout.conversion:ITextImporter:flashx.textLayout.conversion:ITextImporter:configuration:get"><apiName>configuration</apiName><shortdesc>
         The configuration property contains the IConfiguration instance that
         the importer needs when creating new TextFlow instances.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.elements:IConfiguration</apiValueClassifier></apiValueDef><apiDesc>
         The <codeph>configuration</codeph> property contains the IConfiguration instance that
         the importer needs when creating new TextFlow instances. This property
         is initially set to <codeph>null</codeph>.
         
         </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>flashx.textLayout.elements.TextFlow</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.conversion:ITextImporter:flashx.textLayout.conversion:ITextImporter:errors:get"><apiName>errors</apiName><shortdesc> 
         This property contains a vector of error messages as strings after a call
         to an importer method is the throwOnError property is set to
         false, which is the default.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Vector$String"/></apiValueDef><apiDesc> 
         This property contains a vector of error messages as strings after a call
         to an importer method is the <codeph>throwOnError</codeph> property is set to
         <codeph>false</codeph>, which is the default. If there were no errors, the
         property returns <codeph>null</codeph>. The property is reset on each method
         call.
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.conversion:ITextImporter:flashx.textLayout.conversion:ITextImporter:throwOnError:get"><apiName>throwOnError</apiName><shortdesc> 
         The throwOnError property controls how the importer handles errors.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc> 
         The <codeph>throwOnError</codeph> property controls how the importer handles errors.
         If set to <codeph>true</codeph>, methods throw an Error instance on errors. 
         If set to <codeph>false</codeph>, which is the default, errors are collected
         into a vector of strings and stored in the <codeph>errors</codeph> property, 
         and the importer does not throw. 
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.conversion:ITextImporter:flashx.textLayout.conversion:ITextImporter:useClipboardAnnotations:get"><apiName>useClipboardAnnotations</apiName><shortdesc> 
         Controls whether or not the 
         importer should handle the extra information necessary for the clipboard.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc> 
         Controls whether or not the 
         importer should handle the extra information necessary for the clipboard. 
         When data comes in from the clipboard, it might contain partial paragraphs; 
         paragraphs that are missing the terminator or newline character. If <codeph>useClipboardAnnotations</codeph> 
         is <codeph>true</codeph>, the importer marks these partial paragraphs with a 
         <codeph>ConverterBase.MERGE_TO_NEXT_ON_PASTE</codeph> attribute. This causes the paste
         operation to correctly handle merging of the pasted paragraph (and any list or div elements
         that may include the paragraph) into the text.
          
         </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flashx.textLayout.conversion.ConverterBase.MERGE_TO_NEXT_ON_PASTE.xml"><linktext>flashx.textLayout.conversion.ConverterBase.MERGE_TO_NEXT_ON_PASTE</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.conversion:PlainTextExporter"><apiName>PlainTextExporter</apiName><shortdesc> 
	 Export converter for plain text format.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.conversion:IPlainTextExporter</apiBaseInterface><apiBaseClassifier>flashx.textLayout.conversion:ConverterBase</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 Export converter for plain text format. This class provides an alternative to
	 the <codeph>TextConverter.export()</codeph> static method for exporting plain text.
	  The PlainTextExporter class's <codeph>export()</codeph> method results in the 
	 same output string as the <codeph>TextConverter.export()</codeph> static method 
	 if the two properties of the PlainTextExporter class, the <codeph>PARAGRAPH_SEPARATOR_PROPERTY</codeph>
	 and the <codeph>STRIP_DISCRETIONARY_HYPHENS_PROPERTY</codeph> properties, contain their
	 default values of <codeph>"\n"</codeph> and <codeph>true</codeph>, respectively.
	 </apiDesc><example/></apiClassifierDetail><apiValue id="flashx.textLayout.conversion:PlainTextExporter:paragraphSeparator:get"><apiName>paragraphSeparator</apiName><shortdesc> Specifies the character sequence used (in a text flow's plain-text equivalent) to separate paragraphs.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc> Specifies the character sequence used (in a text flow's plain-text equivalent) to separate paragraphs.
		 The paragraph separator is not added after the last paragraph. 
		 
		 <p>This property applies to the <codeph>PLAIN_TEXT_FORMAT</codeph> exporter.</p>
		 
		 <p>The default value is "\n".</p> 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.conversion:PlainTextExporter:stripDiscretionaryHyphens:get"><apiName>stripDiscretionaryHyphens</apiName><shortdesc> This property indicates whether discretionary hyphens in the text should be stripped during the export process.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0-"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc> This property indicates whether discretionary hyphens in the text should be stripped during the export process.
		 Discretionary hyphens, also known as "soft hyphens", indicate where to break a word in case the word must be
		 split between two lines. The Unicode character for discretionary hyphens is <codeph>\u00AD</codeph>.
		 <p>If this property is set to <codeph>true</codeph>, discretionary hyphens that are in the original text will not be in the exported text, 
		 even if they are part of the original text. If <codeph>false</codeph>, discretionary hyphens will be in the exported text.</p>
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.conversion:IHTMLImporter"><apiName>IHTMLImporter</apiName><shortdesc> This interface should be implemented by converters that import HTML or HTML-structured data.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.0"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.conversion:ITextImporter</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc> This interface should be implemented by converters that import HTML or HTML-structured data. Clients that have explicitly
	 created an importer using TextConverter.getImporter may control the import process by calling into these methods on the 
	 importer.
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.conversion:IHTMLImporter:flashx.textLayout.conversion:IHTMLImporter:imageSourceResolveFunction:get"><apiName>imageSourceResolveFunction</apiName><shortdesc> This property allows specification of a function to modify the source property supplied to an &amp;lt;img&amp;gt; element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.0"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc> This property allows specification of a function to modify the source property supplied to an <codeph>&lt;img&gt;</codeph> element. 
		 Sample use would be to modify relative paths to some caller specified root path.  The function takes the string set in the markup and returns the actual string
		 to be used.  
		 
		 <p>Note that by default relative paths are relative to the loaded SWF.  One use of this function is to make relative paths relative to some other location.</p>
		 
		 <p>The resolver function should look like this:</p>
		 <codeph>function resolver(src:String):String</codeph>
		 <p>It takes as an input parameter the value of src on the incoming img element, and returns the adjusted value.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.conversion:IHTMLImporter:flashx.textLayout.conversion:IHTMLImporter:preserveBodyElement:get"><apiName>preserveBodyElement</apiName><shortdesc> This property tells the importer to create an element for the BODY tag in HTML markup.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.0"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc> This property tells the importer to create an element for the <codeph>BODY</codeph> tag in HTML markup.
		 
		 <p>The element will normally be a <codeph>DivElement</codeph> with <codeph>typeName</codeph> set to <codeph>BODY</codeph>.</p>
		 <p>This will also trigger parsing of <codeph>class</codeph> and <codeph>id</codeph> on the element.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.conversion:IHTMLImporter:flashx.textLayout.conversion:IHTMLImporter:preserveHTMLElement:get"><apiName>preserveHTMLElement</apiName><shortdesc> This property tells the importer to create an element for the HTML tag in HTML markup.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.0"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc> This property tells the importer to create an element for the <codeph>HTML</codeph> tag in HTML markup.
		 
		 <p>The element will normally be the top-level <codeph>TextFlow</codeph> element with <codeph>typeName</codeph> set to <codeph>HTML</codeph>.</p>
		 <p>This will also trigger parsing of <codeph>class</codeph> and <codeph>id</codeph> on the element.</p>
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.conversion:ConversionType"><apiName>ConversionType</apiName><shortdesc>
	 Values for the format of exported text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Values for the format of exported text.
	 The values <codeph>STRING_TYPE</codeph> and <codeph>XML_TYPE</codeph> 
	 can be used for the <codeph>conversionType</codeph> parameter for 
	 the export() method in the ITextExporter interface and the
	 TextConverter class.
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.conversion:ConversionType:STRING_TYPE"><apiName>STRING_TYPE</apiName><shortdesc> 
		 Export as type String.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>stringType</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		 Export as type String. 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.conversion:ConversionType:XML_TYPE"><apiName>XML_TYPE</apiName><shortdesc> 
		 Export as type XML.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>xmlType</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		 Export as type XML.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.conversion:ITextExporter"><apiName>ITextExporter</apiName><shortdesc> 
	 Interface for exporting text content from a TextFlow instance to a given format, 
	 which may for example be String or XML format, or a user-defined format.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc> 
	 Interface for exporting text content from a TextFlow instance to a given format, 
	 which may for example be String or XML format, or a user-defined format. Exporters support the getting
	 and setting of properties to control the export of data. These properties are implemented
	 as public properties, but the direct access of these properties should be avoided, since
	 a user might replace the converter class in the TextConverter registry, causing a downcast
	 to fail.
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.conversion:ITextExporter:flashx.textLayout.conversion:ITextExporter:errors:get"><apiName>errors</apiName><shortdesc> 
		 This property contains a vector of error messages as strings after a call
		 to an exporter method is the throwOnError property is set to
		 false, which is the default.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Vector$String"/></apiValueDef><apiDesc> 
		 This property contains a vector of error messages as strings after a call
		 to an exporter method is the <codeph>throwOnError</codeph> property is set to
		 <codeph>false</codeph>, which is the default. If there were no errors, the
		 property returns <codeph>null</codeph>. The property is reset on each method
		 call.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.conversion:ITextExporter:flashx.textLayout.conversion:ITextExporter:throwOnError:get"><apiName>throwOnError</apiName><shortdesc> 
		 The throwOnError property controls how the exporter handles errors.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc> 
		 The throwOnError property controls how the exporter handles errors.
		 If set to <codeph>true</codeph>, methods throw an Error instance on errors. 
		 If set to <codeph>false</codeph>, which is the default, errors are collected
		 into a vector of strings and stored in the <codeph>errors</codeph> property, 
		 and the exporter does not throw.	
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.conversion:ITextExporter:flashx.textLayout.conversion:ITextExporter:useClipboardAnnotations:get"><apiName>useClipboardAnnotations</apiName><shortdesc> 
		 The useClipboardAnnotations property controls whether or not the 
		 importer should handle the extra information necessary for the clipboard.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc> 
		 The <codeph>useClipboardAnnotations</codeph> property controls whether or not the 
		 importer should handle the extra information necessary for the clipboard. 
		 When data is in a TextFlow, paragraphs are always complete, and include a 
		 terminator character. When a range of text is pasted to the clipboard, it
		 will form paragraphs, but the range may not include in the final terminator.
		 In this case, the paragraph needs to be marked as a partial paragraph if it
		 is intended for the clipboard, so that if it is later pasted it will merge
		 into the new text correctly. If the content is intended for the clipboard, 
		 useClipboardAnnotations will be true.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.conversion:FormatDescriptor"><apiName>FormatDescriptor</apiName><shortdesc> Contains information about a format.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.0"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> Contains information about a format.
     
     </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.conversion:FormatDescriptor:clipboardFormat:get"><apiName>clipboardFormat</apiName><shortdesc> Descriptor used when matching this format to the formats posted on the external clipboard.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.0"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc> Descriptor used when matching this format to the formats posted on the external clipboard. If the format supports importing, 
         (it's importerClass is not null), it will be called when pasting from the clipboard, if the clipboard contents include data 
         in this format. If the format supports exporting, it will be called when copying to the clipboard, and the output it creates 
         will be posted to the clipboard with this clipboardFormat.
         
         </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.desktop.Clipboard.xml"><linktext>flash.desktop.Clipboard</linktext></link><link href="" invalidHref="flash.desktop.ClipboardFormats.xml"><linktext>flash.desktop.ClipboardFormats</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.conversion:FormatDescriptor:exporterClass:get"><apiName>exporterClass</apiName><shortdesc> Returns the class used for converting to the format.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.0"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc> Returns the class used for converting to the format. 
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.conversion:FormatDescriptor:format:get"><apiName>format</apiName><shortdesc> Returns the data format used by the converter.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.0"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc> Returns the data format used by the converter.
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.conversion:FormatDescriptor:importerClass:get"><apiName>importerClass</apiName><shortdesc> Returns the class used for converting data from the format.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.0"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc> Returns the class used for converting data from the format. 
         
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.conversion:ConverterBase"><apiName>ConverterBase</apiName><shortdesc>
	 This is a base class for importers as well as exporters.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 This is a base class for importers as well as exporters. It implements the error handling
	 plus property getters and setters that generate an error when invoked.
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.conversion:ConverterBase:MERGE_TO_NEXT_ON_PASTE"><apiName>MERGE_TO_NEXT_ON_PASTE</apiName><shortdesc> A converter that converts clipboard data into a TextFlow should use the MERGE_TO_NEXT_ON_PASTE property
		 to control how the elements are treated when they are merged into an existing TextFlow on paste.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mergeToNextOnPaste</apiData><apiType value="String"/></apiValueDef><apiDesc> A converter that converts clipboard data into a TextFlow should use the MERGE_TO_NEXT_ON_PASTE property
		 to control how the elements are treated when they are merged into an existing TextFlow on paste. This is useful
		 if you want special handling for the case where only part of the element is copied. For instance, wheh a list
		 is copied, if only part of the list is copied, and you paste it into another list, it merges into the list as
		 additional items. If the entire list is copied, it appears as a nested list. When TLF creates a TextFlow for use
		 on the clipboard, it decorates any partial elements with user properties that control whether the end of the element 
		 should be merged with the one after it. This user property is never pasted into the final TextFlow, but it may go 
		 on the elements in the TextScrap.textFlow. When copying text, the converter has the option to look for these properties 
		 to propagate them into the format that is posted on the clipboard. For instance, the plain text exporter checks the 
		 "mergeToNextOnPaste" property on paragraphs and supresses the paragraph terminator if it is found set to true. 
		 Likewise on import if the incoming String has no terminator, and useClipboardAnnotations is true, then it calls 
		 <codeph>setStyle(MERGE_TO_NEXT_ON_PASTE, "true")</codeph> on the corresponding paragraph so that when it is pasted 
		 it will blend into the paragraph where its pasted. This property should only be set on elements in a TextScrap, and
		 only on the last element in the scrap.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.conversion:ConverterBase:errors:get"><apiName>errors</apiName><shortdesc> Errors encountered while parsing.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Vector$String"/></apiValueDef><apiDesc> Errors encountered while parsing. 
		 Value is a vector of Strings.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.conversion:ConverterBase:throwOnError:get"><apiName>throwOnError</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="flashx.textLayout.conversion:ConverterBase:useClipboardAnnotations:get"><apiName>useClipboardAnnotations</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc/></apiValueDetail></apiValue></apiClassifier></apiPackage><apiPackage id="flashx.textLayout.edit"><apiName>flashx.textLayout.edit</apiName><apiClassifier id="flashx.textLayout.edit:SelectionManager"><apiName>SelectionManager</apiName><shortdesc> 
     The SelectionManager class manages text selection in a text flow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.edit:ISelectionManager</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> 
     The SelectionManager class manages text selection in a text flow.
     
     <p>The selection manager keeps track of the selected text range, manages its formatting, 
     and can handle events affecting the selection. To allow a user to make selections in
     a text flow, assign a SelectionManager object to the <codeph>interactionManager</codeph>
     property of the flow. (To allow editing, assign an instance of the EditManager class,
     which extends SelectionManager.)</p>
     
     <p>The following table describes how the SelectionManager class handles keyboard shortcuts:</p>
     
     <adobetable class="innertable">
     
     
     
     
     
     
     
     
     
     <tgroup cols="13"><thead><row><row><entry/><entry/><entry align="center">TB,LTR</entry><entry align="right"/><entry/><entry align="center">TB,RTL</entry><entry/><entry/><entry align="center">TL,LTR</entry><entry/><entry/><entry align="center">RL,RTL</entry><entry/></row><row><entry/><entry>none</entry><entry>ctrl</entry><entry>alt|ctrl+alt</entry><entry>none</entry><entry>ctrl</entry><entry>alt|ctrl+alt</entry><entry>none</entry><entry>ctrl</entry><entry>alt|ctrl+alt</entry><entry>none</entry><entry>ctrl</entry><entry>alt|ctrl+alt</entry></row></row></thead><tbody><row><entry>leftarrow</entry><entry>previousCharacter</entry><entry>previousWord</entry><entry>previousWord</entry><entry>nextCharacter</entry><entry>nextWord</entry><entry>nextWord</entry><entry>nextLine</entry><entry>endOfDocument</entry><entry>endOfParagraph</entry><entry>nextLine</entry><entry>endOfDocument</entry><entry>endOfParagraph</entry></row><row><entry>uparrow</entry><entry>previousLine</entry><entry>startOfDocument</entry><entry>startOfParagraph</entry><entry>previousLine</entry><entry>startOfDocument</entry><entry>startOfParagraph</entry><entry>previousCharacter</entry><entry>previousWord</entry><entry>previousWord</entry><entry>nextCharacter</entry><entry>nextWord</entry><entry>nextWord</entry></row><row><entry>rightarrow</entry><entry>nextCharacter</entry><entry>nextWord</entry><entry>nextWord</entry><entry>previousCharacter</entry><entry>previousWord</entry><entry>previousWord</entry><entry>previousLine</entry><entry>startOfDocument</entry><entry>startOfParagraph</entry><entry>previousLine</entry><entry>startOfDocument</entry><entry>startOfParagraph</entry></row><row><entry>downarrow</entry><entry>nextLine</entry><entry>endOfDocument</entry><entry>endOfParagraph</entry><entry>nextLine</entry><entry>endOfDocument</entry><entry>endOfParagraph</entry><entry>nextCharacter</entry><entry>nextWord</entry><entry>nextWord</entry><entry>previousCharacter</entry><entry>previousWord</entry><entry>previousWord</entry></row><row><entry>home</entry><entry>startOfLine</entry><entry>startOfDocument</entry><entry>startOfLine</entry><entry>startOfLine</entry><entry>startOfDocument</entry><entry>startOfLine</entry><entry>startOfLine</entry><entry>startOfDocument</entry><entry>startOfLine</entry><entry>startOfLine</entry><entry>startOfDocument</entry><entry>startOfLine</entry></row><row><entry>end</entry><entry>endOfLine</entry><entry>endOfDocument</entry><entry>endOfLine</entry><entry>endOfLine</entry><entry>endOfDocument</entry><entry>endOfLine</entry><entry>endOfLine</entry><entry>endOfDocument</entry><entry>endOfLine</entry><entry>endOfLine</entry><entry>endOfDocument</entry><entry>endOfLine</entry></row><row><entry>pagedown</entry><entry>nextPage</entry><entry>nextPage</entry><entry>nextPage</entry><entry>nextPage</entry><entry>nextPage</entry><entry>nextPage</entry><entry>nextPage</entry><entry>nextPage</entry><entry>nextPage</entry><entry>nextPage</entry><entry>nextPage</entry><entry>nextPage</entry></row><row><entry>pageup</entry><entry>previousPage</entry><entry>previousPage</entry><entry>previousPage</entry><entry>previousPage</entry><entry>previousPage</entry><entry>previousPage</entry><entry>previousPage</entry><entry>previousPage</entry><entry>previousPage</entry><entry>previousPage</entry><entry>previousPage</entry><entry>previousPage</entry></row></tbody></tgroup></adobetable>
     
     <p><b>Key:</b>
     <ul>
      <li>none = no modifier</li>
      <li>ctrl, shift, alt = modifiers</li>
      <li>alt-key and ctrl+alt-key are the same on all platforms (on some platforms alt-key does not get to the Text Layout Framework (TLF)</li>
      <li>shift key modifes to extend the active end of the selection in the specified manner</li>            
      <li>TB (top-to-bottom),RL (right-to-left) are textFlow level <codeph>blockProgression</codeph> settings</li>                        
      <li>LTR (left-to-right),RTL (right-to-left) are textFlow level <codeph>direction</codeph> settings</li>                 
      <li>next and prev in logical order in the textFlow - the effect in RTL text is that the selection moves in the physical direction</li>
     </ul></p>
     
     </apiDesc><example/></apiClassifierDetail><apiValue id="flashx.textLayout.edit:SelectionManager:absoluteEnd:get"><apiName>absoluteEnd</apiName><shortdesc> 
		 The text position of the end of the selection, as an offset from the start of the text flow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 
		 The text position of the end of the selection, as an offset from the start of the text flow.
		  
		 <p>The absolute end is the same as either the active or the anchor point of the selection, whichever comes
		 last in the text flow.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:SelectionManager:absoluteStart:get"><apiName>absoluteStart</apiName><shortdesc> 
		 The text position of the start of the selection, as an offset from the start of the text flow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 
		 The text position of the start of the selection, as an offset from the start of the text flow.
		  
		 <p>The absolute start is the same as either the active or the anchor point of the selection, whichever comes
		 first in the text flow.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:SelectionManager:activePosition:get"><apiName>activePosition</apiName><shortdesc> 
		 The active point of the selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 
		 The active point of the selection.
		 
		 <p>The <i>active</i> point is the volatile end of the selection. The active point is changed 
		 when the selection is modified. The active point can be at either the beginning 
		 or the end of the selection.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:SelectionManager:anchorPosition:get"><apiName>anchorPosition</apiName><shortdesc> 
		 The anchor point of the selection.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 
		 The anchor point of the selection. 
		 
		 <p>An <i>anchor</i> point is the stable end of the selection. When the selection
		 is extended, the anchor point does not change. The anchor point can be at either the beginning 
		 or the end of the selection.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:SelectionManager:currentSelectionFormat:get"><apiName>currentSelectionFormat</apiName><shortdesc> 
		 The current SelectionFormat object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.edit:SelectionFormat</apiValueClassifier></apiValueDef><apiDesc> 
		 The current SelectionFormat object.
		 
		 <p>The current SelectionFormat object is chosen from the SelectionFormat objects assigned to the 
		 <codeph>unfocusedSelectionFormat</codeph>, <codeph>inactiveSelectionFormat</codeph> and <codeph>focusedSelectionFormat</codeph> 
		 properties based on the current state of the <codeph>windowActive</codeph> and <codeph>focused</codeph> properties.</p> 
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.edit.xml#SelectionFormat"><linktext>flashx.textLayout.edit.SelectionFormat</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.edit:SelectionManager:editingMode:get"><apiName>editingMode</apiName><shortdesc>
		 The editing mode.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
		 The editing mode. 
		 
		 <p>The editing mode indicates whether the text flow supports selection, editing, or only reading.
		 A text flow is made selectable by assigning a selection manager and editable by assigning an edit manager.
		 Constants representing the editing modes are defined in the EditingMode class.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.edit.xml#EditingMode"><linktext>flashx.textLayout.edit.EditingMode</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.edit:SelectionManager:focused:get"><apiName>focused</apiName><shortdesc> 
		 Indicates whether a container in the text flow has the focus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc> 
		 Indicates whether a container in the text flow has the focus.
		 
		 <p>The <codeph>focused</codeph> property is <codeph>true</codeph> 
		 if any of the containers in the text flow has key focus.</p> 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:SelectionManager:protected:pointFormat:get"><apiName>pointFormat</apiName><shortdesc> 
         The format that will be applied to inserted text.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
         The format that will be applied to inserted text. 
         
         TBD: pointFormat needs to be extended to remember user styles and "undefine" of formats from calls to IEditManager.undefineFormat with leafFormat values on a point selection.
         </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:SelectionManager:textFlow:get"><apiName>textFlow</apiName><shortdesc>
         The TextFlow object managed by this selection manager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.elements:TextFlow</apiValueClassifier></apiValueDef><apiDesc>
         The TextFlow object managed by this selection manager. 
         
         <p>A selection manager manages a single text flow. A selection manager can also be
         assigned to a text flow by setting the <codeph>interactionManager</codeph> property of the
         TextFlow object.</p>
         
         </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow/interactionManager"><linktext>flashx.textLayout.elements.TextFlow.interactionManager</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.edit:SelectionManager:windowActive:get"><apiName>windowActive</apiName><shortdesc> 
		 Indicates whether the window associated with the text flow is active.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc> 
		 Indicates whether the window associated with the text flow is active.
		 
		 <p>The <codeph>windowActive</codeph> property is <codeph>true</codeph> if the window 
		 displaying with the text flow is the active window.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:SelectionManager:focusedSelectionFormat:set"><apiName>focusedSelectionFormat</apiName><shortdesc>
		 The SelectionFormat object used to draw the selection in a focused container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.edit:SelectionFormat</apiValueClassifier></apiValueDef><apiDesc>
		 The SelectionFormat object used to draw the selection in a focused container. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.edit.xml#SelectionFormat"><linktext>flashx.textLayout.edit.SelectionFormat</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.edit:SelectionManager:inactiveSelectionFormat:set"><apiName>inactiveSelectionFormat</apiName><shortdesc>
		 The SelectionFormat object used to draw the selection when it is not in the active window.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.edit:SelectionFormat</apiValueClassifier></apiValueDef><apiDesc>
		 The SelectionFormat object used to draw the selection when it is not in the active window.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.edit.xml#SelectionFormat"><linktext>flashx.textLayout.edit.SelectionFormat</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.edit:SelectionManager:unfocusedSelectionFormat:set"><apiName>unfocusedSelectionFormat</apiName><shortdesc>
		 The SelectionFormat object used to draw the selection when it is not in a focused container, but is in
		 the active window.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.edit:SelectionFormat</apiValueClassifier></apiValueDef><apiDesc>
		 The SelectionFormat object used to draw the selection when it is not in a focused container, but is in
		 the active window.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.edit.xml#SelectionFormat"><linktext>flashx.textLayout.edit.SelectionFormat</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.edit:TextScrap"><apiName>TextScrap</apiName><shortdesc>
	 The TextScrap class represents a fragment of a text flow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The TextScrap class represents a fragment of a text flow.
	 
	 <p>A TextScrap is a holding place for all or part of a TextFlow. A range of text can be copied 
	 from a TextFlow into a TextScrap, and pasted from the TextScrap into another TextFlow.</p>
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.edit:TextScrap:tlf_internal:MERGE_TO_NEXT_ON_PASTE"><apiName>MERGE_TO_NEXT_ON_PASTE</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="tlf_internal"/><apiStatic/><apiData>mergeToNextOnPaste</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:TextScrap:textFlow:get"><apiName>textFlow</apiName><shortdesc> 
		 Gets the TextFlow that is currently in the TextScrap.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:TextFlow</apiValueClassifier></apiValueDef><apiDesc> 
		 Gets the TextFlow that is currently in the TextScrap.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.edit:ElementRange"><apiName>ElementRange</apiName><shortdesc>
 The ElementRange class represents the range of objects selected within a text flow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 The ElementRange class represents the range of objects selected within a text flow.
 
 <p>The beginning elements 
 (such as <codeph>firstLeaf</codeph>) are always less than or equal to the end elements (in this case, <codeph>lastLeaf</codeph>)
 for each pair of values in an element range.</p>
 
 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.edit:ElementRange:absoluteEnd:get"><apiName>absoluteEnd</apiName><shortdesc> 
	 The absolute text position of the FlowLeafElement object that contains the end of the range.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc> 
	 The absolute text position of the FlowLeafElement object that contains the end of the range. 
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:ElementRange:absoluteStart:get"><apiName>absoluteStart</apiName><shortdesc> 
	 The absolute text position of the FlowLeafElement object that contains the start of the range.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc> 
	 The absolute text position of the FlowLeafElement object that contains the start of the range.
	  
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:ElementRange:characterFormat:get"><apiName>characterFormat</apiName><shortdesc> 
	 The format attributes of the characters in the range.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
	 The format attributes of the characters in the range. 
	 
	 <p>If the range spans more than one FlowElement object, which means that more than one
	 character format may exist within the range, the format of the first FlowElement object is returned.</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:ElementRange:containerFormat:get"><apiName>containerFormat</apiName><shortdesc> 
	 The format attributes of the container displaying the range.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
	 The format attributes of the container displaying the range. 
	 
	 <p>If the range spans more than one container, the format of the first container is returned.</p>
	  
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:ElementRange:firstLeaf:get"><apiName>firstLeaf</apiName><shortdesc> 
	 The FlowLeafElement object that contains the start of the range.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.elements:FlowLeafElement</apiValueClassifier></apiValueDef><apiDesc> 
	 The FlowLeafElement object that contains the start of the range. 
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:ElementRange:firstParagraph:get"><apiName>firstParagraph</apiName><shortdesc> 
	 The ParagraphElement object that contains the start of the range.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.elements:ParagraphElement</apiValueClassifier></apiValueDef><apiDesc> 
	 The ParagraphElement object that contains the start of the range. 
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:ElementRange:lastLeaf:get"><apiName>lastLeaf</apiName><shortdesc> 
	 The FlowLeafElement object that contains the end of the range.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.elements:FlowLeafElement</apiValueClassifier></apiValueDef><apiDesc> 
	 The FlowLeafElement object that contains the end of the range. 
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:ElementRange:lastParagraph:get"><apiName>lastParagraph</apiName><shortdesc> 
	 The ParagraphElement object that contains the end of the range.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.elements:ParagraphElement</apiValueClassifier></apiValueDef><apiDesc> 
	 The ParagraphElement object that contains the end of the range. 
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:ElementRange:paragraphFormat:get"><apiName>paragraphFormat</apiName><shortdesc> 
	 The format attributes of the paragraph containing the range.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
	 The format attributes of the paragraph containing the range. 
	 
	 <p>If the range spans more than one paragraph, the format of the first paragraph is returned.</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:ElementRange:textFlow:get"><apiName>textFlow</apiName><shortdesc> 
	 The TextFlow object that contains the range.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.elements:TextFlow</apiValueClassifier></apiValueDef><apiDesc> 
	 The TextFlow object that contains the range. 
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.edit:SelectionState"><apiName>SelectionState</apiName><shortdesc>
	 The SelectionState class represents a selection in a text flow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.elements:TextRange</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The SelectionState class represents a selection in a text flow.  
	 
	 <p>A selection range has an anchor point, representing the point at which the selection of text began, and an
	 active point, representing the point to which the selection is extended. The active point can be before or after 
	 the anchor point in the text. If a selection is modified (for example, by a user shift-clicking with the mouse),
	 the active point changes while the anchor point always remains in the same position.</p>
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.edit:SelectionState:pointFormat:get"><apiName>pointFormat</apiName><shortdesc> 
		 The format attributes applied to inserted text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		 The format attributes applied to inserted text. 
		 
		 <p><b>Note:</b> The <codeph>pointFormat</codeph> object does not include inherited styles. To
		 get all the applicable style definitions, use the <codeph>getCommonCharacterFormat()</codeph>
		 method of the ISelectionManager class.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.edit.xml#ISelectionManager/getCommonCharacterFormat()"><linktext>ISelectionManager.getCommonCharacterFormat()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.edit:IEditManager"><apiName>IEditManager</apiName><shortdesc> 
     IEditManager defines the interface for handling edit operations of a text flow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><Exclude kind="property" name="delayedOperations"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.edit:ISelectionManager</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc> 
     IEditManager defines the interface for handling edit operations of a text flow.
     
     <p>To enable text flow editing, assign an IEditManager instance to the <codeph>interactionManager</codeph> 
     property of the TextFlow object. The edit manager handles changes to the text (such as insertions, 
     deletions, and format changes). Changes are reversible if the edit manager has an undo manager. The edit
     manager triggers the recomposition and display of the text flow, as necessary.</p>
     
     </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:allowDelayedOperations:get"><apiName>allowDelayedOperations</apiName><shortdesc> Controls whether operations can be queued up for later execution.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc> Controls whether operations can be queued up for later execution.
         
         <p>Execution of some operations might be delayed as a performance optimization. For example, it is 
         convenient to be able to combine multiple keystrokes into a single insert operation. If 
         <codeph>allowDelayedOperations</codeph> is <codeph>true</codeph>, then operations may be queued up. If <codeph>false</codeph>, all operations are
         executed immediately. By default, it is <codeph>true</codeph>.</p>
         
         </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flashx.edit.xml#ISelectionManager/flushPendingOperations"><linktext>flashx.edit.ISelectionManager.flushPendingOperations</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:delayUpdates:get"><apiName>delayUpdates</apiName><shortdesc>
         By default, calls into IEditManager handle updates synchronously, so the requested change is made and the text recomposed 
         and added to the display list within the IEditManager method.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
         By default, calls into IEditManager handle updates synchronously, so the requested change is made and the text recomposed 
         and added to the display list within the IEditManager method. To get a delayed redraw, set <codeph>delayUpdates</codeph> to <codeph>true</codeph>. This 
         causes the IEditManager to only update the model, and recompose and redraw on the next <codeph>enter_frame</codeph> event. 
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:IEditManager:flashx.textLayout.edit:IEditManager:undoManager:get"><apiName>undoManager</apiName><shortdesc> 
         The UndoManager object assigned to this EditManager instance, if there is one.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.undo:IUndoManager</apiValueClassifier></apiValueDef><apiDesc> 
         The UndoManager object assigned to this EditManager instance, if there is one.
         
         <p>An undo manager handles undo and redo operations.</p>
         
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.edit:ISelectionManager"><apiName>ISelectionManager</apiName><shortdesc> 
	 The ISelectionManager interface defines the interface for handling text selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.edit:IInteractionEventHandler</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc> 
	 The ISelectionManager interface defines the interface for handling text selection.
	 
	 <p>A SelectionManager keeps track of the selected text range and handles events for a TextFlow.</p>
	 
	 <p>A selection can be either a point selection or a range selection. A point selection is the insertion point
	 and is indicated visually by drawing a cursor. A range
	 selection includes the text between an anchor point and an active point.</p>
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.edit:ISelectionManager:flashx.textLayout.edit:ISelectionManager:absoluteEnd:get"><apiName>absoluteEnd</apiName><shortdesc> 
		 The text position of the end of the selection, as an offset from the start of the text flow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 
		 The text position of the end of the selection, as an offset from the start of the text flow.
		  
		 <p>The absolute end is the same as either the active or the anchor point of the selection, whichever comes
		 last in the text flow.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:ISelectionManager:flashx.textLayout.edit:ISelectionManager:absoluteStart:get"><apiName>absoluteStart</apiName><shortdesc> 
		 The text position of the start of the selection, as an offset from the start of the text flow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 
		 The text position of the start of the selection, as an offset from the start of the text flow.
		  
		 <p>The absolute start is the same as either the active or the anchor point of the selection, whichever comes
		 first in the text flow.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:ISelectionManager:flashx.textLayout.edit:ISelectionManager:activePosition:get"><apiName>activePosition</apiName><shortdesc> 
		 The active point of the selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 
		 The active point of the selection.
		 
		 <p>The <i>active</i> point is the volatile end of the selection. The active point is changed 
		 when the selection is modified. The active point can be at either the beginning 
		 or the end of the selection.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:ISelectionManager:flashx.textLayout.edit:ISelectionManager:anchorPosition:get"><apiName>anchorPosition</apiName><shortdesc> 
		 The anchor point of the selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 
		 The anchor point of the selection. 
		 
		 <p>An <i>anchor</i> point is the stable end of the selection. When the selection
		 is extended, the anchor point does not change. The anchor point can be at either the beginning 
		 or the end of the selection.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:ISelectionManager:flashx.textLayout.edit:ISelectionManager:currentSelectionFormat:get"><apiName>currentSelectionFormat</apiName><shortdesc> 
		 The current SelectionFormat object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.edit:SelectionFormat</apiValueClassifier></apiValueDef><apiDesc> 
		 The current SelectionFormat object.
		 
		 <p>The current SelectionFormat object is chosen from the SelectionFormat objects assigned to the 
		 <codeph>unfocusedSelectionFormat</codeph>, <codeph>inactiveSelectionFormat</codeph> and <codeph>focusedSelectionFormat</codeph> 
		 properties based on the current state of the <codeph>windowActive</codeph> and <codeph>focused</codeph> properties.</p> 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:ISelectionManager:flashx.textLayout.edit:ISelectionManager:editingMode:get"><apiName>editingMode</apiName><shortdesc>
		 The editing mode.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
		 The editing mode. 
		 
		 <p>The editing mode indicates whether the text flow supports selection, editing, or only reading.
		 A text flow is made selectable by assigning a selection manager and editable by assigning an edit manager.
		 Constants representing the editing modes are defined in the EditingMode class.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flashx.textLayout.EditingMode.xml"><linktext>flashx.textLayout.EditingMode</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.edit:ISelectionManager:flashx.textLayout.edit:ISelectionManager:focusedSelectionFormat:get"><apiName>focusedSelectionFormat</apiName><shortdesc>
		 The SelectionFormat object used to draw the selection in a focused container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.edit:SelectionFormat</apiValueClassifier></apiValueDef><apiDesc>
		 The SelectionFormat object used to draw the selection in a focused container. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:ISelectionManager:flashx.textLayout.edit:ISelectionManager:focused:get"><apiName>focused</apiName><shortdesc> 
		 Indicates whether a container in the text flow has the focus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc> 
		 Indicates whether a container in the text flow has the focus.
		 
		 <p>The <codeph>focused</codeph> property is <codeph>true</codeph> 
		 if any of the containers in the text flow has key focus.</p> 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:ISelectionManager:flashx.textLayout.edit:ISelectionManager:inactiveSelectionFormat:get"><apiName>inactiveSelectionFormat</apiName><shortdesc>
		 The SelectionFormat object used to draw the selection when it is not in the active window.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.edit:SelectionFormat</apiValueClassifier></apiValueDef><apiDesc>
		 The SelectionFormat object used to draw the selection when it is not in the active window.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:ISelectionManager:flashx.textLayout.edit:ISelectionManager:textFlow:get"><apiName>textFlow</apiName><shortdesc> 
		 The TextFlow object managed by this selection manager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.elements:TextFlow</apiValueClassifier></apiValueDef><apiDesc> 
		 The TextFlow object managed by this selection manager. 
		 
		 <p>A selection manager manages a single text flow. A selection manager can also be
		 assigned to a text flow by setting the <codeph>interactionManager</codeph> property of the
		 TextFlow object.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow/interactionManager"><linktext>flashx.textLayout.elements.TextFlow.interactionManager</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.edit:ISelectionManager:flashx.textLayout.edit:ISelectionManager:unfocusedSelectionFormat:get"><apiName>unfocusedSelectionFormat</apiName><shortdesc>
		 The SelectionFormat object used to draw the selection when it is not in a focused container, but is in
		 the active window.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.edit:SelectionFormat</apiValueClassifier></apiValueDef><apiDesc>
		 The SelectionFormat object used to draw the selection when it is not in a focused container, but is in
		 the active window.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:ISelectionManager:flashx.textLayout.edit:ISelectionManager:windowActive:get"><apiName>windowActive</apiName><shortdesc> 
		 Indicates whether the window associated with the text flow is active.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc> 
		 Indicates whether the window associated with the text flow is active.
		 
		 <p>The <codeph>windowActive</codeph> property is <codeph>true</codeph> if the window 
		 displaying with the text flow is the active window.</p>
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.edit:EditManager"><apiName>EditManager</apiName><shortdesc> 
	 The EditManager class manages editing changes to a TextFlow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.edit:IEditManager</apiBaseInterface><apiBaseClassifier>flashx.textLayout.edit:SelectionManager</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 The EditManager class manages editing changes to a TextFlow. 
	 
	 <p>To enable text flow editing, assign an EditManager object to the <codeph>interactionManager</codeph> 
	 property of the TextFlow object. The edit manager handles changes to the text (such as insertions, 
	 deletions, and format changes). Changes are reversible if the edit manager has an undo manager. The edit
	 manager triggers the recomposition and display of the text flow, as necessary.</p>
	 
	 <p>The EditManager class supports the following keyboard shortcuts:</p>
	 
	 <adobetable class="innertable">
	  
	  					
	 						
	 						
	 						
	 						
	 						
	 						
	 						
	 						
	 						
	 						
	 						
	 						
	 						
	 	    
	 	    
	 <tgroup cols="2"><thead><row><entry>Keys</entry><entry>Result</entry></row></thead><tbody><row><entry>ctrl-z</entry><entry>undo</entry></row><row><entry>ctrl-y</entry><entry>redo</entry></row><row><entry>ctrl-backspace</entry><entry>deletePreviousWord</entry></row><row><entry>ctrl-delete</entry><entry>deleteNextWord</entry></row><row><entry>alt+delete</entry><entry>deleteNextWord</entry></row><row><entry>ctrl+alt-delete</entry><entry>deleteNextWord</entry></row><row><entry>ctrl-shift-hyphen</entry><entry>insert discretionary hyphen</entry></row><row><entry>ctrl+backspace</entry><entry>deletePreviousWord</entry></row><row><entry>alt+backspace</entry><entry>deletePreviousWord</entry></row><row><entry>ctrl+alt-backspace</entry><entry>deletePreviousWord</entry></row><row><entry>INSERT</entry><entry>toggles overWriteMode</entry></row><row><entry>backspace</entry><entry>deletePreviousCharacter</entry></row><row><entry>ENTER</entry><entry>if textFlow.configuration.manageEnterKey in a list it creates a new list item, otherwise creates a new paragraph</entry></row><row><entry>shift-ENTER</entry><entry>if textFlow.configuration.manageEnterKey creates a new paragraph</entry></row><row><entry>TAB</entry><entry>if textFlow.configuration.manageTabKey in a list it creates nested list, otherwise inserts a TAB or overwrites next character with a TAB</entry></row><row><entry>shift-TAB</entry><entry>if textFlow.configuration.manageTabKey in the first item of a list it moves the item out of the list (promotes it)</entry></row></tbody></tgroup></adobetable>
	 
	 <p><b>Note:</b> The following keys do not work on Windows: alt-backspace, alt-delete, ctrl+alt-backspace,
	 and ctrl+alt-delete. These keys do not generate an event for the runtime.</p>						
 	 
 	 </apiDesc><example/></apiClassifierDetail><apiValue id="flashx.textLayout.edit:EditManager:overwriteMode"><apiName>overwriteMode</apiName><shortdesc> 
		 Indicates whether overwrite mode is on or off.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiData>false</apiData><apiType value="Boolean"/></apiValueDef><apiDesc> 
		 Indicates whether overwrite mode is on or off.
		 
		 <p>If <codeph>true</codeph>, then a keystroke overwrites the character following the cursor.
		 If <codeph>false</codeph>, then a keystroke is inserted at the cursor location.</p> 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:EditManager:allowDelayedOperations:get"><apiName>allowDelayedOperations</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:EditManager:delayUpdates:get"><apiName>delayUpdates</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:EditManager:undoManager:get"><apiName>undoManager</apiName><shortdesc>  
		 The IUndoManager assigned to this edit manager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.undo:IUndoManager</apiValueClassifier></apiValueDef><apiDesc>  
		 The IUndoManager assigned to this edit manager.
		 
		 <p>To allow edits to be undone (and redone), pass an IUndoManager instance to the EditManager
		 constructor. The undo manager maintains a stack of operations that have been executed, and it can 
		 undo or redo individual operations. </p>
		 
		 <p><b>Note:</b> If the TextFlow is modified directly (not via
		 calls to the EditManager, but directly via calls to the managed FlowElement objects), then the EditManager
		 clears the undo stack to prevent the stack from getting out of sync with the current state.</p>
		 
	 	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.edit:IInteractionEventHandler"><apiName>IInteractionEventHandler</apiName><shortdesc>
	 The IInteractionEventHandler interface defines the event handler functions that
	 are handled by a Text Layout Framework selection or edit manager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 The IInteractionEventHandler interface defines the event handler functions that
	 are handled by a Text Layout Framework selection or edit manager.
	 
	 </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="flashx.textLayout.edit:SelectionFormat"><apiName>SelectionFormat</apiName><shortdesc>
	 The SelectionFormat class defines the properties of a selection highlight.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The SelectionFormat class defines the properties of a selection highlight.
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.edit:SelectionFormat:pointAlpha:get"><apiName>pointAlpha</apiName><shortdesc>
		 The alpha for drawing the cursor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 The alpha for drawing the cursor. Valid values are between 0
		 (completely transparent) and 1 (completely opaque, which is the default).
		 
		 <p>Setting the <codeph>pointAlpha</codeph> and <codeph>rangeAlpha</codeph> properties to zero disables selection highlighting.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.edit.xml#SelectionFormat/rangeAlpha"><linktext>rangeAlpha</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.edit:SelectionFormat:pointBlendMode:get"><apiName>pointBlendMode</apiName><shortdesc>
		 The blend mode for drawing the cursor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
		 The blend mode for drawing the cursor.
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.display.BlendMode.xml"><linktext>flash.display.BlendMode</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.edit:SelectionFormat:pointBlinkRate:get"><apiName>pointBlinkRate</apiName><shortdesc>
		 The rate at which the cursor blinks, in milliseconds.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 The rate at which the cursor blinks, in milliseconds.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:SelectionFormat:pointColor:get"><apiName>pointColor</apiName><shortdesc>
		 The color for drawing the cursor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="uint"/></apiValueDef><apiDesc>
		 The color for drawing the cursor.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:SelectionFormat:rangeAlpha:get"><apiName>rangeAlpha</apiName><shortdesc>
		 The alpha for drawing the highlight of a range selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 The alpha for drawing the highlight of a range selection. Valid values are between 0
		 (completely transparent) and 1 (completely opaque, which is the default).
		 
		 <p>Setting the <codeph>pointAlpha</codeph> and <codeph>rangeAlpha</codeph> properties to zero disables selection highlighting.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.edit.xml#SelectionFormat/pointAlpha"><linktext>pointAlpha</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.edit:SelectionFormat:rangeBlendMode:get"><apiName>rangeBlendMode</apiName><shortdesc>
		 The blending mode for drawing the highlight of a range selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
		 The blending mode for drawing the highlight of a range selection. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.display.BlendMode.xml"><linktext>flash.display.BlendMode</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.edit:SelectionFormat:rangeColor:get"><apiName>rangeColor</apiName><shortdesc>
		 The color for drawing the highlight of a range selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="uint"/></apiValueDef><apiDesc>
		 The color for drawing the highlight of a range selection. 
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.edit:TextClipboard"><apiName>TextClipboard</apiName><shortdesc>
	 The TextClipboard class copies and pastes TextScrap objects to and from the system clipboard.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The TextClipboard class copies and pastes TextScrap objects to and from the system clipboard.
	 
	 <p>When you copy a TextScrap to the TextClipboard, the information is copied to the
	 system clipboard in two clipboard formats. One format is an XML string expressing the copied 
	 TextScrap object in Text Layout Markup syntax. This clipboard object uses the format name: 
	 "TEXT_LAYOUT_MARKUP". The second format is a plain-text string, which uses the standard 
	 Clipboard.TEXT_FORMAT name.</p>
	 
	 <p>The methods of the TextClipboard class are static functions, you do not need to
	 create an instance of TextClipboard.</p>  
	 
	 </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="flashx.textLayout.edit:EditingMode"><apiName>EditingMode</apiName><shortdesc> 
	 The EditingMode class defines constants used with EditManager class to represent the 
	 read, select, and edit permissions of a document.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 The EditingMode class defines constants used with EditManager class to represent the 
	 read, select, and edit permissions of a document.
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.edit:EditingMode:READ_ONLY"><apiName>READ_ONLY</apiName><shortdesc> 
		 The document is read-only.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>readOnly</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		 The document is read-only.
		 
		 <p>Neither selection nor editing is allowed.</p> 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:EditingMode:READ_SELECT"><apiName>READ_SELECT</apiName><shortdesc> 
		 The text in the document can be selected and copied, but not edited.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>readSelect</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		 The text in the document can be selected and copied, but not edited. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.edit:EditingMode:READ_WRITE"><apiName>READ_WRITE</apiName><shortdesc> 
		 The document can be edited.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>readWrite</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		 The document can be edited.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage><apiPackage id="flashx.textLayout.elements"><apiName>flashx.textLayout.elements</apiName><apiClassifier id="flashx.textLayout.elements:SubParagraphGroupElementBase"><apiName>SubParagraphGroupElementBase</apiName><shortdesc> 
	 The SubParagraphGroupElementBase class groups FlowLeafElements together.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.elements:FlowGroupElement</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 The SubParagraphGroupElementBase class groups FlowLeafElements together. A SubParagraphGroupElementBase is a child of a 
	 ParagraphElement object and it can contain one or more FlowLeafElement objects as children.
	 
	 </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="flashx.textLayout.elements:IConfiguration"><apiName>IConfiguration</apiName><shortdesc> Read-only interface to a configuration object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc> Read-only interface to a configuration object.  Used by TextFlow to guarantee it has an unchangeable 
	 configuration once its constructed.
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:cursorFunction:get"><apiName>cursorFunction</apiName><shortdesc> Specifies the callback used for custom cursor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Function"/></apiValueDef><apiDesc> Specifies the callback used for custom cursor.
		 The callback takes a <codeph>String</codeph> object, string is cursor name and returns the value to
		 be used in MouseCursor.cursor.
		 
		 This callback provides the user to customize the cursor
		 
		 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:defaultLinkActiveFormat:get"><apiName>defaultLinkActiveFormat</apiName><shortdesc> 
		Specifies the active character format attributes that initially apply for all links (LinkElement objects) in the text 
		flow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		Specifies the active character format attributes that initially apply for all links (LinkElement objects) in the text 
		flow. These are defaults for new LinkElement objects that don't specify values for these attributes. 
		
		<p>Default is <codeph>null</codeph>.</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/linkActiveFormat"><linktext>FlowElement.linkActiveFormat</linktext></link><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>ITextLayoutFormat</linktext></link><link href="flashx.textLayout.elements.xml#LinkElement"><linktext>LinkElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:defaultLinkHoverFormat:get"><apiName>defaultLinkHoverFormat</apiName><shortdesc> 
		Specifies the initial character format attributes that apply to a link (LinkElement) in the text flow when
		the cursor hovers over it.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		Specifies the initial character format attributes that apply to a link (LinkElement) in the text flow when
		the cursor hovers over it. These are defaults for new LinkElement objects that don't specify values
		for these attributes.
		
		<p>Default is <codeph>null</codeph>.</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/linkHoverFormat"><linktext>FlowElement.linkHoverFormat</linktext></link><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>ITextLayoutFormat</linktext></link><link href="flashx.textLayout.elements.xml#LinkElement"><linktext>LinkElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:defaultLinkNormalFormat:get"><apiName>defaultLinkNormalFormat</apiName><shortdesc> 
		Specifies the initial link attributes for all LinkElement objects in the text flow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		Specifies the initial link attributes for all LinkElement objects in the text flow. These are default
		values for new LinkElement objects that don't specify values for these attributes.
		
		The default normal format displays the link in blue with underlining.
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/linkNormalFormat"><linktext>FlowElement.linkNormalFormat</linktext></link><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>ITextLayoutFormat</linktext></link><link href="flashx.textLayout.elements.xml#LinkElement"><linktext>LinkElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:defaultListMarkerFormat:get"><apiName>defaultListMarkerFormat</apiName><shortdesc> 
		 Specifies the active character format attributes that initially apply for all ListItems in the text 
		 flow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.formats:IListMarkerFormat</apiValueClassifier></apiValueDef><apiDesc> 
		 Specifies the active character format attributes that initially apply for all ListItems in the text 
		 flow. These are defaults for new ListItemElements objects that don't specify values for these attributes. 
		 
		 <p>Default is <codeph>null</codeph>.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/linkActiveFormat"><linktext>FlowElement.linkActiveFormat</linktext></link><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>ITextLayoutFormat</linktext></link><link href="flashx.textLayout.elements.xml#LinkElement"><linktext>LinkElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:enableAccessibility:get"><apiName>enableAccessibility</apiName><shortdesc> 
		Specifies whether accessibility support is turned on or not.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc> 
		Specifies whether accessibility support is turned on or not.  If <codeph>true</codeph>, screen readers can read the TextFlow contents.
		
		<p>Default value is <codeph>false</codeph>.</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:flowComposerClass:get"><apiName>flowComposerClass</apiName><shortdesc> Specifies the type of flow composer to attach to a new TextFlow object by default.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc> Specifies the type of flow composer to attach to a new TextFlow object by default. Default value is StandardFlowComposer.
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#StandardFlowComposer"><linktext>StandardFlowComposer</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:focusedSelectionFormat:get"><apiName>focusedSelectionFormat</apiName><shortdesc> 
		The initial selection format (SelectionFormat) for a text flow (TextFlow) when its window has focus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.edit:SelectionFormat</apiValueClassifier></apiValueDef><apiDesc> 
		The initial selection format (SelectionFormat) for a text flow (TextFlow) when its window has focus. 
		Text Layout Framework uses <codeph>focusedSelectionFormat</codeph> to draw the selection when the window is active and one of 
		the containers in the TextFlow has focus. You can override this format using 
		<codeph>SelectionManager.focusedSelectionFormat</codeph>, if desired.
		
		<p>The SelectionFormat class specifies the default values, which invert the color of the text and its background.</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.edit.xml#SelectionFormat"><linktext>SelectionFormat</linktext></link><link href="flashx.textLayout.edit.xml#SelectionManager/focusedSelectionFormat"><linktext>SelectionManager.focusedSelectionFormat</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:inactiveSelectionFormat:get"><apiName>inactiveSelectionFormat</apiName><shortdesc> 
		The initial selection format (SelectionFormat) for a text flow (TextFlow) when its window is inactive.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.edit:SelectionFormat</apiValueClassifier></apiValueDef><apiDesc> 
		The initial selection format (SelectionFormat) for a text flow (TextFlow) when its window is inactive. Text Layout Framework uses 
		<codeph>inactiveSelectionFormat</codeph> for drawing the selection when the window is inactive. You can override 
		this format using <codeph>SelectionManager.inactiveSelectionFormat</codeph>, if desired.
		
		<p>If you do not override <codeph>unfocusedSelectionFormat</codeph> the SelectionFormat values used are:</p> 
		<ul>
		  <li><codeph>color = 0xffffff</codeph> (white)</li>
		  <li><codeph>alpha = 0</codeph></li>
		  <li><codeph>blendMode = flash.display.BlendMode.DIFFERENCE</codeph></li>
		</ul>
		<p>The result is no selection is displayed.</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.edit.xml#SelectionFormat"><linktext>SelectionFormat</linktext></link><link href="flashx.textLayout.edit.xml#SelectionManager/inactiveSelectionFormat"><linktext>SelectionManager.inactiveSelectionFormat</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:inlineGraphicResolverFunction:get"><apiName>inlineGraphicResolverFunction</apiName><shortdesc> Specifies the callback used for resolving an inline graphic element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Function"/></apiValueDef><apiDesc> Specifies the callback used for resolving an inline graphic element.
		The callback takes a <codeph>flashx.textLayout.elements.InlineGraphicElement</codeph> object and returns
		the value to be used as the element's <codeph>flashx.textLayout.elements.InlineGraphicElement#source</codeph>.
		
		This callback provides the mechanism to delay providing an inline graphic element's source until just before it is composed.
		<p><b>Note:</b> this callback will be invoked only if a 
		placeholder source of String type is already set. Moreover, it may be invoked
		multiple times. </p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElement"><linktext>InlineGraphicElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:manageEnterKey:get"><apiName>manageEnterKey</apiName><shortdesc> 
		Specifies whether the Enter / Return key is entered as text by Text Layout Framework, to split a paragraph for example,
		or the client code handles it.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc> 
		Specifies whether the Enter / Return key is entered as text by Text Layout Framework, to split a paragraph for example,
		or the client code handles it. The client code might handle it by committing a form that has a default button 
		for that purpose, for example. 
		
		<p>Default value is <codeph>true</codeph>.</p>
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:manageTabKey:get"><apiName>manageTabKey</apiName><shortdesc> 
		Specifies whether the TAB key is entered as text by Text Layout Framework, or Flash Player or AIR handles it and 
		turns it into a tabbed panel event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc> 
		Specifies whether the TAB key is entered as text by Text Layout Framework, or Flash Player or AIR handles it and 
		turns it into a tabbed panel event. 
		
		<p>Default value is <codeph>false</codeph>.</p>
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:overflowPolicy:get"><apiName>overflowPolicy</apiName><shortdesc> 
		Policy used for deciding whether the last line of a container fits in the container, or whether it overflows.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc> 
		Policy used for deciding whether the last line of a container fits in the container, or whether it overflows.
		Use the constants of the OverflowPolicy class to set this property.
		
		<p>Default value is OverflowPolicy.FIT_DESCENDERS, which fits the line in the composition area if the area
		from the top to the baseline fits.</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#OverflowPolicy"><linktext>OverflowPolicy</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:releaseLineCreationData:get"><apiName>releaseLineCreationData</apiName><shortdesc> Requests that the process of composing text release line creation data after composing each paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc> Requests that the process of composing text release line creation data after composing each paragraph.  
		This request saves memory but slows down the composing process.
		
		<p>Default value is <codeph>false</codeph>.</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#StandardFlowComposer"><linktext>StandardFlowComposer</linktext></link><link href="" invalidHref="flash.text.engine.xml#TextBlock/releaseLineCreationData()"><linktext>TextBlock.releaseLineCreationData()</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:scrollDragDelay:get"><apiName>scrollDragDelay</apiName><shortdesc> 
		Specifies a timed delay between one scroll and the next to prevent scrolling from going 
		too fast.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> 
		Specifies a timed delay between one scroll and the next to prevent scrolling from going 
		too fast. This value specifies what the delay is in milliseconds. The default value is 35.
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:scrollDragPixels:get"><apiName>scrollDragPixels</apiName><shortdesc> Specifies the default number of pixels to scroll when the user initiates auto scrolling by dragging 
		the selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> Specifies the default number of pixels to scroll when the user initiates auto scrolling by dragging 
		the selection. Default value is 20.
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:scrollMouseWheelMultiplier:get"><apiName>scrollMouseWheelMultiplier</apiName><shortdesc> Specifies the default number of pixels to scroll for Mouse wheel events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> Specifies the default number of pixels to scroll for Mouse wheel events. Default value is 20.
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:scrollPagePercentage:get"><apiName>scrollPagePercentage</apiName><shortdesc>
		Specifies the default percentage of the text flow to scroll for page scrolls.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		Specifies the default percentage of the text flow to scroll for page scrolls. Default value is
		7.0 / 8.0, or .875.
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:textFlowInitialFormat:get"><apiName>textFlowInitialFormat</apiName><shortdesc> 
		Specifies the initial format TextLayoutFormat configuration for a text flow (TextFlow object).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		Specifies the initial format TextLayoutFormat configuration for a text flow (TextFlow object).
		
		<p>Default is <codeph>null</codeph>.</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>ITextLayoutFormat</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:unfocusedSelectionFormat:get"><apiName>unfocusedSelectionFormat</apiName><shortdesc> 
		The initial selection format that Text Layout Framework uses to draw the selection when the window is active but none of the containers
		in the TextFlow have focus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.edit:SelectionFormat</apiValueClassifier></apiValueDef><apiDesc> 
		The initial selection format that Text Layout Framework uses to draw the selection when the window is active but none of the containers
		in the TextFlow have focus. You can override this format using <codeph>SelectionManager.unfocusedSelectionFormat</codeph>, if desired.
		
		<p>If you do not override <codeph>unfocusedSelectionFormat</codeph> the SelectionFormat values used are:</p>
		
		<ul>
		  <li><codeph>color = 0xffffff</codeph> (white)</li>
		  <li><codeph>alpha = 0</codeph></li>
		  <li><codeph>blendMode = flash.display.BlendMode.DIFFERENCE</codeph></li>
		</ul>
		<p>The result is no selection is displayed.</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.edit.xml#SelectionFormat"><linktext>SelectionFormat</linktext></link><link href="flashx.textLayout.edit.xml#SelectionManager/unfocusedSelectionFormat"><linktext>SelectionManager.unfocusedSelectionFormat</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:ContainerFormattedElement"><apiName>ContainerFormattedElement</apiName><shortdesc> 
	ContainerFormattedElement is the root class for all container-level block elements, such as DivElement
	and TextFlow objects.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.elements:ParagraphFormattedElement</apiBaseClassifier></apiClassifierDef><apiDesc> 
	ContainerFormattedElement is the root class for all container-level block elements, such as DivElement
	and TextFlow objects. Container-level block elements are grouping elements for other FlowElement objects.
	
	</apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="flashx.textLayout.elements:InlineGraphicElementStatus"><apiName>InlineGraphicElementStatus</apiName><shortdesc> The InlineGraphicElementStatus class defines a set of constants for checking the value of
     InlineGraphicElement.status.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> The InlineGraphicElementStatus class defines a set of constants for checking the value of
     <codeph>InlineGraphicElement.status</codeph>.
     
     </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.elements:InlineGraphicElementStatus:ERROR"><apiName>ERROR</apiName><shortdesc> An error occurred during loading of a referenced graphic.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>error</apiData><apiType value="String"/></apiValueDef><apiDesc> An error occurred during loading of a referenced graphic. 
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:InlineGraphicElementStatus:LOADING"><apiName>LOADING</apiName><shortdesc> Load has been initiated (but not completed) on a graphic element that is a URL.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>loading</apiData><apiType value="String"/></apiValueDef><apiDesc> Load has been initiated (but not completed) on a graphic element that is a URL.  
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:InlineGraphicElementStatus:LOAD_PENDING"><apiName>LOAD_PENDING</apiName><shortdesc> Graphic element is an URL that has not been loaded.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>loadPending</apiData><apiType value="String"/></apiValueDef><apiDesc> Graphic element is an URL that has not been loaded.  
    	 
    	 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:InlineGraphicElementStatus:READY"><apiName>READY</apiName><shortdesc> Graphic is completely loaded and properly sized.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ready</apiData><apiType value="String"/></apiValueDef><apiDesc> Graphic is completely loaded and properly sized. 
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:InlineGraphicElementStatus:SIZE_PENDING"><apiName>SIZE_PENDING</apiName><shortdesc> 
         Graphic element with auto or percentage width/height has completed loading but has not been recomposed.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>sizePending</apiData><apiType value="String"/></apiValueDef><apiDesc> 
         Graphic element with auto or percentage width/height has completed loading but has not been recomposed.  At the next 
         recompose the actual size of the graphic element is calculated. 
         
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:ParagraphElement"><apiName>ParagraphElement</apiName><shortdesc> 
	 The ParagraphElement class represents a paragraph in the text flow hierarchy.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flashx.textLayout.elements:ParagraphFormattedElement</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 The ParagraphElement class represents a paragraph in the text flow hierarchy. Its parent
	 is a ParagraphFormattedElement, and its children can include spans (SpanElement), images 
	 (inLineGraphicElement), links (LinkElement) and TCY (Tatechuuyoko - ta-tae-chu-yo-ko) elements (TCYElement). The 
	 paragraph text is stored in one or more SpanElement objects, which define ranges of text that share the same attributes. 
	 A TCYElement object defines a small run of Japanese text that runs perpendicular to the line, as in a horizontal run of text in a 
	 vertical line. A TCYElement can also contain multiple spans.
	 
	 </apiDesc><example/><example/></apiClassifierDetail><apiValue id="flashx.textLayout.elements:ParagraphElement:tlf_internal:_interactiveChildrenCount:get"><apiName>_interactiveChildrenCount</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="tlf_internal"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:ParagraphFormattedElement"><apiName>ParagraphFormattedElement</apiName><shortdesc> The ParagraphFormattedElement class is an abstract base class for FlowElement classes that have paragraph properties.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.elements:FlowGroupElement</apiBaseClassifier></apiClassifierDef><apiDesc> The ParagraphFormattedElement class is an abstract base class for FlowElement classes that have paragraph properties.
	
	<p>You cannot create a ParagraphFormattedElement object directly. Invoking <codeph>new ParagraphFormattedElement()</codeph> 
	throws an error exception.</p> 
	
	</apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="flashx.textLayout.elements:ListItemElement"><apiName>ListItemElement</apiName><shortdesc> 
	  ListItemElement is an item in a list.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flashx.textLayout.elements:ContainerFormattedElement</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 <p> ListItemElement is an item in a list. It most commonly contains one or more ParagraphElement objects, but could
	 also have children of type DivElement or ListElement. A ListItemElement always appears within a ListElement.</p>
	 
	 <p>A ListItemElement has automatically generated content that appears before the regular content of the list. This is called
	 the <i>marker</i>, and it is what visually distinguishes the list item. The listStyleType property governs how the marker
	 is generated and allows the user to control whether the list item is marked with a bullet, a number, or alphabetically.
	 The listStylePosition governs where the marker appears relative to the list item; specifically it may appear outside, in the 
	 margin of the list, or inside, beside the list item itself. The ListMarkerFormat defines the TextLayoutFormat of the marker
	 (by default this will be the same as the list item), as well as an optional suffix that goes at the end of the marker. For 
	 instance, for a numbered list, it is common to have a "." as a suffix that appears after the number. The ListMarkerFormat also
	 allows specification of text that goes at the start of the marker, and for numbered lists allows control over the numbering.</p>
	 
	 </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="flashx.textLayout.elements:LinkElement"><apiName>LinkElement</apiName><shortdesc> The LinkElement class defines a link to a URI (Universal Resource Identifier), which is executed when the user clicks it.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier>flashx.textLayout.elements:SubParagraphGroupElementBase</apiBaseClassifier></apiClassifierDef><apiDesc> The LinkElement class defines a link to a URI (Universal Resource Identifier), which is executed when the user clicks it.
	 The LinkElement class is a subclass of the SubParagraphGroupElementBase class and it can contain
	 one or more FlowElement objects, such as a SpanElement object that stores the link text. An empty
	 LinkElement, which does not contain a FlowElement object, is ignored. 
	 
	 <p>Normally when clicked the LinkElement will call the <codeph>flash.net.navigateToURL()</codeph> method.  A special URI scheme <codeph>event:</codeph>
	 is also supported.  This scheme will generate a TextFlow event that the user may listen to in order to execute AS3 code.  An example is included below.</p>
	 
	 <p>If you specify a target, it must be one of the following values:
	 <adobetable class="innertable">
	 
	 
	 
	 
	 
	 <tgroup cols="2"><thead><row><entry>Target value</entry><entry>description</entry></row></thead><tbody><row>
	   <entry>_self</entry>
	   <entry>Replaces the current HTML page. If it is in a frame or frameset, it will load within that frame. If it is
	       the full browser, it opens to replace the page from which it came.</entry>
	 </row><row>
	   <entry>_blank</entry>
	   <entry>Opens a new browser name with no name.</entry>
	 </row><row>
	   <entry>_parent</entry>
	   <entry>Replaces the HTML page from which it came.</entry>
	 </row><row>
	   <entry>_top</entry>
	   <entry>Loads in the current browser, replacing anything within it, such as a frameset.</entry>
	 </row></tbody></tgroup></adobetable>
	 </p>
	 
	 </apiDesc><example/><example/></apiClassifierDetail><apiValue id="flashx.textLayout.elements:LinkElement:href:get"><apiName>href</apiName><shortdesc>
		 The Uniform Resource Identifier (URI) associated with the LinkElement object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
		 The Uniform Resource Identifier (URI) associated with the LinkElement object.  The URI can be any URI 
		 supported by the <codeph>flash.net.navigateToURL()</codeph> method. This property maps
		 to the <codeph>request</codeph> parameter for that method.  
		 
		 The URI may also be of the form <codeph>event:eventType</codeph>.  When clicked the TextFlow will generate an event of type <codeph>eventType</codeph>.
		 
		 </apiDesc></apiValueDetail><related-links><link href="../../../flash/net/package.html#navigateToURL()"><linktext>flash.net.navigateToURL()</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:LinkElement:linkState:get"><apiName>linkState</apiName><shortdesc>
		 The current state of the link.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
		 The current state of the link.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#LinkState"><linktext>LinkState</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:LinkElement:target:get"><apiName>target</apiName><shortdesc>
		 The Target value associated with the LinkElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
		 The Target value associated with the LinkElement. Possible values are "_self", "_blank",
		 "_parent", and "_top". This value maps to the <codeph>window</codeph> parameter of the
		 <codeph>flash.net.navigateToURL()</codeph> method.
		 
		 </apiDesc></apiValueDetail><related-links><link href="../../../flash/net/package.html#navigateToURL()"><linktext>flash.net.navigateToURL()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:TCYElement"><apiName>TCYElement</apiName><shortdesc> 
	 The TCYElement (Tatechuuyoko - ta-tae-chu-yo-ko) class is a subclass of SubParagraphGroupElementBase that causes
	 text to draw horizontally within a vertical line.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flashx.textLayout.elements:SubParagraphGroupElementBase</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 The TCYElement (Tatechuuyoko - ta-tae-chu-yo-ko) class is a subclass of SubParagraphGroupElementBase that causes
	 text to draw horizontally within a vertical line.  Traditionally, it is used to make small
	 blocks of non-Japanese text or numbers, such as dates, more readable.  TCY can be applied to 
	 horizontal text, but has no effect on drawing style unless and until it is turned vertically.
	 
	 TCY blocks which contain no text will be removed from the text flow during the normalization process.
	 <p>
	 In the example below, the image on the right shows TCY applied to the number 57, while the
	 image on the left has no TCY formatting.</p>
	 <p><adobeimage alt="TCYElement" border="0" href="../../../images/textLayout_TCYElement.png"/>
	 </p>
	 
	 </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="flashx.textLayout.elements:SubParagraphGroupElement"><apiName>SubParagraphGroupElement</apiName><shortdesc> 
     The SubParagraphGroupElement is a grouping element for FlowLeafElements and other classes that extend SubParagraphGroupElementBase.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flashx.textLayout.elements:SubParagraphGroupElementBase</apiBaseClassifier></apiClassifierDef><apiDesc> 
     The SubParagraphGroupElement is a grouping element for FlowLeafElements and other classes that extend SubParagraphGroupElementBase.
	 
     </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="flashx.textLayout.elements:IFormatResolver"><apiName>IFormatResolver</apiName><shortdesc> Interface to a format resolver.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc> Interface to a format resolver. An implementation allows you to attach a styling mechanism of your choosing, such as
	  Flex CSS styling and named styles, to a TextFlow.
	 
	 </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="flashx.textLayout.elements:TextFlow"><apiName>TextFlow</apiName><shortdesc>
	 The TextFlow class is responsible for managing all the text content of a story.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier>flashx.textLayout.elements:ContainerFormattedElement</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The TextFlow class is responsible for managing all the text content of a story. In TextLayout, text is stored in a 
	 hierarchical tree of elements. TextFlow is the root object of the element tree. All elements on the tree
	 derive from the base class, FlowElement. 
	 
	 <p>A TextFlow object can have ParagraphElement and DivElement objects as children. A div (DivElement object)
	 represents a group of paragraphs (ParagraphElement objects). A paragraph can have SpanElement, InlineGraphicElement, 
	 LinkElement, and TCYElement objects as children.</p>
	 
	 <p>A span (SpanElement) is a range of text in a paragraph that has the same attributes. An image 
	 (InlineGraphicElement) represents an arbitrary graphic that appears as a single character in a line of text. A 
	 LinkElement represents a hyperlink, or HTML <codeph>a</codeph> tag, and it can contain multiple spans. A TCYElement object
	 is used in Japanese text when there is a small run of text that appears perpendicular to the line, as in a horizontal
	 run within a vertical line. A TCYElement also can contain multiple spans.</p>
	 
	 <p>TextFlow also derives from the ContainerFormattedElement class, which is the root class for all container-level block 
	 elements.</p>
 	 <p>The following illustration shows the relationship of other elements, such as spans and paragraphs, to the TextFlow 
 	 object.</p>
 	 <p><adobeimage alt="example TextFlow hierarchy" href="../../../images/textLayout_textFlowHierarchy.gif"/></p>
 	 
 	 <p>Each TextFlow object has a corresponding Configuration object that allows you to specify initial character and 
 	 paragraph formats and the initial container format. It also allows you to specify attributes for selection, links, 
 	 focus, and scrolling. When you supply a Configuration object as parameter to the <codeph>TextFlow()</codeph>
 	 constructor, it creates a read-only snapshot that you can access through the <codeph>TextFlow.configuration</codeph>
 	 property. After creation, you can't change the TextFlow's configuration. If you do not specify a Configuration, you 
 	 can access the default configuration through the <codeph>TextFlow.defaultConfiguration</codeph> property.</p>
	 
	 </apiDesc><example/></apiClassifierDetail><apiValue id="flashx.textLayout.elements:TextFlow:defaultConfiguration"><apiName>defaultConfiguration</apiName><shortdesc> Default configuration for all new TextFlow objects if the configuration is not specified.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiValueClassifier>flashx.textLayout.elements:Configuration</apiValueClassifier></apiValueDef><apiDesc> Default configuration for all new TextFlow objects if the configuration is not specified. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#Configuration"><linktext>Configuration</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:TextFlow:configuration:get"><apiName>configuration</apiName><shortdesc> 
		The Configuration object for this TextFlow object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:IConfiguration</apiValueClassifier></apiValueDef><apiDesc> 
		The Configuration object for this TextFlow object. The Configuration object specifies the initial character 
		and paragraph formats, the initial container format, and attributes for selection highlighting, 
		links, focus, and scrolling.
		
		<p>If you do not specify a Configuration object, Text Layout Framework uses a default Configuration object, which
		is referenced by the <codeph>defaultConfiguration</codeph> property.</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#Configuration"><linktext>Configuration</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow/defaultConfiguration"><linktext>defaultConfiguration</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:TextFlow:flowComposer:get"><apiName>flowComposer</apiName><shortdesc> Manages the containers for this element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.compose:IFlowComposer</apiValueClassifier></apiValueDef><apiDesc> Manages the containers for this element.
		 
		 <p>The TextLines that are created from the element appear as children of the container.
		 The flowComposer manages the containers, and as the text is edited it adds lines to and removes lines
		 from the containers. The flowComposer also keeps track of some critical attributes, such as the
		 width and height to compose to, whether scrolling is on, and so on.</p>
		 
		 <p>The container and <codeph>flowComposer</codeph> are closely related. If you reset <codeph>flowComposer</codeph>, 
		 the container is reset to the new flowComposer's container. Likewise if the container is reset, 
		 <codeph>flowComposer</codeph> is reset to the container's new flowComposer.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#IFlowComposer"><linktext>FlowComposer</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:TextFlow:formatResolver:get"><apiName>formatResolver</apiName><shortdesc> A callback function for resolving element styles.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.elements:IFormatResolver</apiValueClassifier></apiValueDef><apiDesc> A callback function for resolving element styles. You can use this to provide styling using CSS or 
		 named styles, for example. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#IFormatResolver"><linktext>IFormatResolver</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:TextFlow:generation:get"><apiName>generation</apiName><shortdesc> 
		The generation number for this TextFlow object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="uint"/></apiValueDef><apiDesc> 
		The generation number for this TextFlow object. The undo and redo operations use the generation number to validate that 
		it's legal to undo or redo an operation. The generation numbers must match. 
		
		<p>Each model change increments <codeph>generation</codeph> so if the generation number changes, you know the 
		TextFlow model has changed.</p>
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:TextFlow:hostFormat:get"><apiName>hostFormat</apiName><shortdesc> The TextLayoutFormat object for this TextFlow object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> The TextLayoutFormat object for this TextFlow object. This enables several optimizations for reusing 
		host formats. For example;
		
		<codeblock>
		textFlowA.hostFormat = textFlowB.hostFormat
		</codeblock>
		
		You must set format values before assigning the TextLayoutFormat object to <codeph>hostFormat</codeph>.
		For example, the following lines do <i>not</i> set the font size to 24 because
		the font size is set <i>after</i> the TextLayoutFormat object has been assigned to <codeph>hostFormat</codeph>.
		
		<codeblock>
		format = new TextLayoutFormat()
		textFlow.hostFormat = format
		format.fontSize = 24;
		</codeblock>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>ITextLayoutFormat</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:TextFlow:interactionManager:get"><apiName>interactionManager</apiName><shortdesc>
		 The InteractionManager associated with this TextFlow object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.edit:ISelectionManager</apiValueClassifier></apiValueDef><apiDesc>
		 The InteractionManager associated with this TextFlow object.
		 <p>Controls all selection and editing on the text. If the TextFlow is not selectable, 
		 the interactionManager is null. To make the TextFlow editable, assign a interactionManager
		 that is both an ISelectionManager and an IEditManager. To make a TextFlow that is read-only
		 and allows selection, assign a interactionManager that is an ISelectionManager only. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.edit.xml#ISelectionManager"><linktext>ISelectionManager</linktext></link><link href="flashx.textLayout.edit.xml#IEditManager"><linktext>IEditManager</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:OverflowPolicy"><apiName>OverflowPolicy</apiName><shortdesc>
	  The OverflowPolicy class defines a set of constants for the overflowPolicy property
	  of the IConfiguration class.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  The OverflowPolicy class defines a set of constants for the <codeph>overflowPolicy</codeph> property
	  of the IConfiguration class. This defines how the composer will treat lines at the end of the composition area.
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.elements:OverflowPolicy:FIT_ANY"><apiName>FIT_ANY</apiName><shortdesc> 
	 Fit the line in the composition area if any part of the line fits.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>fitAny</apiData><apiType value="String"/></apiValueDef><apiDesc> 
	 Fit the line in the composition area if any part of the line fits.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:OverflowPolicy:FIT_DESCENDERS"><apiName>FIT_DESCENDERS</apiName><shortdesc> 
	 Fit the line in the composition area if the area from the top to the baseline fits.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>fitDescenders</apiData><apiType value="String"/></apiValueDef><apiDesc> 
	 Fit the line in the composition area if the area from the top to the baseline fits.
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:BreakElement"><apiName>BreakElement</apiName><shortdesc> 
	The BreakElement class defines a line break, which provides for creating a line break in the text without 
	creating a new paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flashx.textLayout.elements:SpecialCharacterElement</apiBaseClassifier></apiClassifierDef><apiDesc> 
	The BreakElement class defines a line break, which provides for creating a line break in the text without 
	creating a new paragraph. It inserts a U+2028 character in the text of the paragraph.
	
	<p><b>Note</b>: This class exists primarily to support break  tags in MXML markup. To create line breaks, 
	you can add newline characters (\n) directly into the text like this:</p>
	
	<codeblock rev="3.0">
	spanElement1.text += '\n';
	</codeblock>
	
	In markup, either FXG, TEXT_LAYOUT_FORMAT or MXML, you can simply insert a  where you want the break.
	
	</apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="flashx.textLayout.elements:GlobalSettings"><apiName>GlobalSettings</apiName><shortdesc> Configuration that applies to all TextFlow objects.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> Configuration that applies to all TextFlow objects.
     </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.elements:GlobalSettings:enableSearch:get"><apiName>enableSearch</apiName><shortdesc> Controls whether the text will be visible to a search engine indexer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc> Controls whether the text will be visible to a search engine indexer. Defaults to <codeph>true</codeph>.
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:GlobalSettings:fontMapperFunction:get"><apiName>fontMapperFunction</apiName><shortdesc> 
        Specifies the callback used for font mapping.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc> 
        Specifies the callback used for font mapping.
        The callback takes a <codeph>flash.text.engine.FontDescription</codeph> object and updates it as needed.
        
        After setting a new font mapping callback, or changing the behavior of the exisiting font mapping callback, 
        the client must explicitly call <codeph>flashx.textLayout.elements.TextFlow.invalidateAllFormats</codeph> for each impacted text flow.
        This ensures that whenever a leaf element in the text flow is next recomposed, the FontDescription applied to it is recalculated, and the the callback is invoked. 
        
        </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontDescription.xml"><linktext>FontDescription</linktext></link><link href="" invalidHref="TextFlow.invalidateAllFormats.xml"><linktext>invalidateAllFormats</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:GlobalSettings:resolveFontLookupFunction:get"><apiName>resolveFontLookupFunction</apiName><shortdesc> 
         Specifies the callback used for changing the FontLookup based on swfcontext.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc> 
         Specifies the callback used for changing the FontLookup based on swfcontext.  The function will be called each time an ElementFormat is computed.
         It gives the client the opportunity to modify the FontLookup setting.  The function is called with two parameters an ISWFContext and an ITextLayoutFormat.
         It must return a valid FontLookup.
         
         </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#ISWFContext"><linktext>flashx.textLayout.compose.ISWFContext</linktext></link><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>flashx.textLayout.formats.ITextLayoutFormat</linktext></link><link href="" invalidHref="flash.text.engine.ElementFormat.xml"><linktext>flash.text.engine.ElementFormat</linktext></link><link href="" invalidHref="flash.text.engine.FontLookup.xml"><linktext>flash.text.engine.FontLookup</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:GlobalSettings:resourceStringFunction:get"><apiName>resourceStringFunction</apiName><shortdesc> Function that takes two parameters, a resource id and an optional array of parameters to substitute into the string.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc> Function that takes two parameters, a resource id and an optional array of parameters to substitute into the string.
         The string is of form "Content {0} more content {1}".  The parameters are read from the optional array and substituted for the bracketed substrings.
         TLF provides a default implementation with
         default strings.  Clients may replace this function with their own implementation for localization.
         
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:InlineGraphicElement"><apiName>InlineGraphicElement</apiName><shortdesc> The InlineGraphicElement class handles graphic objects that display inline in the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flashx.textLayout.elements:FlowLeafElement</apiBaseClassifier></apiClassifierDef><apiDesc> The InlineGraphicElement class handles graphic objects that display inline in the text. 
     
     <p>You can embed a graphic or any DisplayObject or specify a URl for the location of the graphic. 
     The <codeph>height</codeph> and <codeph>width</codeph> properties of InlineGraphicElement control the actual size 
     of the graphic to display.  These values also control how much space to allocate
     for the graphic in the TextLine object that contains the graphic.
     The <codeph>height</codeph> and <codeph>width</codeph> properties each can be one of:</p>
     <ol>
     <li>A number of pixels</li>
     <li>A percent of the measured size of the image</li>
     <li>The constant, "auto", which computes the size (Default value)</li>
     </ol>
     There are three properties, or accessors, pertaining to the width and height of a graphic:
     <ul>
     <li>The <codeph>width</codeph> and <codeph>height</codeph> properties</li>
     <li>The <codeph>measuredWidth</codeph> and <codeph>measuredHeight</codeph> properties, which are the width or height of the graphic at load time</li>
     <li>The <codeph>actualWidth</codeph> and <codeph>actualHeight</codeph> properties, which are the actual display and compose width and height of the graphic as computed from <codeph>width</codeph> or <codeph>height</codeph> and <codeph>measuredWidth</codeph> or <codeph>measuredHeight</codeph></li>
     </ul>
     <p>The values of the <codeph>actualWidth</codeph> and <codeph>actualHeight</codeph> properties are always zero until the graphic 
     is loaded.</p>
     
     <p>If <codeph>source</codeph> is specified as a URI, the graphic is loaded asynchronously. If it's a DisplayObject, TextLayout uses the <codeph>width</codeph> and 
     <codeph>height</codeph> at the time the graphic is set into the InlineGraphicElement object as <codeph>measuredHeight</codeph> and <codeph>measuredWidth</codeph>; 
     its width and height are read immediately.</p>
     <p><b>Notes</b>: For graphics that are loaded asynchronously the user must listen for a 
     StatusChangeEvent.INLINE_GRAPHIC_STATUS_CHANGE event on the TextFlow and call <codeph>IFlowComposer.updateAllControllers()</codeph> to have the 
     graphic appear. The value of <codeph>measuredWidth</codeph> and <codeph>measuredHeight</codeph> for graphics that are in the 
     process of loading is zero.</p>
     
     <p>Some inline graphics are animations or videos that possibly have audio. They begin to run the first time they are composed after they finish loading.  
     They don't stop running until the flowComposer on the TextFlow is set to null.  At that time they are stopped and unloaded.</p>
     
     The following restrictions apply to InLineGraphicElement objects:
     <ol>
      <li>On export of TLFMarkup, source is converted to a string. If the graphic element is 
          a class, the Text Layout Framework can't export it properly</li>.
      <li>When doing a copy/paste operation of an InlineGraphicElement, if source can't be 
          used to create a new InLineGraphicElement, it won't be pasted.  For example if 
          source is a DisplayObject, or if the graphic is set directly, it can't be 
          duplicated.  Best results are obtained if the source is the class of an embedded graphic 
          though that doesn't export/import.</li>
      <li>InLineGraphicElement objects work in the factory (TextFlowTextLineFactory) only if 
          the source is a class or if you explicitly set the graphic to a loaded graphic. 
          InlineGraphic objects that require delayed loads generally do not show up.</li>
     </ol>
     </apiDesc><example/></apiClassifierDetail><apiValue id="flashx.textLayout.elements:InlineGraphicElement:actualHeight:get"><apiName>actualHeight</apiName><shortdesc> The actual height in effect.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> The actual height in effect. This is the display and compose height that's computed from the
        <codeph>height</codeph> and <codeph>measuredHeight</codeph> properties.
        
        <p>The values of the <codeph>actualHeight</codeph> property are computed according to the following table:</p>
        <adobetable class="innertable">
        
        
        
        
        <tgroup cols="2"><thead><row><entry>height property</entry><entry>actualHeight</entry></row></thead><tbody><row>
          <entry>auto</entry>
          <entry>measuredheight</entry>
        </row><row>
          <entry>h a Percent</entry>
          <entry>h percent of measuredheight</entry>
        </row><row>
          <entry>h a Number</entry>
          <entry>h</entry>
        </row></tbody></tgroup></adobetable>
        <p><b>Notes</b>: If the inline graphic is a DisplayObject, its width and height are read immmediately.
        If <codeph>measuredWidth</codeph> or <codeph>measuredHeight</codeph> are zero, then any auto calculations that would cause a divide by zero sets the result to zero.</p>
        
        </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElement/height"><linktext>height</linktext></link><link href="flashx.textLayout.elements.xml#InlineGraphicElement/measuredHeight"><linktext>measuredHeight</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:InlineGraphicElement:actualWidth:get"><apiName>actualWidth</apiName><shortdesc> The actual width in effect.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> The actual width in effect. This is the display and compose width that's computed from the
        <codeph>width</codeph> and <codeph>measuredWidth</codeph> properties.
        
        <p>The values of the <codeph>actualWidth</codeph>property are computed according to the 
        following table:</p>
        <adobetable class="innertable">
        
        
        
        
        <tgroup cols="2"><thead><row><entry>width property</entry><entry>actualWidth</entry></row></thead><tbody><row>
          <entry>auto</entry>
          <entry>measuredWidth</entry>
        </row><row>
          <entry>w a Percent</entry>
          <entry>w percent of measuredWidth</entry>
        </row><row>
          <entry>w a Number</entry>
          <entry>w</entry>
        </row></tbody></tgroup></adobetable>
        
        <p><b>Notes</b>: If the inline graphic is a DisplayObject, its width and height are read immediately.
        If <codeph>measuredWidth</codeph> or <codeph>measuredHeight</codeph> are zero, then any auto calculations that would cause a divide by zero sets the result to zero.</p>
        
        </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElement/measuredWidth"><linktext>measuredWidth</linktext></link><link href="flashx.textLayout.elements.xml#InlineGraphicElement/width"><linktext>width</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:InlineGraphicElement:float:get"><apiName>float</apiName><shortdesc> 
         Controls the placement of the graphic relative to the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
         
         </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc> 
         Controls the placement of the graphic relative to the text. It can be part of the line, or can be beside the line with the text 
         wrapped around it. 
         <p>Legal values are <codeph>flashx.textLayout.formats.Float.NONE</codeph>, <codeph>flashx.textLayout.formats.Float.LEFT</codeph>, 
         <codeph>flashx.textLayout.formats.Float.RIGHT</codeph>, <codeph>flashx.textLayout.formats.Float.START</codeph>, and <codeph>flashx.textLayout.formats.Float.END</codeph>.</p>
         <p>Default value is undefined indicating not set.</p>
         <p>If undefined will be treated as <codeph>Float.NONE</codeph>.</p>
         
         </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#Float"><linktext>flashx.textLayout.formats.Float</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:InlineGraphicElement:graphic:get"><apiName>graphic</apiName><shortdesc> The embedded graphic.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:DisplayObject"/></apiValueDef><apiDesc> The embedded graphic. 
        
        </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:InlineGraphicElement:height:get"><apiName>height</apiName><shortdesc> The height of the image.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
         
          </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc> The height of the image. May be 'auto', a number of pixels or a percent of the measured height. 
         
         <p>Legal values are flashx.textLayout.formats.FormatValue.AUTO and flashx.textLayout.formats.FormatValue.INHERIT.</p>
         <p>Legal values as a number are from 0 to 32000.</p>
         <p>Legal values as a percent are numbers from 0 to 1000000.</p>
         <p>Default value is undefined indicating not set.</p>
         <p>If undefined or "inherit" the InlineGraphicElement will use the default value of "auto".</p>
         
         </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElement/actualHeight"><linktext>actualHeight</linktext></link><link href="flashx.textLayout.elements.xml#InlineGraphicElement/measuredHeight"><linktext>measuredHeight</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:InlineGraphicElement:measuredHeight:get"><apiName>measuredHeight</apiName><shortdesc> The natural height of the graphic.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> The natural height of the graphic. This is the height of the graphic at load time.
        
        </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElement/actualHeight"><linktext>actualHeight</linktext></link><link href="flashx.textLayout.elements.xml#InlineGraphicElement/height"><linktext>height</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:InlineGraphicElement:measuredWidth:get"><apiName>measuredWidth</apiName><shortdesc> The natural width of the graphic.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> The natural width of the graphic. This is the width of the graphic at load time.
        
        </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElement/actualWidth"><linktext>actualWidth</linktext></link><link href="flashx.textLayout.elements.xml#InlineGraphicElement/width"><linktext>width</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:InlineGraphicElement:source:get"><apiName>source</apiName><shortdesc> Sets the source for the graphic.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc> Sets the source for the graphic. 
         
         The value can be either a String that is interpreted as a URI, a Class that's interpreted as the class of an 
         embeddded DisplayObject, a DisplayObject instance, or a URLRequest. Creates a DisplayObject and,
         if the InlineGraphicElement object is added into a ParagraphElement in a TextFlow object, causes it to appear
         inline in the text.
         
         </apiDesc><example/></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:InlineGraphicElement:status:get"><apiName>status</apiName><shortdesc> The current status of the image.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc> The current status of the image. On each status change the owning TextFlow sends a StatusChangeEvent.
         
         </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElementStatus"><linktext>flashx.textLayout.elements.InlineGraphicElementStatus</linktext></link><link href="flashx.textLayout.events.xml#StatusChangeEvent"><linktext>flashx.textLayout.events.StatusChangeEvent</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:InlineGraphicElement:width:get"><apiName>width</apiName><shortdesc> The width of the graphic.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
         
         </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc> The width of the graphic. The value can be 'auto', a number of pixels or a percent of the measured width of the image.
         
         <p>Legal values are flashx.textLayout.formats.FormatValue.AUTO and flashx.textLayout.formats.FormatValue.INHERIT.</p>
         <p>Legal values as a number are from 0 to 32000.</p>
         <p>Legal values as a percent are numbers from 0 to 1000000.</p>
         <p>Default value is undefined indicating not set.</p>
         <p>If undefined or "inherit" the InlineGraphicElement will use the default value of "auto".</p>
         
         </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElement/actualWidth"><linktext>actualWidth</linktext></link><link href="flashx.textLayout.elements.xml#InlineGraphicElement/measuredWidth"><linktext>measuredWidth</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:FlowLeafElement"><apiName>FlowLeafElement</apiName><shortdesc> Base class for FlowElements that appear at the lowest level of the flow hierarchy.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.elements:FlowElement</apiBaseClassifier></apiClassifierDef><apiDesc> Base class for FlowElements that appear at the lowest level of the flow hierarchy. FlowLeafElement objects have
	no children and include InlineGraphicElement objects and SpanElement objects.
	
	</apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.elements:FlowLeafElement:computedFormat:get"><apiName>computedFormat</apiName><shortdesc> 
		 The computed text format attributes that are in effect for this element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		 The computed text format attributes that are in effect for this element.
		 Takes into account the inheritance of attributes.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>flashx.textLayout.formats.ITextLayoutFormat</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowLeafElement:text:get"><apiName>text</apiName><shortdesc>
		 The text associated with the FlowLeafElement:
		 
		 The value for SpanElement subclass will be one character less than textLength if this is the last span in a ParagraphELement.
		 The value for BreakElement subclass is a U+2028
		 The value for TabElement subclass is a tab
		 The value for InlineGraphicElement subclass is U+FDEF
		 
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
		 The text associated with the FlowLeafElement:
		 <p><ul>
		 <li>The value for SpanElement subclass will be one character less than <codeph>textLength</codeph> if this is the last span in a ParagraphELement.</li>
		 <li>The value for BreakElement subclass is a U+2028</li>
		 <li>The value for TabElement subclass is a tab</li>
		 <li>The value for InlineGraphicElement subclass is U+FDEF</li>
		 </ul></p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#SpanElement/replaceText()"><linktext>flashx.textLayout.elements.SpanElement.replaceText()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:Configuration"><apiName>Configuration</apiName><shortdesc> 
	The Configuration class is a primary point of integration between the Text Layout Framework and an application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.elements:IConfiguration</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> 
	The Configuration class is a primary point of integration between the Text Layout Framework and an application. You can 
	include a Configuration object as a parameter to the <codeph>TextFlow()</codeph> constructor when you create a new TextFlow
	instance. It allows the application to initially control how the Text Layout Framework behaves.
	
	<p>The Configuration class allows you to specify initial, paragraph and container formats for the text flow 
	through the <codeph>textFlowInitialFormat</codeph> property. It also allows you to specify initial format attributes for links, selection,
	scrolling, and for handling the Tab and Enter keys.</p>
	
	</apiDesc><example/></apiClassifierDetail><apiValue id="flashx.textLayout.elements:Configuration:tlf_internal:hasTouchScreen"><apiName>hasTouchScreen</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="tlf_internal"/><apiStatic/><apiData>unknown</apiData><apiType value="Boolean"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:Configuration:cursorFunction:get"><apiName>cursorFunction</apiName><shortdesc> Specifies the callback used for custom cursor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc> Specifies the callback used for custom cursor.
		 The callback takes a <codeph>String</codeph> object, string is cursor name and returns the value to
		 be used in MouseCursor.cursor.
		 
		 This callback provides the user to customize the cursor
		 
		 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:Configuration:defaultLinkActiveFormat:get"><apiName>defaultLinkActiveFormat</apiName><shortdesc> 
		Specifies the active character format attributes that initially apply for all links (LinkElement objects) in the text 
		flow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		Specifies the active character format attributes that initially apply for all links (LinkElement objects) in the text 
		flow. These are defaults for new LinkElement objects that don't specify values for these attributes. 
		
		<p>Default is <codeph>null</codeph>.</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/linkActiveFormat"><linktext>FlowElement.linkActiveFormat</linktext></link><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>ITextLayoutFormat</linktext></link><link href="flashx.textLayout.elements.xml#LinkElement"><linktext>LinkElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:Configuration:defaultLinkHoverFormat:get"><apiName>defaultLinkHoverFormat</apiName><shortdesc> 
		Specifies the initial character format attributes that apply to a link (LinkElement) in the text flow when
		the cursor hovers over it.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		Specifies the initial character format attributes that apply to a link (LinkElement) in the text flow when
		the cursor hovers over it. These are defaults for new LinkElement objects that don't specify values
		for these attributes.
		
		<p>Default is <codeph>null</codeph>.</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/linkHoverFormat"><linktext>FlowElement.linkHoverFormat</linktext></link><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>ITextLayoutFormat</linktext></link><link href="flashx.textLayout.elements.xml#LinkElement"><linktext>LinkElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:Configuration:defaultLinkNormalFormat:get"><apiName>defaultLinkNormalFormat</apiName><shortdesc> 
		Specifies the initial link attributes for all LinkElement objects in the text flow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		Specifies the initial link attributes for all LinkElement objects in the text flow. These are default
		values for new LinkElement objects that don't specify values for these attributes.
		
		The default normal format displays the link in blue with underlining.
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/linkNormalFormat"><linktext>FlowElement.linkNormalFormat</linktext></link><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>ITextLayoutFormat</linktext></link><link href="flashx.textLayout.elements.xml#LinkElement"><linktext>LinkElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:Configuration:defaultListMarkerFormat:get"><apiName>defaultListMarkerFormat</apiName><shortdesc> 
		 Specifies the active character format attributes that initially apply for all ListItems in the text 
		 flow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:IListMarkerFormat</apiValueClassifier></apiValueDef><apiDesc> 
		 Specifies the active character format attributes that initially apply for all ListItems in the text 
		 flow. These are defaults for new ListItemElements objects that don't specify values for these attributes. 
		 
		 <p>Default is <codeph>null</codeph>.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/listMarkerFormat"><linktext>FlowElement.listMarkerFormat</linktext></link><link href="flashx.textLayout.formats.xml#IListMarkerFormat"><linktext>IListMarkerFormat</linktext></link><link href="flashx.textLayout.elements.xml#LinkElement"><linktext>LinkElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:Configuration:enableAccessibility:get"><apiName>enableAccessibility</apiName><shortdesc> 
		Specifies whether accessibility support is turned on or not.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc> 
		Specifies whether accessibility support is turned on or not.  If <codeph>true</codeph>, screen readers can read the TextFlow contents.
		
		<p>Default value is <codeph>false</codeph>.</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:Configuration:flowComposerClass:get"><apiName>flowComposerClass</apiName><shortdesc> Specifies the type of flow composer to attach to a new TextFlow object by default.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Class"/></apiValueDef><apiDesc> Specifies the type of flow composer to attach to a new TextFlow object by default. Default value is StandardFlowComposer.
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#StandardFlowComposer"><linktext>StandardFlowComposer</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:Configuration:focusedSelectionFormat:get"><apiName>focusedSelectionFormat</apiName><shortdesc> 
		The initial selection format (SelectionFormat) for a text flow (TextFlow) when its window has focus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.edit:SelectionFormat</apiValueClassifier></apiValueDef><apiDesc> 
		The initial selection format (SelectionFormat) for a text flow (TextFlow) when its window has focus. 
		Text Layout Framework uses <codeph>focusedSelectionFormat</codeph> to draw the selection when the window is active and one of 
		the containers in the TextFlow has focus. You can override this format using 
		<codeph>SelectionManager.focusedSelectionFormat</codeph>, if desired.
		
		<p>The SelectionFormat class specifies the default values, which invert the color of the text and its background.</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.edit.xml#SelectionFormat"><linktext>SelectionFormat</linktext></link><link href="flashx.textLayout.edit.xml#SelectionManager/focusedSelectionFormat"><linktext>SelectionManager.focusedSelectionFormat</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:Configuration:inactiveSelectionFormat:get"><apiName>inactiveSelectionFormat</apiName><shortdesc> 
		The initial selection format (SelectionFormat) for a text flow (TextFlow) when its window is inactive.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.edit:SelectionFormat</apiValueClassifier></apiValueDef><apiDesc> 
		The initial selection format (SelectionFormat) for a text flow (TextFlow) when its window is inactive. Text Layout Framework uses 
		<codeph>inactiveSelectionFormat</codeph> for drawing the selection when the window is inactive. You can override 
		this format using <codeph>SelectionManager.inactiveSelectionFormat</codeph>, if desired.
		
		<p>If you do not override <codeph>unfocusedSelectionFormat</codeph> the SelectionFormat values used are:</p> 
		<ul>
		  <li><codeph>color = 0xffffff</codeph> (white)</li>
		  <li><codeph>alpha = 0</codeph></li>
		  <li><codeph>blendMode = flash.display.BlendMode.DIFFERENCE</codeph></li>
		</ul>
		<p>The result is no selection is displayed.</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.edit.xml#SelectionFormat"><linktext>SelectionFormat</linktext></link><link href="flashx.textLayout.edit.xml#SelectionManager/inactiveSelectionFormat"><linktext>SelectionManager.inactiveSelectionFormat</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:Configuration:inlineGraphicResolverFunction:get"><apiName>inlineGraphicResolverFunction</apiName><shortdesc> Specifies the callback used for resolving an inline graphic element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc> Specifies the callback used for resolving an inline graphic element.
		The callback takes a <codeph>flashx.textLayout.elements.InlineGraphicElement</codeph> object and returns
		the value to be used as the element's <codeph>flashx.textLayout.elements.InlineGraphicElement#source</codeph>.
		
		This callback provides the mechanism to delay providing an inline graphic element's source until just before it is composed.
		<p><b>Note:</b> this callback will be invoked only if a 
		placeholder source of String type is already set. Moreover, it may be invoked
		multiple times. </p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElement"><linktext>InlineGraphicElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:Configuration:manageEnterKey:get"><apiName>manageEnterKey</apiName><shortdesc> 
		Specifies whether the Enter / Return key is entered as text by Text Layout Framework, to split a paragraph for example,
		or the client code handles it.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc> 
		Specifies whether the Enter / Return key is entered as text by Text Layout Framework, to split a paragraph for example,
		or the client code handles it. The client code might handle it by committing a form that has a default button 
		for that purpose, for example. 
		
		<p>Default value is <codeph>true</codeph>.</p>
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:Configuration:manageTabKey:get"><apiName>manageTabKey</apiName><shortdesc> 
		Specifies whether the TAB key is entered as text by Text Layout Framework, or Flash Player or AIR handles it and 
		turns it into a tabbed panel event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc> 
		Specifies whether the TAB key is entered as text by Text Layout Framework, or Flash Player or AIR handles it and 
		turns it into a tabbed panel event. 
		
		<p>Default value is <codeph>false</codeph>.</p>
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:Configuration:overflowPolicy:get"><apiName>overflowPolicy</apiName><shortdesc> 
		Policy used for deciding whether the last line of a container fits in the container, or whether it overflows.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc> 
		Policy used for deciding whether the last line of a container fits in the container, or whether it overflows.
		Use the constants of the OverflowPolicy class to set this property.
		
		<p>Default value is OverflowPolicy.FIT_DESCENDERS, which fits the line in the composition area if the area
		from the top to the baseline fits.</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#OverflowPolicy"><linktext>OverflowPolicy</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:Configuration:releaseLineCreationData:get"><apiName>releaseLineCreationData</apiName><shortdesc> Requests that the process of composing text release line creation data after composing each paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc> Requests that the process of composing text release line creation data after composing each paragraph.  
		This request saves memory but slows down the composing process.
		
		<p>Default value is <codeph>false</codeph>.</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#StandardFlowComposer"><linktext>StandardFlowComposer</linktext></link><link href="" invalidHref="flash.text.engine.xml#TextBlock/releaseLineCreationData()"><linktext>TextBlock.releaseLineCreationData()</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:Configuration:scrollDragDelay:get"><apiName>scrollDragDelay</apiName><shortdesc> 
		Specifies a timed delay between one scroll and the next to prevent scrolling from going 
		too fast.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc> 
		Specifies a timed delay between one scroll and the next to prevent scrolling from going 
		too fast. This value specifies what the delay is in milliseconds. The default value is 35.
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:Configuration:scrollDragPixels:get"><apiName>scrollDragPixels</apiName><shortdesc> Specifies the default number of pixels to scroll when the user initiates auto scrolling by dragging 
		the selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc> Specifies the default number of pixels to scroll when the user initiates auto scrolling by dragging 
		the selection. Default value is 20.
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:Configuration:scrollMouseWheelMultiplier:get"><apiName>scrollMouseWheelMultiplier</apiName><shortdesc> Specifies the default number of pixels to scroll for Mouse wheel events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc> Specifies the default number of pixels to scroll for Mouse wheel events. Default value is 20.
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:Configuration:scrollPagePercentage:get"><apiName>scrollPagePercentage</apiName><shortdesc>
		Specifies the default percentage of the text flow to scroll for page scrolls.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
		Specifies the default percentage of the text flow to scroll for page scrolls. Default value is
		7.0 / 8.0, or .875.
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:Configuration:textFlowInitialFormat:get"><apiName>textFlowInitialFormat</apiName><shortdesc> 
		Specifies the initial format TextLayoutFormat configuration for a text flow (TextFlow object).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		Specifies the initial format TextLayoutFormat configuration for a text flow (TextFlow object).
		
		<p>Default is <codeph>null</codeph>.</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>ITextLayoutFormat</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:Configuration:unfocusedSelectionFormat:get"><apiName>unfocusedSelectionFormat</apiName><shortdesc> 
		The initial selection format that Text Layout Framework uses to draw the selection when the window is active but none of the containers
		in the TextFlow have focus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.edit:SelectionFormat</apiValueClassifier></apiValueDef><apiDesc> 
		The initial selection format that Text Layout Framework uses to draw the selection when the window is active but none of the containers
		in the TextFlow have focus. You can override this format using <codeph>SelectionManager.unfocusedSelectionFormat</codeph>, if desired.
		
		<p>If you do not override <codeph>unfocusedSelectionFormat</codeph> the SelectionFormat values used are:</p>
		
		<ul>
		  <li><codeph>color = 0xffffff</codeph> (white)</li>
		  <li><codeph>alpha = 0</codeph></li>
		  <li><codeph>blendMode = flash.display.BlendMode.DIFFERENCE</codeph></li>
		</ul>
		<p>The result is no selection is displayed.</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.edit.xml#SelectionFormat"><linktext>SelectionFormat</linktext></link><link href="flashx.textLayout.edit.xml#SelectionManager/unfocusedSelectionFormat"><linktext>SelectionManager.unfocusedSelectionFormat</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:FlowGroupElement"><apiName>FlowGroupElement</apiName><shortdesc> 
	 The FlowGroupElement class is the base class for FlowElement objects that can have an array of children.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.elements:FlowElement</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 The FlowGroupElement class is the base class for FlowElement objects that can have an array of children. These classes include
	 TextFlow, ParagraphElement, DivElement, and LinkElement.
	 
	 <p>You cannot create a FlowGroupElement object directly. Invoking <codeph>new FlowGroupElement()</codeph> throws an error 
 	 exception.</p>
 	 
 	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.elements:FlowGroupElement:mxmlChildren:get"><apiName>mxmlChildren</apiName><shortdesc> 
		 Appends an array of children to this object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiException><apiDesc>if array element is not a FlowElement or String
		 </apiDesc><apiItemName>TypeError</apiItemName><apiOperationClassifier>TypeError</apiOperationClassifier></apiException></apiValueDef><apiDesc> 
		 Appends an array of children to this object. Uses the <codeph>replaceChildren()</codeph> method to append each 
		 element in the array. Intended for use during an mxml compiled import.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowGroupElement/replaceChildren()"><linktext>FlowGroupElement.replaceChildren()</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowGroupElement:numChildren:get"><apiName>numChildren</apiName><shortdesc> 
		Returns the number of FlowElement children that this FlowGroupElement object has.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 
		Returns the number of FlowElement children that this FlowGroupElement object has.
		
		</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:SpanElement"><apiName>SpanElement</apiName><shortdesc> 
	The SpanElement class represents a run of text that has a single set of formatting attributes applied.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.elements:FlowLeafElement</apiBaseClassifier></apiClassifierDef><apiDesc> 
	The SpanElement class represents a run of text that has a single set of formatting attributes applied. SpanElement 
	objects contain the text in a paragraph. A simple paragraph (ParagraphElement) includes one or more SpanElement objects. 
	
	<p>A ParagraphElement will have a single SpanElement object if all the text in the paragraph shares the same set of 
	attributes. It has multiple SpanElement objects if the text in the paragraph has multiple formats.</p>
	
	</apiDesc><example/></apiClassifierDetail><apiValue id="flashx.textLayout.elements:SpanElement:mxmlChildren:get"><apiName>mxmlChildren</apiName><shortdesc> 
		 Sets text based on content within span tags; always deletes existing children.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiException><apiDesc>If array element is not a SpecialCharacterElement or a String.
		 </apiDesc><apiItemName>TypeError</apiItemName><apiOperationClassifier>TypeError</apiOperationClassifier></apiException></apiValueDef><apiDesc> 
		 Sets text based on content within span tags; always deletes existing children.
		 This property is intended for use during MXML compiled import in Flex. Flash Professional ignores this property.
         When TLF markup elements have other
		 TLF markup elements as children, the children are assigned to this property.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:SpanElement:text:set"><apiName>text</apiName><shortdesc> 
		 Receives the String of text that this SpanElement object holds.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc> 
		 Receives the String of text that this SpanElement object holds.
		 
		 <p>The text of a span does not include the carriage return (CR) at the end of the paragraph
		 but it is included in the value of <codeph>textLength</codeph>.</p>
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:LinkState"><apiName>LinkState</apiName><shortdesc>
	  The LinkState class defines a set of constants for the linkState property
	  of the LinkElement class.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  The LinkState class defines a set of constants for the <codeph>linkState</codeph> property
	  of the LinkElement class. 
	 
	 </apiDesc><example/></apiClassifierDetail><apiValue id="flashx.textLayout.elements:LinkState:ACTIVE"><apiName>ACTIVE</apiName><shortdesc> 
	 Value for the active state, which occurs when you hold the mouse down over a link.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>active</apiData><apiType value="String"/></apiValueDef><apiDesc> 
	 Value for the active state, which occurs when you hold the mouse down over a link. 
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:LinkState:HOVER"><apiName>HOVER</apiName><shortdesc> 
	 Value for the hover state, which occurs when you drag the mouse over a link.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>hover</apiData><apiType value="String"/></apiValueDef><apiDesc> 
	 Value for the hover state, which occurs when you drag the mouse over a link. 
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:LinkState:LINK"><apiName>LINK</apiName><shortdesc> 
	 Value for the normal, default link state.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>link</apiData><apiType value="String"/></apiValueDef><apiDesc> 
	 Value for the normal, default link state. 
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:DivElement"><apiName>DivElement</apiName><shortdesc> 
	 The DivElement class defines an element for grouping paragraphs (ParagraphElement objects).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flashx.textLayout.elements:ContainerFormattedElement</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 The DivElement class defines an element for grouping paragraphs (ParagraphElement objects). If you want a group of paragraphs
	 to share the same formatting attributes, you can group them in a DivElement object and apply the attributes to it. The paragraphs
	 will inherit the attributes from the DivElement object.
	 
	 </apiDesc><example/></apiClassifierDetail></apiClassifier><apiClassifier id="flashx.textLayout.elements:FlowElement"><apiName>FlowElement</apiName><shortdesc>
 The text in a flow is stored in tree form with the elements of the tree representing logical
 divisions within the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.formats:ITextLayoutFormat</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 The text in a flow is stored in tree form with the elements of the tree representing logical
 divisions within the text. The FlowElement class is the abstract base class of all the objects in this tree.
 FlowElement objects represent paragraphs, spans of text within paragraphs, and
 groups of paragraphs.
 
 <p>The root of a composable FlowElement tree is always a TextFlow object. Leaf elements of the tree are always 
 subclasses of the FlowLeafElement class. All leaves arranged in a composable TextFlow have a ParagraphElement ancestor.
 </p> 
 
 <p>You cannot create a FlowElement object directly. Invoking <codeph>new FlowElement()</codeph> throws an error 
 exception.</p>
 
 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.elements:FlowElement:alignmentBaseline:get"><apiName>alignmentBaseline</apiName><shortdesc>
		 TextLayoutFormat:
		 Specifies the baseline to which the dominant baseline aligns.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Specifies the baseline to which the dominant baseline aligns. For example, if you set <codeph>dominantBaseline</codeph> to ASCENT, setting <codeph>alignmentBaseline</codeph> to DESCENT aligns the top of the text with the DESCENT baseline, or below the line.  The largest element in the line generally determines the baselines.<p><adobeimage alt="baselines" href="../../../images/textLayout_baselines.jpg"/></p>
		 <p>Legal values are TextBaseline.ROMAN, TextBaseline.ASCENT, TextBaseline.DESCENT, TextBaseline.IDEOGRAPHIC_TOP, TextBaseline.IDEOGRAPHIC_CENTER, TextBaseline.IDEOGRAPHIC_BOTTOM, TextBaseline.USE_DOMINANT_BASELINE, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of TextBaseline.USE_DOMINANT_BASELINE.</p>
		 </apiDesc><example/></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextBaseline.xml"><linktext>flash.text.engine.TextBaseline</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:backgroundAlpha:get"><apiName>backgroundAlpha</apiName><shortdesc>
		 TextLayoutFormat:
		 Alpha (transparency) value for the background (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Alpha (transparency) value for the background (adopts default value if undefined during cascade). A value of 0 is fully transparent, and a value of 1 is fully opaque. Display objects with alpha set to 0 are active, even though they are invisible.
		 <p>Legal values are numbers from 0 to 1 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of 1.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:backgroundColor:get"><apiName>backgroundColor</apiName><shortdesc>
		 TextLayoutFormat:
		 Background color of the text (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Background color of the text (adopts default value if undefined during cascade). Can be either the constant value  <codeph>BackgroundColor.TRANSPARENT</codeph>, or a hexadecimal value that specifies the three 8-bit RGB (red, green, blue) values; for example, 0xFF0000 is red and 0x00FF00 is green.
		 <p>Legal values as a string are BackgroundColor.TRANSPARENT, FormatValue.INHERIT and uints from 0x0 to 0xffffffff.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of BackgroundColor.TRANSPARENT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BackgroundColor"><linktext>flashx.textLayout.formats.BackgroundColor</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:baselineShift:get"><apiName>baselineShift</apiName><shortdesc>
		 TextLayoutFormat:
		 Amount to shift the baseline from the dominantBaseline value.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Amount to shift the baseline from the <codeph>dominantBaseline</codeph> value. Units are in pixels, or a percentage of <codeph>fontSize</codeph> (in which case, enter a string value, like 140%).  Positive values shift the line up for horizontal text (right for vertical) and negative values shift it down for horizontal (left for vertical). 
		 <p>Legal values are BaselineShift.SUPERSCRIPT, BaselineShift.SUBSCRIPT, FormatValue.INHERIT.</p>
		 <p>Legal values as a number are from -1000 to 1000.</p>
		 <p>Legal values as a percent are numbers from -1000 to 1000.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.0.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BaselineShift"><linktext>flashx.textLayout.formats.BaselineShift</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:blockProgression:get"><apiName>blockProgression</apiName><shortdesc>
		 TextLayoutFormat:
		 Specifies a vertical or horizontal progression of line placement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Specifies a vertical or horizontal progression of line placement.
		 Lines are either placed top-to-bottom (<codeph>BlockProgression.TB</codeph>, used for horizontal text) or right-to-left (<codeph>BlockProgression.RL</codeph>, used for vertical text).
		 <p>Legal values are BlockProgression.RL, BlockProgression.TB, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of BlockProgression.TB.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BlockProgression"><linktext>flashx.textLayout.formats.BlockProgression</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:breakOpportunity:get"><apiName>breakOpportunity</apiName><shortdesc>
		 TextLayoutFormat:
		 Controls where lines are allowed to break when breaking wrapping text into multiple lines.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Controls where lines are allowed to break when breaking wrapping text into multiple lines. Set to <codeph>BreakOpportunity.AUTO</codeph> to break text normally. Set to <codeph>BreakOpportunity.NONE</codeph> to <i>not</i> break the text unless the text would overrun the measure and there are no other places to break the line. Set to <codeph>BreakOpportunity.ANY</codeph> to allow the line to break anywhere, rather than just between words. Set to <codeph>BreakOpportunity.ALL</codeph> to have each typographic cluster put on a separate line (useful for text on a path).
		 <p>Legal values are BreakOpportunity.ALL, BreakOpportunity.ANY, BreakOpportunity.AUTO, BreakOpportunity.NONE, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of BreakOpportunity.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.BreakOpportunity.xml"><linktext>flash.text.engine.BreakOpportunity</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:cffHinting:get"><apiName>cffHinting</apiName><shortdesc>
		 TextLayoutFormat:
		 The type of CFF hinting used for this text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 The type of CFF hinting used for this text. CFF hinting determines whether the Flash runtime forces strong horizontal stems to fit to a sub pixel grid or not. This property applies only if the <codeph>renderingMode</codeph> property is set to <codeph>RenderingMode.CFF</codeph>, and the font is embedded (<codeph>fontLookup</codeph> property is set to <codeph>FontLookup.EMBEDDED_CFF</codeph>). At small screen sizes, hinting produces a clear, legible text for human readers.
		 <p>Legal values are CFFHinting.NONE, CFFHinting.HORIZONTAL_STEM, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of CFFHinting.HORIZONTAL_STEM.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.CFFHinting.xml"><linktext>flash.text.engine.CFFHinting</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:clearFloats:get"><apiName>clearFloats</apiName><shortdesc>
		 TextLayoutFormat:
		 Controls how text wraps around a float.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Controls how text wraps around a float. A value of none allows the text to wrap most closely around a float. A value of left causes the text to skip over any portion of the container that has a left float, and a value of right causes the text to skip over any portion of the container that has a right float. A value of both causes the text to skip over any floats.
		 <p>Legal values are ClearFloats.START, ClearFloats.END, ClearFloats.LEFT, ClearFloats.RIGHT, ClearFloats.BOTH, ClearFloats.NONE, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of ClearFloats.NONE.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#ClearFloats"><linktext>flashx.textLayout.formats.ClearFloats</linktext></link><link href="flashx.textLayout.formats.xml#ClearFloats"><linktext>flashx.textLayout.formats.ClearFloats</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:color:get"><apiName>color</apiName><shortdesc>
		 TextLayoutFormat:
		 Color of the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Color of the text. A hexadecimal number that specifies three 8-bit RGB (red, green, blue) values; for example, 0xFF0000 is red and 0x00FF00 is green. It can also be enum value {BLACK, GREEN, GRAY, BLUE, SILVER, LIME, OLIVE, WHITE, YELLOW, MAROON, NAVY, RED, PURPLE, TEAL, FUCHSIA, AQUA, MAGENTA, CYAN}
		 <p>Legal values as a string are ColorName.BLACK, ColorName.GREEN, ColorName.GRAY, ColorName.BLUE, ColorName.SILVER, ColorName.LIME, ColorName.OLIVE, ColorName.WHITE, ColorName.YELLOW, ColorName.MAROON, ColorName.NAVY, ColorName.RED, ColorName.PURPLE, ColorName.TEAL, ColorName.FUCHSIA, ColorName.AQUA, ColorName.MAGENTA, ColorName.CYAN, FormatValue.INHERIT and uints from 0x0 to 0xffffffff.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#ColorName"><linktext>flashx.textLayout.formats.ColorName</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:columnBreakAfter:get"><apiName>columnBreakAfter</apiName><shortdesc>
		 TextLayoutFormat:
		 Controls column after before the element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Controls column after before the element.
		 <p>Legal values are BreakStyle.AUTO, BreakStyle.ALWAYS, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of BreakStyle.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BreakStyle"><linktext>flashx.textLayout.formats.BreakStyle</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:columnBreakBefore:get"><apiName>columnBreakBefore</apiName><shortdesc>
		 TextLayoutFormat:
		 Controls column break before the element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Controls column break before the element.
		 <p>Legal values are BreakStyle.AUTO, BreakStyle.ALWAYS, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of BreakStyle.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BreakStyle"><linktext>flashx.textLayout.formats.BreakStyle</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:columnCount:get"><apiName>columnCount</apiName><shortdesc>
		 TextLayoutFormat:
		 Number of text columns (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Number of text columns (adopts default value if undefined during cascade).
		 The column number overrides the  other column settings. Value is an integer, or <codeph>FormatValue.AUTO</codeph> if unspecified. If <codeph>columnCount</codeph> is not specified,<codeph>columnWidth</codeph> is used to create as many columns as can fit in the container.
		 <p>Legal values as a string are FormatValue.AUTO, FormatValue.INHERIT and from ints from 1 to 50.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of FormatValue.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:columnGap:get"><apiName>columnGap</apiName><shortdesc>
		 TextLayoutFormat:
		 Specifies the amount of gutter space, in pixels, to leave between the columns (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Specifies the amount of gutter space, in pixels, to leave between the columns (adopts default value if undefined during cascade).
		 Value is a Number
		 <p>Legal values are numbers from 0 to 1000 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of 20.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:columnWidth:get"><apiName>columnWidth</apiName><shortdesc>
		 TextLayoutFormat:
		 Column width in pixels (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Column width in pixels (adopts default value if undefined during cascade).
		 If you specify the width of the columns, but not the count, TextLayout will create as many columns of that width as possible, given the  container width and <codeph>columnGap</codeph> settings. Any remainder space is left after the last column. Value is a Number.
		 <p>Legal values as a string are FormatValue.AUTO, FormatValue.INHERIT and numbers from 0 to 8000.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of FormatValue.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:computedFormat:get"><apiName>computedFormat</apiName><shortdesc> 
		 Returns the computed format attributes that are in effect for this element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		 Returns the computed format attributes that are in effect for this element.
		 Takes into account the inheritance of attributes from parent elements.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>ITextLayoutFormat</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:containerBreakAfter:get"><apiName>containerBreakAfter</apiName><shortdesc>
		 TextLayoutFormat:
		 Controls container after before the element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Controls container after before the element.
		 <p>Legal values are BreakStyle.AUTO, BreakStyle.ALWAYS, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of BreakStyle.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BreakStyle"><linktext>flashx.textLayout.formats.BreakStyle</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:containerBreakBefore:get"><apiName>containerBreakBefore</apiName><shortdesc>
		 TextLayoutFormat:
		 Controls container break before the element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Controls container break before the element.
		 <p>Legal values are BreakStyle.AUTO, BreakStyle.ALWAYS, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of BreakStyle.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BreakStyle"><linktext>flashx.textLayout.formats.BreakStyle</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:coreStyles:get"><apiName>coreStyles</apiName><shortdesc> Returns the coreStyles on this FlowElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc> Returns the <codeph>coreStyles</codeph> on this FlowElement.  Note that the getter makes a copy of the core 
		 styles dictionary. The coreStyles object encapsulates the formats that are defined by TextLayoutFormat and are in TextLayoutFormat.description. The
		 <codeph>coreStyles</codeph> object consists of an array of <i>stylename-value</i> pairs.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat"><linktext>flashx.textLayout.formats.TextLayoutFormat</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:digitCase:get"><apiName>digitCase</apiName><shortdesc>
		 TextLayoutFormat:
		 The type of digit case used for this text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 The type of digit case used for this text. Setting the value to <codeph>DigitCase.OLD_STYLE</codeph> approximates lowercase letterforms with varying ascenders and descenders. The figures are proportionally spaced. This style is only available in selected typefaces, most commonly in a supplemental or expert font. The <codeph>DigitCase.LINING</codeph> setting has all-cap height and is typically monospaced to line up in charts.<p><adobeimage alt="digitCase" href="../../../images/textLayout_digitcase.gif"/></p>
		 <p>Legal values are DigitCase.DEFAULT, DigitCase.LINING, DigitCase.OLD_STYLE, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of DigitCase.DEFAULT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.DigitCase.xml"><linktext>flash.text.engine.DigitCase</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:digitWidth:get"><apiName>digitWidth</apiName><shortdesc>
		 TextLayoutFormat:
		 Type of digit width used for this text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Type of digit width used for this text. This can be <codeph>DigitWidth.PROPORTIONAL</codeph>, which looks best for individual numbers, or <codeph>DigitWidth.TABULAR</codeph>, which works best for numbers in tables, charts, and vertical rows.<p><adobeimage alt="digitWidth" href="../../../images/textLayout_digitwidth.gif"/></p>
		 <p>Legal values are DigitWidth.DEFAULT, DigitWidth.PROPORTIONAL, DigitWidth.TABULAR, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of DigitWidth.DEFAULT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.DigitWidth.xml"><linktext>flash.text.engine.DigitWidth</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:direction:get"><apiName>direction</apiName><shortdesc>
		 TextLayoutFormat:
		 Specifies the default bidirectional embedding level of the text in the text block.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Specifies the default bidirectional embedding level of the text in the text block. 
		 Left-to-right reading order, as in Latin-style scripts, or right-to-left reading order, as in Arabic or Hebrew. This property also affects column direction when it is applied at the container level. Columns can be either left-to-right or right-to-left, just like text. Below are some examples:<p><adobeimage alt="direction" href="../../../images/textLayout_direction.gif"/></p>
		 <p>Legal values are Direction.LTR, Direction.RTL, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of Direction.LTR.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#Direction"><linktext>flashx.textLayout.formats.Direction</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:dominantBaseline:get"><apiName>dominantBaseline</apiName><shortdesc>
		 TextLayoutFormat:
		 Specifies which element baseline snaps to the alignmentBaseline to determine the vertical position of the element on the line.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Specifies which element baseline snaps to the <codeph>alignmentBaseline</codeph> to determine the vertical position of the element on the line. A value of <codeph>TextBaseline.AUTO</codeph> selects the dominant baseline based on the <codeph>locale</codeph> property of the parent paragraph.  For Japanese and Chinese, the selected baseline value is <codeph>TextBaseline.IDEOGRAPHIC_CENTER</codeph>; for all others it is <codeph>TextBaseline.ROMAN</codeph>. These baseline choices are determined by the choice of font and the font size.<p><adobeimage alt="baselines" href="../../../images/textLayout_baselines.jpg"/></p>
		 <p>Legal values are FormatValue.AUTO, TextBaseline.ROMAN, TextBaseline.ASCENT, TextBaseline.DESCENT, TextBaseline.IDEOGRAPHIC_TOP, TextBaseline.IDEOGRAPHIC_CENTER, TextBaseline.IDEOGRAPHIC_BOTTOM, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of FormatValue.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextBaseline.xml"><linktext>flash.text.engine.TextBaseline</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:firstBaselineOffset:get"><apiName>firstBaselineOffset</apiName><shortdesc>
		 TextLayoutFormat:
		 Specifies the baseline position of the first line in the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Specifies the baseline position of the first line in the container. Which baseline this property refers to depends on the container-level locale.  For Japanese and Chinese, it is <codeph>TextBaseline.IDEOGRAPHIC_BOTTOM</codeph>; for all others it is <codeph>TextBaseline.ROMAN</codeph>.
		 The offset from the top inset (or right inset if <codeph>blockProgression</codeph> is RL) of the container to the baseline of the first line can be either <codeph>BaselineOffset.ASCENT</codeph>, meaning equal to the ascent of the line, <codeph>BaselineOffset.LINE_HEIGHT</codeph>, meaning equal to the height of that first line, or any fixed-value number to specify an absolute distance. <codeph>BaselineOffset.AUTO</codeph> aligns the ascent of the line with the container top inset.<p><adobeimage alt="firstBaselineOffset1" href="../../../images/textLayout_FBO1.png"/><adobeimage alt="firstBaselineOffset2" href="../../../images/textLayout_FBO2.png"/><adobeimage alt="firstBaselineOffset3" href="../../../images/textLayout_FBO3.png"/><adobeimage alt="firstBaselineOffset4" href="../../../images/textLayout_FBO4.png"/></p>
		 <p>Legal values as a string are BaselineOffset.AUTO, BaselineOffset.ASCENT, BaselineOffset.LINE_HEIGHT, FormatValue.INHERIT and numbers from 0 to 1000.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of BaselineOffset.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BaselineOffset"><linktext>flashx.textLayout.formats.BaselineOffset</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:fontFamily:get"><apiName>fontFamily</apiName><shortdesc>
		 TextLayoutFormat:
		  The name of the font to use, or a comma-separated list of font names.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		  The name of the font to use, or a comma-separated list of font names. The Flash runtime renders the element with the first available font in the list. For example Arial, Helvetica, _sans causes the player to search for Arial, then Helvetica if Arial is not found, then _sans if neither is found.
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of Arial.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:fontLookup:get"><apiName>fontLookup</apiName><shortdesc>
		 TextLayoutFormat:
		 Font lookup to use.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Font lookup to use. Specifying <codeph>FontLookup.DEVICE</codeph> uses the fonts installed on the system that is running the SWF file. Device fonts result in a smaller movie size, but text is not always rendered the same across different systems and platforms. Specifying <codeph>FontLookup.EMBEDDED_CFF</codeph> uses font outlines embedded in the published SWF file. Embedded fonts increase the size of the SWF file (sometimes dramatically), but text is consistently displayed in the chosen font.
		 <p>Legal values are FontLookup.DEVICE, FontLookup.EMBEDDED_CFF, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of FontLookup.DEVICE.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontLookup.xml"><linktext>flash.text.engine.FontLookup</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:fontSize:get"><apiName>fontSize</apiName><shortdesc>
		 TextLayoutFormat:
		 The size of the text in pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 The size of the text in pixels.
		 <p>Legal values are numbers from 1 to 720 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 12.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:fontStyle:get"><apiName>fontStyle</apiName><shortdesc>
		 TextLayoutFormat:
		 Style of text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Style of text. May be <codeph>FontPosture.NORMAL</codeph>, for use in plain text, or <codeph>FontPosture.ITALIC</codeph> for italic. This property applies only to device fonts (<codeph>fontLookup</codeph> property is set to flash.text.engine.FontLookup.DEVICE).
		 <p>Legal values are FontPosture.NORMAL, FontPosture.ITALIC, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of FontPosture.NORMAL.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontPosture.xml"><linktext>flash.text.engine.FontPosture</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:fontWeight:get"><apiName>fontWeight</apiName><shortdesc>
		 TextLayoutFormat:
		 Weight of text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Weight of text. May be <codeph>FontWeight.NORMAL</codeph> for use in plain text, or <codeph>FontWeight.BOLD</codeph>. Applies only to device fonts (<codeph>fontLookup</codeph> property is set to flash.text.engine.FontLookup.DEVICE).
		 <p>Legal values are FontWeight.NORMAL, FontWeight.BOLD, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of FontWeight.NORMAL.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontWeight.xml"><linktext>flash.text.engine.FontWeight</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:format:get"><apiName>format</apiName><shortdesc> TextLayoutFormat properties applied directly to this element.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> TextLayoutFormat properties applied directly to this element.
		 <p>Each element may have properties applied to it as part of its format. Properties applied to this element override properties inherited from the parent. Properties applied to this element will in turn be inherited by element's children if they are not overridden on the child. If no properties are applied to the element, this will be null.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>flashx.textLayout.formats.ITextLayoutFormat</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:id:get"><apiName>id</apiName><shortdesc>
		 Assigns an identifying name to the element, making it possible to set a style for the element
		 by referencing the id.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
		 Assigns an identifying name to the element, making it possible to set a style for the element
		 by referencing the <codeph>id</codeph>. For example, the following line sets the color for
		 a SpanElement object that has an id of span1:
		 
		 <codeblock rev="3.0">
		 textFlow.getElementByID("span1").setStyle("color", 0xFF0000);
		 </codeblock>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow/getElementByID()"><linktext>TextFlow.getElementByID()</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:justificationRule:get"><apiName>justificationRule</apiName><shortdesc>
		 TextLayoutFormat:
		 Rule used to justify text in a paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Rule used to justify text in a paragraph.
		 Default value is <codeph>FormatValue.AUTO</codeph>, which justifies text based on the paragraph's <codeph>locale</codeph> property. For all languages except Japanese and Chinese, <codeph>FormatValue.AUTO</codeph> becomes <codeph>JustificationRule.SPACE</codeph>, which adds extra space to the space characters.  For Japanese and Chinese, <codeph>FormatValue.AUTO</codeph> becomes <codeph>JustficationRule.EAST_ASIAN</codeph>. In part, justification changes the spacing of punctuation. In Roman text the comma and Japanese periods take a full character's width but in East Asian text only half of a character's width. Also, in the East Asian text the spacing between sequential punctuation marks becomes tighter, obeying traditional East Asian typographic conventions. Note, too, in the example below the leading that is applied to the second line of the paragraphs. In the East Asian version, the last two lines push left. In the Roman version, the second and following lines push left.<p><adobeimage alt="justificationRule" href="../../../images/textLayout_justificationrule.png"/></p>
		 <p>Legal values are JustificationRule.EAST_ASIAN, JustificationRule.SPACE, FormatValue.AUTO, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of FormatValue.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#JustificationRule"><linktext>flashx.textLayout.formats.JustificationRule</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:justificationStyle:get"><apiName>justificationStyle</apiName><shortdesc>
		 TextLayoutFormat:
		 The style used for justification of the paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 The style used for justification of the paragraph. Used only in conjunction with a <codeph>justificationRule</codeph> setting of <codeph>JustificationRule.EAST_ASIAN</codeph>.
		 Default value of <codeph>FormatValue.AUTO</codeph> is resolved to <codeph>JustificationStyle.PUSH_IN_KINSOKU</codeph> for all locales.  The constants defined by the JustificationStyle class specify options for handling kinsoku characters, which are Japanese characters that cannot appear at either the beginning or end of a line. If you want looser text, specify <codeph>JustificationStyle.PUSH-OUT-ONLY</codeph>. If you want behavior that is like what you get with the  <codeph>justificationRule</codeph> of <codeph>JustificationRule.SPACE</codeph>, use <codeph>JustificationStyle.PRIORITIZE-LEAST-ADJUSTMENT</codeph>.
		 <p>Legal values are JustificationStyle.PRIORITIZE_LEAST_ADJUSTMENT, JustificationStyle.PUSH_IN_KINSOKU, JustificationStyle.PUSH_OUT_ONLY, FormatValue.AUTO, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of FormatValue.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.JustificationStyle.xml"><linktext>flash.text.engine.JustificationStyle</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:kerning:get"><apiName>kerning</apiName><shortdesc>
		 TextLayoutFormat:
		 Kerning adjusts the pixels between certain character pairs to improve readability.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Kerning adjusts the pixels between certain character pairs to improve readability. Kerning is supported for all fonts with kerning tables.
		 <p>Legal values are Kerning.ON, Kerning.OFF, Kerning.AUTO, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of Kerning.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.Kerning.xml"><linktext>flash.text.engine.Kerning</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:leadingModel:get"><apiName>leadingModel</apiName><shortdesc>
		 TextLayoutFormat:
		 Specifies the leading model, which is a combination of leading basis and leading direction.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Specifies the leading model, which is a combination of leading basis and leading direction.
		 Leading basis is the baseline to which the <codeph>lineHeight</codeph> property refers. Leading direction determines whether the <codeph>lineHeight</codeph> property refers to the distance of a line's baseline from that of the line before it or the line after it. The default value of <codeph>FormatValue.AUTO</codeph> is resolved based on the paragraph's <codeph>locale</codeph> property.  For Japanese and Chinese, it is <codeph>LeadingModel.IDEOGRAPHIC_TOP_DOWN</codeph> and for all others it is <codeph>LeadingModel.ROMAN_UP</codeph>.<p><b>Leading Basis:</b></p><p><adobeimage alt="leadingBasis1" href="../../../images/textLayout_LB1.png"/>    <adobeimage alt="leadingBasis2" href="../../../images/textLayout_LB2.png"/>    <adobeimage alt="leadingBasis3" href="../../../images/textLayout_LB3.png"/></p><p><b>Leading Direction:</b></p><p><adobeimage alt="leadingDirection1" href="../../../images/textLayout_LD1.png"/>    <adobeimage alt="leadingDirection2" href="../../../images/textLayout_LD2.png"/>    <adobeimage alt="leadingDirection3" href="../../../images/textLayout_LD3.png"/></p>
		 <p>Legal values are LeadingModel.ROMAN_UP, LeadingModel.IDEOGRAPHIC_TOP_UP, LeadingModel.IDEOGRAPHIC_CENTER_UP, LeadingModel.IDEOGRAPHIC_TOP_DOWN, LeadingModel.IDEOGRAPHIC_CENTER_DOWN, LeadingModel.APPROXIMATE_TEXT_FIELD, LeadingModel.ASCENT_DESCENT_UP, LeadingModel.BOX, LeadingModel.AUTO, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of LeadingModel.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#LeadingModel"><linktext>flashx.textLayout.formats.LeadingModel</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:ligatureLevel:get"><apiName>ligatureLevel</apiName><shortdesc>
		 TextLayoutFormat:
		 Controls which of the ligatures that are defined in the font may be used in the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Controls which of the ligatures that are defined in the font may be used in the text. The ligatures that appear for each of these settings is dependent on the font. A ligature occurs where two or more letter-forms are joined as a single glyph. Ligatures usually replace consecutive characters sharing common components, such as the letter pairs 'fi', 'fl', or 'ae'. They are used with both Latin and Non-Latin character sets. The ligatures enabled by the values of the LigatureLevel class - <codeph>MINIMUM</codeph>, <codeph>COMMON</codeph>, <codeph>UNCOMMON</codeph>, and <codeph>EXOTIC</codeph> - are additive. Each value enables a new set of ligatures, but also includes those of the previous types.<p><b>Note: </b>When working with Arabic or Syriac fonts, <codeph>ligatureLevel</codeph> must be set to MINIMUM or above.</p><p><adobeimage alt="ligatureLevel" href="../../../images/textLayout_ligatures.png"/></p>
		 <p>Legal values are LigatureLevel.MINIMUM, LigatureLevel.COMMON, LigatureLevel.UNCOMMON, LigatureLevel.EXOTIC, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of LigatureLevel.COMMON.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.LigatureLevel.xml"><linktext>flash.text.engine.LigatureLevel</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:lineBreak:get"><apiName>lineBreak</apiName><shortdesc>
		 TextLayoutFormat:
		 Controls word wrapping within the container (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Controls word wrapping within the container (adopts default value if undefined during cascade).
		 Text in the container may be set to fit the width of the container (<codeph>LineBreak.TO_FIT</codeph>), or can be set to break only at explicit return or line feed characters (<codeph>LineBreak.EXPLICIT</codeph>).
		 <p>Legal values are LineBreak.EXPLICIT, LineBreak.TO_FIT, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of LineBreak.TO_FIT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#LineBreak"><linktext>flashx.textLayout.formats.LineBreak</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:lineHeight:get"><apiName>lineHeight</apiName><shortdesc>
		 TextLayoutFormat:
		 Leading controls for the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Leading controls for the text. The distance from the baseline of the previous or the next line (based on <codeph>LeadingModel</codeph>) to the baseline of the current line is equal to the maximum amount of the leading applied to any character in the line. This is either a number or a percent.  If specifying a percent, enter a string value, like 140%.<p><adobeimage alt="lineHeight1" href="../../../images/textLayout_lineHeight1.jpg"/><adobeimage alt="lineHeight2" href="../../../images/textLayout_lineHeight2.jpg"/></p>
		 <p>Legal values as a number are from -720 to 720.</p>
		 <p>Legal values as a percent are numbers from -1000% to 1000%.</p>
		 <p>Legal values include FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 120%.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:lineThrough:get"><apiName>lineThrough</apiName><shortdesc>
		 TextLayoutFormat:
		 If true, applies strikethrough, a line drawn through the middle of the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 If <codeph>true</codeph>, applies strikethrough, a line drawn through the middle of the text.
		 <p>Legal values are true, false and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of false.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:linkActiveFormat:get"><apiName>linkActiveFormat</apiName><shortdesc>
		 TextLayoutFormat:
		 Defines the formatting attributes used for links in normal state.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Defines the formatting attributes used for links in normal state. This value will cascade down the hierarchy and apply to any links that are descendants.
		 Accepts <codeph>inherit</codeph>, an <codeph>ITextLayoutFormat</codeph> or converts an array of objects with key and value as members to a TextLayoutFormat.
		 <p>Legal values include FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of null.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:linkHoverFormat:get"><apiName>linkHoverFormat</apiName><shortdesc>
		 TextLayoutFormat:
		 Defines the formatting attributes used for links in hover state, when the mouse is within the bounds (rolling over) a link.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Defines the formatting attributes used for links in hover state, when the mouse is within the bounds (rolling over) a link. This value will cascade down the hierarchy and apply to any links that are descendants.
		 Accepts <codeph>inherit</codeph>, an <codeph>ITextLayoutFormat</codeph> or converts an array of objects with key and value as members to a TextLayoutFormat.
		 <p>Legal values include FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of null.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:linkNormalFormat:get"><apiName>linkNormalFormat</apiName><shortdesc>
		 TextLayoutFormat:
		 Defines the formatting attributes used for links in normal state.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Defines the formatting attributes used for links in normal state. This value will cascade down the hierarchy and apply to any links that are descendants.
		 Accepts <codeph>inherit</codeph>, an <codeph>ITextLayoutFormat</codeph> or converts an array of objects with key and value as members to a TextLayoutFormat.
		 <p>Legal values include FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of null.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:listAutoPadding:get"><apiName>listAutoPadding</apiName><shortdesc>
		 TextLayoutFormat:
		 This specifies an auto indent for the start edge of lists when the padding value of the list on that side is auto.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 This specifies an auto indent for the start edge of lists when the padding value of the list on that side is <codeph>auto</codeph>.
		 <p>Legal values are numbers from -1000 to 1000 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 40.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:listMarkerFormat:get"><apiName>listMarkerFormat</apiName><shortdesc>
		 TextLayoutFormat:
		 Defines the formatting attributes list markers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Defines the formatting attributes list markers. This value will cascade down the hierarchy and apply to any links that are descendants.
		 Accepts <codeph>inherit</codeph>, an <codeph>IListMarkerFormat</codeph> or converts an array of objects with key and value as members to a ListMarkerFormat.
		 <p>Legal values include FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of null.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:listStylePosition:get"><apiName>listStylePosition</apiName><shortdesc>
		 TextLayoutFormat:
		 Legal values are ListStylePosition.INSIDE, ListStylePosition.OUTSIDE, FormatValue.INHERIT.
		 Default value is undefined indicating not set.
		 If undefined during the cascade this property will inherit its value from an ancestor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 <p>Legal values are ListStylePosition.INSIDE, ListStylePosition.OUTSIDE, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of ListStylePosition.OUTSIDE.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#ListStylePosition"><linktext>flashx.textLayout.formats.ListStylePosition</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:listStyleType:get"><apiName>listStyleType</apiName><shortdesc>
		 TextLayoutFormat:
		 Legal values are ListStyleType.UPPER_ALPHA, ListStyleType.LOWER_ALPHA, ListStyleType.UPPER_ROMAN, ListStyleType.LOWER_ROMAN, ListStyleType.NONE, ListStyleType.DISC, ListStyleType.CIRCLE, ListStyleType.SQUARE, ListStyleType.BOX, ListStyleType.CHECK, ListStyleType.DIAMOND, ListStyleType.HYPHEN, ListStyleType.ARABIC_INDIC, ListStyleType.BENGALI, ListStyleType.DECIMAL, ListStyleType.DECIMAL_LEADING_ZERO, ListStyleType.DEVANAGARI, ListStyleType.GUJARATI, ListStyleType.GURMUKHI, ListStyleType.KANNADA, ListStyleType.PERSIAN, ListStyleType.THAI, ListStyleType.URDU, ListStyleType.CJK_EARTHLY_BRANCH, ListStyleType.CJK_HEAVENLY_STEM, ListStyleType.HANGUL, ListStyleType.HANGUL_CONSTANT, ListStyleType.HIRAGANA, ListStyleType.HIRAGANA_IROHA, ListStyleType.KATAKANA, ListStyleType.KATAKANA_IROHA, ListStyleType.LOWER_ALPHA, ListStyleType.LOWER_GREEK, ListStyleType.LOWER_LATIN, ListStyleType.UPPER_ALPHA, ListStyleType.UPPER_GREEK, ListStyleType.UPPER_LATIN, FormatValue.INHERIT.
		 Default value is undefined indicating not set.
		 If undefined during the cascade this property will inherit its value from an ancestor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 <p>Legal values are ListStyleType.UPPER_ALPHA, ListStyleType.LOWER_ALPHA, ListStyleType.UPPER_ROMAN, ListStyleType.LOWER_ROMAN, ListStyleType.NONE, ListStyleType.DISC, ListStyleType.CIRCLE, ListStyleType.SQUARE, ListStyleType.BOX, ListStyleType.CHECK, ListStyleType.DIAMOND, ListStyleType.HYPHEN, ListStyleType.ARABIC_INDIC, ListStyleType.BENGALI, ListStyleType.DECIMAL, ListStyleType.DECIMAL_LEADING_ZERO, ListStyleType.DEVANAGARI, ListStyleType.GUJARATI, ListStyleType.GURMUKHI, ListStyleType.KANNADA, ListStyleType.PERSIAN, ListStyleType.THAI, ListStyleType.URDU, ListStyleType.CJK_EARTHLY_BRANCH, ListStyleType.CJK_HEAVENLY_STEM, ListStyleType.HANGUL, ListStyleType.HANGUL_CONSTANT, ListStyleType.HIRAGANA, ListStyleType.HIRAGANA_IROHA, ListStyleType.KATAKANA, ListStyleType.KATAKANA_IROHA, ListStyleType.LOWER_ALPHA, ListStyleType.LOWER_GREEK, ListStyleType.LOWER_LATIN, ListStyleType.UPPER_ALPHA, ListStyleType.UPPER_GREEK, ListStyleType.UPPER_LATIN, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of ListStyleType.DISC.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#ListStyleType"><linktext>flashx.textLayout.formats.ListStyleType</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:locale:get"><apiName>locale</apiName><shortdesc>
		 TextLayoutFormat:
		 The locale of the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 The locale of the text. Controls case transformations and shaping. Standard locale identifiers as described in Unicode Technical Standard #35 are used. For example en, en_US and en-US are all English, ja is Japanese. 
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of en.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:paddingBottom:get"><apiName>paddingBottom</apiName><shortdesc>
		 TextLayoutFormat:
		 Bottom inset in pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Bottom inset in pixels.  Default of auto is zero except in lists which get a start side padding of 45.  (adopts default value if undefined during cascade).
		 Space between the bottom edge of the container and the text.  Value is a Number  or auto. <p> With horizontal text, in scrollable containers with multiple columns, the first and following columns will show the padding as blank space at the bottom of the container, but for the last column, if the text doesn't all fit, you may have to scroll in order to see the padding.</p>
		 <p>Legal values as a string are FormatValue.AUTO, FormatValue.INHERIT and numbers from -8000 to 8000.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of FormatValue.AUTO.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#Configuration/autoListElementStartPadding"><linktext>flashx.textLayout.elements.Configuration.autoListElementStartPadding</linktext></link><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:paddingLeft:get"><apiName>paddingLeft</apiName><shortdesc>
		 TextLayoutFormat:
		 Left inset in pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Left inset in pixels.  Default of auto is zero except in lists which get a start side padding of 45. (adopts default value if undefined during cascade).
		 Space between the left edge of the container and the text.  Value is a Number or auto.<p> With vertical text, in scrollable containers with multiple columns, the first and following columns will show the padding as blank space at the end of the container, but for the last column, if the text doesn't all fit, you may have to scroll in order to see the padding.</p>
		 <p>Legal values as a string are FormatValue.AUTO, FormatValue.INHERIT and numbers from -8000 to 8000.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of FormatValue.AUTO.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#Configuration/autoListElementStartPadding"><linktext>flashx.textLayout.elements.Configuration.autoListElementStartPadding</linktext></link><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:paddingRight:get"><apiName>paddingRight</apiName><shortdesc>
		 TextLayoutFormat:
		 Right inset in pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Right inset in pixels.  Default of auto is zero except in lists which get a start side padding of 45. (adopts default value if undefined during cascade).
		 Space between the right edge of the container and the text.  Value is a Number or auto. 
		 <p>Legal values as a string are FormatValue.AUTO, FormatValue.INHERIT and numbers from -8000 to 8000.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of FormatValue.AUTO.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#Configuration/autoListElementStartPadding"><linktext>flashx.textLayout.elements.Configuration.autoListElementStartPadding</linktext></link><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:paddingTop:get"><apiName>paddingTop</apiName><shortdesc>
		 TextLayoutFormat:
		 Top inset in pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Top inset in pixels.  Default of auto is zero except in lists which get a start side padding of 45. (adopts default value if undefined during cascade).
		 Space between the top edge of the container and the text.  Value is a Number or auto.
		 <p>Legal values as a string are FormatValue.AUTO, FormatValue.INHERIT and numbers from -8000 to 8000.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of FormatValue.AUTO.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#Configuration/autoListElementStartPadding"><linktext>flashx.textLayout.elements.Configuration.autoListElementStartPadding</linktext></link><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:paragraphEndIndent:get"><apiName>paragraphEndIndent</apiName><shortdesc>
		 TextLayoutFormat:
		 A Number that specifies, in pixels, the amount to indent the paragraph's end edge.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 A Number that specifies, in pixels, the amount to indent the paragraph's end edge. Refers to the right edge in left-to-right text and the left edge in right-to-left text. 
		 <p>Legal values are numbers from 0 to 8000 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:paragraphSpaceAfter:get"><apiName>paragraphSpaceAfter</apiName><shortdesc>
		 TextLayoutFormat:
		 A Number that specifies the amount of space, in pixels, to leave after the paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 A Number that specifies the amount of space, in pixels, to leave after the paragraph.
		 Collapses in tandem with  <codeph>paragraphSpaceBefore</codeph>.
		 <p>Legal values are numbers from 0 to 8000 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:paragraphSpaceBefore:get"><apiName>paragraphSpaceBefore</apiName><shortdesc>
		 TextLayoutFormat:
		 A Number that specifies the amount of space, in pixels, to leave before the paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 A Number that specifies the amount of space, in pixels, to leave before the paragraph. 
		 Collapses in tandem with <codeph>paragraphSpaceAfter</codeph>.
		 <p>Legal values are numbers from 0 to 8000 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:paragraphStartIndent:get"><apiName>paragraphStartIndent</apiName><shortdesc>
		 TextLayoutFormat:
		 A Number that specifies, in pixels, the amount to indent the paragraph's start edge.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 A Number that specifies, in pixels, the amount to indent the paragraph's start edge. Refers to the left edge in left-to-right text and the right edge in right-to-left text. 
		 <p>Legal values are numbers from 0 to 8000 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:parentRelativeEnd:get"><apiName>parentRelativeEnd</apiName><shortdesc> Returns the relative end of this FlowElement object in the parent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> Returns the relative end of this FlowElement object in the parent. If the parent is null this is always equal to <codeph>textLength</codeph>.  If 
		 the parent is not null, the value is the sum of the text lengths of this and all previous siblings, which is effectively
		 the first character in the next FlowElement object.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowGroupElement"><linktext>FlowGroupElement</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement/textLength"><linktext>textLength</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:parentRelativeStart:get"><apiName>parentRelativeStart</apiName><shortdesc> Returns the relative start of this FlowElement object in the parent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> Returns the relative start of this FlowElement object in the parent. If parent is null, this value is always zero.  
		 If parent is not null, the value is the sum of the text lengths of all previous siblings.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/textLength"><linktext>textLength</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:parent:get"><apiName>parent</apiName><shortdesc> Returns the parent of this FlowElement object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:FlowGroupElement</apiValueClassifier></apiValueDef><apiDesc> Returns the parent of this FlowElement object. Every FlowElement has at most one parent.
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:renderingMode:get"><apiName>renderingMode</apiName><shortdesc>
		 TextLayoutFormat:
		 The rendering mode used for this text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 The rendering mode used for this text.  Applies only to embedded fonts (<codeph>fontLookup</codeph> property is set to <codeph>FontLookup.EMBEDDED_CFF</codeph>).
		 <p>Legal values are RenderingMode.NORMAL, RenderingMode.CFF, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of RenderingMode.CFF.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.RenderingMode.xml"><linktext>flash.text.engine.RenderingMode</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:styleName:get"><apiName>styleName</apiName><shortdesc>
		 TextLayoutFormat:
		 Assigns an identifying class to the element, making it possible to set a style for the element by referencing the styleName.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Assigns an identifying class to the element, making it possible to set a style for the element by referencing the <codeph>styleName</codeph>.
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of null.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:styles:get"><apiName>styles</apiName><shortdesc> Returns the styles on this FlowElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc> Returns the styles on this FlowElement.  Note that the getter makes a copy of the  
		 styles dictionary. The returned object encapsulates all styles set in the format property including core and user styles. The
		 returned object consists of an array of <i>stylename-value</i> pairs.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat"><linktext>flashx.textLayout.formats.TextLayoutFormat</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:tabStops:get"><apiName>tabStops</apiName><shortdesc>
		 TextLayoutFormat:
		 Specifies the tab stops associated with the paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Specifies the tab stops associated with the paragraph.
		 Setters can take an array of TabStopFormat, a condensed string representation, undefined, or <codeph>FormatValue.INHERIT</codeph>. The condensed string representation is always converted into an array of TabStopFormat. <p>The string-based format is a list of tab stops, where each tab stop is delimited by one or more spaces.</p><p>A tab stop takes the following form: &lt;alignment type&gt;&lt;alignment position&gt;|&lt;alignment token&gt;.</p><p>The alignment type is a single character, and can be S, E, C, or D (or lower-case equivalents). S or s for start, E or e for end, C or c for center, D or d for decimal. The alignment type is optional, and if its not specified will default to S.</p><p>The alignment position is a Number, and is specified according to FXG spec for Numbers (decimal or scientific notation). The alignment position is required.</p><p>The vertical bar is used to separate the alignment position from the alignment token, and should only be present if the alignment token is present.</p><p> The alignment token is optional if the alignment type is D, and should not be present if the alignment type is anything other than D. The alignment token may be any sequence of characters terminated by the space that ends the tab stop (for the last tab stop, the terminating space is optional; end of alignment token is implied). A space may be part of the alignment token if it is escaped with a backslash (\ ). A backslash may be part of the alignment token if it is escaped with another backslash (\\). If the alignment type is D, and the alignment token is not specified, it will take on the default value of null.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of null.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TabStopFormat"><linktext>flashx.textLayout.formats.TabStopFormat</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:textAlignLast:get"><apiName>textAlignLast</apiName><shortdesc>
		 TextLayoutFormat:
		 Alignment of the last (or only) line in the paragraph relative to the container in justified text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Alignment of the last (or only) line in the paragraph relative to the container in justified text.
		 If <codeph>textAlign</codeph> is set to <codeph>TextAlign.JUSTIFY</codeph>, <codeph>textAlignLast</codeph> specifies how the last line (or only line, if this is a one line block) is aligned. Values are similar to <codeph>textAlign</codeph>.
		 <p>Legal values are TextAlign.LEFT, TextAlign.RIGHT, TextAlign.CENTER, TextAlign.JUSTIFY, TextAlign.START, TextAlign.END, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of TextAlign.START.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextAlign"><linktext>flashx.textLayout.formats.TextAlign</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:textAlign:get"><apiName>textAlign</apiName><shortdesc>
		 TextLayoutFormat:
		 Alignment of lines in the paragraph relative to the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Alignment of lines in the paragraph relative to the container.
		 <codeph>TextAlign.LEFT</codeph> aligns lines along the left edge of the container. <codeph>TextAlign.RIGHT</codeph> aligns on the right edge. <codeph>TextAlign.CENTER</codeph> positions the line equidistant from the left and right edges. <codeph>TextAlign.JUSTIFY</codeph> spreads the lines out so they fill the space. <codeph>TextAlign.START</codeph> is equivalent to setting left in left-to-right text, or right in right-to-left text. <codeph>TextAlign.END</codeph> is equivalent to setting right in left-to-right text, or left in right-to-left text.
		 <p>Legal values are TextAlign.LEFT, TextAlign.RIGHT, TextAlign.CENTER, TextAlign.JUSTIFY, TextAlign.START, TextAlign.END, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of TextAlign.START.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextAlign"><linktext>flashx.textLayout.formats.TextAlign</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:textAlpha:get"><apiName>textAlpha</apiName><shortdesc>
		 TextLayoutFormat:
		 Alpha (transparency) value for the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Alpha (transparency) value for the text. A value of 0 is fully transparent, and a value of 1 is fully opaque. Display objects with <codeph>textAlpha</codeph> set to 0 are active, even though they are invisible.
		 <p>Legal values are numbers from 0 to 1 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 1.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:textDecoration:get"><apiName>textDecoration</apiName><shortdesc>
		 TextLayoutFormat:
		 Decoration on text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Decoration on text. Use to apply underlining; default is none.
		 <p>Legal values are TextDecoration.NONE, TextDecoration.UNDERLINE, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of TextDecoration.NONE.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextDecoration"><linktext>flashx.textLayout.formats.TextDecoration</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:textIndent:get"><apiName>textIndent</apiName><shortdesc>
		 TextLayoutFormat:
		 A Number that specifies, in pixels, the amount to indent the first line of the paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 A Number that specifies, in pixels, the amount to indent the first line of the paragraph.
		 A negative indent will push the line into the margin, and possibly out of the container.
		 <p>Legal values are numbers from -8000 to 8000 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:textJustify:get"><apiName>textJustify</apiName><shortdesc>
		 TextLayoutFormat:
		 Specifies options for justifying text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Specifies options for justifying text.
		 Default value is <codeph>TextJustify.INTER_WORD</codeph>, meaning that extra space is added to the space characters. <codeph>TextJustify.DISTRIBUTE</codeph> adds extra space to space characters and between individual letters. Used only in conjunction with a <codeph>justificationRule</codeph> value of <codeph>JustificationRule.SPACE</codeph>.
		 <p>Legal values are TextJustify.INTER_WORD, TextJustify.DISTRIBUTE, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of TextJustify.INTER_WORD.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextJustify"><linktext>flashx.textLayout.formats.TextJustify</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:textLength:get"><apiName>textLength</apiName><shortdesc>
		 Returns the total length of text owned by this FlowElement object and its children.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 Returns the total length of text owned by this FlowElement object and its children.  If an element has no text, the 
		 value of <codeph>textLength</codeph> is usually zero. 
		 
		 <p>ParagraphElement objects have a final span with a paragraph terminator character for the last 
		 SpanElement object.The paragraph terminator is included in the value of the <codeph>textLength</codeph> of that 
		 SpanElement object and all its parents.  It is not included in <codeph>text</codeph> property of the SpanElement
		 object.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/textLength"><linktext>textLength</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:textRotation:get"><apiName>textRotation</apiName><shortdesc>
		 TextLayoutFormat:
		 Determines the number of degrees to rotate this text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Determines the number of degrees to rotate this text.
		 <p>Legal values are TextRotation.ROTATE_0, TextRotation.ROTATE_180, TextRotation.ROTATE_270, TextRotation.ROTATE_90, TextRotation.AUTO, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of TextRotation.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextRotation.xml"><linktext>flash.text.engine.TextRotation</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:trackingLeft:get"><apiName>trackingLeft</apiName><shortdesc>
		 TextLayoutFormat:
		 Number in pixels (or percent of fontSize, like 120%) indicating the amount of tracking (manual kerning) to be applied to the left of each character.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Number in pixels (or percent of <codeph>fontSize</codeph>, like 120%) indicating the amount of tracking (manual kerning) to be applied to the left of each character. If kerning is enabled, the <codeph>trackingLeft</codeph> value is added to the values in the kerning table for the font. If kerning is disabled, the <codeph>trackingLeft</codeph> value is used as a manual kerning value. Supports both positive and negative values. 
		 <p>Legal values as a number are from -1000 to 1000.</p>
		 <p>Legal values as a percent are numbers from -1000% to 1000%.</p>
		 <p>Legal values include FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:trackingRight:get"><apiName>trackingRight</apiName><shortdesc>
		 TextLayoutFormat:
		 Number in pixels (or percent of fontSize, like 120%) indicating the amount of tracking (manual kerning) to be applied to the right of each character.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Number in pixels (or percent of <codeph>fontSize</codeph>, like 120%) indicating the amount of tracking (manual kerning) to be applied to the right of each character.  If kerning is enabled, the <codeph>trackingRight</codeph> value is added to the values in the kerning table for the font. If kerning is disabled, the <codeph>trackingRight</codeph> value is used as a manual kerning value. Supports both positive and negative values. 
		 <p>Legal values as a number are from -1000 to 1000.</p>
		 <p>Legal values as a percent are numbers from -1000% to 1000%.</p>
		 <p>Legal values include FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:typeName:get"><apiName>typeName</apiName><shortdesc>
		 Each FlowElement has a typeName.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
		 Each FlowElement has a <codeph>typeName</codeph>.  <codeph>typeName</codeph> defaults to the string the <codeph>textLayoutFormat</codeph> TextConverter uses.  This API
		 can be used to set a different <codeph>typeName</codeph> to a <codeph>FlowElement</codeph>.  Typically this is done to support <codeph>type</codeph> selectors in CSS.  
		 
		 <p>See the <codeph>TEXT_FIELD_HTML_FORMAT</codeph> documentation for how this used..</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.conversion.xml#TextConverter"><linktext>flashx.textLayout.conversion.TextConverter</linktext></link><link href="flashx.textLayout.conversion.xml#TextConverter/TEXT_FIELD_HTML_FORMAT"><linktext>flashx.textLayout.conversion.TextConverter.TEXT_FIELD_HTML_FORMAT</linktext></link><link href="flashx.textLayout.conversion.xml#IHTMLImporter"><linktext>flashx.textLayout.conversion.IHTMLImporter</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:typographicCase:get"><apiName>typographicCase</apiName><shortdesc>
		 TextLayoutFormat:
		 The type of typographic case used for this text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 The type of typographic case used for this text. Here are some examples:<p><adobeimage alt="typographicCase" href="../../../images/textLayout_typographiccase.png"/></p>
		 <p>Legal values are TLFTypographicCase.DEFAULT, TLFTypographicCase.CAPS_TO_SMALL_CAPS, TLFTypographicCase.UPPERCASE, TLFTypographicCase.LOWERCASE, TLFTypographicCase.LOWERCASE_TO_SMALL_CAPS, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of TLFTypographicCase.DEFAULT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TLFTypographicCase"><linktext>flashx.textLayout.formats.TLFTypographicCase</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:userStyles:get"><apiName>userStyles</apiName><shortdesc> Allows you to read and write user styles on a FlowElement object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc> Allows you to read and write user styles on a FlowElement object.  Note that reading this property
		makes a copy of the userStyles set in the format of this element. 
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:verticalAlign:get"><apiName>verticalAlign</apiName><shortdesc>
		 TextLayoutFormat:
		 Vertical alignment or justification (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Vertical alignment or justification (adopts default value if undefined during cascade).
		 Determines how TextFlow elements align within the container.
		 <p>Legal values are VerticalAlign.TOP, VerticalAlign.MIDDLE, VerticalAlign.BOTTOM, VerticalAlign.JUSTIFY, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of VerticalAlign.TOP.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#VerticalAlign"><linktext>flashx.textLayout.formats.VerticalAlign</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:whiteSpaceCollapse:get"><apiName>whiteSpaceCollapse</apiName><shortdesc>
		 TextLayoutFormat:
		 Collapses or preserves whitespace when importing text into a TextFlow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Collapses or preserves whitespace when importing text into a TextFlow. <codeph>WhiteSpaceCollapse.PRESERVE</codeph> retains all whitespace characters. <codeph>WhiteSpaceCollapse.COLLAPSE</codeph> removes newlines, tabs, and leading or trailing spaces within a block of imported text. Line break tags () and Unicode line separator characters are retained.
		 <p>Legal values are WhiteSpaceCollapse.PRESERVE, WhiteSpaceCollapse.COLLAPSE, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of WhiteSpaceCollapse.COLLAPSE.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#WhiteSpaceCollapse"><linktext>flashx.textLayout.formats.WhiteSpaceCollapse</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:wordSpacing:get"><apiName>wordSpacing</apiName><shortdesc>
		 TextLayoutFormat:
		 Specifies the optimum, minimum, and maximum spacing (as a multiplier of the width of a normal space) between words to use during justification.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Specifies the optimum, minimum, and maximum spacing (as a multiplier of the width of a normal space) between words to use during justification.
		 The optimum space is used to indicate the desired size of a space, as a fraction of the value defined in the font. The minimum and maximum values are the used when textJustify is distribute to determine how wide or narrow the spaces between the words may grow before letter spacing is used to justify the line.
		 <p>Legal values as a percent are numbers from -1000% to 1000%.</p>
		 <p>Legal values include FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 100%, 50%, 150%.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:tracking:set"><apiName>tracking</apiName><shortdesc>
		 Sets the tracking and is synonymous with the trackingRight property.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Object"/></apiValueDef><apiDesc>
		 Sets the tracking and is synonymous with the <codeph>trackingRight</codeph> property. Specified as a number of
		 pixels or a percent of <codeph>fontSize</codeph>.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/trackingRight"><linktext>trackingRight</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:TextRange"><apiName>TextRange</apiName><shortdesc>
	 A read only class that describes a range of contiguous text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 A read only class that describes a range of contiguous text. Such a range occurs when you select a
	 section of text. The range consists of the anchor point of the selection, <codeph>anchorPosition</codeph>,
	 and the point that is to be modified by actions, <codeph>activePosition</codeph>.  As block selections are 
	 modified and extended <codeph>anchorPosition</codeph> remains fixed and <codeph>activePosition</codeph> is modified.  
	 The anchor position may be placed in the text before or after the active position.
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.elements:TextRange:absoluteEnd:get"><apiName>absoluteEnd</apiName><shortdesc> End of the selection, as an absolute position in the TextFlow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc> End of the selection, as an absolute position in the TextFlow.
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:TextRange:absoluteStart:get"><apiName>absoluteStart</apiName><shortdesc> Start of the selection, as an absolute position in the TextFlow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc> Start of the selection, as an absolute position in the TextFlow.
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:TextRange:activePosition:get"><apiName>activePosition</apiName><shortdesc> Active position of the selection, as an absolute position in the TextFlow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc> Active position of the selection, as an absolute position in the TextFlow.
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:TextRange:anchorPosition:get"><apiName>anchorPosition</apiName><shortdesc> Anchor position of the selection, as an absolute position in the TextFlow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc> Anchor position of the selection, as an absolute position in the TextFlow.
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:TextRange:textFlow:get"><apiName>textFlow</apiName><shortdesc> Returns the TextFlow associated with the selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.elements:TextFlow</apiValueClassifier></apiValueDef><apiDesc> Returns the TextFlow associated with the selection.
		</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:TabElement"><apiName>TabElement</apiName><shortdesc> 
	 The TabElement class represents a &amp;lt;tab/&amp;gt; in the text flow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flashx.textLayout.elements:SpecialCharacterElement</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 The TabElement class represents a &lt;tab/&gt; in the text flow. You assign tab stops as an array of TabStopFormat objects to the 
	 <codeph>ParagraphElement.tabStops</codeph> property.
	 
	 <p><b>Note</b>:This class exists primarily to support &lt;tab/&gt; in MXML markup. You can add tab characters (\t) directly 
	 into the text like this:</p>
	 
	 <codeblock rev="3.0">
	 spanElement1.text += '\t';
	 </codeblock>
	 
	 </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="flashx.textLayout.elements:ListElement"><apiName>ListElement</apiName><shortdesc> 
	 The List class is used for grouping together items into a numbered or unnumbered list.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.elements:ContainerFormattedElement</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 The List class is used for grouping together items into a numbered or unnumbered list. A ListElement's children may be of type ListItemElement,
	 ListElement, ParagraphElement, or DivElement. 
	 
	 <p>Each ListElement creates a scope with an implicit counter 'ordered'.</p>
	 
	 </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="flashx.textLayout.elements:SpecialCharacterElement"><apiName>SpecialCharacterElement</apiName><shortdesc> The SpecialCharacterElement class is an abstract base class for elements that represent special characters.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.elements:SpanElement</apiBaseClassifier></apiClassifierDef><apiDesc> The SpecialCharacterElement class is an abstract base class for elements that represent special characters.
	 
	 <p>You cannot create a SpecialCharacterElement object directly. Invoking <codeph>new SpecialCharacterElement()</codeph>
	 throws an error exception.</p>
	 
	 </apiDesc></apiClassifierDetail></apiClassifier></apiPackage><apiPackage id="flashx.textLayout.events"><apiName>flashx.textLayout.events</apiName><apiClassifier id="flashx.textLayout.events:StatusChangeEvent"><apiName>StatusChangeEvent</apiName><shortdesc> 
	 A TextFlow instance dispatches this event when the status of a FlowElement changes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 A TextFlow instance dispatches this event when the status of a FlowElement changes. 
	 This event can be used to detect when an inline graphic element has
	 completed loading. You can use your event handler to recompose the text flow
	 based on the presence of the newly loaded inline graphic element.
	 
	 </apiDesc><example/></apiClassifierDetail><apiValue id="flashx.textLayout.events:StatusChangeEvent:INLINE_GRAPHIC_STATUS_CHANGE"><apiName>INLINE_GRAPHIC_STATUS_CHANGE</apiName><shortdesc> 
	     Defines the value of the type property of a inlineGraphicStatusChanged event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>inlineGraphicStatusChange</apiData><apiType value="String"/></apiValueDef><apiDesc> 
	     Defines the value of the <codeph>type</codeph> property of a <codeph>inlineGraphicStatusChanged</codeph> event object.
	     </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:StatusChangeEvent:element:get"><apiName>element</apiName><shortdesc> 
		 The FlowElement instance that has experienced a change in status.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.elements:FlowElement</apiValueClassifier></apiValueDef><apiDesc> 
		 The FlowElement instance that has experienced a change in status. 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement"><linktext>flashx.textLayout.elements.FlowElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.events:StatusChangeEvent:errorEvent:get"><apiName>errorEvent</apiName><shortdesc> 
		 The ErrorEvent object that was dispatched as a result of the status change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.events:ErrorEvent"/></apiValueDef><apiDesc> 
		 The ErrorEvent object that was dispatched as a result of the status change. 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.events.ErrorEvent.xml"><linktext>flash.events.ErrorEvent</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.events:StatusChangeEvent:status:get"><apiName>status</apiName><shortdesc>
		 The FlowElement's new status.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
		 The FlowElement's new status. The possible values of this property are
		 defined by the InlineGraphicElementStatus class. There are five static constants
		 available in the InlineGraphicElementStatus class:
		 <ul>
		   <li>ERROR : String = "error". An error occurred during loading of a referenced graphic.</li>
		   <li>LOADING : String = "loading". Load has been initiated (but not completed) on a graphic element that is a URL.</li>
		   <li>LOAD_PENDING : String = "loadPending". Graphic element is an URL that has not been loaded.</li>
		   <li>READY : String = "ready". Graphic is completely loaded and properly sized.</li>
		   <li>SIZE_PENDING : String = "sizePending". Graphic element with auto or percentage width/height has completed loading but has not been recomposed.</li>
		 </ul>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElementStatus"><linktext>flashx.textLayout.elements.InlineGraphicElementStatus</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.events:FlowElementMouseEvent"><apiName>FlowElementMouseEvent</apiName><shortdesc> A link element dispatches this event when it detects mouse activity.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc> A link element dispatches this event when it detects mouse activity.
	 The Text Layout Framework includes this special version of mouse events
	 because mouse events are generally unwanted when a flow element is
	 embedded in an editable text flow, and because link elements are not in
	 the display list (they are not DisplayObjects).
	 <p>You can add an event listener to a link element to listen for this
	 type of event. If you choose to cancel the event by calling
	 <codeph>Event.preventDefault()</codeph>, the default behavior associated
	 with the event will not occur.
	 </p>
	 <p>If you choose not to add an event listener to the link element, or
	 your event listener function does not cancel the behavior, the 
	 event is again dispatched, but this time by the link element's
	 associated TextFlow instance rather than by the link element itself. 
	 This provides a second opportunity to listen for this event with
	 an event listener attached to the TextFlow. 
	 </p>
	 <p>FlowElementMouseEvents are
	 dispatched only when the text cannot be edited or when the control key 
	 is pressed concurrently with the mouse activity.</p>
	 <p>
	 The following six event types are dispatched only when the text
	 cannot be edited or when the control key is pressed:
	 <ul>
	   <li><codeph>FlowElementMouseEvent.CLICK</codeph></li>
	   <li><codeph>FlowElementMouseEvent.MOUSE_DOWN</codeph></li>
	   <li><codeph>FlowElementMouseEvent.MOUSE_UP</codeph></li>
	   <li><codeph>FlowElementMouseEvent.MOUSE_MOVE</codeph></li>
	   <li><codeph>FlowElementMouseEvent.ROLL_OVER</codeph></li>
	   <li><codeph>FlowElementMouseEvent.ROLL_OUT</codeph></li>
	 </ul>
	 </p>
	 
	 </apiDesc><example/></apiClassifierDetail><apiValue id="flashx.textLayout.events:FlowElementMouseEvent:CLICK"><apiName>CLICK</apiName><shortdesc>
		 Defines the value of the type property of a click event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>click</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 Defines the value of the <codeph>type</codeph> property of a <codeph>click</codeph> event object. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/CLICK"><linktext>flash.events.MouseEvent.CLICK</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.events:FlowElementMouseEvent:MOUSE_DOWN"><apiName>MOUSE_DOWN</apiName><shortdesc>
		 Defines the value of the type property of a mouseDown event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseDown</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 Defines the value of the <codeph>type</codeph> property of a <codeph>mouseDown</codeph> event object. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_DOWN"><linktext>flash.events.MouseEvent.MOUSE_DOWN</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.events:FlowElementMouseEvent:MOUSE_MOVE"><apiName>MOUSE_MOVE</apiName><shortdesc>
		 Defines the value of the type property of a mouseMove event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseMove</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 Defines the value of the <codeph>type</codeph> property of a <codeph>mouseMove</codeph> event object. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_MOVE"><linktext>flash.events.MouseEvent.MOUSE_MOVE</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.events:FlowElementMouseEvent:MOUSE_UP"><apiName>MOUSE_UP</apiName><shortdesc>
		 Defines the value of the type property of a mouseUp event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseUp</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 Defines the value of the <codeph>type</codeph> property of a <codeph>mouseUp</codeph> event object. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_UP"><linktext>flash.events.MouseEvent.MOUSE_UP</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.events:FlowElementMouseEvent:ROLL_OUT"><apiName>ROLL_OUT</apiName><shortdesc>
		 Defines the value of the type property of a rollOut event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rollOut</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 Defines the value of the <codeph>type</codeph> property of a <codeph>rollOut</codeph> event object. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/ROLL_OUT"><linktext>flash.events.MouseEvent.ROLL_OUT</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.events:FlowElementMouseEvent:ROLL_OVER"><apiName>ROLL_OVER</apiName><shortdesc>
		 Defines the value of the type property of a rollOver event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rollOver</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 Defines the value of the <codeph>type</codeph> property of a <codeph>rollOver</codeph> event object. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/ROLL_OVER"><linktext>flash.events.MouseEvent.ROLL_OVER</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.events:FlowElementMouseEvent:flowElement:get"><apiName>flowElement</apiName><shortdesc> 
		 The FlowElement that dispatched the event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.elements:FlowElement</apiValueClassifier></apiValueDef><apiDesc> 
		 The FlowElement that dispatched the event.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement"><linktext>flashx.textLayout.elements.FlowElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.events:FlowElementMouseEvent:originalEvent:get"><apiName>originalEvent</apiName><shortdesc> 
		 The original mouse event generated by the mouse activity.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.events:MouseEvent"/></apiValueDef><apiDesc> 
		 The original mouse event generated by the mouse activity. 
		 This property can contain any of the following values:
		 <ul>
		   <li><codeph>MouseEvent.CLICK</codeph></li>
		   <li><codeph>MouseEvent.MOUSE_DOWN</codeph></li>
		   <li><codeph>MouseEvent.MOUSE_UP</codeph></li>
		   <li><codeph>MouseEvent.MOUSE_MOVE</codeph></li>
		   <li><codeph>MouseEvent.MOUSE_OVER</codeph></li>
		   <li><codeph>MouseEvent.MOUSE_OUT</codeph></li>
		 </ul>
		 <p>
		 In most cases the original event matches the event that the
		 link element dispatches. The events match for the <codeph>click</codeph>,
		 <codeph>mouseDown</codeph>, <codeph>mouseOut</codeph>, and <codeph>mouseOver</codeph>
		 events. There are two cases, however, in which the original event
		 is converted by the link element to a related event. 
		 If a link element detects a <codeph>mouseOver</codeph> event, it dispatches
		 a <codeph>rollOver</codeph> event. Likewise, if a link element detects
		 a <codeph>mouseOut</codeph> event, it dispatches a <codeph>rollOut</codeph> event.
		 Usually, the event target and the mouse coordinates are related to
		 the TextLine instance containing the link element.
		 </p>
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.events.MouseEvent.xml"><linktext>flash.events.MouseEvent</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.events:CompositionCompleteEvent"><apiName>CompositionCompleteEvent</apiName><shortdesc> 
	 A TextFlow instance dispatches this event after a compose operation completes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 A TextFlow instance dispatches this event after a compose operation completes. 
	 Each text container has two states: composition and display. This event notifies
	 you when the composition phase has ended. This provides an opportunity to make any
	 necessary and appropriate changes to the container before you display the text. 
	 For example, you can use this event to add highlighting of certain words or
	 characters in the text flow before the text is displayed.
	 
	 <p>The three main methods that dispatch this event are <codeph>compose()</codeph>, 
	 <codeph>updateToController()</codeph>, and <codeph>updateAllControllers()</codeph>.
	 All three of these methods are in the StandardFlowComposer class.</p>
	 
	 <p><b>Note: </b>If the event is dispatched by the
	 <codeph>updateAllControllers()</codeph> method, do not call 
	 <codeph>updateAllControllers()</codeph> again in your event handler function.
	 Such a call would be a recursive call because the <codeph>updateAllControllers()</codeph> 
	 method executes both the composition and display steps. The <codeph>updateAllControllers()</codeph>
	 dispatches this event after composition completes, but before the display step executes.
	 The same reasoning applies to the <codeph>updateToController()</codeph> method.
	 </p>
	 
	 </apiDesc><example/></apiClassifierDetail><apiValue id="flashx.textLayout.events:CompositionCompleteEvent:COMPOSITION_COMPLETE"><apiName>COMPOSITION_COMPLETE</apiName><shortdesc> 
	     Defines the value of the type property of a compositionComplete event object 
	     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>compositionComplete</apiData><apiType value="String"/></apiValueDef><apiDesc> 
	     Defines the value of the <codeph>type</codeph> property of a <codeph>compositionComplete</codeph> event object 
	     </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:CompositionCompleteEvent:compositionLength:get"><apiName>compositionLength</apiName><shortdesc> 
		 The number of characters composed.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc> 
		 The number of characters composed.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:CompositionCompleteEvent:compositionStart:get"><apiName>compositionStart</apiName><shortdesc> 
		 The start location of the text range affected by the composition, expressed as an index into the text flow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc> 
		 The start location of the text range affected by the composition, expressed as an index into the text flow.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:CompositionCompleteEvent:textFlow:get"><apiName>textFlow</apiName><shortdesc>
		 TextFlow on which composition has been completed.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.elements:TextFlow</apiValueClassifier></apiValueDef><apiDesc>
		 TextFlow on which composition has been completed. 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.events:DamageEvent"><apiName>DamageEvent</apiName><shortdesc> 
	 A TextFlow instance dispatches this each time it is marked as damaged.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 A TextFlow instance dispatches this each time it is marked as damaged.  Damage can be caused by changes to the model or changes to the layout.
	 
	 </apiDesc><example/></apiClassifierDetail><apiValue id="flashx.textLayout.events:DamageEvent:DAMAGE"><apiName>DAMAGE</apiName><shortdesc> Event type for DamageEvent </shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>damage</apiData><apiType value="String"/></apiValueDef><apiDesc> Event type for DamageEvent </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:DamageEvent:damageAbsoluteStart:get"><apiName>damageAbsoluteStart</apiName><shortdesc>
		 Absolute start of the damage 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 Absolute start of the damage 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:DamageEvent:damageLength:get"><apiName>damageLength</apiName><shortdesc>
		 Length of the damage 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 Length of the damage 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:DamageEvent:textFlow:get"><apiName>textFlow</apiName><shortdesc>
		 TextFlow owning the damage 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:TextFlow</apiValueClassifier></apiValueDef><apiDesc>
		 TextFlow owning the damage 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.events:SelectionEvent"><apiName>SelectionEvent</apiName><shortdesc> 
	 A TextFlow instance dispatches a SelectionEvent object when
	 an EditManager or SelectionManager changes or selects a range of text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 A TextFlow instance dispatches a SelectionEvent object when
	 an EditManager or SelectionManager changes or selects a range of text. 
	 For example, this event is dispatched not only when a range of text is
	 selected, but also when the selection changes because the
	 user clicks elsewhere in the text flow. Moreover, this
	 event is also dispatched when an EditManager changes
	 the text or text formatting within a range of text.
	 
	 </apiDesc><example/></apiClassifierDetail><apiValue id="flashx.textLayout.events:SelectionEvent:SELECTION_CHANGE"><apiName>SELECTION_CHANGE</apiName><shortdesc> 
		 The SelectionEvent.SELECTION_CHANGE constant defines the value of the 
		 type property of the event object for a selection event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>selectionChange</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		 The SelectionEvent.SELECTION_CHANGE constant defines the value of the 
		 type property of the event object for a selection event. 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:SelectionEvent:selectionState:get"><apiName>selectionState</apiName><shortdesc> 
		 An object of type SelectionState that represents the selected range associated with this SelectionEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.edit:SelectionState</apiValueClassifier></apiValueDef><apiDesc> 
		 An object of type SelectionState that represents the selected range associated with this SelectionEvent.
		 
		 <p>You can use this property, along with the ElementRange class, to create an ElementRange
		 instance that represents the range of selected text.
		 You can use the following line of code to create an instance of the
		 ElementRange class that represents the range of selected text
		 (the <codeph>ev</codeph> variable represents the event object, and the conditional operator 
		 is used to guard against a <codeph>null</codeph> value for the <codeph>selectionState</codeph>
		 property):</p>
		 <codeblock>
		 // Find selected element range
		 var range:ElementRange = ev.selectionState ?  
		 	ElementRange.createElementRange(ev.selectionState.textFlow,
		 	ev.selectionState.absoluteStart, ev.selectionState.absoluteEnd) : null;</codeblock>
		 
		 
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.edit.xml#ElementRange"><linktext>flashx.textLayout.edit.ElementRange</linktext></link><link href="flashx.textLayout.edit.xml#SelectionState"><linktext>flashx.textLayout.edit.SelectionState</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.events:FlowOperationEvent"><apiName>FlowOperationEvent</apiName><shortdesc> A TextFlow instance dispatches this event just before an operation commences
	 and again just after an operation completes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc> A TextFlow instance dispatches this event just before an operation commences
	 and again just after an operation completes. Although the event object
	 dispatched in both cases is an instance of FlowOperationEvent, the events
	 dispatched before and after an operation differ in significant ways.
	 
	 <p>Before any operation is carried out, a TextFlow object dispatches a FlowOperationEvent
	 with its <codeph>type</codeph> property set to <codeph>FlowOperationEvent.FLOW_OPERATION_BEGIN.</codeph>
	 You can determine what type of operation is about to commence by checking
	 the <codeph>operation</codeph> property. Events of type FLOW_OPERATION_BEGIN are
	 cancellable, which means that if you decide that the operation should not proceed,
	 you can call <codeph>Event.PreventDefault()</codeph> to cancel the operation.
	 If you cancel the operation, the operation is not performed and the 
	 FLOW_OPERATION_END event is not dispatched. You may also choose to call back into the
	 EditManager to do another operation before the operation that triggered the event is done. If you do
	 this, the operations you initiate in your event handler will be undone as a single
	 operation with the operation that triggered the event.</p>
	 
	 <p>If you allow the operation to proceed, TextFlow will dispatch a FlowOperationEvent
	 upon completion of the operation with its <codeph>type</codeph> property set to
	 <codeph>FlowOperationEvent.FLOW_OPERATION_END</codeph>. This event is dispatched
	 before Flash Player throws any errors that may have occurred as a result of the
	 operation. This gives you an opportunity to process the error before Flash Player
	 throws the error. You can access the error through the event's <codeph>error</codeph>
	 property. If you choose to handle the error in your event handler, you can prevent
	 Flash Player from throwing the error by cancelling the FLOW_OPERATION_END event
	 by calling <codeph>Event.preventDefault()</codeph>. You may also choose to call back into the
	 EditManager to do some additional operations. If you do this, the operations that result
	 will be undone as a unit with the operation that triggered the event.
	 </p> 
	 
	 </apiDesc><example/></apiClassifierDetail><apiValue id="flashx.textLayout.events:FlowOperationEvent:FLOW_OPERATION_BEGIN"><apiName>FLOW_OPERATION_BEGIN</apiName><shortdesc> 
		 Defines the value of the type property of a flowOperationBegin event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>flowOperationBegin</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		 Defines the value of the <codeph>type</codeph> property of a <codeph>flowOperationBegin</codeph> event object.
		 Dispatched before an operation is executed.   Cancelling this event blocks the operation. 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:FlowOperationEvent:FLOW_OPERATION_COMPLETE"><apiName>FLOW_OPERATION_COMPLETE</apiName><shortdesc>  
		 Defines the value of the type property of a flowOperationComplete event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>flowOperationComplete</apiData><apiType value="String"/></apiValueDef><apiDesc>  
		 Defines the value of the <codeph>type</codeph> property of a <codeph>flowOperationComplete</codeph> event object.
		 Dispatched after all operations including pending and composite operations are completed, composition is finished and the display is scrolled.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:FlowOperationEvent:FLOW_OPERATION_END"><apiName>FLOW_OPERATION_END</apiName><shortdesc>  
		 Defines the value of the type property of a flowOperationEnd event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>flowOperationEnd</apiData><apiType value="String"/></apiValueDef><apiDesc>  
		 Defines the value of the <codeph>type</codeph> property of a <codeph>flowOperationEnd</codeph> event object.
		 Dispatched after an operation completes. Any errors are stored in <codeph>OperationEvent.error</codeph>.
	 	 If there is an error, cancelling this event blocks the rethrow of the error.
	 	 Generally speaking all errors are likely to be fatal.
	 	 <p>Changing an operation at this time (after it has been executed) may fail.</p> 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:FlowOperationEvent:error:get"><apiName>error</apiName><shortdesc> 
		 The error thrown, if any, during an operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Error"/></apiValueDef><apiDesc> 
		 The error thrown, if any, during an operation.  
		 If an error occurs during an operation, a reference to the error object is attached to the 
		 FLOW_OPERATION_END event. This give you the opportunity to deal with the error
		 before Flash Player throws the error. If you cancel the event, Flash Player will not throw the error.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:FlowOperationEvent:level:get"><apiName>level</apiName><shortdesc> 
		 Operations may be merged into composite operations through nesting.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc> 
		 Operations may be merged into composite operations through nesting.  This flag describes the nesting level of the operation.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:FlowOperationEvent:operation:get"><apiName>operation</apiName><shortdesc> 
		 The operation that is about to begin or has just ended.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.operations:FlowOperation</apiValueClassifier></apiValueDef><apiDesc> 
		 The operation that is about to begin or has just ended.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.operations.xml#FlowOperation"><linktext>flashx.textLayout.operations.FlowOperation</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.events:ScrollEvent"><apiName>ScrollEvent</apiName><shortdesc>
	  Represents events that are dispatched when the TextFlow does automatic scrolling.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.events:TextLayoutEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Represents events that are dispatched when the TextFlow does automatic scrolling.
	 
	  </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.events:ScrollEvent:delta"><apiName>delta</apiName><shortdesc>
		  The change in the scroll position value that resulted from 
		  the scroll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
		  The change in the scroll position value that resulted from 
		  the scroll. The value is expressed in pixels. A positive value indicates the 
		  scroll was down or to the right. A negative value indicates the scroll  
		 	was up or to the left.
		  
		  </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:ScrollEvent:direction"><apiName>direction</apiName><shortdesc>
		  The direction of motion.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
		  The direction of motion.
		  The possible values are <codeph>ScrollEventDirection.VERTICAL</codeph>
		  or <codeph>ScrollEventDirection.HORIZONTAL</codeph>.
		 
		  </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.events.xml#ScrollEventDirection"><linktext>flashx.textLayout.events.ScrollEventDirection</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.events:TextLayoutEvent"><apiName>TextLayoutEvent</apiName><shortdesc>
	 A TextLayoutEvent instance represents an event, such as the 
	 TextLayoutEvent.SCROLL event, that does not require
	 custom properties.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
	 A TextLayoutEvent instance represents an event, such as the 
	 <codeph>TextLayoutEvent.SCROLL</codeph> event, that does not require
	 custom properties. 
	 <p>A scroll event is represented by a TextLayoutEvent instance with its 
	 <codeph>type</codeph> property set to <codeph>TextLayoutEvent.SCROLL</codeph>.
	 A class specifically for scroll events is not necessary because there are
	 no custom properties for a scroll event, as there are for the other
	 events that have specific event classes.
	 If a new text layout event is needed, and the event does not require
	 custom properties, the new event will also be represented by a
	 TextLayoutEvent object, but with its <codeph>type</codeph> property
	 set to a new static constant.
	 </p>
	 
	 </apiDesc><example/></apiClassifierDetail><apiValue id="flashx.textLayout.events:TextLayoutEvent:SCROLL"><apiName>SCROLL</apiName><shortdesc>
	      The TextLayoutEvent.SCROLL constant defines the value of the
	      type property of the event object for a scroll event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>scroll</apiData><apiType value="String"/></apiValueDef><apiDesc>
	      The <codeph>TextLayoutEvent.SCROLL</codeph> constant defines the value of the
	      <codeph>type</codeph> property of the event object for a <codeph>scroll</codeph> event.
	     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.events:ScrollEventDirection"><apiName>ScrollEventDirection</apiName><shortdesc>
      Constants for the values of the direction property
      of a ScrollEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.0"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
      Constants for the values of the <codeph>direction</codeph> property
      of a ScrollEvent.
     
      </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.events:ScrollEventDirection:HORIZONTAL"><apiName>HORIZONTAL</apiName><shortdesc>
          The user scrolled horizontally.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.0"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>horizontal</apiData><apiType value="String"/></apiValueDef><apiDesc>
          The user scrolled horizontally.
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:ScrollEventDirection:VERTICAL"><apiName>VERTICAL</apiName><shortdesc>
          The user scrolled vertically.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.0"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>vertical</apiData><apiType value="String"/></apiValueDef><apiDesc>
          The user scrolled vertically.
         
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.events:UpdateCompleteEvent"><apiName>UpdateCompleteEvent</apiName><shortdesc> 
	 A TextFlow instance dispatches this event after any of its containers completes 
	 an update.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata><asCustoms><internal>Note: the DamageEvent_example class contains a good example of 
	 using the UpdateCompleteEvent, so I have included it as the class example
	 instead of creating a new example. I've updated the description of the
	 DamageEvent_example file to include prominent mention of the UpdateCompleteEvent.
	 
	 </internal></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 A TextFlow instance dispatches this event after any of its containers completes 
	 an update. Each text container has two states: composition and display. This 
	 event notifies you when the display phase has ended. This provides an 
	 opportunity to make any necessary changes to the container when it is ready to
	 be displayed, but hasn't yet been painted to the screen.
	 
	 </apiDesc><example/></apiClassifierDetail><apiValue id="flashx.textLayout.events:UpdateCompleteEvent:UPDATE_COMPLETE"><apiName>UPDATE_COMPLETE</apiName><shortdesc> 
	     Defines the value of the type property of an UpdateCompleteEvent object 
	     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>updateComplete</apiData><apiType value="String"/></apiValueDef><apiDesc> 
	     Defines the value of the <codeph>type</codeph> property of an <codeph>UpdateCompleteEvent</codeph> object 
	     </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:UpdateCompleteEvent:controller:get"><apiName>controller</apiName><shortdesc> 
		 The controller of the container being updated
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.container:ContainerController</apiValueClassifier></apiValueDef><apiDesc> 
		 The controller of the container being updated
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:UpdateCompleteEvent:textFlow:get"><apiName>textFlow</apiName><shortdesc>
		 TextFlow which has been updated.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.elements:TextFlow</apiValueClassifier></apiValueDef><apiDesc>
		 TextFlow which has been updated. 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage><apiPackage id="flashx.textLayout.factory"><apiName>flashx.textLayout.factory</apiName><apiClassifier id="flashx.textLayout.factory:TruncationOptions"><apiName>TruncationOptions</apiName><shortdesc> 
	 The TruncationOptions class specifies options for limiting the number of lines of text 
	 created by a text line factory and for indicating when lines have been left out.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 The TruncationOptions class specifies options for limiting the number of lines of text 
	 created by a text line factory and for indicating when lines have been left out.
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.factory:TruncationOptions:HORIZONTAL_ELLIPSIS"><apiName>HORIZONTAL_ELLIPSIS</apiName><shortdesc>
		 Defines the truncationIndicator property value, \u2026, that represents a horizontal ellipsis.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>…</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 Defines the <codeph>truncationIndicator</codeph> property value, <codeph>\u2026</codeph>, that represents a horizontal ellipsis.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.factory.xml#TruncationOptions/truncationIndicator"><linktext>truncationIndicator</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.factory:TruncationOptions:NO_LINE_COUNT_LIMIT"><apiName>NO_LINE_COUNT_LIMIT</apiName><shortdesc>
		 Defines the lineCountLimit property value, -1, that represents no limit.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>-1</apiData><apiType value="int"/></apiValueDef><apiDesc>
		 Defines the <codeph>lineCountLimit</codeph> property value, <codeph>-1</codeph>, that represents no limit.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.factory.xml#TruncationOptions/lineCountLimit"><linktext>lineCountLimit</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.factory:TruncationOptions:lineCountLimit:get"><apiName>lineCountLimit</apiName><shortdesc> 
		 The maximum number of lines to create.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc> 
		 The maximum number of lines to create.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.factory:TruncationOptions:truncationIndicatorFormat:get"><apiName>truncationIndicatorFormat</apiName><shortdesc> 
		 The style applied to the truncation indicator string.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		 The style applied to the truncation indicator string.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.factory:TruncationOptions:truncationIndicator:get"><apiName>truncationIndicator</apiName><shortdesc> 
		 A string used to indicate that content could not be fully displayed
		 because of limits on the number of lines.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc> 
		 A string used to indicate that content could not be fully displayed
		 because of limits on the number of lines.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.factory:StringTextLineFactory"><apiName>StringTextLineFactory</apiName><shortdesc>
 The StringTextLineFactory class provides a simple way to create TextLines from a string.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.factory:TextLineFactoryBase</apiBaseClassifier></apiClassifierDef><apiDesc>
 The StringTextLineFactory class provides a simple way to create TextLines from a string. 
 
 <p>The text lines are static and are created using a single format and a single paragraph. 
 The lines are created to fit in the specified bounding rectangle.</p>
 
 <p>The StringTextLineFactory provides an efficient way to create TextLines, since it reuses single TextFlow,
 ParagraphElement, SpanElement, and ContainerController objects across many repeated invocations. You can create a
 single factory, and use it again and again. You can also reuse all the parts that are the same each time
 you call it; for instance, you can reuse the various formats and the bounds.</p> 
 
 <p><b>Note:</b> To create static lines that use multiple formats or paragraphs, or that include
 inline graphics, use a TextFlowTextLineFactory and a TextFlow object. </p>
 
 <p><b>Note:</b> The StringTextLineFactory ignores the truncationIndicatorFormat property set in the truncationOptions when truncating text.</p>
  
 </apiDesc><example/></apiClassifierDetail><apiValue id="flashx.textLayout.factory:StringTextLineFactory:configuration:get"><apiName>configuration</apiName><shortdesc> 
		 The configuration used by the internal TextFlow object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:IConfiguration</apiValueClassifier></apiValueDef><apiDesc> 
		 The configuration used by the internal TextFlow object.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.factory:StringTextLineFactory:defaultConfiguration:get"><apiName>defaultConfiguration</apiName><shortdesc> 
		 The default configuration used by this factory if none is specified.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:IConfiguration</apiValueClassifier></apiValueDef><apiDesc> 
		 The default configuration used by this factory if none is specified. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.factory:StringTextLineFactory:paragraphFormat:get"><apiName>paragraphFormat</apiName><shortdesc> 
		 The paragraph format.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		 The paragraph format. 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.factory:StringTextLineFactory:spanFormat:get"><apiName>spanFormat</apiName><shortdesc> 
		 The character format.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		 The character format. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.factory:StringTextLineFactory:textFlowFormat:get"><apiName>textFlowFormat</apiName><shortdesc> 
		 The text flow format.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		 The text flow format.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.factory:StringTextLineFactory:text:get"><apiName>text</apiName><shortdesc> 
		 The text to convert into TextLine objects.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc> 
		 The text to convert into TextLine objects.
		 
		 <p>To produce TextLines, call <codeph>createTextLines()</codeph> after setting this
		 <codeph>text</codeph> property and the desired formats.</p> 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.factory:TextLineFactoryBase"><apiName>TextLineFactoryBase</apiName><shortdesc>
 The TextLineFactoryBase class serves as the base class for the Text Layout Framework text line factories.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><Exclude kind="method" name="getNextTruncationPosition"/><Exclude kind="method" name="doesComposedTextFit"/><Exclude kind="method" name="callbackWithTextLines"/><Exclude kind="method" name="setContentBounds"/><Exclude kind="property" name="containerController"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 The TextLineFactoryBase class serves as the base class for the Text Layout Framework text line factories.
 
 <p><b>Note:</b> Application code does not typically need to create or use a TextLineFactoryBase object directly.
 Use one of the derived text factory classes instead.</p>
  
 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.factory:TextLineFactoryBase:compositionBounds:get"><apiName>compositionBounds</apiName><shortdesc>
		 The rectangle within which text lines are created.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc>
		 The rectangle within which text lines are created.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.factory:TextLineFactoryBase:horizontalScrollPolicy:get"><apiName>horizontalScrollPolicy</apiName><shortdesc> 
		 Specifies how lines are created when the composition bounds are not large enough.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc> 
		 Specifies how lines are created when the composition bounds are not large enough.
		  
		 <p>If set to <codeph>ScrollPolicy.ON</codeph> or <codeph>ScrollPolicy.AUTO</codeph>, all lines
		 are created. It is the your responsibility to scroll lines in the viewable area (and to
		 mask lines outside this area, if necessary). If set to <codeph>ScrollPolicy.OFF</codeph>, then 
		 only lines that fit within the composition bounds are created.</p>
		 
		 <p>If the <codeph>truncationOptions</codeph> property is set, the scroll policy is ignored 
		 (and treated as <codeph>ScrollPolicy.OFF</codeph>).</p> 
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#StandardFlowComposer"><linktext>flashx.textLayout.compose.StandardFlowComposer</linktext></link><link href="flashx.textLayout.container.xml#ScrollPolicy"><linktext>flashx.textLayout.container.ScrollPolicy</linktext></link><link href="flashx.textLayout.factory.xml#TextLineFactoryBase/truncationOptions"><linktext>truncationOptions</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.factory:TextLineFactoryBase:isTruncated:get"><apiName>isTruncated</apiName><shortdesc> 
		 Indicates whether text was truncated when lines were last created.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc> 
		 Indicates whether text was truncated when lines were last created.
		  
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.factory:TextLineFactoryBase:swfContext:get"><apiName>swfContext</apiName><shortdesc> 
		The ISWFContext instance used to make FTE calls as needed.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.compose:ISWFContext</apiValueClassifier></apiValueDef><apiDesc> 
		The ISWFContext instance used to make FTE calls as needed. 
		
		<p>By default, the ISWFContext implementation is this FlowComposerBase object.
		Applications can provide a custom implementation to use fonts
		embedded in a different SWF file or to cache and reuse text lines.</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#ISWFContext"><linktext>flashx.textLayout.compose.ISWFContext</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.factory:TextLineFactoryBase:truncationOptions:get"><apiName>truncationOptions</apiName><shortdesc> 
		 Specifies the options for truncating the text if it doesn't fit in the composition bounds.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.factory:TruncationOptions</apiValueClassifier></apiValueDef><apiDesc> 
		 Specifies the options for truncating the text if it doesn't fit in the composition bounds.
		  
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.factory:TextLineFactoryBase:verticalScrollPolicy:get"><apiName>verticalScrollPolicy</apiName><shortdesc> 
		 Specifies how lines are created when the composition bounds are not large enough.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc> 
		 Specifies how lines are created when the composition bounds are not large enough.
		  
		 <p>If set to <codeph>ScrollPolicy.ON</codeph> or <codeph>ScrollPolicy.AUTO</codeph>, all lines
		 are created. It is the your responsibility to scroll lines in the viewable area (and to
		 mask lines outside this area, if necessary). If set to <codeph>ScrollPolicy.OFF</codeph>, then 
		 only lines that fit within the composition bounds are created.</p>
		 
		 <p>If the <codeph>truncationOptions</codeph> property is set, the scroll policy is ignored 
		 (and treated as <codeph>ScrollPolicy.OFF</codeph>).</p> 
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#StandardFlowComposer"><linktext>flashx.textLayout.compose.StandardFlowComposer</linktext></link><link href="flashx.textLayout.container.xml#ScrollPolicy"><linktext>flashx.textLayout.container.ScrollPolicy</linktext></link><link href="flashx.textLayout.factory.xml#TextLineFactoryBase/truncationOptions"><linktext>truncationOptions</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.factory:TextFlowTextLineFactory"><apiName>TextFlowTextLineFactory</apiName><shortdesc>
 The TextFlowTextLineFactory class provides a simple way to create TextLines for displaying text from a text flow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.factory:TextLineFactoryBase</apiBaseClassifier></apiClassifierDef><apiDesc>
 The TextFlowTextLineFactory class provides a simple way to create TextLines for displaying text from a text flow.
 
 <p>The text lines are static and created fit in a single bounding rectangle, but can have multiple paragraphs and formats as well as
 inline graphics. To create TextLine objects directly from a string, use StringTextLineFactory.</p> 
 
 <p><b>Note:</b> When using inline graphics, the <codeph>source</codeph> property of the InlineGraphicElement object 
 must either be an instance of a DisplayObject or a Class object representing an embedded asset. 
 URLRequest objects cannot be used. The width and height of the inline graphic at the time the line 
 is created is used to compose the flow. </p>
 
 </apiDesc><example><swfblock conref="examples\TextFlowTextLineFactory_example.swf"/></example></apiClassifierDetail></apiClassifier></apiPackage><apiPackage id="flashx.textLayout.formats"><apiName>flashx.textLayout.formats</apiName><apiClassifier id="flashx.textLayout.formats:TLFTypographicCase"><apiName>TLFTypographicCase</apiName><shortdesc>
	  Defines values for the typographicCase property of the TextLayoutFormat
	  class.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Defines values for the <codeph>typographicCase</codeph> property of the TextLayoutFormat
	  class. 
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.formats:TLFTypographicCase:CAPS_TO_SMALL_CAPS"><apiName>CAPS_TO_SMALL_CAPS</apiName><shortdesc> Specifies that uppercase characters use small-caps glyphs on output.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>capsToSmallCaps</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies that uppercase characters use small-caps glyphs on output. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TLFTypographicCase:DEFAULT"><apiName>DEFAULT</apiName><shortdesc> Specifies default typographic case -- no special features applied.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>default</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies default typographic case -- no special features applied. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TLFTypographicCase:LOWERCASE_TO_SMALL_CAPS"><apiName>LOWERCASE_TO_SMALL_CAPS</apiName><shortdesc> Converts all lowercase characters to uppercase, then applies small caps to only the 
		 characters that the conversion changed.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>lowercaseToSmallCaps</apiData><apiType value="String"/></apiValueDef><apiDesc> Converts all lowercase characters to uppercase, then applies small caps to only the 
		 characters that the conversion changed. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TLFTypographicCase:LOWERCASE"><apiName>LOWERCASE</apiName><shortdesc> Specifies that all characters use lowercase glyphs on output.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>lowercase</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies that all characters use lowercase glyphs on output. 
  	 	 
  	 	 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TLFTypographicCase:UPPERCASE"><apiName>UPPERCASE</apiName><shortdesc> Specifies that all characters use uppercase glyphs on output.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>uppercase</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies that all characters use uppercase glyphs on output.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:BreakStyle"><apiName>BreakStyle</apiName><shortdesc>
	 
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.formats:BreakStyle:ALWAYS"><apiName>ALWAYS</apiName><shortdesc> 
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>always</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:BreakStyle:AUTO"><apiName>AUTO</apiName><shortdesc> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>auto</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:VerticalAlign"><apiName>VerticalAlign</apiName><shortdesc>
	  Defines values for the verticalAlign property of the TextLayoutFormat class.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Defines values for the <codeph>verticalAlign</codeph> property of the TextLayoutFormat class. Specifies how 
	  TextFlow elements align with their containers.  
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.formats:VerticalAlign:BOTTOM"><apiName>BOTTOM</apiName><shortdesc> Specifies alignment with the bottom edge of the frame.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>bottom</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies alignment with the bottom edge of the frame. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:VerticalAlign:JUSTIFY"><apiName>JUSTIFY</apiName><shortdesc> Specifies vertical line justification within the frame 
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>justify</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies vertical line justification within the frame 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:VerticalAlign:MIDDLE"><apiName>MIDDLE</apiName><shortdesc> Specifies alignment with the middle of the frame.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>middle</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies alignment with the middle of the frame. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:VerticalAlign:TOP"><apiName>TOP</apiName><shortdesc> Specifies alignment with the top edge of the frame.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>top</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies alignment with the top edge of the frame. 
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:ColorName"><apiName>ColorName</apiName><shortdesc>
	  Defines a constant for specifying that the value of the color property
	  of the TextLayoutFormat class is "transparent".</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Defines a constant for specifying that the value of the <codeph>color</codeph> property
	  of the <codeph>TextLayoutFormat</codeph> class is "transparent".
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.formats:ColorName:AQUA"><apiName>AQUA</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>aqua</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ColorName:BLACK"><apiName>BLACK</apiName><shortdesc> Below are supported colorName values 
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>black</apiData><apiType value="String"/></apiValueDef><apiDesc> Below are supported colorName values 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ColorName:BLUE"><apiName>BLUE</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>blue</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ColorName:CYAN"><apiName>CYAN</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>cyan</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ColorName:FUCHSIA"><apiName>FUCHSIA</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>fuchsia</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ColorName:GRAY"><apiName>GRAY</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>gray</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ColorName:GREEN"><apiName>GREEN</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>green</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ColorName:LIME"><apiName>LIME</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>lime</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ColorName:MAGENTA"><apiName>MAGENTA</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>magenta</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ColorName:MAROON"><apiName>MAROON</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>maroon</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ColorName:NAVY"><apiName>NAVY</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>navy</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ColorName:OLIVE"><apiName>OLIVE</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>olive</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ColorName:PURPLE"><apiName>PURPLE</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>purple</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ColorName:RED"><apiName>RED</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>red</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ColorName:SILVER"><apiName>SILVER</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>silver</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ColorName:TEAL"><apiName>TEAL</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>teal</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ColorName:WHITE"><apiName>WHITE</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>white</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ColorName:YELLOW"><apiName>YELLOW</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>yellow</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:ListStylePosition"><apiName>ListStylePosition</apiName><shortdesc>
	 Defines values for setting the listStylePosition property.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Defines values for setting the <codeph>listStylePosition</codeph> property. These values control the placement
	 of a list item marker relative to the list item.
	 
	  </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.formats:ListStylePosition:INSIDE"><apiName>INSIDE</apiName><shortdesc> Marker will appear inline with the list item.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>inside</apiData><apiType value="String"/></apiValueDef><apiDesc> Marker will appear inline with the list item. This style position lets you include trailing spaces.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStylePosition:OUTSIDE"><apiName>OUTSIDE</apiName><shortdesc> Marker will appear in the margin of the list.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>outside</apiData><apiType value="String"/></apiValueDef><apiDesc> Marker will appear in the margin of the list. This style position does not recognize trailing spaces.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:BaselineOffset"><apiName>BaselineOffset</apiName><shortdesc>
	  Defines values for the firstBaselineOffset property
	  of the TextLayoutFormat and ContainerFormattedElement classes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Defines values for the <codeph>firstBaselineOffset</codeph> property
	  of the <codeph>TextLayoutFormat</codeph> and <codeph>ContainerFormattedElement</codeph> classes. 
	  Determines the offset from the top inset of the container
	  to the baseline of the first line. Baseline offset may be specified as 
	  the ascent of the line, the height of the line, or an auto generated amount.
	  <p>
	  <adobeimage alt="firstBaselineOffset_1" border="0" href="../../../images/textLayout_FBO1.jpg"/>
	  <adobeimage alt="firstBaselineOffset_2" border="0" href="../../../images/textLayout_FBO2.jpg"/>
	  <adobeimage alt="firstBaselineOffset_3" border="0" href="../../../images/textLayout_FBO3.jpg"/>
	  <adobeimage alt="firstBaselineOffset_4" border="0" href="../../../images/textLayout_FBO4.jpg"/>
	  </p>
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.formats:BaselineOffset:ASCENT"><apiName>ASCENT</apiName><shortdesc> Specifies an offset equal to the ascent of the line, that is, the ascent of the tallest font in the line, accounting for inline graphics as having the bottom of the graphic on the baseline.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ascent</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies an offset equal to the ascent of the line, that is, the ascent of the tallest font in the line, accounting for inline graphics as having the bottom of the graphic on the baseline.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:BaselineOffset:AUTO"><apiName>AUTO</apiName><shortdesc> Aligns the ascent of the line with the container top inset.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>auto</apiData><apiType value="String"/></apiValueDef><apiDesc> Aligns the ascent of the line with the container top inset.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:BaselineOffset:LINE_HEIGHT"><apiName>LINE_HEIGHT</apiName><shortdesc> Specifies an offset equal to the height of the line.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>lineHeight</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies an offset equal to the height of the line.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:BaselineShift"><apiName>BaselineShift</apiName><shortdesc>
	  Defines constants for specifying subscript or superscript in the baselineShift property
	  of the TextLayoutFormat class.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Defines constants for specifying subscript or superscript in the <codeph>baselineShift</codeph> property
	  of the <codeph>TextLayoutFormat</codeph> class. You can specify baseline shift as an absolute pixel offset, 
	  a percentage of the current point size, or the constants SUPERSCRIPT or 
	  SUBSCRIPT. Positive values shift the line up for horizontal text (right for vertical) and negative values 
	  shift it down for horizontal (left for vertical). 
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.formats:BaselineShift:SUBSCRIPT"><apiName>SUBSCRIPT</apiName><shortdesc> Shifts baseline to the current subscript position.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>subscript</apiData><apiType value="String"/></apiValueDef><apiDesc> Shifts baseline to the current subscript position.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:BaselineShift:SUPERSCRIPT"><apiName>SUPERSCRIPT</apiName><shortdesc> Shifts baseline to the current superscript position.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>superscript</apiData><apiType value="String"/></apiValueDef><apiDesc> Shifts baseline to the current superscript position.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:JustificationRule"><apiName>JustificationRule</apiName><shortdesc>
	  Defines values for setting the justificationRule property
	  of the TextLayoutFormat class.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Defines values for setting the <codeph>justificationRule</codeph> property
	  of the TextLayoutFormat class. Default value is SPACE, which accomplishes justification by adding 
	  extra space to the space characters. When you use EAST_ASIAN, Japanese style leading is employed, which 
	  applies bottom-down as opposed to top-up, which is used in Roman text. The spacing of punctuation is also 
	  different. In the Roman version, the comma and Japanese periods take a full character's width but only half 
	  in East Asian. Additionally, the spacing between sequential punctuation marks becomes tighter, obeying traditional 
	  East Asian typographic conventions. Also note the leading, applied to the second line of the paragraphs in the 
	  example below. In the East Asian version, the last two lines push left. In the Roman version, the second and 
	  following lines push left.
	  <p><adobeimage alt="justificationRule" href="../../../images/textLayout_justificationrule.png"/></p>
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.formats:JustificationRule:EAST_ASIAN"><apiName>EAST_ASIAN</apiName><shortdesc> Specifies East Asian justification rules.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>eastAsian</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies East Asian justification rules. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:JustificationRule:SPACE"><apiName>SPACE</apiName><shortdesc> Specifies justification for Latin and other horizontal scripts that divide words using spaces.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>space</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies justification for Latin and other horizontal scripts that divide words using spaces. 
		  Use this value for everything except East Asian text.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:TabStopFormat"><apiName>TabStopFormat</apiName><shortdesc>
	 The TabStopFormat class represents the properties of a tab stop in a paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.formats:ITabStopFormat</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The TabStopFormat class represents the properties of a tab stop in a paragraph. You can set the <codeph>TextLayoutFormat.tabstops</codeph> property to an array of TabStopFormat objects.
	 </apiDesc><example/></apiClassifierDetail><apiValue id="flashx.textLayout.formats:TabStopFormat:alignment:get"><apiName>alignment</apiName><shortdesc>
		 The tab alignment for this tab stop.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 The tab alignment for this tab stop. 
		 <p>Legal values are TabAlignment.START, TabAlignment.CENTER, TabAlignment.END, TabAlignment.DECIMAL, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of TabAlignment.START.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue/INHERIT"><linktext>FormatValue.INHERIT</linktext></link><link href="" invalidHref="flash.text.engine.TabAlignment.xml"><linktext>flash.text.engine.TabAlignment</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TabStopFormat:decimalAlignmentToken:get"><apiName>decimalAlignmentToken</apiName><shortdesc>
		 The alignment token to be used if the alignment is DECIMAL.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 The alignment token to be used if the alignment is DECIMAL.
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of null.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TabStopFormat:defaultFormat:get"><apiName>defaultFormat</apiName><shortdesc>
		 Returns a TabStopFormat object with default settings.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.formats:ITabStopFormat</apiValueClassifier></apiValueDef><apiDesc>
		 Returns a TabStopFormat object with default settings.
		 This function always returns the same object.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TabStopFormat:position:get"><apiName>position</apiName><shortdesc>
		 The position of the tab stop, in pixels, relative to the start edge of the column.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 The position of the tab stop, in pixels, relative to the start edge of the column.
		 <p>Legal values are numbers from 0 to 10000 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of 0.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue/INHERIT"><linktext>FormatValue.INHERIT</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:BackgroundColor"><apiName>BackgroundColor</apiName><shortdesc>
	  Defines a constant for specifying that the value of the backgroundColor property
	  of the TextLayoutFormat class is "transparent".</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Defines a constant for specifying that the value of the <codeph>backgroundColor</codeph> property
	  of the <codeph>TextLayoutFormat</codeph> class is "transparent".
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.formats:BackgroundColor:TRANSPARENT"><apiName>TRANSPARENT</apiName><shortdesc> Transparent - no background color is applied.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>transparent</apiData><apiType value="String"/></apiValueDef><apiDesc> Transparent - no background color is applied.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:Direction"><apiName>Direction</apiName><shortdesc>
	  Defines values for setting the direction property
	  of the TextLayoutFormat class.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Defines values for setting the <codeph>direction</codeph> property
	  of the <codeph>TextLayoutFormat</codeph> class. Left-to-right reading order 
	  is used in Latin-style scripts. Right-to-left reading order is used with scripts such as Arabic or Hebrew. 
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.formats:Direction:LTR"><apiName>LTR</apiName><shortdesc> Specifies left-to-right direction for text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ltr</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies left-to-right direction for text. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:Direction:RTL"><apiName>RTL</apiName><shortdesc> Specifies right-to-left direction for text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rtl</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies right-to-left direction for text. 
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:WhiteSpaceCollapse"><apiName>WhiteSpaceCollapse</apiName><shortdesc>
	  Defines values for setting the whiteSpaceCollapse property
	  of the TextLayoutFormat class.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Defines values for setting the <codeph>whiteSpaceCollapse</codeph> property
	  of the <codeph>TextLayoutFormat</codeph> class. 
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.formats:WhiteSpaceCollapse:COLLAPSE"><apiName>COLLAPSE</apiName><shortdesc> 
		 Collapse whitespace when importing text (default).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>collapse</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		 Collapse whitespace when importing text (default).
		 Within a block of imported text, removes newlines, tabs, and leading and trailing
		 spaces. Retains line break tags (br/) and Unicode line
		 separator characters.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:WhiteSpaceCollapse:PRESERVE"><apiName>PRESERVE</apiName><shortdesc> Preserves whitespace when importing text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>preserve</apiData><apiType value="String"/></apiValueDef><apiDesc> Preserves whitespace when importing text. 
		</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:ITextLayoutFormat"><apiName>ITextLayoutFormat</apiName><shortdesc>
	 This interface provides read access to FlowElements-related properties.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 This interface provides read access to FlowElements-related properties.
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:alignmentBaseline:get"><apiName>alignmentBaseline</apiName><shortdesc>
		 Specifies the baseline to which the dominant baseline aligns.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Specifies the baseline to which the dominant baseline aligns. For example, if you set <codeph>dominantBaseline</codeph> to ASCENT, setting <codeph>alignmentBaseline</codeph> to DESCENT aligns the top of the text with the DESCENT baseline, or below the line.  The largest element in the line generally determines the baselines.<p><adobeimage alt="baselines" href="../../../images/textLayout_baselines.jpg"/></p>
		 <p>Legal values are TextBaseline.ROMAN, TextBaseline.ASCENT, TextBaseline.DESCENT, TextBaseline.IDEOGRAPHIC_TOP, TextBaseline.IDEOGRAPHIC_CENTER, TextBaseline.IDEOGRAPHIC_BOTTOM, TextBaseline.USE_DOMINANT_BASELINE, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of TextBaseline.USE_DOMINANT_BASELINE.</p>
		 </apiDesc><example/></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextBaseline.xml"><linktext>flash.text.engine.TextBaseline</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:backgroundAlpha:get"><apiName>backgroundAlpha</apiName><shortdesc>
		 Alpha (transparency) value for the background (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Alpha (transparency) value for the background (adopts default value if undefined during cascade). A value of 0 is fully transparent, and a value of 1 is fully opaque. Display objects with alpha set to 0 are active, even though they are invisible.
		 <p>Legal values are numbers from 0 to 1 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of 1.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:backgroundColor:get"><apiName>backgroundColor</apiName><shortdesc>
		 Background color of the text (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Background color of the text (adopts default value if undefined during cascade). Can be either the constant value  <codeph>BackgroundColor.TRANSPARENT</codeph>, or a hexadecimal value that specifies the three 8-bit RGB (red, green, blue) values; for example, 0xFF0000 is red and 0x00FF00 is green.
		 <p>Legal values as a string are BackgroundColor.TRANSPARENT, FormatValue.INHERIT and uints from 0x0 to 0xffffffff.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of BackgroundColor.TRANSPARENT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BackgroundColor"><linktext>flashx.textLayout.formats.BackgroundColor</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:baselineShift:get"><apiName>baselineShift</apiName><shortdesc>
		 Amount to shift the baseline from the dominantBaseline value.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Amount to shift the baseline from the <codeph>dominantBaseline</codeph> value. Units are in pixels, or a percentage of <codeph>fontSize</codeph> (in which case, enter a string value, like 140%).  Positive values shift the line up for horizontal text (right for vertical) and negative values shift it down for horizontal (left for vertical). 
		 <p>Legal values are BaselineShift.SUPERSCRIPT, BaselineShift.SUBSCRIPT, FormatValue.INHERIT.</p>
		 <p>Legal values as a number are from -1000 to 1000.</p>
		 <p>Legal values as a percent are numbers from -1000 to 1000.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.0.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BaselineShift"><linktext>flashx.textLayout.formats.BaselineShift</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:blockProgression:get"><apiName>blockProgression</apiName><shortdesc>
		 Specifies a vertical or horizontal progression of line placement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Specifies a vertical or horizontal progression of line placement.
		 Lines are either placed top-to-bottom (<codeph>BlockProgression.TB</codeph>, used for horizontal text) or right-to-left (<codeph>BlockProgression.RL</codeph>, used for vertical text).
		 <p>Legal values are BlockProgression.RL, BlockProgression.TB, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of BlockProgression.TB.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BlockProgression"><linktext>flashx.textLayout.formats.BlockProgression</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:breakOpportunity:get"><apiName>breakOpportunity</apiName><shortdesc>
		 Controls where lines are allowed to break when breaking wrapping text into multiple lines.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Controls where lines are allowed to break when breaking wrapping text into multiple lines. Set to <codeph>BreakOpportunity.AUTO</codeph> to break text normally. Set to <codeph>BreakOpportunity.NONE</codeph> to <i>not</i> break the text unless the text would overrun the measure and there are no other places to break the line. Set to <codeph>BreakOpportunity.ANY</codeph> to allow the line to break anywhere, rather than just between words. Set to <codeph>BreakOpportunity.ALL</codeph> to have each typographic cluster put on a separate line (useful for text on a path).
		 <p>Legal values are BreakOpportunity.ALL, BreakOpportunity.ANY, BreakOpportunity.AUTO, BreakOpportunity.NONE, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of BreakOpportunity.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.BreakOpportunity.xml"><linktext>flash.text.engine.BreakOpportunity</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:cffHinting:get"><apiName>cffHinting</apiName><shortdesc>
		 The type of CFF hinting used for this text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 The type of CFF hinting used for this text. CFF hinting determines whether the Flash runtime forces strong horizontal stems to fit to a sub pixel grid or not. This property applies only if the <codeph>renderingMode</codeph> property is set to <codeph>RenderingMode.CFF</codeph>, and the font is embedded (<codeph>fontLookup</codeph> property is set to <codeph>FontLookup.EMBEDDED_CFF</codeph>). At small screen sizes, hinting produces a clear, legible text for human readers.
		 <p>Legal values are CFFHinting.NONE, CFFHinting.HORIZONTAL_STEM, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of CFFHinting.HORIZONTAL_STEM.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.CFFHinting.xml"><linktext>flash.text.engine.CFFHinting</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:clearFloats:get"><apiName>clearFloats</apiName><shortdesc>
		 Controls how text wraps around a float.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Controls how text wraps around a float. A value of none allows the text to wrap most closely around a float. A value of left causes the text to skip over any portion of the container that has a left float, and a value of right causes the text to skip over any portion of the container that has a right float. A value of both causes the text to skip over any floats.
		 <p>Legal values are ClearFloats.START, ClearFloats.END, ClearFloats.LEFT, ClearFloats.RIGHT, ClearFloats.BOTH, ClearFloats.NONE, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of ClearFloats.NONE.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#ClearFloats"><linktext>flashx.textLayout.formats.ClearFloats</linktext></link><link href="flashx.textLayout.formats.xml#ClearFloats"><linktext>flashx.textLayout.formats.ClearFloats</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:color:get"><apiName>color</apiName><shortdesc>
		 Color of the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Color of the text. A hexadecimal number that specifies three 8-bit RGB (red, green, blue) values; for example, 0xFF0000 is red and 0x00FF00 is green. It can also be enum value {BLACK, GREEN, GRAY, BLUE, SILVER, LIME, OLIVE, WHITE, YELLOW, MAROON, NAVY, RED, PURPLE, TEAL, FUCHSIA, AQUA, MAGENTA, CYAN}
		 <p>Legal values as a string are ColorName.BLACK, ColorName.GREEN, ColorName.GRAY, ColorName.BLUE, ColorName.SILVER, ColorName.LIME, ColorName.OLIVE, ColorName.WHITE, ColorName.YELLOW, ColorName.MAROON, ColorName.NAVY, ColorName.RED, ColorName.PURPLE, ColorName.TEAL, ColorName.FUCHSIA, ColorName.AQUA, ColorName.MAGENTA, ColorName.CYAN, FormatValue.INHERIT and uints from 0x0 to 0xffffffff.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#ColorName"><linktext>flashx.textLayout.formats.ColorName</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:columnBreakAfter:get"><apiName>columnBreakAfter</apiName><shortdesc>
		 Controls column after before the element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Controls column after before the element.
		 <p>Legal values are BreakStyle.AUTO, BreakStyle.ALWAYS, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of BreakStyle.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BreakStyle"><linktext>flashx.textLayout.formats.BreakStyle</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:columnBreakBefore:get"><apiName>columnBreakBefore</apiName><shortdesc>
		 Controls column break before the element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Controls column break before the element.
		 <p>Legal values are BreakStyle.AUTO, BreakStyle.ALWAYS, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of BreakStyle.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BreakStyle"><linktext>flashx.textLayout.formats.BreakStyle</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:columnCount:get"><apiName>columnCount</apiName><shortdesc>
		 Number of text columns (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Number of text columns (adopts default value if undefined during cascade).
		 The column number overrides the  other column settings. Value is an integer, or <codeph>FormatValue.AUTO</codeph> if unspecified. If <codeph>columnCount</codeph> is not specified,<codeph>columnWidth</codeph> is used to create as many columns as can fit in the container.
		 <p>Legal values as a string are FormatValue.AUTO, FormatValue.INHERIT and from ints from 1 to 50.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of FormatValue.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:columnGap:get"><apiName>columnGap</apiName><shortdesc>
		 Specifies the amount of gutter space, in pixels, to leave between the columns (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Specifies the amount of gutter space, in pixels, to leave between the columns (adopts default value if undefined during cascade).
		 Value is a Number
		 <p>Legal values are numbers from 0 to 1000 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of 20.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:columnWidth:get"><apiName>columnWidth</apiName><shortdesc>
		 Column width in pixels (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Column width in pixels (adopts default value if undefined during cascade).
		 If you specify the width of the columns, but not the count, TextLayout will create as many columns of that width as possible, given the  container width and <codeph>columnGap</codeph> settings. Any remainder space is left after the last column. Value is a Number.
		 <p>Legal values as a string are FormatValue.AUTO, FormatValue.INHERIT and numbers from 0 to 8000.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of FormatValue.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:containerBreakAfter:get"><apiName>containerBreakAfter</apiName><shortdesc>
		 Controls container after before the element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Controls container after before the element.
		 <p>Legal values are BreakStyle.AUTO, BreakStyle.ALWAYS, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of BreakStyle.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BreakStyle"><linktext>flashx.textLayout.formats.BreakStyle</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:containerBreakBefore:get"><apiName>containerBreakBefore</apiName><shortdesc>
		 Controls container break before the element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Controls container break before the element.
		 <p>Legal values are BreakStyle.AUTO, BreakStyle.ALWAYS, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of BreakStyle.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BreakStyle"><linktext>flashx.textLayout.formats.BreakStyle</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:digitCase:get"><apiName>digitCase</apiName><shortdesc>
		 The type of digit case used for this text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 The type of digit case used for this text. Setting the value to <codeph>DigitCase.OLD_STYLE</codeph> approximates lowercase letterforms with varying ascenders and descenders. The figures are proportionally spaced. This style is only available in selected typefaces, most commonly in a supplemental or expert font. The <codeph>DigitCase.LINING</codeph> setting has all-cap height and is typically monospaced to line up in charts.<p><adobeimage alt="digitCase" href="../../../images/textLayout_digitcase.gif"/></p>
		 <p>Legal values are DigitCase.DEFAULT, DigitCase.LINING, DigitCase.OLD_STYLE, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of DigitCase.DEFAULT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.DigitCase.xml"><linktext>flash.text.engine.DigitCase</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:digitWidth:get"><apiName>digitWidth</apiName><shortdesc>
		 Type of digit width used for this text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Type of digit width used for this text. This can be <codeph>DigitWidth.PROPORTIONAL</codeph>, which looks best for individual numbers, or <codeph>DigitWidth.TABULAR</codeph>, which works best for numbers in tables, charts, and vertical rows.<p><adobeimage alt="digitWidth" href="../../../images/textLayout_digitwidth.gif"/></p>
		 <p>Legal values are DigitWidth.DEFAULT, DigitWidth.PROPORTIONAL, DigitWidth.TABULAR, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of DigitWidth.DEFAULT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.DigitWidth.xml"><linktext>flash.text.engine.DigitWidth</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:direction:get"><apiName>direction</apiName><shortdesc>
		 Specifies the default bidirectional embedding level of the text in the text block.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Specifies the default bidirectional embedding level of the text in the text block. 
		 Left-to-right reading order, as in Latin-style scripts, or right-to-left reading order, as in Arabic or Hebrew. This property also affects column direction when it is applied at the container level. Columns can be either left-to-right or right-to-left, just like text. Below are some examples:<p><adobeimage alt="direction" href="../../../images/textLayout_direction.gif"/></p>
		 <p>Legal values are Direction.LTR, Direction.RTL, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of Direction.LTR.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#Direction"><linktext>flashx.textLayout.formats.Direction</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:dominantBaseline:get"><apiName>dominantBaseline</apiName><shortdesc>
		 Specifies which element baseline snaps to the alignmentBaseline to determine the vertical position of the element on the line.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Specifies which element baseline snaps to the <codeph>alignmentBaseline</codeph> to determine the vertical position of the element on the line. A value of <codeph>TextBaseline.AUTO</codeph> selects the dominant baseline based on the <codeph>locale</codeph> property of the parent paragraph.  For Japanese and Chinese, the selected baseline value is <codeph>TextBaseline.IDEOGRAPHIC_CENTER</codeph>; for all others it is <codeph>TextBaseline.ROMAN</codeph>. These baseline choices are determined by the choice of font and the font size.<p><adobeimage alt="baselines" href="../../../images/textLayout_baselines.jpg"/></p>
		 <p>Legal values are FormatValue.AUTO, TextBaseline.ROMAN, TextBaseline.ASCENT, TextBaseline.DESCENT, TextBaseline.IDEOGRAPHIC_TOP, TextBaseline.IDEOGRAPHIC_CENTER, TextBaseline.IDEOGRAPHIC_BOTTOM, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of FormatValue.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextBaseline.xml"><linktext>flash.text.engine.TextBaseline</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:firstBaselineOffset:get"><apiName>firstBaselineOffset</apiName><shortdesc>
		 Specifies the baseline position of the first line in the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Specifies the baseline position of the first line in the container. Which baseline this property refers to depends on the container-level locale.  For Japanese and Chinese, it is <codeph>TextBaseline.IDEOGRAPHIC_BOTTOM</codeph>; for all others it is <codeph>TextBaseline.ROMAN</codeph>.
		 The offset from the top inset (or right inset if <codeph>blockProgression</codeph> is RL) of the container to the baseline of the first line can be either <codeph>BaselineOffset.ASCENT</codeph>, meaning equal to the ascent of the line, <codeph>BaselineOffset.LINE_HEIGHT</codeph>, meaning equal to the height of that first line, or any fixed-value number to specify an absolute distance. <codeph>BaselineOffset.AUTO</codeph> aligns the ascent of the line with the container top inset.<p><adobeimage alt="firstBaselineOffset1" href="../../../images/textLayout_FBO1.png"/><adobeimage alt="firstBaselineOffset2" href="../../../images/textLayout_FBO2.png"/><adobeimage alt="firstBaselineOffset3" href="../../../images/textLayout_FBO3.png"/><adobeimage alt="firstBaselineOffset4" href="../../../images/textLayout_FBO4.png"/></p>
		 <p>Legal values as a string are BaselineOffset.AUTO, BaselineOffset.ASCENT, BaselineOffset.LINE_HEIGHT, FormatValue.INHERIT and numbers from 0 to 1000.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of BaselineOffset.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BaselineOffset"><linktext>flashx.textLayout.formats.BaselineOffset</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:fontFamily:get"><apiName>fontFamily</apiName><shortdesc>
		  The name of the font to use, or a comma-separated list of font names.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		  The name of the font to use, or a comma-separated list of font names. The Flash runtime renders the element with the first available font in the list. For example Arial, Helvetica, _sans causes the player to search for Arial, then Helvetica if Arial is not found, then _sans if neither is found.
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of Arial.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:fontLookup:get"><apiName>fontLookup</apiName><shortdesc>
		 Font lookup to use.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Font lookup to use. Specifying <codeph>FontLookup.DEVICE</codeph> uses the fonts installed on the system that is running the SWF file. Device fonts result in a smaller movie size, but text is not always rendered the same across different systems and platforms. Specifying <codeph>FontLookup.EMBEDDED_CFF</codeph> uses font outlines embedded in the published SWF file. Embedded fonts increase the size of the SWF file (sometimes dramatically), but text is consistently displayed in the chosen font.
		 <p>Legal values are FontLookup.DEVICE, FontLookup.EMBEDDED_CFF, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of FontLookup.DEVICE.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontLookup.xml"><linktext>flash.text.engine.FontLookup</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:fontSize:get"><apiName>fontSize</apiName><shortdesc>
		 The size of the text in pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 The size of the text in pixels.
		 <p>Legal values are numbers from 1 to 720 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 12.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:fontStyle:get"><apiName>fontStyle</apiName><shortdesc>
		 Style of text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Style of text. May be <codeph>FontPosture.NORMAL</codeph>, for use in plain text, or <codeph>FontPosture.ITALIC</codeph> for italic. This property applies only to device fonts (<codeph>fontLookup</codeph> property is set to flash.text.engine.FontLookup.DEVICE).
		 <p>Legal values are FontPosture.NORMAL, FontPosture.ITALIC, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of FontPosture.NORMAL.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontPosture.xml"><linktext>flash.text.engine.FontPosture</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:fontWeight:get"><apiName>fontWeight</apiName><shortdesc>
		 Weight of text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Weight of text. May be <codeph>FontWeight.NORMAL</codeph> for use in plain text, or <codeph>FontWeight.BOLD</codeph>. Applies only to device fonts (<codeph>fontLookup</codeph> property is set to flash.text.engine.FontLookup.DEVICE).
		 <p>Legal values are FontWeight.NORMAL, FontWeight.BOLD, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of FontWeight.NORMAL.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontWeight.xml"><linktext>flash.text.engine.FontWeight</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:justificationRule:get"><apiName>justificationRule</apiName><shortdesc>
		 Rule used to justify text in a paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Rule used to justify text in a paragraph.
		 Default value is <codeph>FormatValue.AUTO</codeph>, which justifies text based on the paragraph's <codeph>locale</codeph> property. For all languages except Japanese and Chinese, <codeph>FormatValue.AUTO</codeph> becomes <codeph>JustificationRule.SPACE</codeph>, which adds extra space to the space characters.  For Japanese and Chinese, <codeph>FormatValue.AUTO</codeph> becomes <codeph>JustficationRule.EAST_ASIAN</codeph>. In part, justification changes the spacing of punctuation. In Roman text the comma and Japanese periods take a full character's width but in East Asian text only half of a character's width. Also, in the East Asian text the spacing between sequential punctuation marks becomes tighter, obeying traditional East Asian typographic conventions. Note, too, in the example below the leading that is applied to the second line of the paragraphs. In the East Asian version, the last two lines push left. In the Roman version, the second and following lines push left.<p><adobeimage alt="justificationRule" href="../../../images/textLayout_justificationrule.png"/></p>
		 <p>Legal values are JustificationRule.EAST_ASIAN, JustificationRule.SPACE, FormatValue.AUTO, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of FormatValue.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#JustificationRule"><linktext>flashx.textLayout.formats.JustificationRule</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:justificationStyle:get"><apiName>justificationStyle</apiName><shortdesc>
		 The style used for justification of the paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 The style used for justification of the paragraph. Used only in conjunction with a <codeph>justificationRule</codeph> setting of <codeph>JustificationRule.EAST_ASIAN</codeph>.
		 Default value of <codeph>FormatValue.AUTO</codeph> is resolved to <codeph>JustificationStyle.PUSH_IN_KINSOKU</codeph> for all locales.  The constants defined by the JustificationStyle class specify options for handling kinsoku characters, which are Japanese characters that cannot appear at either the beginning or end of a line. If you want looser text, specify <codeph>JustificationStyle.PUSH-OUT-ONLY</codeph>. If you want behavior that is like what you get with the  <codeph>justificationRule</codeph> of <codeph>JustificationRule.SPACE</codeph>, use <codeph>JustificationStyle.PRIORITIZE-LEAST-ADJUSTMENT</codeph>.
		 <p>Legal values are JustificationStyle.PRIORITIZE_LEAST_ADJUSTMENT, JustificationStyle.PUSH_IN_KINSOKU, JustificationStyle.PUSH_OUT_ONLY, FormatValue.AUTO, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of FormatValue.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.JustificationStyle.xml"><linktext>flash.text.engine.JustificationStyle</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:kerning:get"><apiName>kerning</apiName><shortdesc>
		 Kerning adjusts the pixels between certain character pairs to improve readability.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Kerning adjusts the pixels between certain character pairs to improve readability. Kerning is supported for all fonts with kerning tables.
		 <p>Legal values are Kerning.ON, Kerning.OFF, Kerning.AUTO, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of Kerning.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.Kerning.xml"><linktext>flash.text.engine.Kerning</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:leadingModel:get"><apiName>leadingModel</apiName><shortdesc>
		 Specifies the leading model, which is a combination of leading basis and leading direction.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Specifies the leading model, which is a combination of leading basis and leading direction.
		 Leading basis is the baseline to which the <codeph>lineHeight</codeph> property refers. Leading direction determines whether the <codeph>lineHeight</codeph> property refers to the distance of a line's baseline from that of the line before it or the line after it. The default value of <codeph>FormatValue.AUTO</codeph> is resolved based on the paragraph's <codeph>locale</codeph> property.  For Japanese and Chinese, it is <codeph>LeadingModel.IDEOGRAPHIC_TOP_DOWN</codeph> and for all others it is <codeph>LeadingModel.ROMAN_UP</codeph>.<p><b>Leading Basis:</b></p><p><adobeimage alt="leadingBasis1" href="../../../images/textLayout_LB1.png"/>    <adobeimage alt="leadingBasis2" href="../../../images/textLayout_LB2.png"/>    <adobeimage alt="leadingBasis3" href="../../../images/textLayout_LB3.png"/></p><p><b>Leading Direction:</b></p><p><adobeimage alt="leadingDirection1" href="../../../images/textLayout_LD1.png"/>    <adobeimage alt="leadingDirection2" href="../../../images/textLayout_LD2.png"/>    <adobeimage alt="leadingDirection3" href="../../../images/textLayout_LD3.png"/></p>
		 <p>Legal values are LeadingModel.ROMAN_UP, LeadingModel.IDEOGRAPHIC_TOP_UP, LeadingModel.IDEOGRAPHIC_CENTER_UP, LeadingModel.IDEOGRAPHIC_TOP_DOWN, LeadingModel.IDEOGRAPHIC_CENTER_DOWN, LeadingModel.APPROXIMATE_TEXT_FIELD, LeadingModel.ASCENT_DESCENT_UP, LeadingModel.BOX, LeadingModel.AUTO, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of LeadingModel.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#LeadingModel"><linktext>flashx.textLayout.formats.LeadingModel</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:ligatureLevel:get"><apiName>ligatureLevel</apiName><shortdesc>
		 Controls which of the ligatures that are defined in the font may be used in the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Controls which of the ligatures that are defined in the font may be used in the text. The ligatures that appear for each of these settings is dependent on the font. A ligature occurs where two or more letter-forms are joined as a single glyph. Ligatures usually replace consecutive characters sharing common components, such as the letter pairs 'fi', 'fl', or 'ae'. They are used with both Latin and Non-Latin character sets. The ligatures enabled by the values of the LigatureLevel class - <codeph>MINIMUM</codeph>, <codeph>COMMON</codeph>, <codeph>UNCOMMON</codeph>, and <codeph>EXOTIC</codeph> - are additive. Each value enables a new set of ligatures, but also includes those of the previous types.<p><b>Note: </b>When working with Arabic or Syriac fonts, <codeph>ligatureLevel</codeph> must be set to MINIMUM or above.</p><p><adobeimage alt="ligatureLevel" href="../../../images/textLayout_ligatures.png"/></p>
		 <p>Legal values are LigatureLevel.MINIMUM, LigatureLevel.COMMON, LigatureLevel.UNCOMMON, LigatureLevel.EXOTIC, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of LigatureLevel.COMMON.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.LigatureLevel.xml"><linktext>flash.text.engine.LigatureLevel</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:lineBreak:get"><apiName>lineBreak</apiName><shortdesc>
		 Controls word wrapping within the container (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Controls word wrapping within the container (adopts default value if undefined during cascade).
		 Text in the container may be set to fit the width of the container (<codeph>LineBreak.TO_FIT</codeph>), or can be set to break only at explicit return or line feed characters (<codeph>LineBreak.EXPLICIT</codeph>).
		 <p>Legal values are LineBreak.EXPLICIT, LineBreak.TO_FIT, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of LineBreak.TO_FIT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#LineBreak"><linktext>flashx.textLayout.formats.LineBreak</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:lineHeight:get"><apiName>lineHeight</apiName><shortdesc>
		 Leading controls for the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Leading controls for the text. The distance from the baseline of the previous or the next line (based on <codeph>LeadingModel</codeph>) to the baseline of the current line is equal to the maximum amount of the leading applied to any character in the line. This is either a number or a percent.  If specifying a percent, enter a string value, like 140%.<p><adobeimage alt="lineHeight1" href="../../../images/textLayout_lineHeight1.jpg"/><adobeimage alt="lineHeight2" href="../../../images/textLayout_lineHeight2.jpg"/></p>
		 <p>Legal values as a number are from -720 to 720.</p>
		 <p>Legal values as a percent are numbers from -1000% to 1000%.</p>
		 <p>Legal values include FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 120%.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:lineThrough:get"><apiName>lineThrough</apiName><shortdesc>
		 If true, applies strikethrough, a line drawn through the middle of the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 If <codeph>true</codeph>, applies strikethrough, a line drawn through the middle of the text.
		 <p>Legal values are true, false and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of false.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:linkActiveFormat:get"><apiName>linkActiveFormat</apiName><shortdesc>
		 Defines the formatting attributes used for links in normal state.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Defines the formatting attributes used for links in normal state. This value will cascade down the hierarchy and apply to any links that are descendants.
		 Accepts <codeph>inherit</codeph>, an <codeph>ITextLayoutFormat</codeph> or converts an array of objects with key and value as members to a TextLayoutFormat.
		 <p>Legal values include FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of null.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:linkHoverFormat:get"><apiName>linkHoverFormat</apiName><shortdesc>
		 Defines the formatting attributes used for links in hover state, when the mouse is within the bounds (rolling over) a link.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Defines the formatting attributes used for links in hover state, when the mouse is within the bounds (rolling over) a link. This value will cascade down the hierarchy and apply to any links that are descendants.
		 Accepts <codeph>inherit</codeph>, an <codeph>ITextLayoutFormat</codeph> or converts an array of objects with key and value as members to a TextLayoutFormat.
		 <p>Legal values include FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of null.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:linkNormalFormat:get"><apiName>linkNormalFormat</apiName><shortdesc>
		 Defines the formatting attributes used for links in normal state.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Defines the formatting attributes used for links in normal state. This value will cascade down the hierarchy and apply to any links that are descendants.
		 Accepts <codeph>inherit</codeph>, an <codeph>ITextLayoutFormat</codeph> or converts an array of objects with key and value as members to a TextLayoutFormat.
		 <p>Legal values include FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of null.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:listAutoPadding:get"><apiName>listAutoPadding</apiName><shortdesc>
		 This specifies an auto indent for the start edge of lists when the padding value of the list on that side is auto.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 This specifies an auto indent for the start edge of lists when the padding value of the list on that side is <codeph>auto</codeph>.
		 <p>Legal values are numbers from -1000 to 1000 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 40.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:listMarkerFormat:get"><apiName>listMarkerFormat</apiName><shortdesc>
		 Defines the formatting attributes list markers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Defines the formatting attributes list markers. This value will cascade down the hierarchy and apply to any links that are descendants.
		 Accepts <codeph>inherit</codeph>, an <codeph>IListMarkerFormat</codeph> or converts an array of objects with key and value as members to a ListMarkerFormat.
		 <p>Legal values include FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of null.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:listStylePosition:get"><apiName>listStylePosition</apiName><shortdesc>
		 Legal values are ListStylePosition.INSIDE, ListStylePosition.OUTSIDE, FormatValue.INHERIT.
		 Default value is undefined indicating not set.
		 If undefined during the cascade this property will inherit its value from an ancestor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 <p>Legal values are ListStylePosition.INSIDE, ListStylePosition.OUTSIDE, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of ListStylePosition.OUTSIDE.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#ListStylePosition"><linktext>flashx.textLayout.formats.ListStylePosition</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:listStyleType:get"><apiName>listStyleType</apiName><shortdesc>
		 Legal values are ListStyleType.UPPER_ALPHA, ListStyleType.LOWER_ALPHA, ListStyleType.UPPER_ROMAN, ListStyleType.LOWER_ROMAN, ListStyleType.NONE, ListStyleType.DISC, ListStyleType.CIRCLE, ListStyleType.SQUARE, ListStyleType.BOX, ListStyleType.CHECK, ListStyleType.DIAMOND, ListStyleType.HYPHEN, ListStyleType.ARABIC_INDIC, ListStyleType.BENGALI, ListStyleType.DECIMAL, ListStyleType.DECIMAL_LEADING_ZERO, ListStyleType.DEVANAGARI, ListStyleType.GUJARATI, ListStyleType.GURMUKHI, ListStyleType.KANNADA, ListStyleType.PERSIAN, ListStyleType.THAI, ListStyleType.URDU, ListStyleType.CJK_EARTHLY_BRANCH, ListStyleType.CJK_HEAVENLY_STEM, ListStyleType.HANGUL, ListStyleType.HANGUL_CONSTANT, ListStyleType.HIRAGANA, ListStyleType.HIRAGANA_IROHA, ListStyleType.KATAKANA, ListStyleType.KATAKANA_IROHA, ListStyleType.LOWER_ALPHA, ListStyleType.LOWER_GREEK, ListStyleType.LOWER_LATIN, ListStyleType.UPPER_ALPHA, ListStyleType.UPPER_GREEK, ListStyleType.UPPER_LATIN, FormatValue.INHERIT.
		 Default value is undefined indicating not set.
		 If undefined during the cascade this property will inherit its value from an ancestor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 <p>Legal values are ListStyleType.UPPER_ALPHA, ListStyleType.LOWER_ALPHA, ListStyleType.UPPER_ROMAN, ListStyleType.LOWER_ROMAN, ListStyleType.NONE, ListStyleType.DISC, ListStyleType.CIRCLE, ListStyleType.SQUARE, ListStyleType.BOX, ListStyleType.CHECK, ListStyleType.DIAMOND, ListStyleType.HYPHEN, ListStyleType.ARABIC_INDIC, ListStyleType.BENGALI, ListStyleType.DECIMAL, ListStyleType.DECIMAL_LEADING_ZERO, ListStyleType.DEVANAGARI, ListStyleType.GUJARATI, ListStyleType.GURMUKHI, ListStyleType.KANNADA, ListStyleType.PERSIAN, ListStyleType.THAI, ListStyleType.URDU, ListStyleType.CJK_EARTHLY_BRANCH, ListStyleType.CJK_HEAVENLY_STEM, ListStyleType.HANGUL, ListStyleType.HANGUL_CONSTANT, ListStyleType.HIRAGANA, ListStyleType.HIRAGANA_IROHA, ListStyleType.KATAKANA, ListStyleType.KATAKANA_IROHA, ListStyleType.LOWER_ALPHA, ListStyleType.LOWER_GREEK, ListStyleType.LOWER_LATIN, ListStyleType.UPPER_ALPHA, ListStyleType.UPPER_GREEK, ListStyleType.UPPER_LATIN, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of ListStyleType.DISC.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#ListStyleType"><linktext>flashx.textLayout.formats.ListStyleType</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:locale:get"><apiName>locale</apiName><shortdesc>
		 The locale of the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 The locale of the text. Controls case transformations and shaping. Standard locale identifiers as described in Unicode Technical Standard #35 are used. For example en, en_US and en-US are all English, ja is Japanese. 
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of en.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:paddingBottom:get"><apiName>paddingBottom</apiName><shortdesc>
		 Bottom inset in pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Bottom inset in pixels.  Default of auto is zero except in lists which get a start side padding of 45.  (adopts default value if undefined during cascade).
		 Space between the bottom edge of the container and the text.  Value is a Number  or auto. <p> With horizontal text, in scrollable containers with multiple columns, the first and following columns will show the padding as blank space at the bottom of the container, but for the last column, if the text doesn't all fit, you may have to scroll in order to see the padding.</p>
		 <p>Legal values as a string are FormatValue.AUTO, FormatValue.INHERIT and numbers from -8000 to 8000.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of FormatValue.AUTO.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#Configuration/autoListElementStartPadding"><linktext>flashx.textLayout.elements.Configuration.autoListElementStartPadding</linktext></link><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:paddingLeft:get"><apiName>paddingLeft</apiName><shortdesc>
		 Left inset in pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Left inset in pixels.  Default of auto is zero except in lists which get a start side padding of 45. (adopts default value if undefined during cascade).
		 Space between the left edge of the container and the text.  Value is a Number or auto.<p> With vertical text, in scrollable containers with multiple columns, the first and following columns will show the padding as blank space at the end of the container, but for the last column, if the text doesn't all fit, you may have to scroll in order to see the padding.</p>
		 <p>Legal values as a string are FormatValue.AUTO, FormatValue.INHERIT and numbers from -8000 to 8000.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of FormatValue.AUTO.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#Configuration/autoListElementStartPadding"><linktext>flashx.textLayout.elements.Configuration.autoListElementStartPadding</linktext></link><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:paddingRight:get"><apiName>paddingRight</apiName><shortdesc>
		 Right inset in pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Right inset in pixels.  Default of auto is zero except in lists which get a start side padding of 45. (adopts default value if undefined during cascade).
		 Space between the right edge of the container and the text.  Value is a Number or auto. 
		 <p>Legal values as a string are FormatValue.AUTO, FormatValue.INHERIT and numbers from -8000 to 8000.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of FormatValue.AUTO.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#Configuration/autoListElementStartPadding"><linktext>flashx.textLayout.elements.Configuration.autoListElementStartPadding</linktext></link><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:paddingTop:get"><apiName>paddingTop</apiName><shortdesc>
		 Top inset in pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Top inset in pixels.  Default of auto is zero except in lists which get a start side padding of 45. (adopts default value if undefined during cascade).
		 Space between the top edge of the container and the text.  Value is a Number or auto.
		 <p>Legal values as a string are FormatValue.AUTO, FormatValue.INHERIT and numbers from -8000 to 8000.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of FormatValue.AUTO.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#Configuration/autoListElementStartPadding"><linktext>flashx.textLayout.elements.Configuration.autoListElementStartPadding</linktext></link><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:paragraphEndIndent:get"><apiName>paragraphEndIndent</apiName><shortdesc>
		 A Number that specifies, in pixels, the amount to indent the paragraph's end edge.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 A Number that specifies, in pixels, the amount to indent the paragraph's end edge. Refers to the right edge in left-to-right text and the left edge in right-to-left text. 
		 <p>Legal values are numbers from 0 to 8000 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:paragraphSpaceAfter:get"><apiName>paragraphSpaceAfter</apiName><shortdesc>
		 A Number that specifies the amount of space, in pixels, to leave after the paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 A Number that specifies the amount of space, in pixels, to leave after the paragraph.
		 Collapses in tandem with  <codeph>paragraphSpaceBefore</codeph>.
		 <p>Legal values are numbers from 0 to 8000 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:paragraphSpaceBefore:get"><apiName>paragraphSpaceBefore</apiName><shortdesc>
		 A Number that specifies the amount of space, in pixels, to leave before the paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 A Number that specifies the amount of space, in pixels, to leave before the paragraph. 
		 Collapses in tandem with <codeph>paragraphSpaceAfter</codeph>.
		 <p>Legal values are numbers from 0 to 8000 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:paragraphStartIndent:get"><apiName>paragraphStartIndent</apiName><shortdesc>
		 A Number that specifies, in pixels, the amount to indent the paragraph's start edge.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 A Number that specifies, in pixels, the amount to indent the paragraph's start edge. Refers to the left edge in left-to-right text and the right edge in right-to-left text. 
		 <p>Legal values are numbers from 0 to 8000 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:renderingMode:get"><apiName>renderingMode</apiName><shortdesc>
		 The rendering mode used for this text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 The rendering mode used for this text.  Applies only to embedded fonts (<codeph>fontLookup</codeph> property is set to <codeph>FontLookup.EMBEDDED_CFF</codeph>).
		 <p>Legal values are RenderingMode.NORMAL, RenderingMode.CFF, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of RenderingMode.CFF.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.RenderingMode.xml"><linktext>flash.text.engine.RenderingMode</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:styleName:get"><apiName>styleName</apiName><shortdesc>
		 Assigns an identifying class to the element, making it possible to set a style for the element by referencing the styleName.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Assigns an identifying class to the element, making it possible to set a style for the element by referencing the <codeph>styleName</codeph>.
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of null.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:tabStops:get"><apiName>tabStops</apiName><shortdesc>
		 Specifies the tab stops associated with the paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Specifies the tab stops associated with the paragraph.
		 Setters can take an array of TabStopFormat, a condensed string representation, undefined, or <codeph>FormatValue.INHERIT</codeph>. The condensed string representation is always converted into an array of TabStopFormat. <p>The string-based format is a list of tab stops, where each tab stop is delimited by one or more spaces.</p><p>A tab stop takes the following form: &lt;alignment type&gt;&lt;alignment position&gt;|&lt;alignment token&gt;.</p><p>The alignment type is a single character, and can be S, E, C, or D (or lower-case equivalents). S or s for start, E or e for end, C or c for center, D or d for decimal. The alignment type is optional, and if its not specified will default to S.</p><p>The alignment position is a Number, and is specified according to FXG spec for Numbers (decimal or scientific notation). The alignment position is required.</p><p>The vertical bar is used to separate the alignment position from the alignment token, and should only be present if the alignment token is present.</p><p> The alignment token is optional if the alignment type is D, and should not be present if the alignment type is anything other than D. The alignment token may be any sequence of characters terminated by the space that ends the tab stop (for the last tab stop, the terminating space is optional; end of alignment token is implied). A space may be part of the alignment token if it is escaped with a backslash (\ ). A backslash may be part of the alignment token if it is escaped with another backslash (\\). If the alignment type is D, and the alignment token is not specified, it will take on the default value of null.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of null.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TabStopFormat"><linktext>flashx.textLayout.formats.TabStopFormat</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:textAlignLast:get"><apiName>textAlignLast</apiName><shortdesc>
		 Alignment of the last (or only) line in the paragraph relative to the container in justified text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Alignment of the last (or only) line in the paragraph relative to the container in justified text.
		 If <codeph>textAlign</codeph> is set to <codeph>TextAlign.JUSTIFY</codeph>, <codeph>textAlignLast</codeph> specifies how the last line (or only line, if this is a one line block) is aligned. Values are similar to <codeph>textAlign</codeph>.
		 <p>Legal values are TextAlign.LEFT, TextAlign.RIGHT, TextAlign.CENTER, TextAlign.JUSTIFY, TextAlign.START, TextAlign.END, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of TextAlign.START.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextAlign"><linktext>flashx.textLayout.formats.TextAlign</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:textAlign:get"><apiName>textAlign</apiName><shortdesc>
		 Alignment of lines in the paragraph relative to the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Alignment of lines in the paragraph relative to the container.
		 <codeph>TextAlign.LEFT</codeph> aligns lines along the left edge of the container. <codeph>TextAlign.RIGHT</codeph> aligns on the right edge. <codeph>TextAlign.CENTER</codeph> positions the line equidistant from the left and right edges. <codeph>TextAlign.JUSTIFY</codeph> spreads the lines out so they fill the space. <codeph>TextAlign.START</codeph> is equivalent to setting left in left-to-right text, or right in right-to-left text. <codeph>TextAlign.END</codeph> is equivalent to setting right in left-to-right text, or left in right-to-left text.
		 <p>Legal values are TextAlign.LEFT, TextAlign.RIGHT, TextAlign.CENTER, TextAlign.JUSTIFY, TextAlign.START, TextAlign.END, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of TextAlign.START.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextAlign"><linktext>flashx.textLayout.formats.TextAlign</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:textAlpha:get"><apiName>textAlpha</apiName><shortdesc>
		 Alpha (transparency) value for the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Alpha (transparency) value for the text. A value of 0 is fully transparent, and a value of 1 is fully opaque. Display objects with <codeph>textAlpha</codeph> set to 0 are active, even though they are invisible.
		 <p>Legal values are numbers from 0 to 1 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 1.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:textDecoration:get"><apiName>textDecoration</apiName><shortdesc>
		 Decoration on text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Decoration on text. Use to apply underlining; default is none.
		 <p>Legal values are TextDecoration.NONE, TextDecoration.UNDERLINE, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of TextDecoration.NONE.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextDecoration"><linktext>flashx.textLayout.formats.TextDecoration</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:textIndent:get"><apiName>textIndent</apiName><shortdesc>
		 A Number that specifies, in pixels, the amount to indent the first line of the paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 A Number that specifies, in pixels, the amount to indent the first line of the paragraph.
		 A negative indent will push the line into the margin, and possibly out of the container.
		 <p>Legal values are numbers from -8000 to 8000 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:textJustify:get"><apiName>textJustify</apiName><shortdesc>
		 Specifies options for justifying text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Specifies options for justifying text.
		 Default value is <codeph>TextJustify.INTER_WORD</codeph>, meaning that extra space is added to the space characters. <codeph>TextJustify.DISTRIBUTE</codeph> adds extra space to space characters and between individual letters. Used only in conjunction with a <codeph>justificationRule</codeph> value of <codeph>JustificationRule.SPACE</codeph>.
		 <p>Legal values are TextJustify.INTER_WORD, TextJustify.DISTRIBUTE, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of TextJustify.INTER_WORD.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextJustify"><linktext>flashx.textLayout.formats.TextJustify</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:textRotation:get"><apiName>textRotation</apiName><shortdesc>
		 Determines the number of degrees to rotate this text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Determines the number of degrees to rotate this text.
		 <p>Legal values are TextRotation.ROTATE_0, TextRotation.ROTATE_180, TextRotation.ROTATE_270, TextRotation.ROTATE_90, TextRotation.AUTO, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of TextRotation.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextRotation.xml"><linktext>flash.text.engine.TextRotation</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:trackingLeft:get"><apiName>trackingLeft</apiName><shortdesc>
		 Number in pixels (or percent of fontSize, like 120%) indicating the amount of tracking (manual kerning) to be applied to the left of each character.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Number in pixels (or percent of <codeph>fontSize</codeph>, like 120%) indicating the amount of tracking (manual kerning) to be applied to the left of each character. If kerning is enabled, the <codeph>trackingLeft</codeph> value is added to the values in the kerning table for the font. If kerning is disabled, the <codeph>trackingLeft</codeph> value is used as a manual kerning value. Supports both positive and negative values. 
		 <p>Legal values as a number are from -1000 to 1000.</p>
		 <p>Legal values as a percent are numbers from -1000% to 1000%.</p>
		 <p>Legal values include FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:trackingRight:get"><apiName>trackingRight</apiName><shortdesc>
		 Number in pixels (or percent of fontSize, like 120%) indicating the amount of tracking (manual kerning) to be applied to the right of each character.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Number in pixels (or percent of <codeph>fontSize</codeph>, like 120%) indicating the amount of tracking (manual kerning) to be applied to the right of each character.  If kerning is enabled, the <codeph>trackingRight</codeph> value is added to the values in the kerning table for the font. If kerning is disabled, the <codeph>trackingRight</codeph> value is used as a manual kerning value. Supports both positive and negative values. 
		 <p>Legal values as a number are from -1000 to 1000.</p>
		 <p>Legal values as a percent are numbers from -1000% to 1000%.</p>
		 <p>Legal values include FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:typographicCase:get"><apiName>typographicCase</apiName><shortdesc>
		 The type of typographic case used for this text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 The type of typographic case used for this text. Here are some examples:<p><adobeimage alt="typographicCase" href="../../../images/textLayout_typographiccase.png"/></p>
		 <p>Legal values are TLFTypographicCase.DEFAULT, TLFTypographicCase.CAPS_TO_SMALL_CAPS, TLFTypographicCase.UPPERCASE, TLFTypographicCase.LOWERCASE, TLFTypographicCase.LOWERCASE_TO_SMALL_CAPS, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of TLFTypographicCase.DEFAULT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TLFTypographicCase"><linktext>flashx.textLayout.formats.TLFTypographicCase</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:verticalAlign:get"><apiName>verticalAlign</apiName><shortdesc>
		 Vertical alignment or justification (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Vertical alignment or justification (adopts default value if undefined during cascade).
		 Determines how TextFlow elements align within the container.
		 <p>Legal values are VerticalAlign.TOP, VerticalAlign.MIDDLE, VerticalAlign.BOTTOM, VerticalAlign.JUSTIFY, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of VerticalAlign.TOP.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#VerticalAlign"><linktext>flashx.textLayout.formats.VerticalAlign</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:whiteSpaceCollapse:get"><apiName>whiteSpaceCollapse</apiName><shortdesc>
		 Collapses or preserves whitespace when importing text into a TextFlow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Collapses or preserves whitespace when importing text into a TextFlow. <codeph>WhiteSpaceCollapse.PRESERVE</codeph> retains all whitespace characters. <codeph>WhiteSpaceCollapse.COLLAPSE</codeph> removes newlines, tabs, and leading or trailing spaces within a block of imported text. Line break tags () and Unicode line separator characters are retained.
		 <p>Legal values are WhiteSpaceCollapse.PRESERVE, WhiteSpaceCollapse.COLLAPSE, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of WhiteSpaceCollapse.COLLAPSE.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#WhiteSpaceCollapse"><linktext>flashx.textLayout.formats.WhiteSpaceCollapse</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:wordSpacing:get"><apiName>wordSpacing</apiName><shortdesc>
		 Specifies the optimum, minimum, and maximum spacing (as a multiplier of the width of a normal space) between words to use during justification.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Specifies the optimum, minimum, and maximum spacing (as a multiplier of the width of a normal space) between words to use during justification.
		 The optimum space is used to indicate the desired size of a space, as a fraction of the value defined in the font. The minimum and maximum values are the used when textJustify is distribute to determine how wide or narrow the spaces between the words may grow before letter spacing is used to justify the line.
		 <p>Legal values as a percent are numbers from -1000% to 1000%.</p>
		 <p>Legal values include FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 100%, 50%, 150%.</p>
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:TextLayoutFormat"><apiName>TextLayoutFormat</apiName><shortdesc>
	 The TextLayoutFormat class holds all of the text layout properties.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.formats:ITextLayoutFormat</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The TextLayoutFormat class holds all of the text layout properties. These properties affect the format and style of a text flow at the container level, paragraph level, and text level.  Both the ContainerController class and the FlowElement base class have <codeph>format</codeph> properties that enable you to assign a TextLayoutFormat instance to them. Assign a TextLayoutFormat object to a container to affect the format of all of the container's content. Assign a TextLayoutFormat object to a FlowElement descendant to specify formatting for that particular element: TextFlow, ParagraphElement, DivElement, SpanElement, InlineGraphicElement, LinkElement, and TCYElement.
	 In addition to the <codeph>format</codeph> property, these classes also define each of the individual TextLayoutFormat properties so that you can override the setting of a particular style property for that element, if you wish. <p>Because you can set a given style at multiple levels, it is possible to have conflicts. For example, the color of the text at the TextFlow level could be set to black while a SpanElement object sets it to blue. The general rule is that the setting at the lowest level on the text flow tree takes precedence. So if the ligature level is set for a TextFlow instance and also set for a DivElement, the DivElement setting takes precedence. </p><p>Cascading styles refers to the process of adopting styles from a higher level in the text flow if a style value is undefined at a lower level. When a style is undefined on an element at the point it is about to be rendered, it either takes its default value or the value cascades or descends from the value on a parent element. For example, if the transparency (<codeph>textAlpha</codeph> property) of the text is undefined on a SpanElement object, but is set on the TextFlow, the value of the <codeph>TextFlow.textAlpha</codeph> property cascades to the SpanElement object and is applied to the text for that span. The result of the cascade, or the sum of the styles that is applied to the element, is stored in the element's <codeph>computedFormat</codeph> property.</p><p>In the same way, you can apply user styles using the <codeph>userStyles</codeph> property of the ContainerController and FlowElement classes. This  property allows you to read or write a dictionary of user styles and apply its settings to a container or a text flow element. The user styles dictionary is an object that consists of <i>stylename-value</i> pairs. Styles specified by the <codeph>userStyles</codeph> property take precedence over all others.</p><p>Most styles that are undefined inherit the value of their immediate parent during a cascade. A small number of styles, however, do not inherit their parent�s value and take on their default values instead.</p><p><b>Style properties that adopt their default values, if undefined, include:</b> <codeph>backgroundAlpha</codeph>, <codeph>backgroundColor</codeph>, <codeph>columnCount</codeph>, <codeph>columnGap</codeph>, <codeph>columnWidth</codeph>, <codeph>lineBreak</codeph>, <codeph>paddingBottom</codeph>, <codeph>paddingLeft</codeph>, <codeph>paddingRight</codeph>, <codeph>paddingTop</codeph>, <codeph>verticalAlign</codeph></p>.
	 </apiDesc><example/><example/></apiClassifierDetail><apiValue id="flashx.textLayout.formats:TextLayoutFormat:alignmentBaselineProperty:get"><apiName>alignmentBaselineProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:alignmentBaseline:get"><apiName>alignmentBaseline</apiName><shortdesc>
		 Specifies the baseline to which the dominant baseline aligns.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Specifies the baseline to which the dominant baseline aligns. For example, if you set <codeph>dominantBaseline</codeph> to ASCENT, setting <codeph>alignmentBaseline</codeph> to DESCENT aligns the top of the text with the DESCENT baseline, or below the line.  The largest element in the line generally determines the baselines.<p><adobeimage alt="baselines" href="../../../images/textLayout_baselines.jpg"/></p>
		 <p>Legal values are TextBaseline.ROMAN, TextBaseline.ASCENT, TextBaseline.DESCENT, TextBaseline.IDEOGRAPHIC_TOP, TextBaseline.IDEOGRAPHIC_CENTER, TextBaseline.IDEOGRAPHIC_BOTTOM, TextBaseline.USE_DOMINANT_BASELINE, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of TextBaseline.USE_DOMINANT_BASELINE.</p>
		 </apiDesc><example/></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextBaseline.xml"><linktext>flash.text.engine.TextBaseline</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:backgroundAlphaProperty:get"><apiName>backgroundAlphaProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:backgroundAlpha:get"><apiName>backgroundAlpha</apiName><shortdesc>
		 Alpha (transparency) value for the background (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Alpha (transparency) value for the background (adopts default value if undefined during cascade). A value of 0 is fully transparent, and a value of 1 is fully opaque. Display objects with alpha set to 0 are active, even though they are invisible.
		 <p>Legal values are numbers from 0 to 1 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of 1.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:backgroundColorProperty:get"><apiName>backgroundColorProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:backgroundColor:get"><apiName>backgroundColor</apiName><shortdesc>
		 Background color of the text (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Background color of the text (adopts default value if undefined during cascade). Can be either the constant value  <codeph>BackgroundColor.TRANSPARENT</codeph>, or a hexadecimal value that specifies the three 8-bit RGB (red, green, blue) values; for example, 0xFF0000 is red and 0x00FF00 is green.
		 <p>Legal values as a string are BackgroundColor.TRANSPARENT, FormatValue.INHERIT and uints from 0x0 to 0xffffffff.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of BackgroundColor.TRANSPARENT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BackgroundColor"><linktext>flashx.textLayout.formats.BackgroundColor</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:baselineShiftProperty:get"><apiName>baselineShiftProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:baselineShift:get"><apiName>baselineShift</apiName><shortdesc>
		 Amount to shift the baseline from the dominantBaseline value.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Amount to shift the baseline from the <codeph>dominantBaseline</codeph> value. Units are in pixels, or a percentage of <codeph>fontSize</codeph> (in which case, enter a string value, like 140%).  Positive values shift the line up for horizontal text (right for vertical) and negative values shift it down for horizontal (left for vertical). 
		 <p>Legal values are BaselineShift.SUPERSCRIPT, BaselineShift.SUBSCRIPT, FormatValue.INHERIT.</p>
		 <p>Legal values as a number are from -1000 to 1000.</p>
		 <p>Legal values as a percent are numbers from -1000 to 1000.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.0.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BaselineShift"><linktext>flashx.textLayout.formats.BaselineShift</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:blockProgressionProperty:get"><apiName>blockProgressionProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:blockProgression:get"><apiName>blockProgression</apiName><shortdesc>
		 Specifies a vertical or horizontal progression of line placement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Specifies a vertical or horizontal progression of line placement.
		 Lines are either placed top-to-bottom (<codeph>BlockProgression.TB</codeph>, used for horizontal text) or right-to-left (<codeph>BlockProgression.RL</codeph>, used for vertical text).
		 <p>Legal values are BlockProgression.RL, BlockProgression.TB, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of BlockProgression.TB.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BlockProgression"><linktext>flashx.textLayout.formats.BlockProgression</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:breakOpportunityProperty:get"><apiName>breakOpportunityProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:breakOpportunity:get"><apiName>breakOpportunity</apiName><shortdesc>
		 Controls where lines are allowed to break when breaking wrapping text into multiple lines.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Controls where lines are allowed to break when breaking wrapping text into multiple lines. Set to <codeph>BreakOpportunity.AUTO</codeph> to break text normally. Set to <codeph>BreakOpportunity.NONE</codeph> to <i>not</i> break the text unless the text would overrun the measure and there are no other places to break the line. Set to <codeph>BreakOpportunity.ANY</codeph> to allow the line to break anywhere, rather than just between words. Set to <codeph>BreakOpportunity.ALL</codeph> to have each typographic cluster put on a separate line (useful for text on a path).
		 <p>Legal values are BreakOpportunity.ALL, BreakOpportunity.ANY, BreakOpportunity.AUTO, BreakOpportunity.NONE, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of BreakOpportunity.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.BreakOpportunity.xml"><linktext>flash.text.engine.BreakOpportunity</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:cffHintingProperty:get"><apiName>cffHintingProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:cffHinting:get"><apiName>cffHinting</apiName><shortdesc>
		 The type of CFF hinting used for this text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 The type of CFF hinting used for this text. CFF hinting determines whether the Flash runtime forces strong horizontal stems to fit to a sub pixel grid or not. This property applies only if the <codeph>renderingMode</codeph> property is set to <codeph>RenderingMode.CFF</codeph>, and the font is embedded (<codeph>fontLookup</codeph> property is set to <codeph>FontLookup.EMBEDDED_CFF</codeph>). At small screen sizes, hinting produces a clear, legible text for human readers.
		 <p>Legal values are CFFHinting.NONE, CFFHinting.HORIZONTAL_STEM, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of CFFHinting.HORIZONTAL_STEM.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.CFFHinting.xml"><linktext>flash.text.engine.CFFHinting</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:clearFloatsProperty:get"><apiName>clearFloatsProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:clearFloats:get"><apiName>clearFloats</apiName><shortdesc>
		 Controls how text wraps around a float.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Controls how text wraps around a float. A value of none allows the text to wrap most closely around a float. A value of left causes the text to skip over any portion of the container that has a left float, and a value of right causes the text to skip over any portion of the container that has a right float. A value of both causes the text to skip over any floats.
		 <p>Legal values are ClearFloats.START, ClearFloats.END, ClearFloats.LEFT, ClearFloats.RIGHT, ClearFloats.BOTH, ClearFloats.NONE, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of ClearFloats.NONE.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#ClearFloats"><linktext>flashx.textLayout.formats.ClearFloats</linktext></link><link href="flashx.textLayout.formats.xml#ClearFloats"><linktext>flashx.textLayout.formats.ClearFloats</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:colorProperty:get"><apiName>colorProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:color:get"><apiName>color</apiName><shortdesc>
		 Color of the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Color of the text. A hexadecimal number that specifies three 8-bit RGB (red, green, blue) values; for example, 0xFF0000 is red and 0x00FF00 is green. It can also be enum value {BLACK, GREEN, GRAY, BLUE, SILVER, LIME, OLIVE, WHITE, YELLOW, MAROON, NAVY, RED, PURPLE, TEAL, FUCHSIA, AQUA, MAGENTA, CYAN}
		 <p>Legal values as a string are ColorName.BLACK, ColorName.GREEN, ColorName.GRAY, ColorName.BLUE, ColorName.SILVER, ColorName.LIME, ColorName.OLIVE, ColorName.WHITE, ColorName.YELLOW, ColorName.MAROON, ColorName.NAVY, ColorName.RED, ColorName.PURPLE, ColorName.TEAL, ColorName.FUCHSIA, ColorName.AQUA, ColorName.MAGENTA, ColorName.CYAN, FormatValue.INHERIT and uints from 0x0 to 0xffffffff.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#ColorName"><linktext>flashx.textLayout.formats.ColorName</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:columnBreakAfterProperty:get"><apiName>columnBreakAfterProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:columnBreakAfter:get"><apiName>columnBreakAfter</apiName><shortdesc>
		 Controls column after before the element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Controls column after before the element.
		 <p>Legal values are BreakStyle.AUTO, BreakStyle.ALWAYS, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of BreakStyle.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BreakStyle"><linktext>flashx.textLayout.formats.BreakStyle</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:columnBreakBeforeProperty:get"><apiName>columnBreakBeforeProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:columnBreakBefore:get"><apiName>columnBreakBefore</apiName><shortdesc>
		 Controls column break before the element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Controls column break before the element.
		 <p>Legal values are BreakStyle.AUTO, BreakStyle.ALWAYS, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of BreakStyle.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BreakStyle"><linktext>flashx.textLayout.formats.BreakStyle</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:columnCountProperty:get"><apiName>columnCountProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:columnCount:get"><apiName>columnCount</apiName><shortdesc>
		 Number of text columns (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Number of text columns (adopts default value if undefined during cascade).
		 The column number overrides the  other column settings. Value is an integer, or <codeph>FormatValue.AUTO</codeph> if unspecified. If <codeph>columnCount</codeph> is not specified,<codeph>columnWidth</codeph> is used to create as many columns as can fit in the container.
		 <p>Legal values as a string are FormatValue.AUTO, FormatValue.INHERIT and from ints from 1 to 50.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of FormatValue.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:columnGapProperty:get"><apiName>columnGapProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:columnGap:get"><apiName>columnGap</apiName><shortdesc>
		 Specifies the amount of gutter space, in pixels, to leave between the columns (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Specifies the amount of gutter space, in pixels, to leave between the columns (adopts default value if undefined during cascade).
		 Value is a Number
		 <p>Legal values are numbers from 0 to 1000 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of 20.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:columnWidthProperty:get"><apiName>columnWidthProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:columnWidth:get"><apiName>columnWidth</apiName><shortdesc>
		 Column width in pixels (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Column width in pixels (adopts default value if undefined during cascade).
		 If you specify the width of the columns, but not the count, TextLayout will create as many columns of that width as possible, given the  container width and <codeph>columnGap</codeph> settings. Any remainder space is left after the last column. Value is a Number.
		 <p>Legal values as a string are FormatValue.AUTO, FormatValue.INHERIT and numbers from 0 to 8000.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of FormatValue.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:containerBreakAfterProperty:get"><apiName>containerBreakAfterProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:containerBreakAfter:get"><apiName>containerBreakAfter</apiName><shortdesc>
		 Controls container after before the element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Controls container after before the element.
		 <p>Legal values are BreakStyle.AUTO, BreakStyle.ALWAYS, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of BreakStyle.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BreakStyle"><linktext>flashx.textLayout.formats.BreakStyle</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:containerBreakBeforeProperty:get"><apiName>containerBreakBeforeProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:containerBreakBefore:get"><apiName>containerBreakBefore</apiName><shortdesc>
		 Controls container break before the element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Controls container break before the element.
		 <p>Legal values are BreakStyle.AUTO, BreakStyle.ALWAYS, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of BreakStyle.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BreakStyle"><linktext>flashx.textLayout.formats.BreakStyle</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:coreStyles:get"><apiName>coreStyles</apiName><shortdesc> Returns the coreStyles on this TextLayoutFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc> Returns the <codeph>coreStyles</codeph> on this TextLayoutFormat.  
		 The coreStyles object includes the formats that are defined by TextLayoutFormat and are in TextLayoutFormat.description. The
		 returned <codeph>coreStyles</codeph> object consists of an array of <i>stylename-value</i> pairs.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat"><linktext>flashx.textLayout.formats.TextLayoutFormat</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:defaultFormat:get"><apiName>defaultFormat</apiName><shortdesc>
		 Returns a TextLayoutFormat object with default settings.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc>
		 Returns a TextLayoutFormat object with default settings.
		 This function always returns the same object.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:digitCaseProperty:get"><apiName>digitCaseProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:digitCase:get"><apiName>digitCase</apiName><shortdesc>
		 The type of digit case used for this text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 The type of digit case used for this text. Setting the value to <codeph>DigitCase.OLD_STYLE</codeph> approximates lowercase letterforms with varying ascenders and descenders. The figures are proportionally spaced. This style is only available in selected typefaces, most commonly in a supplemental or expert font. The <codeph>DigitCase.LINING</codeph> setting has all-cap height and is typically monospaced to line up in charts.<p><adobeimage alt="digitCase" href="../../../images/textLayout_digitcase.gif"/></p>
		 <p>Legal values are DigitCase.DEFAULT, DigitCase.LINING, DigitCase.OLD_STYLE, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of DigitCase.DEFAULT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.DigitCase.xml"><linktext>flash.text.engine.DigitCase</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:digitWidthProperty:get"><apiName>digitWidthProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:digitWidth:get"><apiName>digitWidth</apiName><shortdesc>
		 Type of digit width used for this text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Type of digit width used for this text. This can be <codeph>DigitWidth.PROPORTIONAL</codeph>, which looks best for individual numbers, or <codeph>DigitWidth.TABULAR</codeph>, which works best for numbers in tables, charts, and vertical rows.<p><adobeimage alt="digitWidth" href="../../../images/textLayout_digitwidth.gif"/></p>
		 <p>Legal values are DigitWidth.DEFAULT, DigitWidth.PROPORTIONAL, DigitWidth.TABULAR, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of DigitWidth.DEFAULT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.DigitWidth.xml"><linktext>flash.text.engine.DigitWidth</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:directionProperty:get"><apiName>directionProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:direction:get"><apiName>direction</apiName><shortdesc>
		 Specifies the default bidirectional embedding level of the text in the text block.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Specifies the default bidirectional embedding level of the text in the text block. 
		 Left-to-right reading order, as in Latin-style scripts, or right-to-left reading order, as in Arabic or Hebrew. This property also affects column direction when it is applied at the container level. Columns can be either left-to-right or right-to-left, just like text. Below are some examples:<p><adobeimage alt="direction" href="../../../images/textLayout_direction.gif"/></p>
		 <p>Legal values are Direction.LTR, Direction.RTL, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of Direction.LTR.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#Direction"><linktext>flashx.textLayout.formats.Direction</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:dominantBaselineProperty:get"><apiName>dominantBaselineProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:dominantBaseline:get"><apiName>dominantBaseline</apiName><shortdesc>
		 Specifies which element baseline snaps to the alignmentBaseline to determine the vertical position of the element on the line.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Specifies which element baseline snaps to the <codeph>alignmentBaseline</codeph> to determine the vertical position of the element on the line. A value of <codeph>TextBaseline.AUTO</codeph> selects the dominant baseline based on the <codeph>locale</codeph> property of the parent paragraph.  For Japanese and Chinese, the selected baseline value is <codeph>TextBaseline.IDEOGRAPHIC_CENTER</codeph>; for all others it is <codeph>TextBaseline.ROMAN</codeph>. These baseline choices are determined by the choice of font and the font size.<p><adobeimage alt="baselines" href="../../../images/textLayout_baselines.jpg"/></p>
		 <p>Legal values are FormatValue.AUTO, TextBaseline.ROMAN, TextBaseline.ASCENT, TextBaseline.DESCENT, TextBaseline.IDEOGRAPHIC_TOP, TextBaseline.IDEOGRAPHIC_CENTER, TextBaseline.IDEOGRAPHIC_BOTTOM, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of FormatValue.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextBaseline.xml"><linktext>flash.text.engine.TextBaseline</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:firstBaselineOffsetProperty:get"><apiName>firstBaselineOffsetProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:firstBaselineOffset:get"><apiName>firstBaselineOffset</apiName><shortdesc>
		 Specifies the baseline position of the first line in the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Specifies the baseline position of the first line in the container. Which baseline this property refers to depends on the container-level locale.  For Japanese and Chinese, it is <codeph>TextBaseline.IDEOGRAPHIC_BOTTOM</codeph>; for all others it is <codeph>TextBaseline.ROMAN</codeph>.
		 The offset from the top inset (or right inset if <codeph>blockProgression</codeph> is RL) of the container to the baseline of the first line can be either <codeph>BaselineOffset.ASCENT</codeph>, meaning equal to the ascent of the line, <codeph>BaselineOffset.LINE_HEIGHT</codeph>, meaning equal to the height of that first line, or any fixed-value number to specify an absolute distance. <codeph>BaselineOffset.AUTO</codeph> aligns the ascent of the line with the container top inset.<p><adobeimage alt="firstBaselineOffset1" href="../../../images/textLayout_FBO1.png"/><adobeimage alt="firstBaselineOffset2" href="../../../images/textLayout_FBO2.png"/><adobeimage alt="firstBaselineOffset3" href="../../../images/textLayout_FBO3.png"/><adobeimage alt="firstBaselineOffset4" href="../../../images/textLayout_FBO4.png"/></p>
		 <p>Legal values as a string are BaselineOffset.AUTO, BaselineOffset.ASCENT, BaselineOffset.LINE_HEIGHT, FormatValue.INHERIT and numbers from 0 to 1000.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of BaselineOffset.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BaselineOffset"><linktext>flashx.textLayout.formats.BaselineOffset</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:fontFamilyProperty:get"><apiName>fontFamilyProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:fontFamily:get"><apiName>fontFamily</apiName><shortdesc>
		  The name of the font to use, or a comma-separated list of font names.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		  The name of the font to use, or a comma-separated list of font names. The Flash runtime renders the element with the first available font in the list. For example Arial, Helvetica, _sans causes the player to search for Arial, then Helvetica if Arial is not found, then _sans if neither is found.
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of Arial.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:fontLookupProperty:get"><apiName>fontLookupProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:fontLookup:get"><apiName>fontLookup</apiName><shortdesc>
		 Font lookup to use.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Font lookup to use. Specifying <codeph>FontLookup.DEVICE</codeph> uses the fonts installed on the system that is running the SWF file. Device fonts result in a smaller movie size, but text is not always rendered the same across different systems and platforms. Specifying <codeph>FontLookup.EMBEDDED_CFF</codeph> uses font outlines embedded in the published SWF file. Embedded fonts increase the size of the SWF file (sometimes dramatically), but text is consistently displayed in the chosen font.
		 <p>Legal values are FontLookup.DEVICE, FontLookup.EMBEDDED_CFF, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of FontLookup.DEVICE.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontLookup.xml"><linktext>flash.text.engine.FontLookup</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:fontSizeProperty:get"><apiName>fontSizeProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:fontSize:get"><apiName>fontSize</apiName><shortdesc>
		 The size of the text in pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 The size of the text in pixels.
		 <p>Legal values are numbers from 1 to 720 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 12.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:fontStyleProperty:get"><apiName>fontStyleProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:fontStyle:get"><apiName>fontStyle</apiName><shortdesc>
		 Style of text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Style of text. May be <codeph>FontPosture.NORMAL</codeph>, for use in plain text, or <codeph>FontPosture.ITALIC</codeph> for italic. This property applies only to device fonts (<codeph>fontLookup</codeph> property is set to flash.text.engine.FontLookup.DEVICE).
		 <p>Legal values are FontPosture.NORMAL, FontPosture.ITALIC, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of FontPosture.NORMAL.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontPosture.xml"><linktext>flash.text.engine.FontPosture</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:fontWeightProperty:get"><apiName>fontWeightProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:fontWeight:get"><apiName>fontWeight</apiName><shortdesc>
		 Weight of text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Weight of text. May be <codeph>FontWeight.NORMAL</codeph> for use in plain text, or <codeph>FontWeight.BOLD</codeph>. Applies only to device fonts (<codeph>fontLookup</codeph> property is set to flash.text.engine.FontLookup.DEVICE).
		 <p>Legal values are FontWeight.NORMAL, FontWeight.BOLD, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of FontWeight.NORMAL.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontWeight.xml"><linktext>flash.text.engine.FontWeight</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:justificationRuleProperty:get"><apiName>justificationRuleProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:justificationRule:get"><apiName>justificationRule</apiName><shortdesc>
		 Rule used to justify text in a paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Rule used to justify text in a paragraph.
		 Default value is <codeph>FormatValue.AUTO</codeph>, which justifies text based on the paragraph's <codeph>locale</codeph> property. For all languages except Japanese and Chinese, <codeph>FormatValue.AUTO</codeph> becomes <codeph>JustificationRule.SPACE</codeph>, which adds extra space to the space characters.  For Japanese and Chinese, <codeph>FormatValue.AUTO</codeph> becomes <codeph>JustficationRule.EAST_ASIAN</codeph>. In part, justification changes the spacing of punctuation. In Roman text the comma and Japanese periods take a full character's width but in East Asian text only half of a character's width. Also, in the East Asian text the spacing between sequential punctuation marks becomes tighter, obeying traditional East Asian typographic conventions. Note, too, in the example below the leading that is applied to the second line of the paragraphs. In the East Asian version, the last two lines push left. In the Roman version, the second and following lines push left.<p><adobeimage alt="justificationRule" href="../../../images/textLayout_justificationrule.png"/></p>
		 <p>Legal values are JustificationRule.EAST_ASIAN, JustificationRule.SPACE, FormatValue.AUTO, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of FormatValue.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#JustificationRule"><linktext>flashx.textLayout.formats.JustificationRule</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:justificationStyleProperty:get"><apiName>justificationStyleProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:justificationStyle:get"><apiName>justificationStyle</apiName><shortdesc>
		 The style used for justification of the paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 The style used for justification of the paragraph. Used only in conjunction with a <codeph>justificationRule</codeph> setting of <codeph>JustificationRule.EAST_ASIAN</codeph>.
		 Default value of <codeph>FormatValue.AUTO</codeph> is resolved to <codeph>JustificationStyle.PUSH_IN_KINSOKU</codeph> for all locales.  The constants defined by the JustificationStyle class specify options for handling kinsoku characters, which are Japanese characters that cannot appear at either the beginning or end of a line. If you want looser text, specify <codeph>JustificationStyle.PUSH-OUT-ONLY</codeph>. If you want behavior that is like what you get with the  <codeph>justificationRule</codeph> of <codeph>JustificationRule.SPACE</codeph>, use <codeph>JustificationStyle.PRIORITIZE-LEAST-ADJUSTMENT</codeph>.
		 <p>Legal values are JustificationStyle.PRIORITIZE_LEAST_ADJUSTMENT, JustificationStyle.PUSH_IN_KINSOKU, JustificationStyle.PUSH_OUT_ONLY, FormatValue.AUTO, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of FormatValue.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.JustificationStyle.xml"><linktext>flash.text.engine.JustificationStyle</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:kerningProperty:get"><apiName>kerningProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:kerning:get"><apiName>kerning</apiName><shortdesc>
		 Kerning adjusts the pixels between certain character pairs to improve readability.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Kerning adjusts the pixels between certain character pairs to improve readability. Kerning is supported for all fonts with kerning tables.
		 <p>Legal values are Kerning.ON, Kerning.OFF, Kerning.AUTO, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of Kerning.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.Kerning.xml"><linktext>flash.text.engine.Kerning</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:leadingModelProperty:get"><apiName>leadingModelProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:leadingModel:get"><apiName>leadingModel</apiName><shortdesc>
		 Specifies the leading model, which is a combination of leading basis and leading direction.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Specifies the leading model, which is a combination of leading basis and leading direction.
		 Leading basis is the baseline to which the <codeph>lineHeight</codeph> property refers. Leading direction determines whether the <codeph>lineHeight</codeph> property refers to the distance of a line's baseline from that of the line before it or the line after it. The default value of <codeph>FormatValue.AUTO</codeph> is resolved based on the paragraph's <codeph>locale</codeph> property.  For Japanese and Chinese, it is <codeph>LeadingModel.IDEOGRAPHIC_TOP_DOWN</codeph> and for all others it is <codeph>LeadingModel.ROMAN_UP</codeph>.<p><b>Leading Basis:</b></p><p><adobeimage alt="leadingBasis1" href="../../../images/textLayout_LB1.png"/>    <adobeimage alt="leadingBasis2" href="../../../images/textLayout_LB2.png"/>    <adobeimage alt="leadingBasis3" href="../../../images/textLayout_LB3.png"/></p><p><b>Leading Direction:</b></p><p><adobeimage alt="leadingDirection1" href="../../../images/textLayout_LD1.png"/>    <adobeimage alt="leadingDirection2" href="../../../images/textLayout_LD2.png"/>    <adobeimage alt="leadingDirection3" href="../../../images/textLayout_LD3.png"/></p>
		 <p>Legal values are LeadingModel.ROMAN_UP, LeadingModel.IDEOGRAPHIC_TOP_UP, LeadingModel.IDEOGRAPHIC_CENTER_UP, LeadingModel.IDEOGRAPHIC_TOP_DOWN, LeadingModel.IDEOGRAPHIC_CENTER_DOWN, LeadingModel.APPROXIMATE_TEXT_FIELD, LeadingModel.ASCENT_DESCENT_UP, LeadingModel.BOX, LeadingModel.AUTO, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of LeadingModel.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#LeadingModel"><linktext>flashx.textLayout.formats.LeadingModel</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:ligatureLevelProperty:get"><apiName>ligatureLevelProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:ligatureLevel:get"><apiName>ligatureLevel</apiName><shortdesc>
		 Controls which of the ligatures that are defined in the font may be used in the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Controls which of the ligatures that are defined in the font may be used in the text. The ligatures that appear for each of these settings is dependent on the font. A ligature occurs where two or more letter-forms are joined as a single glyph. Ligatures usually replace consecutive characters sharing common components, such as the letter pairs 'fi', 'fl', or 'ae'. They are used with both Latin and Non-Latin character sets. The ligatures enabled by the values of the LigatureLevel class - <codeph>MINIMUM</codeph>, <codeph>COMMON</codeph>, <codeph>UNCOMMON</codeph>, and <codeph>EXOTIC</codeph> - are additive. Each value enables a new set of ligatures, but also includes those of the previous types.<p><b>Note: </b>When working with Arabic or Syriac fonts, <codeph>ligatureLevel</codeph> must be set to MINIMUM or above.</p><p><adobeimage alt="ligatureLevel" href="../../../images/textLayout_ligatures.png"/></p>
		 <p>Legal values are LigatureLevel.MINIMUM, LigatureLevel.COMMON, LigatureLevel.UNCOMMON, LigatureLevel.EXOTIC, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of LigatureLevel.COMMON.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.LigatureLevel.xml"><linktext>flash.text.engine.LigatureLevel</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:lineBreakProperty:get"><apiName>lineBreakProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:lineBreak:get"><apiName>lineBreak</apiName><shortdesc>
		 Controls word wrapping within the container (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Controls word wrapping within the container (adopts default value if undefined during cascade).
		 Text in the container may be set to fit the width of the container (<codeph>LineBreak.TO_FIT</codeph>), or can be set to break only at explicit return or line feed characters (<codeph>LineBreak.EXPLICIT</codeph>).
		 <p>Legal values are LineBreak.EXPLICIT, LineBreak.TO_FIT, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of LineBreak.TO_FIT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#LineBreak"><linktext>flashx.textLayout.formats.LineBreak</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:lineHeightProperty:get"><apiName>lineHeightProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:lineHeight:get"><apiName>lineHeight</apiName><shortdesc>
		 Leading controls for the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Leading controls for the text. The distance from the baseline of the previous or the next line (based on <codeph>LeadingModel</codeph>) to the baseline of the current line is equal to the maximum amount of the leading applied to any character in the line. This is either a number or a percent.  If specifying a percent, enter a string value, like 140%.<p><adobeimage alt="lineHeight1" href="../../../images/textLayout_lineHeight1.jpg"/><adobeimage alt="lineHeight2" href="../../../images/textLayout_lineHeight2.jpg"/></p>
		 <p>Legal values as a number are from -720 to 720.</p>
		 <p>Legal values as a percent are numbers from -1000% to 1000%.</p>
		 <p>Legal values include FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 120%.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:lineThroughProperty:get"><apiName>lineThroughProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:lineThrough:get"><apiName>lineThrough</apiName><shortdesc>
		 If true, applies strikethrough, a line drawn through the middle of the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 If <codeph>true</codeph>, applies strikethrough, a line drawn through the middle of the text.
		 <p>Legal values are true, false and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of false.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:linkActiveFormatProperty:get"><apiName>linkActiveFormatProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:linkActiveFormat:get"><apiName>linkActiveFormat</apiName><shortdesc>
		 Defines the formatting attributes used for links in normal state.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Defines the formatting attributes used for links in normal state. This value will cascade down the hierarchy and apply to any links that are descendants.
		 Accepts <codeph>inherit</codeph>, an <codeph>ITextLayoutFormat</codeph> or converts an array of objects with key and value as members to a TextLayoutFormat.
		 <p>Legal values include FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of null.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:linkHoverFormatProperty:get"><apiName>linkHoverFormatProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:linkHoverFormat:get"><apiName>linkHoverFormat</apiName><shortdesc>
		 Defines the formatting attributes used for links in hover state, when the mouse is within the bounds (rolling over) a link.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Defines the formatting attributes used for links in hover state, when the mouse is within the bounds (rolling over) a link. This value will cascade down the hierarchy and apply to any links that are descendants.
		 Accepts <codeph>inherit</codeph>, an <codeph>ITextLayoutFormat</codeph> or converts an array of objects with key and value as members to a TextLayoutFormat.
		 <p>Legal values include FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of null.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:linkNormalFormatProperty:get"><apiName>linkNormalFormatProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:linkNormalFormat:get"><apiName>linkNormalFormat</apiName><shortdesc>
		 Defines the formatting attributes used for links in normal state.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Defines the formatting attributes used for links in normal state. This value will cascade down the hierarchy and apply to any links that are descendants.
		 Accepts <codeph>inherit</codeph>, an <codeph>ITextLayoutFormat</codeph> or converts an array of objects with key and value as members to a TextLayoutFormat.
		 <p>Legal values include FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of null.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:listAutoPaddingProperty:get"><apiName>listAutoPaddingProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:listAutoPadding:get"><apiName>listAutoPadding</apiName><shortdesc>
		 This specifies an auto indent for the start edge of lists when the padding value of the list on that side is auto.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 This specifies an auto indent for the start edge of lists when the padding value of the list on that side is <codeph>auto</codeph>.
		 <p>Legal values are numbers from -1000 to 1000 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 40.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:listMarkerFormatProperty:get"><apiName>listMarkerFormatProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:listMarkerFormat:get"><apiName>listMarkerFormat</apiName><shortdesc>
		 Defines the formatting attributes list markers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Defines the formatting attributes list markers. This value will cascade down the hierarchy and apply to any links that are descendants.
		 Accepts <codeph>inherit</codeph>, an <codeph>IListMarkerFormat</codeph> or converts an array of objects with key and value as members to a ListMarkerFormat.
		 <p>Legal values include FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of null.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:listStylePositionProperty:get"><apiName>listStylePositionProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:listStylePosition:get"><apiName>listStylePosition</apiName><shortdesc>
		 Legal values are ListStylePosition.INSIDE, ListStylePosition.OUTSIDE, FormatValue.INHERIT.
		 Default value is undefined indicating not set.
		 If undefined during the cascade this property will inherit its value from an ancestor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 <p>Legal values are ListStylePosition.INSIDE, ListStylePosition.OUTSIDE, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of ListStylePosition.OUTSIDE.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#ListStylePosition"><linktext>flashx.textLayout.formats.ListStylePosition</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:listStyleTypeProperty:get"><apiName>listStyleTypeProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:listStyleType:get"><apiName>listStyleType</apiName><shortdesc>
		 Legal values are ListStyleType.UPPER_ALPHA, ListStyleType.LOWER_ALPHA, ListStyleType.UPPER_ROMAN, ListStyleType.LOWER_ROMAN, ListStyleType.NONE, ListStyleType.DISC, ListStyleType.CIRCLE, ListStyleType.SQUARE, ListStyleType.BOX, ListStyleType.CHECK, ListStyleType.DIAMOND, ListStyleType.HYPHEN, ListStyleType.ARABIC_INDIC, ListStyleType.BENGALI, ListStyleType.DECIMAL, ListStyleType.DECIMAL_LEADING_ZERO, ListStyleType.DEVANAGARI, ListStyleType.GUJARATI, ListStyleType.GURMUKHI, ListStyleType.KANNADA, ListStyleType.PERSIAN, ListStyleType.THAI, ListStyleType.URDU, ListStyleType.CJK_EARTHLY_BRANCH, ListStyleType.CJK_HEAVENLY_STEM, ListStyleType.HANGUL, ListStyleType.HANGUL_CONSTANT, ListStyleType.HIRAGANA, ListStyleType.HIRAGANA_IROHA, ListStyleType.KATAKANA, ListStyleType.KATAKANA_IROHA, ListStyleType.LOWER_ALPHA, ListStyleType.LOWER_GREEK, ListStyleType.LOWER_LATIN, ListStyleType.UPPER_ALPHA, ListStyleType.UPPER_GREEK, ListStyleType.UPPER_LATIN, FormatValue.INHERIT.
		 Default value is undefined indicating not set.
		 If undefined during the cascade this property will inherit its value from an ancestor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 <p>Legal values are ListStyleType.UPPER_ALPHA, ListStyleType.LOWER_ALPHA, ListStyleType.UPPER_ROMAN, ListStyleType.LOWER_ROMAN, ListStyleType.NONE, ListStyleType.DISC, ListStyleType.CIRCLE, ListStyleType.SQUARE, ListStyleType.BOX, ListStyleType.CHECK, ListStyleType.DIAMOND, ListStyleType.HYPHEN, ListStyleType.ARABIC_INDIC, ListStyleType.BENGALI, ListStyleType.DECIMAL, ListStyleType.DECIMAL_LEADING_ZERO, ListStyleType.DEVANAGARI, ListStyleType.GUJARATI, ListStyleType.GURMUKHI, ListStyleType.KANNADA, ListStyleType.PERSIAN, ListStyleType.THAI, ListStyleType.URDU, ListStyleType.CJK_EARTHLY_BRANCH, ListStyleType.CJK_HEAVENLY_STEM, ListStyleType.HANGUL, ListStyleType.HANGUL_CONSTANT, ListStyleType.HIRAGANA, ListStyleType.HIRAGANA_IROHA, ListStyleType.KATAKANA, ListStyleType.KATAKANA_IROHA, ListStyleType.LOWER_ALPHA, ListStyleType.LOWER_GREEK, ListStyleType.LOWER_LATIN, ListStyleType.UPPER_ALPHA, ListStyleType.UPPER_GREEK, ListStyleType.UPPER_LATIN, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of ListStyleType.DISC.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#ListStyleType"><linktext>flashx.textLayout.formats.ListStyleType</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:localeProperty:get"><apiName>localeProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:locale:get"><apiName>locale</apiName><shortdesc>
		 The locale of the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 The locale of the text. Controls case transformations and shaping. Standard locale identifiers as described in Unicode Technical Standard #35 are used. For example en, en_US and en-US are all English, ja is Japanese. 
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of en.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:paddingBottomProperty:get"><apiName>paddingBottomProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:paddingBottom:get"><apiName>paddingBottom</apiName><shortdesc>
		 Bottom inset in pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Bottom inset in pixels.  Default of auto is zero except in lists which get a start side padding of 45.  (adopts default value if undefined during cascade).
		 Space between the bottom edge of the container and the text.  Value is a Number  or auto. <p> With horizontal text, in scrollable containers with multiple columns, the first and following columns will show the padding as blank space at the bottom of the container, but for the last column, if the text doesn't all fit, you may have to scroll in order to see the padding.</p>
		 <p>Legal values as a string are FormatValue.AUTO, FormatValue.INHERIT and numbers from -8000 to 8000.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of FormatValue.AUTO.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#Configuration/autoListElementStartPadding"><linktext>flashx.textLayout.elements.Configuration.autoListElementStartPadding</linktext></link><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:paddingLeftProperty:get"><apiName>paddingLeftProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:paddingLeft:get"><apiName>paddingLeft</apiName><shortdesc>
		 Left inset in pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Left inset in pixels.  Default of auto is zero except in lists which get a start side padding of 45. (adopts default value if undefined during cascade).
		 Space between the left edge of the container and the text.  Value is a Number or auto.<p> With vertical text, in scrollable containers with multiple columns, the first and following columns will show the padding as blank space at the end of the container, but for the last column, if the text doesn't all fit, you may have to scroll in order to see the padding.</p>
		 <p>Legal values as a string are FormatValue.AUTO, FormatValue.INHERIT and numbers from -8000 to 8000.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of FormatValue.AUTO.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#Configuration/autoListElementStartPadding"><linktext>flashx.textLayout.elements.Configuration.autoListElementStartPadding</linktext></link><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:paddingRightProperty:get"><apiName>paddingRightProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:paddingRight:get"><apiName>paddingRight</apiName><shortdesc>
		 Right inset in pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Right inset in pixels.  Default of auto is zero except in lists which get a start side padding of 45. (adopts default value if undefined during cascade).
		 Space between the right edge of the container and the text.  Value is a Number or auto. 
		 <p>Legal values as a string are FormatValue.AUTO, FormatValue.INHERIT and numbers from -8000 to 8000.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of FormatValue.AUTO.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#Configuration/autoListElementStartPadding"><linktext>flashx.textLayout.elements.Configuration.autoListElementStartPadding</linktext></link><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:paddingTopProperty:get"><apiName>paddingTopProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:paddingTop:get"><apiName>paddingTop</apiName><shortdesc>
		 Top inset in pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Top inset in pixels.  Default of auto is zero except in lists which get a start side padding of 45. (adopts default value if undefined during cascade).
		 Space between the top edge of the container and the text.  Value is a Number or auto.
		 <p>Legal values as a string are FormatValue.AUTO, FormatValue.INHERIT and numbers from -8000 to 8000.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of FormatValue.AUTO.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#Configuration/autoListElementStartPadding"><linktext>flashx.textLayout.elements.Configuration.autoListElementStartPadding</linktext></link><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:paragraphEndIndentProperty:get"><apiName>paragraphEndIndentProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:paragraphEndIndent:get"><apiName>paragraphEndIndent</apiName><shortdesc>
		 A Number that specifies, in pixels, the amount to indent the paragraph's end edge.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 A Number that specifies, in pixels, the amount to indent the paragraph's end edge. Refers to the right edge in left-to-right text and the left edge in right-to-left text. 
		 <p>Legal values are numbers from 0 to 8000 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:paragraphSpaceAfterProperty:get"><apiName>paragraphSpaceAfterProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:paragraphSpaceAfter:get"><apiName>paragraphSpaceAfter</apiName><shortdesc>
		 A Number that specifies the amount of space, in pixels, to leave after the paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 A Number that specifies the amount of space, in pixels, to leave after the paragraph.
		 Collapses in tandem with  <codeph>paragraphSpaceBefore</codeph>.
		 <p>Legal values are numbers from 0 to 8000 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:paragraphSpaceBeforeProperty:get"><apiName>paragraphSpaceBeforeProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:paragraphSpaceBefore:get"><apiName>paragraphSpaceBefore</apiName><shortdesc>
		 A Number that specifies the amount of space, in pixels, to leave before the paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 A Number that specifies the amount of space, in pixels, to leave before the paragraph. 
		 Collapses in tandem with <codeph>paragraphSpaceAfter</codeph>.
		 <p>Legal values are numbers from 0 to 8000 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:paragraphStartIndentProperty:get"><apiName>paragraphStartIndentProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:paragraphStartIndent:get"><apiName>paragraphStartIndent</apiName><shortdesc>
		 A Number that specifies, in pixels, the amount to indent the paragraph's start edge.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 A Number that specifies, in pixels, the amount to indent the paragraph's start edge. Refers to the left edge in left-to-right text and the right edge in right-to-left text. 
		 <p>Legal values are numbers from 0 to 8000 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:renderingModeProperty:get"><apiName>renderingModeProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:renderingMode:get"><apiName>renderingMode</apiName><shortdesc>
		 The rendering mode used for this text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 The rendering mode used for this text.  Applies only to embedded fonts (<codeph>fontLookup</codeph> property is set to <codeph>FontLookup.EMBEDDED_CFF</codeph>).
		 <p>Legal values are RenderingMode.NORMAL, RenderingMode.CFF, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of RenderingMode.CFF.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.RenderingMode.xml"><linktext>flash.text.engine.RenderingMode</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:styleNameProperty:get"><apiName>styleNameProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:styleName:get"><apiName>styleName</apiName><shortdesc>
		 Assigns an identifying class to the element, making it possible to set a style for the element by referencing the styleName.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Assigns an identifying class to the element, making it possible to set a style for the element by referencing the <codeph>styleName</codeph>.
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of null.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:styles:get"><apiName>styles</apiName><shortdesc> Returns the styles on this TextLayoutFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc> Returns the styles on this TextLayoutFormat.  Note that the getter makes a copy of the  
		 styles dictionary. The coreStyles object encapsulates all styles set in the format property including core and user styles. The
		 returned object consists of an array of <i>stylename-value</i> pairs.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat"><linktext>flashx.textLayout.formats.TextLayoutFormat</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:tabStopsProperty:get"><apiName>tabStopsProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:tabStops:get"><apiName>tabStops</apiName><shortdesc>
		 Specifies the tab stops associated with the paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Specifies the tab stops associated with the paragraph.
		 Setters can take an array of TabStopFormat, a condensed string representation, undefined, or <codeph>FormatValue.INHERIT</codeph>. The condensed string representation is always converted into an array of TabStopFormat. <p>The string-based format is a list of tab stops, where each tab stop is delimited by one or more spaces.</p><p>A tab stop takes the following form: &lt;alignment type&gt;&lt;alignment position&gt;|&lt;alignment token&gt;.</p><p>The alignment type is a single character, and can be S, E, C, or D (or lower-case equivalents). S or s for start, E or e for end, C or c for center, D or d for decimal. The alignment type is optional, and if its not specified will default to S.</p><p>The alignment position is a Number, and is specified according to FXG spec for Numbers (decimal or scientific notation). The alignment position is required.</p><p>The vertical bar is used to separate the alignment position from the alignment token, and should only be present if the alignment token is present.</p><p> The alignment token is optional if the alignment type is D, and should not be present if the alignment type is anything other than D. The alignment token may be any sequence of characters terminated by the space that ends the tab stop (for the last tab stop, the terminating space is optional; end of alignment token is implied). A space may be part of the alignment token if it is escaped with a backslash (\ ). A backslash may be part of the alignment token if it is escaped with another backslash (\\). If the alignment type is D, and the alignment token is not specified, it will take on the default value of null.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of null.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TabStopFormat"><linktext>flashx.textLayout.formats.TabStopFormat</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:textAlignLastProperty:get"><apiName>textAlignLastProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:textAlignLast:get"><apiName>textAlignLast</apiName><shortdesc>
		 Alignment of the last (or only) line in the paragraph relative to the container in justified text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Alignment of the last (or only) line in the paragraph relative to the container in justified text.
		 If <codeph>textAlign</codeph> is set to <codeph>TextAlign.JUSTIFY</codeph>, <codeph>textAlignLast</codeph> specifies how the last line (or only line, if this is a one line block) is aligned. Values are similar to <codeph>textAlign</codeph>.
		 <p>Legal values are TextAlign.LEFT, TextAlign.RIGHT, TextAlign.CENTER, TextAlign.JUSTIFY, TextAlign.START, TextAlign.END, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of TextAlign.START.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextAlign"><linktext>flashx.textLayout.formats.TextAlign</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:textAlignProperty:get"><apiName>textAlignProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:textAlign:get"><apiName>textAlign</apiName><shortdesc>
		 Alignment of lines in the paragraph relative to the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Alignment of lines in the paragraph relative to the container.
		 <codeph>TextAlign.LEFT</codeph> aligns lines along the left edge of the container. <codeph>TextAlign.RIGHT</codeph> aligns on the right edge. <codeph>TextAlign.CENTER</codeph> positions the line equidistant from the left and right edges. <codeph>TextAlign.JUSTIFY</codeph> spreads the lines out so they fill the space. <codeph>TextAlign.START</codeph> is equivalent to setting left in left-to-right text, or right in right-to-left text. <codeph>TextAlign.END</codeph> is equivalent to setting right in left-to-right text, or left in right-to-left text.
		 <p>Legal values are TextAlign.LEFT, TextAlign.RIGHT, TextAlign.CENTER, TextAlign.JUSTIFY, TextAlign.START, TextAlign.END, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of TextAlign.START.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextAlign"><linktext>flashx.textLayout.formats.TextAlign</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:textAlphaProperty:get"><apiName>textAlphaProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:textAlpha:get"><apiName>textAlpha</apiName><shortdesc>
		 Alpha (transparency) value for the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Alpha (transparency) value for the text. A value of 0 is fully transparent, and a value of 1 is fully opaque. Display objects with <codeph>textAlpha</codeph> set to 0 are active, even though they are invisible.
		 <p>Legal values are numbers from 0 to 1 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 1.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:textDecorationProperty:get"><apiName>textDecorationProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:textDecoration:get"><apiName>textDecoration</apiName><shortdesc>
		 Decoration on text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Decoration on text. Use to apply underlining; default is none.
		 <p>Legal values are TextDecoration.NONE, TextDecoration.UNDERLINE, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of TextDecoration.NONE.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextDecoration"><linktext>flashx.textLayout.formats.TextDecoration</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:textIndentProperty:get"><apiName>textIndentProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:textIndent:get"><apiName>textIndent</apiName><shortdesc>
		 A Number that specifies, in pixels, the amount to indent the first line of the paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 A Number that specifies, in pixels, the amount to indent the first line of the paragraph.
		 A negative indent will push the line into the margin, and possibly out of the container.
		 <p>Legal values are numbers from -8000 to 8000 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:textJustifyProperty:get"><apiName>textJustifyProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:textJustify:get"><apiName>textJustify</apiName><shortdesc>
		 Specifies options for justifying text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Specifies options for justifying text.
		 Default value is <codeph>TextJustify.INTER_WORD</codeph>, meaning that extra space is added to the space characters. <codeph>TextJustify.DISTRIBUTE</codeph> adds extra space to space characters and between individual letters. Used only in conjunction with a <codeph>justificationRule</codeph> value of <codeph>JustificationRule.SPACE</codeph>.
		 <p>Legal values are TextJustify.INTER_WORD, TextJustify.DISTRIBUTE, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of TextJustify.INTER_WORD.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextJustify"><linktext>flashx.textLayout.formats.TextJustify</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:textRotationProperty:get"><apiName>textRotationProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:textRotation:get"><apiName>textRotation</apiName><shortdesc>
		 Determines the number of degrees to rotate this text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Determines the number of degrees to rotate this text.
		 <p>Legal values are TextRotation.ROTATE_0, TextRotation.ROTATE_180, TextRotation.ROTATE_270, TextRotation.ROTATE_90, TextRotation.AUTO, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of TextRotation.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextRotation.xml"><linktext>flash.text.engine.TextRotation</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:trackingLeftProperty:get"><apiName>trackingLeftProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:trackingLeft:get"><apiName>trackingLeft</apiName><shortdesc>
		 Number in pixels (or percent of fontSize, like 120%) indicating the amount of tracking (manual kerning) to be applied to the left of each character.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Number in pixels (or percent of <codeph>fontSize</codeph>, like 120%) indicating the amount of tracking (manual kerning) to be applied to the left of each character. If kerning is enabled, the <codeph>trackingLeft</codeph> value is added to the values in the kerning table for the font. If kerning is disabled, the <codeph>trackingLeft</codeph> value is used as a manual kerning value. Supports both positive and negative values. 
		 <p>Legal values as a number are from -1000 to 1000.</p>
		 <p>Legal values as a percent are numbers from -1000% to 1000%.</p>
		 <p>Legal values include FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:trackingRightProperty:get"><apiName>trackingRightProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:trackingRight:get"><apiName>trackingRight</apiName><shortdesc>
		 Number in pixels (or percent of fontSize, like 120%) indicating the amount of tracking (manual kerning) to be applied to the right of each character.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Number in pixels (or percent of <codeph>fontSize</codeph>, like 120%) indicating the amount of tracking (manual kerning) to be applied to the right of each character.  If kerning is enabled, the <codeph>trackingRight</codeph> value is added to the values in the kerning table for the font. If kerning is disabled, the <codeph>trackingRight</codeph> value is used as a manual kerning value. Supports both positive and negative values. 
		 <p>Legal values as a number are from -1000 to 1000.</p>
		 <p>Legal values as a percent are numbers from -1000% to 1000%.</p>
		 <p>Legal values include FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:typographicCaseProperty:get"><apiName>typographicCaseProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:typographicCase:get"><apiName>typographicCase</apiName><shortdesc>
		 The type of typographic case used for this text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 The type of typographic case used for this text. Here are some examples:<p><adobeimage alt="typographicCase" href="../../../images/textLayout_typographiccase.png"/></p>
		 <p>Legal values are TLFTypographicCase.DEFAULT, TLFTypographicCase.CAPS_TO_SMALL_CAPS, TLFTypographicCase.UPPERCASE, TLFTypographicCase.LOWERCASE, TLFTypographicCase.LOWERCASE_TO_SMALL_CAPS, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of TLFTypographicCase.DEFAULT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TLFTypographicCase"><linktext>flashx.textLayout.formats.TLFTypographicCase</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:userStyles:get"><apiName>userStyles</apiName><shortdesc> Returns the userStyles on this TextLayoutFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc> Returns the <codeph>userStyles</codeph> on this TextLayoutFormat.  
		 The userStyles object includes the formats that are defined by TextLayoutFormat and are not in TextLayoutFormat.description. The
		 returned <codeph>userStyles</codeph> object consists of an array of <i>stylename-value</i> pairs.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat"><linktext>flashx.textLayout.formats.TextLayoutFormat</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:verticalAlignProperty:get"><apiName>verticalAlignProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:verticalAlign:get"><apiName>verticalAlign</apiName><shortdesc>
		 Vertical alignment or justification (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Vertical alignment or justification (adopts default value if undefined during cascade).
		 Determines how TextFlow elements align within the container.
		 <p>Legal values are VerticalAlign.TOP, VerticalAlign.MIDDLE, VerticalAlign.BOTTOM, VerticalAlign.JUSTIFY, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of VerticalAlign.TOP.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#VerticalAlign"><linktext>flashx.textLayout.formats.VerticalAlign</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:whiteSpaceCollapseProperty:get"><apiName>whiteSpaceCollapseProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:whiteSpaceCollapse:get"><apiName>whiteSpaceCollapse</apiName><shortdesc>
		 Collapses or preserves whitespace when importing text into a TextFlow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Collapses or preserves whitespace when importing text into a TextFlow. <codeph>WhiteSpaceCollapse.PRESERVE</codeph> retains all whitespace characters. <codeph>WhiteSpaceCollapse.COLLAPSE</codeph> removes newlines, tabs, and leading or trailing spaces within a block of imported text. Line break tags () and Unicode line separator characters are retained.
		 <p>Legal values are WhiteSpaceCollapse.PRESERVE, WhiteSpaceCollapse.COLLAPSE, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of WhiteSpaceCollapse.COLLAPSE.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#WhiteSpaceCollapse"><linktext>flashx.textLayout.formats.WhiteSpaceCollapse</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:wordSpacingProperty:get"><apiName>wordSpacingProperty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="flashx.textLayout.property:Property"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:wordSpacing:get"><apiName>wordSpacing</apiName><shortdesc>
		 Specifies the optimum, minimum, and maximum spacing (as a multiplier of the width of a normal space) between words to use during justification.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Specifies the optimum, minimum, and maximum spacing (as a multiplier of the width of a normal space) between words to use during justification.
		 The optimum space is used to indicate the desired size of a space, as a fraction of the value defined in the font. The minimum and maximum values are the used when textJustify is distribute to determine how wide or narrow the spaces between the words may grow before letter spacing is used to justify the line.
		 <p>Legal values as a percent are numbers from -1000% to 1000%.</p>
		 <p>Legal values include FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 100%, 50%, 150%.</p>
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:Float"><apiName>Float</apiName><shortdesc>
      Defines values for the float property
	  of the InlineGraphicElement class.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
      Defines values for the <codeph>float</codeph> property
	  of the InlineGraphicElement class. 
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.formats:Float:END"><apiName>END</apiName><shortdesc> Graphic floats on the trailing side of the text 
        (right if paragraph direction is "ltr", left if paragraph direction is "rtl").</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>end</apiData><apiType value="String"/></apiValueDef><apiDesc> Graphic floats on the trailing side of the text 
        (right if paragraph direction is "ltr", left if paragraph direction is "rtl"). 
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:Float:LEFT"><apiName>LEFT</apiName><shortdesc> Graphic floats on the left side of the text.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>left</apiData><apiType value="String"/></apiValueDef><apiDesc> Graphic floats on the left side of the text. </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:Float:NONE"><apiName>NONE</apiName><shortdesc> Graphic appears inline in the text (doesn't float).</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiType value="String"/></apiValueDef><apiDesc> Graphic appears inline in the text (doesn't float). </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:Float:RIGHT"><apiName>RIGHT</apiName><shortdesc> Graphic floats on the right side of the text.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>right</apiData><apiType value="String"/></apiValueDef><apiDesc> Graphic floats on the right side of the text. </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:Float:START"><apiName>START</apiName><shortdesc> Graphic floats on the leading side of the text 
         (left if paragraph direction is "ltr", right if paragraph direction is "rtl").</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>start</apiData><apiType value="String"/></apiValueDef><apiDesc> Graphic floats on the leading side of the text 
         (left if paragraph direction is "ltr", right if paragraph direction is "rtl"). 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:LineBreak"><apiName>LineBreak</apiName><shortdesc> Defines values for setting the lineBreak property of TextLayoutFormat to
	  specify how lines are broken within wrapping text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> Defines values for setting the <codeph>lineBreak</codeph> property of <codeph>TextLayoutFormat</codeph> to
	  specify how lines are broken within wrapping text.
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.formats:LineBreak:EXPLICIT"><apiName>EXPLICIT</apiName><shortdesc> Specifies that lines break only at explicit return or line feed characters.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>explicit</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies that lines break only at explicit return or line feed characters. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:LineBreak:TO_FIT"><apiName>TO_FIT</apiName><shortdesc> Specifies that lines wrap to fit the container width.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>toFit</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies that lines wrap to fit the container width. 
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:BlockProgression"><apiName>BlockProgression</apiName><shortdesc>
	  Defines values for the blockProgression property
	  of the TextLayouFormat class.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Defines values for the <codeph>blockProgression</codeph> property
	  of the <codeph>TextLayouFormat</codeph> class. BlockProgression specifies the direction in 
	  which lines are placed in the container.
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.formats:BlockProgression:RL"><apiName>RL</apiName><shortdesc> 
		  Specifies right to left block progression.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rl</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		  Specifies right to left block progression. Lines are laid out vertically starting at the right 
		  edge of the container and progressing leftward. Used for vertical text, for example, vertical 
		  Chinese or Japanese text. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:BlockProgression:TB"><apiName>TB</apiName><shortdesc> 
		  Specifies top to bottom block progression.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>tb</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		  Specifies top to bottom block progression. Lines are laid out horizontally starting at the top of 
		  the container and progressing down to the bottom. Used for horizontal text. 
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:Suffix"><apiName>Suffix</apiName><shortdesc>
     Defines values for setting the suffix property of a ListMarkerFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
     Defines values for setting the <codeph>suffix</codeph> property of a ListMarkerFormat. 
     
      </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.formats:Suffix:AUTO"><apiName>AUTO</apiName><shortdesc> Specifies that the auto suffix is appended to the list marker after the content.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>auto</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies that the auto suffix is appended to the list marker after the content. 
          See <xref href="http://www.w3.org/TR/css3-lists/">http://www.w3.org/TR/css3-lists/</xref> for the default suffixes.
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:Suffix:NONE"><apiName>NONE</apiName><shortdesc> Specifies that no suffix is appended to a list marker after the content.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies that no suffix is appended to a list marker after the content. 
         
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:IListMarkerFormat"><apiName>IListMarkerFormat</apiName><shortdesc>
	 This interface provides read access to ListMarkerFormat properties.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.formats:ITextLayoutFormat</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 This interface provides read access to ListMarkerFormat properties.
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.formats:IListMarkerFormat:flashx.textLayout.formats:IListMarkerFormat:afterContent:get"><apiName>afterContent</apiName><shortdesc> Specifies a string that goes after the marker.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/></apiValueDef><apiDesc> Specifies a string that goes after the marker. Default is the empty string. 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:IListMarkerFormat:flashx.textLayout.formats:IListMarkerFormat:beforeContent:get"><apiName>beforeContent</apiName><shortdesc> Specifies a string that goes before the marker.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/></apiValueDef><apiDesc> Specifies a string that goes before the marker. Default is the empty string. 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:IListMarkerFormat:flashx.textLayout.formats:IListMarkerFormat:content:get"><apiName>content</apiName><shortdesc>
		 Controls the content of the marker.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/></apiValueDef><apiDesc>
		 Controls the content of the marker. 
		 <p>Legal values for this string are:
		 <ul>
		 	<li><codeph>none</codeph> - No marker.</li>
		 	<li><codeph>counter(ordered)</codeph> - Display the marker.</li>
		 	<li><codeph>counter(ordered,ListStyleType)</codeph> - Display the marker but change the listStyleType to the specified value.</li>
		 	<li><codeph>counters(ordered)</codeph> - Starting from the top-most parent ListElement creating a string of values of the ordered counter in each counters specified listStyleType separated by the suffix for each.  This is used for outline number - for example I.1., I.2. etc.</li>
		 	<li><codeph>counters(ordered,"&lt;string&gt;")</codeph> - Similar to the previous value, except the suffix for each ordered counter is replaced by &lt;string&gt;.</li>
		 	<li><codeph>counters(ordered,"&lt;string&gt;",ListStyleType)</codeph> - Similar to the previous value, except each counter's <codeph>listStyleType</codeph> is replaced with the specified value.</li>
		 </ul>
		 </p>
		 <p>If undefined, the default vaule of this property is <codeph>"counter(ordered)"</codeph>.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:IListMarkerFormat:flashx.textLayout.formats:IListMarkerFormat:counterIncrement:get"><apiName>counterIncrement</apiName><shortdesc>
		 Controls incrementing the value of the counter.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/></apiValueDef><apiDesc>
		 Controls incrementing the value of the counter.  
		 <p>Legal values for this string are:
		  <ul>
		 		<li><codeph>none</codeph> - No increment.</li>
		 		<li><codeph>ordered</codeph> - Increment the counter by one.</li>
		 		<li><codeph>ordered <i>integer</i></codeph> - Increment the counter by <codeph><i>integer</i></codeph>.</li>
		  </ul>
		 </p>
		 <p>If undefined, the default vaule of this property is <codeph>"ordered 1"</codeph>.</p>
		 <p>Note: The <codeph>counterIncrement</codeph> property is applied before the <codeph>counterReset</codeph> property.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:IListMarkerFormat:flashx.textLayout.formats:IListMarkerFormat:counterReset:get"><apiName>counterReset</apiName><shortdesc>
		 Controls resetting the value of the counter.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/></apiValueDef><apiDesc>
		 Controls resetting the value of the counter.  
		 <p>Legal values for this property are:
		  <ul>
		 	  <li><codeph>none</codeph> - No reset.</li>
		 	  <li><codeph>ordered</codeph> - Reset the counter to zero.</li>
		 	  <li><codeph>ordered <i>integer</i></codeph> - Reset the counter to <codeph><i>integer</i></codeph>.</li>
		  </ul>
		 </p>
		 <p>If <codeph>undefined</codeph>, the default value of this property is "none".</p>
		 <p>Note: The <codeph>counterReset</codeph> property is applied before the <codeph>counterIncrement</codeph> property.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:IListMarkerFormat:flashx.textLayout.formats:IListMarkerFormat:suffix:get"><apiName>suffix</apiName><shortdesc>
		 Controls the application of the suffix in the generated text in the ListItemElement.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/></apiValueDef><apiDesc>
		 Controls the application of the suffix in the generated text in the ListItemElement.
		 <p>Legal values are:
		 <ul>
		   <li><codeph>flashx.textLayout.formats.Suffix.NONE</codeph> - No suffix.</li>		 
		   <li><codeph>flashx.textLayout.formats.Suffix.AUTO</codeph> - Follow CSS rules for adding a suffix.</li>
		 </ul> 
		 </p>
		 <p>Default value is <codeph>Suffix.AUTO</codeph>.</p>
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:ClearFloats"><apiName>ClearFloats</apiName><shortdesc>
	  Defines values for setting the clear property
      of the TextLayoutFormat class.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Defines values for setting the <codeph>clear</codeph> property
      of the <codeph>TextLayoutFormat</codeph> class. This property controls 
	  how text wraps around floats.
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.formats:ClearFloats:BOTH"><apiName>BOTH</apiName><shortdesc> Specifies that text skips over any float.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>both</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies that text skips over any float.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ClearFloats:END"><apiName>END</apiName><shortdesc> Specifies that text skips over floats on the start side in reading order (left if direction is "ltr", right if direction is "rtl").</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>end</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies that text skips over floats on the start side in reading order (left if direction is "ltr", right if direction is "rtl").
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ClearFloats:LEFT"><apiName>LEFT</apiName><shortdesc> Specifies that text skips over left floats.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>left</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies that text skips over left floats.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ClearFloats:NONE"><apiName>NONE</apiName><shortdesc> Specifies that  text wraps closely around floats.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies that  text wraps closely around floats.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ClearFloats:RIGHT"><apiName>RIGHT</apiName><shortdesc> Specifies that text skips over right floats.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>right</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies that text skips over right floats.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ClearFloats:START"><apiName>START</apiName><shortdesc> Specifies that text skips over floats on the start side in reading order (left if direction is "ltr", right if direction is "rtl").</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>start</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies that text skips over floats on the start side in reading order (left if direction is "ltr", right if direction is "rtl").
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:TextAlign"><apiName>TextAlign</apiName><shortdesc>
	  Defines values for setting the textAlign and textAlignLast properties
	  of the TextLayoutFormat class.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Defines values for setting the <codeph>textAlign</codeph> and <codeph>textAlignLast</codeph> properties
	  of the TextLayoutFormat class. The values describe the alignment of lines in the paragraph relative to the 
	  container.
	 
	 </apiDesc><example/></apiClassifierDetail><apiValue id="flashx.textLayout.formats:TextAlign:CENTER"><apiName>CENTER</apiName><shortdesc> Specifies center alignment within the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>center</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies center alignment within the container.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextAlign:END"><apiName>END</apiName><shortdesc> Specifies end edge alignment - text is aligned opposite from the writing order.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>end</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies end edge alignment - text is aligned opposite from the writing order. Equivalent to 
		  specifying right in left-to-right text, or left in right-to-left text. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextAlign:JUSTIFY"><apiName>JUSTIFY</apiName><shortdesc> Specifies that text is justified within the lines so they fill the container space.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>justify</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies that text is justified within the lines so they fill the container space.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextAlign:LEFT"><apiName>LEFT</apiName><shortdesc> Specifies left edge alignment.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>left</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies left edge alignment. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextAlign:RIGHT"><apiName>RIGHT</apiName><shortdesc> Specifies right edge alignment.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>right</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies right edge alignment. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextAlign:START"><apiName>START</apiName><shortdesc> Specifies start edge alignment - text is aligned to match the writing order.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>start</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies start edge alignment - text is aligned to match the writing order. Equivalent to setting 
		 left in left-to-right text, or right in right-to-left text.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:LeadingModel"><apiName>LeadingModel</apiName><shortdesc>
	  Defines values for setting the leadingModel property
	  of the TextLayoutFormat class, composed of valid combinations of leading basis and leading direction.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Defines values for setting the <codeph>leadingModel</codeph> property
	  of the <codeph>TextLayoutFormat</codeph> class, composed of valid combinations of leading basis and leading direction.
	  Leading basis describes which baselines determine the leading (or <codeph>lineHeight</codeph>) of lines in a paragraph.
	  Leading direction specifies whether the <codeph>lineHeight</codeph> property refers to the distance of a line's 
	  baseline from that of the line before it or the line after it. 
	  <p>
	  <adobeimage alt="baselines" border="0" href="../../../images/textLayout_baselines.jpg"/>
	  <adobeimage alt="leadingDirection_1" border="0" href="../../../images/textLayout_LD1.jpg"/>
	  <adobeimage alt="leadingDirection_2" border="0" href="../../../images/textLayout_LD2.jpg"/>
	  <adobeimage alt="leadingDirection_3" border="0" href="../../../images/textLayout_LD3.jpg"/>
	  </p>
	  </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.formats:LeadingModel:APPROXIMATE_TEXT_FIELD"><apiName>APPROXIMATE_TEXT_FIELD</apiName><shortdesc> Specifies a leading model that approximates the line spacing behavior of TextField.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>approximateTextField</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies a leading model that approximates the line spacing behavior of <codeph>TextField</codeph>.
		 It is similar to <codeph>ASCENT_DESCENT_UP</codeph> in that <codeph>lineHeight</codeph> refers to the 
		 distance of a line's ascent baseline from the previous line's descent baseline. However, baseline 
		 positions approximate those determined by <codeph>TextField</codeph>, rather than using metrics 
		 offered by <codeph>TextLine</codeph>.  
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:LeadingModel:ASCENT_DESCENT_UP"><apiName>ASCENT_DESCENT_UP</apiName><shortdesc> Specifies that leading basis is ASCENT/DESCENT and leading direction is UP.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ascentDescentUp</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies that leading basis is ASCENT/DESCENT and leading direction is UP. 
		  In other words, <codeph>lineHeight</codeph> refers to the distance of a line's ascent baseline from the 
		  previous line's descent baseline.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:LeadingModel:AUTO"><apiName>AUTO</apiName><shortdesc> Specifies that leading model is chosen automatically based on the paragraph's locale property.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="3.0" version="#IDEOGRAPHIC_TOP_DOWN"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>auto</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies that leading model is chosen automatically based on the paragraph's <codeph>locale</codeph> property.  
		 For Japanese and Chinese, it is IDEOGRAPHIC_TOP_DOWN and for all others it is ROMAN_UP.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:LeadingModel:BOX"><apiName>BOX</apiName><shortdesc>  Specifies a leading model based on the CSS inline formatting model, which involves stacking line boxes contiguously.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>box</apiData><apiType value="String"/></apiValueDef><apiDesc>  Specifies a leading model based on the CSS inline formatting model, which involves stacking <i>line boxes</i> contiguously.
		 A <i>line box</i> is defined as the bounding box around <i>inline boxes</i> for all leaf elements on the text line, after they have been aligned
		 using <codeph>baselineShift</codeph>, <codeph>dominantBaseline</codeph>, <codeph>alignmentBaseline</codeph> etc. For a span, the <i>inline box</i> 
		 is obtained by applying leading equally above and below the text content such that its height equals <codeph>lineHeight</codeph>.
		 For an inline graphic, <codeph>lineHeight</codeph> is ignored; the <i>inline box</i> is derived from its specified dimensions and padding values.
		 Also, <codeph>firstBaselineOffset</codeph> is ignored with this leading model.
		 
         <p>For more information, see <xref href="http://blogs.adobe.com/tlf/2010/11/box-leading-model.html">Box leading model</xref>.</p>
         
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:LeadingModel:IDEOGRAPHIC_CENTER_DOWN"><apiName>IDEOGRAPHIC_CENTER_DOWN</apiName><shortdesc> Specifies that leading basis is IDEOGRAPHIC_CENTER and leading direction is down.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ideographicCenterDown</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies that leading basis is IDEOGRAPHIC_CENTER and leading direction is down.
		  In other words, <codeph>lineHeight</codeph> refers to the distance of a line's ideographic center 
		  baseline from the next line's ideographic center baseline.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:LeadingModel:IDEOGRAPHIC_CENTER_UP"><apiName>IDEOGRAPHIC_CENTER_UP</apiName><shortdesc> Specifies that leading basis is IDEOGRAPHIC_CENTER and leading direction is UP.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ideographicCenterUp</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies that leading basis is IDEOGRAPHIC_CENTER and leading direction is UP. 
		 In other words, <codeph>lineHeight</codeph> refers to the distance of a line's ideographic center 
		 baseline from the previous line's ideographic center baseline.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:LeadingModel:IDEOGRAPHIC_TOP_DOWN"><apiName>IDEOGRAPHIC_TOP_DOWN</apiName><shortdesc> Specifies that leading basis is IDEOGRAPHIC_TOP and leading direction is DOWN.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ideographicTopDown</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies that leading basis is IDEOGRAPHIC_TOP and leading direction is DOWN.
		 In other words, <codeph>lineHeight</codeph> refers to the distance of a line's ideographic top baseline 
		 from the next line's ideographic top baseline.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:LeadingModel:IDEOGRAPHIC_TOP_UP"><apiName>IDEOGRAPHIC_TOP_UP</apiName><shortdesc> Specifies that leading basis is IDEOGRAPHIC_TOP and leading direction is UP.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ideographicTopUp</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies that leading basis is IDEOGRAPHIC_TOP and leading direction is UP. 
		  In other words, <codeph>lineHeight</codeph> refers to the distance of a line's ideographic top 
		  baseline from the previous line's ideographic top baseline.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:LeadingModel:ROMAN_UP"><apiName>ROMAN_UP</apiName><shortdesc> Specifies that leading basis is ROMAN and leading direction is UP.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>romanUp</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies that leading basis is ROMAN and leading direction is UP. 
		 In other words, <codeph>lineHeight</codeph> refers to the distance of a line's Roman baseline from the 
		 previous line's Roman baseline.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:TextJustify"><apiName>TextJustify</apiName><shortdesc>
	  Defines values for setting the textJustify property of the TextLayoutFormat class.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Defines values for setting the <codeph>textJustify</codeph> property of the TextLayoutFormat class. 
	  Default value is INTER_WORD, meaning that extra space in justification is added to the space characters.
	  DISTRIBUTE specifies that extra space is added both to space characters and between individual
	  letters. Use these values only when setting <codeph>justificationRule</codeph> to SPACE.
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.formats:TextJustify:DISTRIBUTE"><apiName>DISTRIBUTE</apiName><shortdesc> Specifies that justification is to add space both to space characters and 
		 between individual letters.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>distribute</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies that justification is to add space both to space characters and 
		 between individual letters.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextJustify:INTER_WORD"><apiName>INTER_WORD</apiName><shortdesc> Specifies that justification is to add space to space characters.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>interWord</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies that justification is to add space to space characters. 
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:FormatValue"><apiName>FormatValue</apiName><shortdesc>
	  Defines values for specifying that a formatting property is to inherit its parent's value or have it's value
	  generated automatically.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Defines values for specifying that a formatting property is to inherit its parent's value or have it's value
	  generated automatically. The <codeph>INHERIT</codeph> constant specifies that a property inherits its parent's value 
	  while the <codeph>AUTO</codeph> constant specifies that an internal algorithm automatically determine the property's 
	  value. As one example, you can set <codeph>TextLayoutFormat.columnWidth</codeph> using these values. Typically, a 
	  property's description indicates whether it accepts these constants.
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.formats:FormatValue:AUTO"><apiName>AUTO</apiName><shortdesc> Specifies that a property's value is automatically generated.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>auto</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies that a property's value is automatically generated. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:FormatValue:INHERIT"><apiName>INHERIT</apiName><shortdesc> Specifies that a property is to inherit its parent's value.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>inherit</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies that a property is to inherit its parent's value.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:FormatValue:NONE"><apiName>NONE</apiName><shortdesc> Specifies that a property's value is none.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies that a property's value is none. 
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:ListStyleType"><apiName>ListStyleType</apiName><shortdesc>
	 Defines values for setting the listStyleType property of a TextLayoutFormat object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Defines values for setting the <codeph>listStyleType</codeph> property of a TextLayoutFormat object. These values are used for controlling
	 the appearance of items in a list.
	 
	  </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.formats:ListStyleType:ARABIC_INDIC"><apiName>ARABIC_INDIC</apiName><shortdesc> Numbering using Arabic script.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>arabicIndic</apiData><apiType value="String"/></apiValueDef><apiDesc> Numbering using Arabic script.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:BENGALI"><apiName>BENGALI</apiName><shortdesc> Numbering using Bengali script.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>bengali</apiData><apiType value="String"/></apiValueDef><apiDesc> Numbering using Bengali script.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:BOX"><apiName>BOX</apiName><shortdesc> A square marker that is not filled.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>box</apiData><apiType value="String"/></apiValueDef><apiDesc> A square marker that is not filled.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:CHECK"><apiName>CHECK</apiName><shortdesc> A check mark.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>check</apiData><apiType value="String"/></apiValueDef><apiDesc> A check mark.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:CIRCLE"><apiName>CIRCLE</apiName><shortdesc> A circle character marker that is not filled.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>circle</apiData><apiType value="String"/></apiValueDef><apiDesc> A circle character marker that is not filled.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:CJK_EARTHLY_BRANCH"><apiName>CJK_EARTHLY_BRANCH</apiName><shortdesc> Numbering for CJK.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>cjkEarthlyBranch</apiData><apiType value="String"/></apiValueDef><apiDesc> Numbering for CJK.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:CJK_HEAVENLY_STEM"><apiName>CJK_HEAVENLY_STEM</apiName><shortdesc> Numbering for CJK.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>cjkHeavenlyStem</apiData><apiType value="String"/></apiValueDef><apiDesc> Numbering for CJK.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:DECIMAL_LEADING_ZERO"><apiName>DECIMAL_LEADING_ZERO</apiName><shortdesc> Numbering using decimal with a leading zero: 01, 02, 03, and so on.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>decimalLeadingZero</apiData><apiType value="String"/></apiValueDef><apiDesc> Numbering using decimal with a leading zero: 01, 02, 03, and so on.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:DECIMAL"><apiName>DECIMAL</apiName><shortdesc> Numbering using decimals: 1, 2, 3, and so on.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>decimal</apiData><apiType value="String"/></apiValueDef><apiDesc> Numbering using decimals: 1, 2, 3, and so on.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:DEVANAGARI"><apiName>DEVANAGARI</apiName><shortdesc> Numbering using Devangari.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>devanagari</apiData><apiType value="String"/></apiValueDef><apiDesc> Numbering using Devangari.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:DIAMOND"><apiName>DIAMOND</apiName><shortdesc> A filled diamond marker.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>diamond</apiData><apiType value="String"/></apiValueDef><apiDesc> A filled diamond marker.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:DISC"><apiName>DISC</apiName><shortdesc> A bullet character marker (filled circle).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>disc</apiData><apiType value="String"/></apiValueDef><apiDesc> A bullet character marker (filled circle).
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:GUJARATI"><apiName>GUJARATI</apiName><shortdesc> Numbering using Gujarati.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>gujarati</apiData><apiType value="String"/></apiValueDef><apiDesc> Numbering using Gujarati.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:GURMUKHI"><apiName>GURMUKHI</apiName><shortdesc> Numbering using Gurmukhi.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>gurmukhi</apiData><apiType value="String"/></apiValueDef><apiDesc> Numbering using Gurmukhi.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:HANGUL_CONSTANT"><apiName>HANGUL_CONSTANT</apiName><shortdesc> Numbering for Hangul.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>hangulConstant</apiData><apiType value="String"/></apiValueDef><apiDesc> Numbering for Hangul.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:HANGUL"><apiName>HANGUL</apiName><shortdesc> Numbering for Hangul.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>hangul</apiData><apiType value="String"/></apiValueDef><apiDesc> Numbering for Hangul.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:HIRAGANA_IROHA"><apiName>HIRAGANA_IROHA</apiName><shortdesc> Numbering for Hiragana.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>hiraganaIroha</apiData><apiType value="String"/></apiValueDef><apiDesc> Numbering for Hiragana.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:HIRAGANA"><apiName>HIRAGANA</apiName><shortdesc> Numbering for Hiragana.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>hiragana</apiData><apiType value="String"/></apiValueDef><apiDesc> Numbering for Hiragana.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:HYPHEN"><apiName>HYPHEN</apiName><shortdesc> A dash mark.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>hyphen</apiData><apiType value="String"/></apiValueDef><apiDesc> A dash mark.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:KANNADA"><apiName>KANNADA</apiName><shortdesc> Numbering using Kannada.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>kannada</apiData><apiType value="String"/></apiValueDef><apiDesc> Numbering using Kannada.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:KATAKANA_IROHA"><apiName>KATAKANA_IROHA</apiName><shortdesc> Numbering for Katagana.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>katakanaIroha</apiData><apiType value="String"/></apiValueDef><apiDesc> Numbering for Katagana.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:KATAKANA"><apiName>KATAKANA</apiName><shortdesc> Numbering for Katagana.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>katakana</apiData><apiType value="String"/></apiValueDef><apiDesc> Numbering for Katagana.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:LOWER_ALPHA"><apiName>LOWER_ALPHA</apiName><shortdesc> Lower-case alphabetic "numbering": a-z, aa-zz, and so on.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>lowerAlpha</apiData><apiType value="String"/></apiValueDef><apiDesc> Lower-case alphabetic "numbering": a-z, aa-zz, and so on.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:LOWER_GREEK"><apiName>LOWER_GREEK</apiName><shortdesc> Lower-case Greek alphabetic "numering".</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>lowerGreek</apiData><apiType value="String"/></apiValueDef><apiDesc> Lower-case Greek alphabetic "numering".
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:LOWER_LATIN"><apiName>LOWER_LATIN</apiName><shortdesc> Lower-case alphabetic "numbering": a-z, aa-zz, and so on.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>lowerLatin</apiData><apiType value="String"/></apiValueDef><apiDesc> Lower-case alphabetic "numbering": a-z, aa-zz, and so on.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:LOWER_ROMAN"><apiName>LOWER_ROMAN</apiName><shortdesc> Lower-case Roman numbering: i, ii, iii, iv, and so on.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>lowerRoman</apiData><apiType value="String"/></apiValueDef><apiDesc> Lower-case Roman numbering: i, ii, iii, iv, and so on.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:NONE"><apiName>NONE</apiName><shortdesc> No content is generated for the marker.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiType value="String"/></apiValueDef><apiDesc> No content is generated for the marker.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:PERSIAN"><apiName>PERSIAN</apiName><shortdesc> Numbering using Persian.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>persian</apiData><apiType value="String"/></apiValueDef><apiDesc> Numbering using Persian.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:SQUARE"><apiName>SQUARE</apiName><shortdesc> A filled square marker.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>square</apiData><apiType value="String"/></apiValueDef><apiDesc> A filled square marker.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:THAI"><apiName>THAI</apiName><shortdesc> Numbering using Thai.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>thai</apiData><apiType value="String"/></apiValueDef><apiDesc> Numbering using Thai.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:UPPER_ALPHA"><apiName>UPPER_ALPHA</apiName><shortdesc> Upper-case alphabetic "numbering": A-Z, AA-ZZ, and so on.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>upperAlpha</apiData><apiType value="String"/></apiValueDef><apiDesc> Upper-case alphabetic "numbering": A-Z, AA-ZZ, and so on.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:UPPER_GREEK"><apiName>UPPER_GREEK</apiName><shortdesc> Upper-case Greek alphabetic "numering".</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>upperGreek</apiData><apiType value="String"/></apiValueDef><apiDesc> Upper-case Greek alphabetic "numering".
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:UPPER_LATIN"><apiName>UPPER_LATIN</apiName><shortdesc> Upper-case alphabetic "numbering": A-Z, AA-ZZ, and so on.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>upperLatin</apiData><apiType value="String"/></apiValueDef><apiDesc> Upper-case alphabetic "numbering": A-Z, AA-ZZ, and so on.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:UPPER_ROMAN"><apiName>UPPER_ROMAN</apiName><shortdesc> Upper-case Roman numbering: I, II, III, IV, and so on.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>upperRoman</apiData><apiType value="String"/></apiValueDef><apiDesc> Upper-case Roman numbering: I, II, III, IV, and so on.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListStyleType:URDU"><apiName>URDU</apiName><shortdesc> Numbering using Urdu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>urdu</apiData><apiType value="String"/></apiValueDef><apiDesc> Numbering using Urdu.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:ListMarkerFormat"><apiName>ListMarkerFormat</apiName><shortdesc> Defines the marker format in a ListItemElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.formats:IListMarkerFormat</apiBaseInterface><apiBaseClassifier>flashx.textLayout.formats:TextLayoutFormat</apiBaseClassifier></apiClassifierDef><apiDesc> Defines the marker format in a ListItemElement.
	  
	  </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.formats:ListMarkerFormat:afterContent:get"><apiName>afterContent</apiName><shortdesc> Specifies a string that goes after the marker.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/></apiValueDef><apiDesc> Specifies a string that goes after the marker. Default is the empty string. 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListMarkerFormat:beforeContent:get"><apiName>beforeContent</apiName><shortdesc> Specifies a string that goes before the marker.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/></apiValueDef><apiDesc> Specifies a string that goes before the marker. Default is the empty string. 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListMarkerFormat:content:get"><apiName>content</apiName><shortdesc>
		 Controls the content of the marker.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Controls the content of the marker. 
		 <p>Legal values for this string are:
		 <ul>
		 	<li><codeph>none</codeph> - No marker.</li>
		 	<li><codeph>counter(ordered)</codeph> - Display the marker.</li>
		 	<li><codeph>counter(ordered,ListStyleType)</codeph> - Display the marker but change the listStyleType to the specified value.</li>
		 	<li><codeph>counters(ordered)</codeph> - Starting from the top-most parent ListElement creating a string of values of the ordered counter in each counters specified listStyleType separated by the suffix for each.  This is used for outline number - for example I.1., I.2. etc.</li>
		 	<li><codeph>counters(ordered,"&lt;string&gt;")</codeph> - Similar to the previous value, except the suffix for each ordered counter is replaced by &lt;string&gt;.</li>
		 	<li><codeph>counters(ordered,"&lt;string&gt;",ListStyleType)</codeph> - Similar to the previous value, except each counter's <codeph>listStyleType</codeph> is replaced with the specified value.</li>
		 </ul>
		 </p>
		 <p>If undefined, the default vaule of this property is <codeph>"counter(ordered)"</codeph>.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListMarkerFormat:counterIncrement:get"><apiName>counterIncrement</apiName><shortdesc>
		 Controls incrementing the value of the counter.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Controls incrementing the value of the counter.  
		 <p>Legal values for this string are:
		  <ul>
		 		<li><codeph>none</codeph> - No increment.</li>
		 		<li><codeph>ordered</codeph> - Increment the counter by one.</li>
		 		<li><codeph>ordered <i>integer</i></codeph> - Increment the counter by <codeph><i>integer</i></codeph>.</li>
		  </ul>
		 </p>
		 <p>If undefined, the default vaule of this property is <codeph>"ordered 1"</codeph>.</p>
		 <p>Note: The <codeph>counterIncrement</codeph> property is applied before the <codeph>counterReset</codeph> property.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListMarkerFormat:counterReset:get"><apiName>counterReset</apiName><shortdesc>
		 Controls resetting the value of the counter.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Controls resetting the value of the counter.  
		 <p>Legal values for this property are:
		  <ul>
		 	  <li><codeph>none</codeph> - No reset.</li>
		 	  <li><codeph>ordered</codeph> - Reset the counter to zero.</li>
		 	  <li><codeph>ordered <i>integer</i></codeph> - Reset the counter to <codeph><i>integer</i></codeph>.</li>
		  </ul>
		 </p>
		 <p>If <codeph>undefined</codeph>, the default value of this property is "none".</p>
		 <p>Note: The <codeph>counterReset</codeph> property is applied before the <codeph>counterIncrement</codeph> property.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ListMarkerFormat:suffix:get"><apiName>suffix</apiName><shortdesc>
		 Controls the application of the suffix in the generated text in the ListItemElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Controls the application of the suffix in the generated text in the ListItemElement.
		 <p>Legal values are:
		 <ul>
		   <li><codeph>flashx.textLayout.formats.Suffix.NONE</codeph> - No suffix.</li>		 
		   <li><codeph>flashx.textLayout.formats.Suffix.AUTO</codeph> - Follow CSS rules for adding a suffix.</li>
		 </ul> 
		 </p>
		 <p>Default value is <codeph>Suffix.AUTO</codeph>.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#Suffix"><linktext>flashx.textLayout.formats.Suffix</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:ITabStopFormat"><apiName>ITabStopFormat</apiName><shortdesc>
	 This interface provides read access to tab stop-related properties.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 This interface provides read access to tab stop-related properties.
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.formats:ITabStopFormat:flashx.textLayout.formats:ITabStopFormat:alignment:get"><apiName>alignment</apiName><shortdesc>
		 The tab alignment for this tab stop.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 The tab alignment for this tab stop. 
		 <p>Legal values are TabAlignment.START, TabAlignment.CENTER, TabAlignment.END, TabAlignment.DECIMAL, FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of TabAlignment.START.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue/INHERIT"><linktext>FormatValue.INHERIT</linktext></link><link href="" invalidHref="flash.text.engine.TabAlignment.xml"><linktext>flash.text.engine.TabAlignment</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITabStopFormat:flashx.textLayout.formats:ITabStopFormat:decimalAlignmentToken:get"><apiName>decimalAlignmentToken</apiName><shortdesc>
		 The alignment token to be used if the alignment is DECIMAL.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 The alignment token to be used if the alignment is DECIMAL.
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of null.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITabStopFormat:flashx.textLayout.formats:ITabStopFormat:position:get"><apiName>position</apiName><shortdesc>
		 The position of the tab stop, in pixels, relative to the start edge of the column.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 The position of the tab stop, in pixels, relative to the start edge of the column.
		 <p>Legal values are numbers from 0 to 10000 and FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of 0.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue/INHERIT"><linktext>FormatValue.INHERIT</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:TextDecoration"><apiName>TextDecoration</apiName><shortdesc>
	  Defines values for the textDecoration property
	  of the TextLayoutFormat class.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Defines values for the <codeph>textDecoration</codeph> property
	  of the TextLayoutFormat class. The values specify either normal text, with no decoration,
	  or underline.
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.formats:TextDecoration:NONE"><apiName>NONE</apiName><shortdesc> Specifies normal text - no decoration applied 
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies normal text - no decoration applied 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextDecoration:UNDERLINE"><apiName>UNDERLINE</apiName><shortdesc> Specifies that text is underlined.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>underline</apiData><apiType value="String"/></apiValueDef><apiDesc> Specifies that text is underlined. 
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage><apiPackage id="flashx.textLayout.operations"><apiName>flashx.textLayout.operations</apiName><apiClassifier id="flashx.textLayout.operations:CreateSubParagraphGroupOperation"><apiName>CreateSubParagraphGroupOperation</apiName><shortdesc>
	 The CreateSPGEOperation class encapsulates creating a SubPargraphGroupElement
	 
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The CreateSPGEOperation class encapsulates creating a SubPargraphGroupElement
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.operations:CreateSubParagraphGroupOperation:format:get"><apiName>format</apiName><shortdesc> Format to be applied to the new SubParagraphGroupElement
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> Format to be applied to the new SubParagraphGroupElement
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:CreateSubParagraphGroupOperation:newSubParagraphGroupElement:get"><apiName>newSubParagraphGroupElement</apiName><shortdesc> The new SubParagraphGroupElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:SubParagraphGroupElement</apiValueClassifier></apiValueDef><apiDesc> The new SubParagraphGroupElement. 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:CreateSubParagraphGroupOperation:parent:get"><apiName>parent</apiName><shortdesc> 
		 Specifies the element this operation modifies.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.elements:FlowGroupElement</apiValueClassifier></apiValueDef><apiDesc> 
		 Specifies the element this operation modifies.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.operations:FlowElementOperation"><apiName>FlowElementOperation</apiName><shortdesc>
	 The FlowElementOperation class is the base class for operations that transform a FlowElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The FlowElementOperation class is the base class for operations that transform a FlowElement.
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.operations:FlowElementOperation:relativeEnd:get"><apiName>relativeEnd</apiName><shortdesc> 
		 An offset from the start of the targetElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc> 
		 An offset from the start of the <codeph>targetElement</codeph>.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:FlowElementOperation:relativeStart:get"><apiName>relativeStart</apiName><shortdesc> 
		 An offset from the beginning of the targetElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc> 
		 An offset from the beginning of the <codeph>targetElement</codeph>.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:FlowElementOperation:targetElement:get"><apiName>targetElement</apiName><shortdesc> 
		 Specifies the element this operation modifies.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.elements:FlowElement</apiValueClassifier></apiValueDef><apiDesc> 
		 Specifies the element this operation modifies.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.operations:CutOperation"><apiName>CutOperation</apiName><shortdesc>
	 The CutOperation class encapsulates a cut operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The CutOperation class encapsulates a cut operation.
	 
	 <p>The specified range is removed from the text flow.</p>
	 
	 <p><b>Note:</b> The edit manager is responsible for copying the 
	 text scrap to the clipboard. Undoing a cut operation does not restore
	 the original clipboard state.</p>
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.operations:CutOperation:scrapToCut:get"><apiName>scrapToCut</apiName><shortdesc> 
		 scrapToCut the original removed text
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.edit:TextScrap</apiValueClassifier></apiValueDef><apiDesc> 
		 scrapToCut the original removed text
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.operations:ApplyFormatOperation"><apiName>ApplyFormatOperation</apiName><shortdesc>
	 The ApplyFormatOperation class encapsulates a style change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The ApplyFormatOperation class encapsulates a style change.
	 
	 <p>An ApplyFormatOperation applies the leaf format to the text in the 
	 specified range (no change is made if the specified range is a single point). 
	 It applies the paragraph format to any paragraphs at least partially within the range 
	 (or a single paragraph if the range is a single point). 
	 And it applies the container format to any containers at least partially within the range 
	 (or a single container if the range is a single point).</p>
	 
	 </apiDesc><example/></apiClassifierDetail><apiValue id="flashx.textLayout.operations:ApplyFormatOperation:containerFormat:get"><apiName>containerFormat</apiName><shortdesc> 
		 The format properties to apply to the containers in the range.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		 The format properties to apply to the containers in the range.
		 
		 <p>The formats of any containers at least partially within the range are updated. 
		 If the range of this operation is a point, then a single container is updated.
		 If <codeph>containerFormat</codeph> is <codeph>null</codeph>, then no container formats are changed.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:ApplyFormatOperation:leafFormat:get"><apiName>leafFormat</apiName><shortdesc> 
		 The format properties to apply to the leaf elements in the range.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		 The format properties to apply to the leaf elements in the range.
		 
		 <p>If the range of this operation is a point, or if <codeph>leafFormat</codeph> is <codeph>null</codeph>,
		 then no leaf element formats are changed.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:ApplyFormatOperation:paragraphFormat:get"><apiName>paragraphFormat</apiName><shortdesc> 
		 The format properties to apply to the paragraphs in the range.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		 The format properties to apply to the paragraphs in the range.
		 
		 <p>The formats of any paragraphs at least partially within the range are updated. 
		 If the range of this operation is a point, then a single paragraph is updated.
		 If <codeph>paragraphFormat</codeph> is <codeph>null</codeph>, then no paragraph formats are changed.</p>
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.operations:ClearFormatOperation"><apiName>ClearFormatOperation</apiName><shortdesc>
	 The ClearFormatOperation class encapsulates a way to undefine formats.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The ClearFormatOperation class encapsulates a way to undefine formats.
	 
	 <p>An UndefineFormatOperation undefines properties set in the leaf format to the text in the 
	 specified range (no change is made if the specified range is a single point). 
	 It undefines properties set in the paragraph format to any paragraphs at least partially within the range 
	 (or a single paragraph if the range is a single point). 
	 And it undefines properties set in the container format to any containers at least partially within the range 
	 (or a single container if the range is a single point).</p>
	 
	 </apiDesc><example/></apiClassifierDetail><apiValue id="flashx.textLayout.operations:ClearFormatOperation:containerFormat:get"><apiName>containerFormat</apiName><shortdesc> 
		 The format properties to undefine on the containers in the range.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		 The format properties to undefine on the containers in the range.
		 
		 <p>The formats of any containers at least partially within the range are updated. 
		 If the range of this operation is a point, then a single container is updated.
		 If <codeph>containerFormat</codeph> is <codeph>null</codeph>, then no container formats are changed.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:ClearFormatOperation:leafFormat:get"><apiName>leafFormat</apiName><shortdesc> 
		 The format properties to undefine on the leaf elements in the range.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		 The format properties to undefine on the leaf elements in the range.
		 
		 <p>If the range of this operation is a point, or if <codeph>leafFormat</codeph> is <codeph>null</codeph>,
		 then no leaf element formats are changed.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:ClearFormatOperation:paragraphFormat:get"><apiName>paragraphFormat</apiName><shortdesc> 
		 The format properties to undefine on the paragraphs in the range.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		 The format properties to undefine on the paragraphs in the range.
		 
		 <p>The formats of any paragraphs at least partially within the range are updated. 
		 If the range of this operation is a point, then a single paragraph is updated.
		 If <codeph>paragraphFormat</codeph> is <codeph>null</codeph>, then no paragraph formats are changed.</p>
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.operations:RedoOperation"><apiName>RedoOperation</apiName><shortdesc> 
	 The RedoOperation class encapsulates a redo operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowOperation</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 The RedoOperation class encapsulates a redo operation.
	 
	 </apiDesc><example/></apiClassifierDetail><apiValue id="flashx.textLayout.operations:RedoOperation:operation:get"><apiName>operation</apiName><shortdesc> 
		 The operation to redo.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.operations:FlowOperation</apiValueClassifier></apiValueDef><apiDesc> 
		 The operation to redo.
		  
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.operations:InsertTextOperation"><apiName>InsertTextOperation</apiName><shortdesc>
	 The InsertTextOperation class encapsulates a text insertion operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The InsertTextOperation class encapsulates a text insertion operation.
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.operations:InsertTextOperation:characterFormat:get"><apiName>characterFormat</apiName><shortdesc> 
		 The character format applied to the inserted text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		 The character format applied to the inserted text.
		  
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:InsertTextOperation:deleteSelectionState:get"><apiName>deleteSelectionState</apiName><shortdesc> 
		 The text deleted by this operation, if any.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.edit:SelectionState</apiValueClassifier></apiValueDef><apiDesc> 
		 The text deleted by this operation, if any.
		 
		 <p><codeph>null</codeph> if no text is deleted.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:InsertTextOperation:text:get"><apiName>text</apiName><shortdesc> 
		 The text inserted by this operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc> 
		 The text inserted by this operation. 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.operations:ApplyTCYOperation"><apiName>ApplyTCYOperation</apiName><shortdesc> 
	 The ApplyTCYOperation class encapsulates a TCY transformation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 The ApplyTCYOperation class encapsulates a TCY transformation.
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.operations:ApplyTCYOperation:newTCYElement:get"><apiName>newTCYElement</apiName><shortdesc> 
		 The TCYElement that was created by doOperation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:TCYElement</apiValueClassifier></apiValueDef><apiDesc> 
		 The TCYElement that was created by doOperation.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:ApplyTCYOperation:tcyOn:get"><apiName>tcyOn</apiName><shortdesc> 
		 Indicates whether the operation applies or removes TCY formatting.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc> 
		 Indicates whether the operation applies or removes TCY formatting.
		 
		 <p>If <codeph>true</codeph>, then the operation transforms the range into a 
		 TCY element. If <codeph>false</codeph>, then the operation removes TCY formatting from
		 the first TCY element in the range.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#TCYElement"><linktext>flashx.textLayout.elements.TCYElement</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.operations:ApplyFormatToElementOperation"><apiName>ApplyFormatToElementOperation</apiName><shortdesc>
	 The ApplyFormatToElementOperation class encapsulates a style change to an element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowElementOperation</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The ApplyFormatToElementOperation class encapsulates a style change to an element.
	 
	 <p>This operation applies one or more formats to a flow element.</p>
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.operations:ApplyFormatToElementOperation:format:get"><apiName>format</apiName><shortdesc> 
		 The character formats applied in this operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		 The character formats applied in this operation.
		 
		 <p>If <codeph>null</codeph> no character formats are changed.</p> 
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.operations:ApplyElementStyleNameOperation"><apiName>ApplyElementStyleNameOperation</apiName><shortdesc>
	 The ApplyElementStyleNameOperation class encapsulates a style name change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiDeprecated replacement="ApplyFormatToElementOperation" sinceVersion="2.0"/><apiBaseClassifier>flashx.textLayout.operations:FlowElementOperation</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The ApplyElementStyleNameOperation class encapsulates a style name change.
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.operations:ApplyElementStyleNameOperation:newStyleName:get"><apiName>newStyleName</apiName><shortdesc> 
		 The style name assigned by this operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc> 
		 The style name assigned by this operation.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.operations:FlowOperation"><apiName>FlowOperation</apiName><shortdesc> 
	 The FlowOperation class is the base class for all Text Layout Framework operations.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.undo:IOperation</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 The FlowOperation class is the base class for all Text Layout Framework operations. 
	 
	 <p>Operations are transformations of a text flow. An Operation class defines the
	 logic for performing and undoing the transformation. Operations are executed by an
	 edit manager. Most applications do not need to create or manage operations directly
	 (unless implementing a custom edit manager).</p>
	 
	 <p>When an operation is performed, the edit manager dispatches an Operation object 
	 within the FlowOperationEvent object. You can query 
	 this Operation object to decide whether or not to allow the operation, to decide whether 
	 to perform some other operation as well, or to update related user-interface elements.</p>
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.operations:FlowOperation:userData"><apiName>userData</apiName><shortdesc> 
		 Arbitrary data associated with an element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value=""/></apiValueDef><apiDesc> 
		 Arbitrary data associated with an element. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:FlowOperation:beginGeneration:get"><apiName>beginGeneration</apiName><shortdesc>
		 The text flow generation before the operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="uint"/></apiValueDef><apiDesc>
		 The text flow generation before the operation.
		   
		 <p>A generation of 0 indicates that the operation did not complete.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:FlowOperation:endGeneration:get"><apiName>endGeneration</apiName><shortdesc> 
		 The text flow generation after the operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="uint"/></apiValueDef><apiDesc> 
		 The text flow generation after the operation.
		 
		 <p>A generation of 0 indicates that the operation did not complete.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:FlowOperation:textFlow:get"><apiName>textFlow</apiName><shortdesc> 
		 The TextFlow object to which this operation is applied.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.elements:TextFlow</apiValueClassifier></apiValueDef><apiDesc> 
		 The TextFlow object to which this operation is applied.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.operations:SplitElementOperation"><apiName>SplitElementOperation</apiName><shortdesc>
	 The SplitElementOperation class encapsulates a change that splits any FlowGroupElement into two elements.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The SplitElementOperation class encapsulates a change that splits any FlowGroupElement into two elements.
	 
	 This operation splits target at operationState.absoluteStart.
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.operations:SplitElementOperation:newElement:get"><apiName>newElement</apiName><shortdesc> 
		 Returns the new element created by doOperation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:FlowGroupElement</apiValueClassifier></apiValueDef><apiDesc> 
		 Returns the new element created by doOperation.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:SplitElementOperation:targetElement:get"><apiName>targetElement</apiName><shortdesc> 
		 Specifies the element this operation modifies.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.elements:FlowGroupElement</apiValueClassifier></apiValueDef><apiDesc> 
		 Specifies the element this operation modifies.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.operations:DeleteTextOperation"><apiName>DeleteTextOperation</apiName><shortdesc>
	 The DeleteTextOperation class encapsulates the deletion of a range of text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The DeleteTextOperation class encapsulates the deletion of a range of text.
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.operations:DeleteTextOperation:allowMerge:get"><apiName>allowMerge</apiName><shortdesc> 
		 Indicates whether this operation can be merged with operations executed before or after it.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc> 
		 Indicates whether this operation can be merged with operations executed before or after it.
		 
		 <p>Some delete operations, for example, a sequence of backspace keystrokes, can be fruitfully 
		 merged into one operation so that undoing the operation reverses the entire sequence.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:DeleteTextOperation:deleteSelectionState:get"><apiName>deleteSelectionState</apiName><shortdesc> 
		 deleteSelectionState The range of text to delete
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.edit:SelectionState</apiValueClassifier></apiValueDef><apiDesc> 
		 deleteSelectionState The range of text to delete
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.operations:SplitParagraphOperation"><apiName>SplitParagraphOperation</apiName><shortdesc>
	 The SplitParagraphOperation class encapsulates a change that splits a paragraph into two elements.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:SplitElementOperation</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The SplitParagraphOperation class encapsulates a change that splits a paragraph into two elements.
	 
	 <p>The operation creates a new paragraph containing the text from 
	 the specified position to the end of the paragraph. If a range of text is specified, the text 
	 in the range is deleted first.</p>
	 
	 </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="flashx.textLayout.operations:ClearFormatOnElementOperation"><apiName>ClearFormatOnElementOperation</apiName><shortdesc>
	 The ClearFormatOnElementOperation class encapsulates a style change to an element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowElementOperation</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The ClearFormatOnElementOperation class encapsulates a style change to an element.
	 
	 <p>This operation undefines one or more formats to a flow element.</p>
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.operations:ClearFormatOnElementOperation:format:get"><apiName>format</apiName><shortdesc> 
		 The character formats applied in this operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		 The character formats applied in this operation.
		 
		 <p>If <codeph>null</codeph> no character formats are changed.</p> 
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.operations:MoveChildrenOperation"><apiName>MoveChildrenOperation</apiName><shortdesc>
	 The MoveChildrenOperation class allows moving a set of siblings out of its immediate parent chain, and the operation removes any empty ancestor chain left behind.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The MoveChildrenOperation class allows moving a set of siblings out of its immediate parent chain, and the operation removes any empty ancestor chain left behind.
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.operations:MoveChildrenOperation:destinationIndex:get"><apiName>destinationIndex</apiName><shortdesc> Specifies the new child index of the first element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc> Specifies the new child index of the first element.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:MoveChildrenOperation:destination:get"><apiName>destination</apiName><shortdesc> Specifies the new parent of the items.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.elements:FlowGroupElement</apiValueClassifier></apiValueDef><apiDesc> Specifies the new parent of the items.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:MoveChildrenOperation:numChildren:get"><apiName>numChildren</apiName><shortdesc> Specifies the index of the first item to move.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc> Specifies the index of the first item to move.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:MoveChildrenOperation:sourceIndex:get"><apiName>sourceIndex</apiName><shortdesc> Specifies the number of children to move.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc> Specifies the number of children to move.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:MoveChildrenOperation:source:get"><apiName>source</apiName><shortdesc> Specifies the parent of the item(s) to move.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.elements:FlowGroupElement</apiValueClassifier></apiValueDef><apiDesc> Specifies the parent of the item(s) to move.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.operations:ApplyElementTypeNameOperation"><apiName>ApplyElementTypeNameOperation</apiName><shortdesc>
	 The ApplyElementTypeNameOperation class encapsulates a type name change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowElementOperation</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The ApplyElementTypeNameOperation class encapsulates a type name change.
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.operations:ApplyElementTypeNameOperation:typeName:get"><apiName>typeName</apiName><shortdesc> 
		 The type name assigned by this operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc> 
		 The type name assigned by this operation.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.operations:CreateListOperation"><apiName>CreateListOperation</apiName><shortdesc>
	 The CreateListOperation class encapsulates creating list
	 
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The CreateListOperation class encapsulates creating list
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.operations:CreateListOperation:listFormat:get"><apiName>listFormat</apiName><shortdesc> TextLayoutFormat to be applied to the new ListElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> TextLayoutFormat to be applied to the new ListElement. 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:CreateListOperation:newListElement:get"><apiName>newListElement</apiName><shortdesc> The new ListElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:ListElement</apiValueClassifier></apiValueDef><apiDesc> The new ListElement. 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:CreateListOperation:parent:get"><apiName>parent</apiName><shortdesc> 
		 Specifies the element this operation adds a new ListElement to.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.elements:FlowGroupElement</apiValueClassifier></apiValueDef><apiDesc> 
		 Specifies the element this operation adds a new ListElement to.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.operations:FlowTextOperation"><apiName>FlowTextOperation</apiName><shortdesc> 
	 The FlowTextOperation is the base class for operations that transform a range of text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowOperation</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 The FlowTextOperation is the base class for operations that transform a range of text.
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.operations:FlowTextOperation:absoluteEnd:get"><apiName>absoluteEnd</apiName><shortdesc> 
		 The absolute end point of the range of text to which this operation is applied.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc> 
		 The absolute end point of the range of text to which this operation is applied. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:FlowTextOperation:absoluteStart:get"><apiName>absoluteStart</apiName><shortdesc> 
		 The absolute start point of the range of text to which this operation is applied.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc> 
		 The absolute start point of the range of text to which this operation is applied.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:FlowTextOperation:originalSelectionState:get"><apiName>originalSelectionState</apiName><shortdesc> 
		 The selection state at the start of the operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.edit:SelectionState</apiValueClassifier></apiValueDef><apiDesc> 
		 The selection state at the start of the operation. 
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.operations:CreateDivOperation"><apiName>CreateDivOperation</apiName><shortdesc>
	 The CreateDivOperation class encapsulates creating DivElement
	 
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The CreateDivOperation class encapsulates creating DivElement
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.operations:CreateDivOperation:format:get"><apiName>format</apiName><shortdesc> TextLayoutFormat to be applied to the new DivElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> TextLayoutFormat to be applied to the new DivElement. 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:CreateDivOperation:newDivElement:get"><apiName>newDivElement</apiName><shortdesc> The new DivElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:DivElement</apiValueClassifier></apiValueDef><apiDesc> The new DivElement. 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:CreateDivOperation:parent:get"><apiName>parent</apiName><shortdesc> 
		 Specifies the parent element for the new DivElement
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.elements:FlowGroupElement</apiValueClassifier></apiValueDef><apiDesc> 
		 Specifies the parent element for the new DivElement
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.operations:ModifyInlineGraphicOperation"><apiName>ModifyInlineGraphicOperation</apiName><shortdesc>
	 The InsertInlineGraphicOperation class encapsulates the modification of an existing inline graphic.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The InsertInlineGraphicOperation class encapsulates the modification of an existing inline graphic.
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.operations:ModifyInlineGraphicOperation:height:get"><apiName>height</apiName><shortdesc> The height of the image.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc> The height of the image. May be 'auto', a number of pixels or a percent of the measured height. 
         
         <p>Legal values are flashx.textLayout.formats.FormatValue.AUTO and flashx.textLayout.formats.FormatValue.INHERIT.</p>
         <p>Legal values as a number are from 0 to 32000.</p>
         <p>Legal values as a percent are numbers from 0 to 1000000.</p>
         <p>Default value is undefined indicating not set.</p>
         <p>If undefined or "inherit" the InlineGraphicElement will use the default value of "auto".</p>
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:ModifyInlineGraphicOperation:options:get"><apiName>options</apiName><shortdesc> 
		 options are not supported
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc> 
		 options are not supported
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:ModifyInlineGraphicOperation:source:get"><apiName>source</apiName><shortdesc> Sets the source for the graphic.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc> Sets the source for the graphic. 
         
         The value can be either a String that is interpreted as a URI, a Class that's interpreted as the class of an 
         embeddded DisplayObject, a DisplayObject instance, or a URLRequest. Creates a DisplayObject and,
         if the InlineGraphicElement object is added into a ParagraphElement in a TextFlow object, causes it to appear
         inline in the text.
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:ModifyInlineGraphicOperation:width:get"><apiName>width</apiName><shortdesc> The width of the graphic.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc> The width of the graphic. The value can be 'auto', a number of pixels or a percent of the measured width of the image.
         
         <p>Legal values are flashx.textLayout.formats.FormatValue.AUTO and flashx.textLayout.formats.FormatValue.INHERIT.</p>
         <p>Legal values as a number are from 0 to 32000.</p>
         <p>Legal values as a percent are numbers from 0 to 1000000.</p>
         <p>Default value is undefined indicating not set.</p>
         <p>If undefined or "inherit" the InlineGraphicElement will use the default value of "auto".</p>
         
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.operations:InsertInlineGraphicOperation"><apiName>InsertInlineGraphicOperation</apiName><shortdesc>
	 The InsertInlineGraphicOperation class encapsulates the insertion of an inline
	 graphic into a text flow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The InsertInlineGraphicOperation class encapsulates the insertion of an inline
	 graphic into a text flow.
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.operations:InsertInlineGraphicOperation:height:get"><apiName>height</apiName><shortdesc> The height of the image.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc> The height of the image. May be 'auto', a number of pixels or a percent of the measured height. 
         
         <p>Legal values are flashx.textLayout.formats.FormatValue.AUTO and flashx.textLayout.formats.FormatValue.INHERIT.</p>
         <p>Legal values as a number are from 0 to 32000.</p>
         <p>Legal values as a percent are numbers from 0 to 1000000.</p>
         <p>Default value is undefined indicating not set.</p>
         <p>If undefined or "inherit" the InlineGraphicElement will use the default value of "auto".</p>
         
         </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flashx.textLayout.xml#InlineGraphicElement/height"><linktext>flashx.textLayout.InlineGraphicElement.height</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.operations:InsertInlineGraphicOperation:newInlineGraphicElement:get"><apiName>newInlineGraphicElement</apiName><shortdesc> 
		 The InlineGraphicElement that was created by doOperation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:InlineGraphicElement</apiValueClassifier></apiValueDef><apiDesc> 
		 The InlineGraphicElement that was created by doOperation.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:InsertInlineGraphicOperation:options:get"><apiName>options</apiName><shortdesc> 
         Controls the placement of the graphic relative to the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc> 
         Controls the placement of the graphic relative to the text. It can be part of the line, or can be beside the line with the text 
         wrapped around it. 
         <p>Legal values are <codeph>flashx.textLayout.formats.Float.NONE</codeph>, <codeph>flashx.textLayout.formats.Float.LEFT</codeph>, 
         <codeph>flashx.textLayout.formats.Float.RIGHT</codeph>, <codeph>flashx.textLayout.formats.Float.START</codeph>, and <codeph>flashx.textLayout.formats.Float.END</codeph>.</p>
         <p>Default value is undefined indicating not set.</p>
         <p>If undefined will be treated as <codeph>Float.NONE</codeph>.</p>
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:InsertInlineGraphicOperation:source:get"><apiName>source</apiName><shortdesc> Sets the source for the graphic.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc> Sets the source for the graphic. 
         
         The value can be either a String that is interpreted as a URI, a Class that's interpreted as the class of an 
         embeddded DisplayObject, a DisplayObject instance, or a URLRequest. Creates a DisplayObject and,
         if the InlineGraphicElement object is added into a ParagraphElement in a TextFlow object, causes it to appear
         inline in the text.
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:InsertInlineGraphicOperation:width:get"><apiName>width</apiName><shortdesc> The width of the graphic.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc> The width of the graphic. The value can be 'auto', a number of pixels or a percent of the measured width of the image.
         
         <p>Legal values are flashx.textLayout.formats.FormatValue.AUTO and flashx.textLayout.formats.FormatValue.INHERIT.</p>
         <p>Legal values as a number are from 0 to 32000.</p>
         <p>Legal values as a percent are numbers from 0 to 1000000.</p>
         <p>Default value is undefined indicating not set.</p>
         <p>If undefined or "inherit" the InlineGraphicElement will use the default value of "auto".</p>
         
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.operations:ApplyElementUserStyleOperation"><apiName>ApplyElementUserStyleOperation</apiName><shortdesc>
	 The ApplyElementUserStyleOperation class encapsulates a change in a style value of an element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiDeprecated replacement="ApplyFormatToElementOperation" sinceVersion="2.0"/><apiBaseClassifier>flashx.textLayout.operations:FlowElementOperation</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The ApplyElementUserStyleOperation class encapsulates a change in a style value of an element.
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.operations:ApplyElementUserStyleOperation:newValue:get"><apiName>newValue</apiName><shortdesc> 
		 The new style value.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/></apiValueDef><apiDesc> 
		 The new style value.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:ApplyElementUserStyleOperation:styleName:get"><apiName>styleName</apiName><shortdesc> 
		 The name of the style changed.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc> 
		 The name of the style changed. 
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.operations:ApplyElementIDOperation"><apiName>ApplyElementIDOperation</apiName><shortdesc>
	 The ChangeElementIDOperation class encapsulates an element ID change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowElementOperation</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The ChangeElementIDOperation class encapsulates an element ID change.
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.operations:ApplyElementIDOperation:newID:get"><apiName>newID</apiName><shortdesc> 
		 The ID assigned by this operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc> 
		 The ID assigned by this operation.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.operations:PasteOperation"><apiName>PasteOperation</apiName><shortdesc>
	 The PasteOperation class encapsulates a paste operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The PasteOperation class encapsulates a paste operation.
	 
	 <p>The specified range is replaced by the new content.</p>
	 
	 <p><b>Note:</b> The edit manager is responsible for copying the 
	 contents of the clipboard.</p>
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.operations:PasteOperation:textScrap:get"><apiName>textScrap</apiName><shortdesc> 
		 textScrap the text being pasted
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.edit:TextScrap</apiValueClassifier></apiValueDef><apiDesc> 
		 textScrap the text being pasted
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.operations:CopyOperation"><apiName>CopyOperation</apiName><shortdesc>
	 The CopyOperation class encapsulates a copy operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The CopyOperation class encapsulates a copy operation.
	 
	 <p><b>Note:</b> The operation is responsible for copying the 
	 text scrap to the clipboard. Undonig a copy operation does not restore
	 the original clipboard state.</p>
	 
	 </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="flashx.textLayout.operations:CompositeOperation"><apiName>CompositeOperation</apiName><shortdesc>
	 The CompositeOperation class encapsulates a group of transformations managed as a unit.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowOperation</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The CompositeOperation class encapsulates a group of transformations managed as a unit.
	 
	 <p>The CompositeOperation class provides a grouping mechanism for combining multiple FlowOperations 
	 into a single atomic operation. Grouping operations allows them to be undone and redone as a unit. 
	 For example, several single character inserts followed by several backspaces can be undone together as if 
	 they were a single operation. Grouping also provides a mechanism for representing
	 complex operations. For example, a replace operation that modifies more than one text ranges
	 can be represented and managed as a single composite operation.</p>
	 
	 <p><b>Note:</b> It can be more efficient to merge individual atomic operations
	  rather than to combine separate operations into a group. For example, several sequential
	  character inserts can easily be represented as a single insert operation,
	  and undoing or redoing that single operation is more efficient than
	  undoing or redoing a group of insert operations.</p>
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.operations:CompositeOperation:operations:get"><apiName>operations</apiName><shortdesc>
		 An array containing the operations grouped by this composite operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
		 An array containing the operations grouped by this composite operation.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.operations:ApplyLinkOperation"><apiName>ApplyLinkOperation</apiName><shortdesc>
	 The ApplyLinkOperation class encapsulates a link creation or modification operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The ApplyLinkOperation class encapsulates a link creation or modification operation.
	 
	 </apiDesc><example/></apiClassifierDetail><apiValue id="flashx.textLayout.operations:ApplyLinkOperation:extendToLinkBoundary:get"><apiName>extendToLinkBoundary</apiName><shortdesc>
		 Whether to extend the selection to include the entire 
		 text of any existing links overlapped by the selection, and then apply the change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 Whether to extend the selection to include the entire 
		 text of any existing links overlapped by the selection, and then apply the change.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:ApplyLinkOperation:href:get"><apiName>href</apiName><shortdesc> 
		 The URI to be associated with the link.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc> 
		 The URI to be associated with the link.  If href is an empty string, 
		 the URI of links in the selection are removed.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:ApplyLinkOperation:newLinkElement:get"><apiName>newLinkElement</apiName><shortdesc> 
		 The LinkElement that was created by doOperation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:LinkElement</apiValueClassifier></apiValueDef><apiDesc> 
		 The LinkElement that was created by doOperation.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.operations:ApplyLinkOperation:target:get"><apiName>target</apiName><shortdesc>
		 The target of the link.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
		 The target of the link.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.operations:UndoOperation"><apiName>UndoOperation</apiName><shortdesc> 
	 The UndoOperation class encapsulates an undo operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.operations:FlowOperation</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 The UndoOperation class encapsulates an undo operation.
	 
	 </apiDesc><example/></apiClassifierDetail><apiValue id="flashx.textLayout.operations:UndoOperation:operation:get"><apiName>operation</apiName><shortdesc> 
		 The operation to undo.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.operations:FlowOperation</apiValueClassifier></apiValueDef><apiDesc> 
		 The operation to undo. 
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage><apiPackage id="flashx.textLayout.utils"><apiName>flashx.textLayout.utils</apiName><apiClassifier id="flashx.textLayout.utils:NavigationUtil"><apiName>NavigationUtil</apiName><shortdesc> 
	 Utilities for manipulating a TextRange 
	 The methods of this class are static and must be called using
	 the syntax NavigationUtil.method(parameter).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 Utilities for manipulating a TextRange 
	 The methods of this class are static and must be called using
	 the syntax <codeph>NavigationUtil.method(<i>parameter</i>)</codeph>.
	 
	 </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="flashx.textLayout.utils:CharacterUtil"><apiName>CharacterUtil</apiName><shortdesc> 
	 Utilities for managing and getting information about characters.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 Utilities for managing and getting information about characters.
	 The methods of this class are static and must be called using
	 the syntax <codeph>CharacterUtil.method(<i>parameter</i>)</codeph>.
	 
	 </apiDesc></apiClassifierDetail></apiClassifier></apiPackage><apiPackage id="flashx.textLayout"><apiName>flashx.textLayout</apiName><apiClassifier id="flashx.textLayout:TextLayoutVersion"><apiName>TextLayoutVersion</apiName><shortdesc> 
	  This class controls the backward-compatibility of the framework.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> 
	  This class controls the backward-compatibility of the framework.
	  With every new release, some aspects of the framework are changed which can affect your application.
	  
	  </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout:TextLayoutVersion:CURRENT_VERSION"><apiName>CURRENT_VERSION</apiName><shortdesc> 
		  The current released version of the Text Layout Framework, encoded as a uint.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x03000000</apiData><apiType value="uint"/></apiValueDef><apiDesc> 
		  The current released version of the Text Layout Framework, encoded as a uint.
		  
		  </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout:TextLayoutVersion:VERSION_1_0"><apiName>VERSION_1_0</apiName><shortdesc> 
		  The version number value of TLF 1.0,
		  encoded numerically as a uint.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x01000000</apiData><apiType value="uint"/></apiValueDef><apiDesc> 
		  The version number value of TLF 1.0,
		  encoded numerically as a <codeph>uint</codeph>.
		  
		  </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout:TextLayoutVersion:VERSION_1_1"><apiName>VERSION_1_1</apiName><shortdesc> 
		  The version number value of TLF 1.1,
		  encoded numerically as a uint.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x01010000</apiData><apiType value="uint"/></apiValueDef><apiDesc> 
		  The version number value of TLF 1.1,
		  encoded numerically as a <codeph>uint</codeph>.
		  
		  </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout:TextLayoutVersion:VERSION_2_0"><apiName>VERSION_2_0</apiName><shortdesc> 
		  The version number value of TLF 2.0,
		  encoded numerically as a uint.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x02000000</apiData><apiType value="uint"/></apiValueDef><apiDesc> 
		  The version number value of TLF 2.0,
		  encoded numerically as a <codeph>uint</codeph>.
		  
		  </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout:TextLayoutVersion:VERSION_3_0"><apiName>VERSION_3_0</apiName><shortdesc> 
		  The version number value of TLF 3.0,
		  encoded numerically as a uint.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x03000000</apiData><apiType value="uint"/></apiValueDef><apiDesc> 
		  The version number value of TLF 3.0,
		  encoded numerically as a <codeph>uint</codeph>.
		  
		  </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage><apiPackage id="flashx.undo"><apiName>flashx.undo</apiName><apiClassifier id="flashx.undo:IOperation"><apiName>IOperation</apiName><shortdesc> 
	 IOperation defines the interface for operations that can be undone and redone.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc> 
	 IOperation defines the interface for operations that can be undone and redone.
	  
	 </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="flashx.undo:UndoManager"><apiName>UndoManager</apiName><shortdesc> 
	 The UndoManager class manages the history of editing operations on a text flow so
	 that these operations can be undone and redone.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.undo:IUndoManager</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 The UndoManager class manages the history of editing operations on a text flow so
	 that these operations can be undone and redone.
	 
	 <p>The undo manager maintains two stacks of IOperation objects. When a reversible
	 operation is executed, it is placed on the undo stack. If that operation is undone,
	 it is removed from the undo stack, reversed, and placed on the redo stack. Likewise, 
	 if that operation is then redone, it is removed from the redo stack, re-executed, and
	 then placed onto the undo stack again. If another operation is executed first, the redo 
	 stack is cleared.</p>
	 
	 <p>If the TextFlow is modified directly (not via
	 calls to the edit manager, but directly via calls to the managed FlowElement objects), then the edit manager
	 clears the undo stack to prevent the stack from getting out of sync with the current state.</p>
	 
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.undo:UndoManager:undoAndRedoItemLimit:get"><apiName>undoAndRedoItemLimit</apiName><shortdesc>
         The maximum number of undoable or redoable operations to track.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiTipTexts><apiTipText>The maximum number of undoable or redoable operations to track. 
		 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
         The maximum number of undoable or redoable operations to track.
         
         <p>To disable the undo function, set this value to 0.</p> 
         
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.undo:IUndoManager"><apiName>IUndoManager</apiName><shortdesc>
     IUndoManager defines the interface for managing the undo and redo stacks.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
     IUndoManager defines the interface for managing the undo and redo stacks.
     
     <p>An undo manager maintains a stack of operations that can be undone and redone.</p>
     
     </apiDesc></apiClassifierDetail><apiValue id="flashx.undo:IUndoManager:flashx.undo:IUndoManager:undoAndRedoItemLimit:get"><apiName>undoAndRedoItemLimit</apiName><shortdesc>
         The maximum number of undoable or redoable operations to track.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
         The maximum number of undoable or redoable operations to track.
         
         <p>To disable the undo function, set this value to 0.</p> 
         
         </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage></allClasses>