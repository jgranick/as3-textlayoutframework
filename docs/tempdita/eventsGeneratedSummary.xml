<?xml version="1.0" encoding="UTF-8"?>
<allClasses>
   <apiPackage id="flash.text.ime">
      <apiName>flash.text.ime</apiName>
      <apiClassifier id="flash.text.ime:IIMEClient">
         <apiName>IIMEClient</apiName>
         <shortdesc>
Interface for IME (input method editor) clients.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
Interface for IME (input method editor) clients.  Components based on the flash.text.engine package must implement 
this interface to support editing text inline using an IME. This interface is not used with TextField objects. 
TextLayoutFramework (TLF) uses this interface to support inline IME, so clients using TLF do not need to implement this 
interface. 
<p>To support inline IME, set the <codeph>imeClient</codeph> property of an <codeph>ImeEvent.IME_START_COMPOSITION</codeph> event to
an object which implements this interface.</p>

         </apiDesc>
         <adobeApiEvent id="flash.text.ime:IIMEClient_flash.events.TextEvent.TEXT_INPUT_textInput">
            <apiName>textInput</apiName>
            <shortdesc>
 Dispatched when the user enters text.</shortdesc>
            <prolog>
               <asMetadata>
                  <apiVersion>
                     <apiLanguage version="3.0"/>
                     <apiPlatform description="" name="Flash" version="10"/>
                     <apiPlatform description="" name="AIR" version="1.5"/>
                  </apiVersion>
               </asMetadata>
            </prolog>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>flash.events.TextEvent.TEXT_INPUT</apiEventType>
                  <adobeApiEventClassifier>flash.TextEvent.TEXT_INPUT</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
 Dispatched when the user enters text. For IME (input method editor) clients, the receiver should 
 insert the string contained in the event object's <codeph>text</codeph> property at the current insertion point.
 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="flash.text.ime:IIMEClient_flash.events.IMEEvent.IME_START_COMPOSITION_imeStartComposition">
            <apiName>imeStartComposition</apiName>
            <shortdesc>
 Dispatched when the user begins to use an IME (input method editor).</shortdesc>
            <prolog>
               <asMetadata>
                  <apiVersion>
                     <apiLanguage version="3.0"/>
                     <apiPlatform description="" name="Flash" version="10"/>
                     <apiPlatform description="" name="AIR" version="1.5"/>
                  </apiVersion>
               </asMetadata>
            </prolog>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>flash.events.IMEEvent.IME_START_COMPOSITION</apiEventType>
                  <adobeApiEventClassifier>flash.IMEEvent.IME_START_COMPOSITION</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
 Dispatched when the user begins to use an IME (input method editor).
 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
      </apiClassifier>
      <apiClassifier id="flash.text.ime:CompositionAttributeRange">
         <apiName>CompositionAttributeRange</apiName>
         <shortdesc>
The CompositionAttributeRange class represents a range of composition attributes for use with IME events.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiFinal/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
The CompositionAttributeRange class represents a range of composition attributes for use with IME events. 
For example, when editing text in the IME, the text is divided by the IME into composition ranges.
These composition ranges are flagged as selected (i.e. currently being lengthened, shortened, or edited),
and/or converted (i.e. they have made one pass through the IME dictionary lookup already).

<p>By convention, the client should adorn these composition ranges with underlining or hiliting according to
the flags.</p>

            <p>For example:</p>
            <codeblock>
     !converted              = thick gray underline (raw text)
     !selected &amp;&amp; converted  = thin black underline
      selected &amp;&amp; converted  = thick black underline
</codeblock>
         </apiDesc>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="flashx.textLayout.compose">
      <apiName>flashx.textLayout.compose</apiName>
      <apiClassifier id="flashx.textLayout.compose:StandardFlowComposer">
         <apiName>StandardFlowComposer</apiName>
         <shortdesc> 
	The StandardFlowComposer class provides a standard composer and container manager.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>flashx.textLayout.compose:IFlowComposer</apiBaseInterface>
               <apiBaseClassifier>flashx.textLayout.compose:FlowComposerBase</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> 
	The StandardFlowComposer class provides a standard composer and container manager. 
	
	<p>Each call to <codeph>compose()</codeph> or <codeph>updateAllControllers()</codeph> normalizes the text flow as a first step.  
	The normalizing process checks the parts of the TextFlow object that were modified and takes the following steps:
	<ol>
	                 <li> Deletes empty FlowLeafElement and SubParagraphGroupElement objects.</li>
	                 <li> Merges sibling spans that have identical attributes.</li>
	                 <li> Adds an empty paragraph if a flow is empty.</li>
 	             </ol>
 	          </p>
	
	           <p>To use a StandardFlowComposer, assign it to the
	<codeph>flowComposer</codeph> property of a TextFlow object. Call the <codeph>updateAllControllers()</codeph>
	method to lay out and display the text in the containers attached to the flow composer.</p>
	
	           <p>
               <b>Note:</b> For simple, static text flows, you can also use the one of the text line factory classes.
	These factory classes will typically create lines with less overhead than a flow composer, but do not
	support editing, dynamic changes, or user interaction.</p>
	
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.compose:TextFlowLineLocation">
         <apiName>TextFlowLineLocation</apiName>
         <shortdesc> 
	 The TextFlowLineLocation class is an enumeration class that defines constants for specifying the location
	 of a line within a paragraph.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiFinal/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> 
	 The TextFlowLineLocation class is an enumeration class that defines constants for specifying the location
	 of a line within a paragraph.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.compose:FlowComposerBase">
         <apiName>FlowComposerBase</apiName>
         <shortdesc> 
	 The FlowComposerBase class is the base class for Text Layout Framework flow composer classes, which control the 
	 composition of text lines in ContainerController objects.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> 
	 The FlowComposerBase class is the base class for Text Layout Framework flow composer classes, which control the 
	 composition of text lines in ContainerController objects.
	 
	 <p>FlowComposerBase is a utility class that implements methods and properties that are common
	 to several types of flow composer. Application code would not typically instantiate or use this class
	 (unless extending it to create a custom flow composer).</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.compose:TextLineRecycler">
         <apiName>TextLineRecycler</apiName>
         <shortdesc> 
	 The TextLineRecycler class provides support for recycling of TextLines.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> 
	 The TextLineRecycler class provides support for recycling of TextLines.  Some player versions support a recreateTextLine.  Passing TextLines
	 to the recycler makes them available for reuse.  This improves Player performance.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.compose:TextFlowLine">
         <apiName>TextFlowLine</apiName>
         <shortdesc> 
	 The TextFlowLine class represents a single line of text in a text flow.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiFinal/>
               <apiBaseInterface>flashx.textLayout.compose:IVerticalJustificationLine</apiBaseInterface>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> 
	 The TextFlowLine class represents a single line of text in a text flow.
	 
	 <p>Use this class to access information about how a line of text has been composed: its position, 
	 height, width, and so on. When the text flow (TextFlow) is modified, the lines immediately before and at the  
	 site of the modification are marked as invalid because they need to be recomposed. Lines after
	 the site of the modification might not be damaged immediately, but they might be regenerated once the
	 text is composed. You can access a TextFlowLine that has been damaged, but any values you access
	 reflect the old state of the TextFlow. When the TextFlow is recomposed, it generates new lines and you can 
	 get the new line for a given position by calling <codeph>TextFlow.flowComposer.findLineAtPosition()</codeph>.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.compose:FlowDamageType">
         <apiName>FlowDamageType</apiName>
         <shortdesc>
	  The FlowDamageType class is an enumeration class that defines types of damage for damage methods and events.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	  The FlowDamageType class is an enumeration class that defines types of damage for damage methods and events.
	 When the text content is updated, these changes are reflected in the TextLines after an update. TextLines are 
	 marked with a flag that specifies whether or not they are valid, or up to date with all text
	 changes. When the text is first updated, all lines are marked valid or static. After the text has been changed,
	 and before the next update, lines will be marked with a FlowDamageType that specifies what about the line
	 is invalid. Once the update is done, lines will again be marked as valid or static.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.compose:IFlowComposer">
         <apiName>IFlowComposer</apiName>
         <shortdesc>
	 IFlowComposer defines the interface for managing the layout and display of a text flow.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 IFlowComposer defines the interface for managing the layout and display of a text flow.
	 
	 <p>Text flows displayed with a flow composer implementation can be dynamic and interactive.
	 A flow composer manages one or more display controller. Each controller is associated with
	 a display object container (such as a Sprite) through which the lines created for the text
	 flow are ultimately displayed. The following diagram illustrates the relationship between TextFlow,
	 IFlowComposer, ContainerController, and DisplayObjectContainer objects:</p>
	 
	           <p>
               <adobeimage alt="IFlowComposer" href="../../../images/textLayout_singleController.gif"/>
            </p>
	 
	           <p>A flow composer calculates which portion of a text flow fits in each container and 
	 adds the appropriate text lines to the container's display object. The IFlowComposer interface 
	 defines separate methods for layout calculations and for updating the display. IFlowComposer also 
	 defines methods for incrementally composing and updating a text flow. These methods can be used 
	 to avoid blocking the user interface when updating long text flows.</p>
	 
	           <p>In addition to managing text composition and display, a flow composer controls which container has focus, 
	 manages the display of the selection highlight (which can cross container boundaries), and provides
	 direct access to all the TextLine objects in the flow.</p>
	 
	           <p>To use an IFlowComposer implementation, assign an instance of that implementation to the
	 <codeph>flowComposer</codeph> property of a TextFlow object. Call the <codeph>updateAllControllers()</codeph>
	 method to lay out and display the text in the containers attached to the flow composer.</p>
	 
	           <p>
               <b>Note:</b> For simple, static text flows, you can also use the one of the text line factory classes.
	 These factory classes will typically create lines with less overhead than a flow composer, but do not
	 support editing, dynamic changes, or user interaction.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.compose:ISWFContext">
         <apiName>ISWFContext</apiName>
         <shortdesc> 
	 The ISWFContext interface allows a SWF file to share its context with other SWF files that load it.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> 
	 The ISWFContext interface allows a SWF file to share its context with other SWF files that load it.
	 An application that loads a SWF file of type ISWFContext can call methods in the context of the loaded SWF file.
	 The main usage is for calling the FTE TextLine creation methods.
	 
	 <p>There are two reasons for an application to use 
	 this interface to control TextLine creation: </p>
	           <ul>
	              <li>
                  <b>Reuse an embedded font: </b> if an application wants to use a font embedded in a loaded SWF file,
	 the application can access the font if a TextLine
	 is created in the context of the loaded SWF file.</li>
	              <li>
                  <b>Reuse existing TextLine instances</b>: reusing existing TextLine instances can result in faster recompose times. 
	 TLF reuses existing TextLine instances internally. TLF reuses 
	 a TextLine by calling <codeph>TextBlock.recreateTextLine()</codeph>
	 instead of <codeph>TextBlock.createTextLine()</codeph> when TLF recognizes that a TextLine is extant.</li>
	           </ul>
	 
	 
	           <p>Your application may have additional TextLine instances that can be reused. 
	 To manually reuse existing TextLine instances:</p>
	           <ol>
	              <li>trap calls to <codeph>TextBlock.createTextLine()</codeph>, then</li>
	              <li>call <codeph>TextBlock.recreateTextLine()</codeph> with the extant TextLine instance instead 
	 of <codeph>TextBlock.createTextLine()</codeph>.</li>
	           </ol>
	           <p>Please note, however, that the <codeph>TextBlock.recreateTextLine()</codeph> is available
	 only in Flash Player 10.1 and later.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.compose:IVerticalJustificationLine">
         <apiName>IVerticalJustificationLine</apiName>
         <shortdesc> 
	 The IVerticalJustificationLine interface defines the methods and properties required to allow
	 the vertical justification of text lines.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> 
	 The IVerticalJustificationLine interface defines the methods and properties required to allow
	 the vertical justification of text lines.
	 
	 </apiDesc>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="flashx.textLayout.container">
      <apiName>flashx.textLayout.container</apiName>
      <apiClassifier id="flashx.textLayout.container:ColumnState">
         <apiName>ColumnState</apiName>
         <shortdesc> 
	 The ColumnState class calculates the sizes and locations of columns using
	 the width of the container and the container attributes.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> 
	 The ColumnState class calculates the sizes and locations of columns using
	 the width of the container and the container attributes. You can create instances of this class 
	 independently to calculate column values, or you can get the column values that 
	 were used for the text after the container has been composed or updated (redrawn).
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.container:ContainerController">
         <apiName>ContainerController</apiName>
         <shortdesc> 
	 The ContainerController class defines the relationship between a TextFlow object and a container.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>flashx.textLayout.edit:IInteractionEventHandler</apiBaseInterface>
               <apiBaseInterface>flashx.textLayout.formats:ITextLayoutFormat</apiBaseInterface>
               <apiBaseInterface>flashx.textLayout.container:ISandboxSupport</apiBaseInterface>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> 
	 The ContainerController class defines the relationship between a TextFlow object and a container.
	 A TextFlow may have one or more rectangular areas that can hold text; the text is said to be flowing
	 through the containers. Each container is a Sprite that is the parent DisplayObject for the TextLines.
	 Each container has a ContainerController that manages the container; the controller holds the target 
	 width and height for the text area, populates the container with TextLines, and handles scrolling. A
	 controller also has a format associated with it that allows some formatting attributes to be applied 
	 to the text in the container. This allows, for instance, a TextFlow to have one container where the
	 text appears in a single column, and a second container in the same TextFlow with two column text. Not
	 all formatting attributes that can be applied to the container will affect the text; only the ones that
	 affect container-level layout. The diagram below illustrates the relationship between the TextFlow,
	 its flowComposer, and the display list.
	 
	 <p>
               <adobeimage alt="IContainerController"
                           href="../../../images/textLayout_multiController.gif"/>
            </p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.container:TextContainerManager">
         <apiName>TextContainerManager</apiName>
         <shortdesc> Manages text in a container.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>flashx.textLayout.compose:ISWFContext</apiBaseInterface>
               <apiBaseInterface>flashx.textLayout.edit:IInteractionEventHandler</apiBaseInterface>
               <apiBaseInterface>flashx.textLayout.container:ISandboxSupport</apiBaseInterface>
               <apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> Manages text in a container. Assumes that it manages all children of the container. 
	 Consider using TextContainerManager for better performance in cases where there is a 
	 one container per TextFlow, and the TextFlow is not the main focus, is static text, or
	 is infrequently selected. Good for text in form fields, for example.
	 
	 </apiDesc>
         <adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.UpdateCompleteEvent_updateComplete">
            <apiName>updateComplete</apiName>
            <shortdesc> Dispatched by a TextFlow object each time a container has had new DisplayObjects added or updated as a result of composition.</shortdesc>
            <prolog>
               <asMetadata>
                  <apiVersion>
                     <apiLanguage version="3.0"/>
                     <apiPlatform description="" name="Flash" version="10"/>
                     <apiPlatform description="" name="AIR" version="1.5"/>
                  </apiVersion>
               </asMetadata>
            </prolog>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <adobeApiEventClassifier>flashx.textLayout.events.UpdateCompleteEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc> Dispatched by a TextFlow object each time a container has had new DisplayObjects added or updated as a result of composition.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.DamageEvent_damage">
            <apiName>damage</apiName>
            <shortdesc> Dispatched by a TextFlow object each time it is damaged 
	 
	 </shortdesc>
            <prolog>
               <asMetadata>
                  <apiVersion>
                     <apiLanguage version="3.0"/>
                     <apiPlatform description="" name="Flash" version="10"/>
                     <apiPlatform description="" name="AIR" version="1.5"/>
                  </apiVersion>
               </asMetadata>
            </prolog>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <adobeApiEventClassifier>flashx.textLayout.events.DamageEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc> Dispatched by a TextFlow object each time it is damaged 
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.TextLayoutEvent_scroll">
            <apiName>scroll</apiName>
            <shortdesc> Dispatched by a TextFlow object after text is scrolled within a controller container.</shortdesc>
            <prolog>
               <asMetadata>
                  <apiVersion>
                     <apiLanguage version="3.0"/>
                     <apiPlatform description="" name="Flash" version="10"/>
                     <apiPlatform description="" name="AIR" version="1.5"/>
                  </apiVersion>
               </asMetadata>
            </prolog>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <adobeApiEventClassifier>flashx.textLayout.events.TextLayoutEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc> Dispatched by a TextFlow object after text is scrolled within a controller container.  
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.StatusChangeEvent_inlineGraphicStatusChanged">
            <apiName>inlineGraphicStatusChanged</apiName>
            <shortdesc> Dispatched when a InlineGraphicElement is resized due to having width or height as auto or percent 
	 and the graphic has finished loading.</shortdesc>
            <prolog>
               <asMetadata>
                  <apiVersion>
                     <apiLanguage version="3.0"/>
                     <apiPlatform description="" name="Flash" version="10"/>
                     <apiPlatform description="" name="AIR" version="1.5"/>
                  </apiVersion>
               </asMetadata>
            </prolog>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <adobeApiEventClassifier>flashx.textLayout.events.StatusChangeEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc> Dispatched when a InlineGraphicElement is resized due to having width or height as auto or percent 
	 and the graphic has finished loading. 
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.FlowElementMouseEvent_click">
            <apiName>click</apiName>
            <shortdesc> Dispatched when any link is clicked.</shortdesc>
            <prolog>
               <asMetadata>
                  <apiVersion>
                     <apiLanguage version="3.0"/>
                     <apiPlatform description="" name="Flash" version="10"/>
                     <apiPlatform description="" name="AIR" version="1.5"/>
                  </apiVersion>
               </asMetadata>
            </prolog>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc> Dispatched when any link is clicked. 
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.FlowElementMouseEvent_rollOut">
            <apiName>rollOut</apiName>
            <shortdesc> Dispatched when the mouse goes out of any link.</shortdesc>
            <prolog>
               <asMetadata>
                  <apiVersion>
                     <apiLanguage version="3.0"/>
                     <apiPlatform description="" name="Flash" version="10"/>
                     <apiPlatform description="" name="AIR" version="1.5"/>
                  </apiVersion>
               </asMetadata>
            </prolog>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc> Dispatched when the mouse goes out of any link. 
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.FlowElementMouseEvent_rollOver">
            <apiName>rollOver</apiName>
            <shortdesc> Dispatched when the mouse first enters any link.</shortdesc>
            <prolog>
               <asMetadata>
                  <apiVersion>
                     <apiLanguage version="3.0"/>
                     <apiPlatform description="" name="Flash" version="10"/>
                     <apiPlatform description="" name="AIR" version="1.5"/>
                  </apiVersion>
               </asMetadata>
            </prolog>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc> Dispatched when the mouse first enters any link. 
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.FlowElementMouseEvent_mouseMove">
            <apiName>mouseMove</apiName>
            <shortdesc> Dispatched when the mouse passes over any link.</shortdesc>
            <prolog>
               <asMetadata>
                  <apiVersion>
                     <apiLanguage version="3.0"/>
                     <apiPlatform description="" name="Flash" version="10"/>
                     <apiPlatform description="" name="AIR" version="1.5"/>
                  </apiVersion>
               </asMetadata>
            </prolog>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc> Dispatched when the mouse passes over any link. 
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.FlowElementMouseEvent_mouseUp">
            <apiName>mouseUp</apiName>
            <shortdesc> Dispatched when the mouse is released over any link.</shortdesc>
            <prolog>
               <asMetadata>
                  <apiVersion>
                     <apiLanguage version="3.0"/>
                     <apiPlatform description="" name="Flash" version="10"/>
                     <apiPlatform description="" name="AIR" version="1.5"/>
                  </apiVersion>
               </asMetadata>
            </prolog>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc> Dispatched when the mouse is released over any link. 
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.FlowElementMouseEvent_mouseDown">
            <apiName>mouseDown</apiName>
            <shortdesc> Dispatched when the mouse is pressed down over any link.</shortdesc>
            <prolog>
               <asMetadata>
                  <apiVersion>
                     <apiLanguage version="3.0"/>
                     <apiPlatform description="" name="Flash" version="10"/>
                     <apiPlatform description="" name="AIR" version="1.5"/>
                  </apiVersion>
               </asMetadata>
            </prolog>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc> Dispatched when the mouse is pressed down over any link. 
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.CompositionCompleteEvent_compositionComplete">
            <apiName>compositionComplete</apiName>
            <shortdesc> Dispatched after every recompose.</shortdesc>
            <prolog>
               <asMetadata>
                  <apiVersion>
                     <apiLanguage version="3.0"/>
                     <apiPlatform description="" name="Flash" version="10"/>
                     <apiPlatform description="" name="AIR" version="1.5"/>
                  </apiVersion>
               </asMetadata>
            </prolog>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <adobeApiEventClassifier>flashx.textLayout.events.CompositionCompleteEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc> Dispatched after every recompose. 
	
	</apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.SelectionEvent_selectionChange">
            <apiName>selectionChange</apiName>
            <shortdesc> Dispatched whenever the selection is changed.</shortdesc>
            <prolog>
               <asMetadata>
                  <apiVersion>
                     <apiLanguage version="3.0"/>
                     <apiPlatform description="" name="Flash" version="10"/>
                     <apiPlatform description="" name="AIR" version="1.5"/>
                  </apiVersion>
               </asMetadata>
            </prolog>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <adobeApiEventClassifier>flashx.textLayout.events.SelectionEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc> Dispatched whenever the selection is changed.  Primarily used to update selection-dependent user interface. 
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_COMPLETE_flowOperationComplete">
            <apiName>flowOperationComplete</apiName>
            <shortdesc>
	 
	 </shortdesc>
            <prolog>
               <asMetadata>
                  <apiVersion>
                     <apiLanguage version="3.0"/>
                     <apiPlatform description="" name="Flash" version="10"/>
                     <apiPlatform description="" name="AIR" version="1.5"/>
                  </apiVersion>
               </asMetadata>
            </prolog>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_COMPLETE</apiEventType>
                  <adobeApiEventClassifier>flashx.textLayout.events.FlowOperationEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_END_flowOperationEnd">
            <apiName>flowOperationEnd</apiName>
            <shortdesc>
	 
	 </shortdesc>
            <prolog>
               <asMetadata>
                  <apiVersion>
                     <apiLanguage version="3.0"/>
                     <apiPlatform description="" name="Flash" version="10"/>
                     <apiPlatform description="" name="AIR" version="1.5"/>
                  </apiVersion>
               </asMetadata>
            </prolog>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_END</apiEventType>
                  <adobeApiEventClassifier>flashx.textLayout.events.FlowOperationEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_BEGIN_flowOperationBegin">
            <apiName>flowOperationBegin</apiName>
            <shortdesc>
	 
	  </shortdesc>
            <prolog>
               <asMetadata>
                  <apiVersion>
                     <apiLanguage version="3.0"/>
                     <apiPlatform description="" name="Flash" version="10"/>
                     <apiPlatform description="" name="AIR" version="1.5"/>
                  </apiVersion>
               </asMetadata>
            </prolog>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_BEGIN</apiEventType>
                  <adobeApiEventClassifier>flashx.textLayout.events.FlowOperationEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 
	  </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.container:ISandboxSupport">
         <apiName>ISandboxSupport</apiName>
         <shortdesc> Interface to support TLF content in a sub-application.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> Interface to support TLF content in a sub-application. When an application is loaded in an untrusted context,
	 mouse events that occur outside of the untrusted application's bounds are not delivered. Clients can handle this
	 by implementing ISandboxSupport. 
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.container:ScrollPolicy">
         <apiName>ScrollPolicy</apiName>
         <shortdesc>
	  The ScrollPolicy class is an enumeration class that defines values for setting the horizontalScrollPolicy and 
	  verticalScrollPolicy properties of the ContainerController class, which defines a text flow 
	  container.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiFinal/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	  The ScrollPolicy class is an enumeration class that defines values for setting the <codeph>horizontalScrollPolicy</codeph> and 
	  <codeph>verticalScrollPolicy</codeph> properties of the ContainerController class, which defines a text flow 
	  container. 
	 
	  </apiDesc>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="flashx.textLayout.conversion">
      <apiName>flashx.textLayout.conversion</apiName>
      <apiClassifier id="flashx.textLayout.conversion:IPlainTextExporter">
         <apiName>IPlainTextExporter</apiName>
         <shortdesc> This interface should be implemented by converters that export plain text.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>flashx.textLayout.conversion:ITextExporter</apiBaseInterface>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> This interface should be implemented by converters that export plain text. Clients that have explicitly
	 created an exporter using TextConverter.getExporter may control the export process by calling into these methods on the 
	 exporter.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.conversion:TextConverter">
         <apiName>TextConverter</apiName>
         <shortdesc> 
	 This is the gateway class for handling import and export.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> 
	 This is the gateway class for handling import and export. It serves as a unified access point to the 
	 conversion functionality in the Text Layout Framework. It contains a registry for predefined as well
	 as user defined input and/or output converters, plus a set of conversion methods.
	 <p>
	 The format of the converted data is not predefined; user written converters are free to accept and return
	 any format of their choice. Common formats are strings, XML, and ByteArray instances. Converter authors 
	 should document which formats are supported.
	 </p>
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.conversion:ITextLayoutImporter">
         <apiName>ITextLayoutImporter</apiName>
         <shortdesc> This interface should be implemented by converters that import TextLayout structured data.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>flashx.textLayout.conversion:ITextImporter</apiBaseInterface>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> This interface should be implemented by converters that import TextLayout structured data. Clients that have explicitly
	 created an importer using TextConverter.getImporter may control the import process by calling into these methods on the 
	 importer.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.conversion:ITextImporter">
         <apiName>ITextImporter</apiName>
         <shortdesc> 
     Interface for importing text content into a TextFlow from an external source.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> 
     Interface for importing text content into a TextFlow from an external source. 
     The TextConverter class creates importers with no constructor arguments.
     
     </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.conversion:PlainTextExporter">
         <apiName>PlainTextExporter</apiName>
         <shortdesc> 
	 Export converter for plain text format.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>flashx.textLayout.conversion:IPlainTextExporter</apiBaseInterface>
               <apiBaseClassifier>flashx.textLayout.conversion:ConverterBase</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> 
	 Export converter for plain text format. This class provides an alternative to
	 the <codeph>TextConverter.export()</codeph> static method for exporting plain text.
	  The PlainTextExporter class's <codeph>export()</codeph> method results in the 
	 same output string as the <codeph>TextConverter.export()</codeph> static method 
	 if the two properties of the PlainTextExporter class, the <codeph>PARAGRAPH_SEPARATOR_PROPERTY</codeph>
	 and the <codeph>STRIP_DISCRETIONARY_HYPHENS_PROPERTY</codeph> properties, contain their
	 default values of <codeph>"\n"</codeph> and <codeph>true</codeph>, respectively.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.conversion:IHTMLImporter">
         <apiName>IHTMLImporter</apiName>
         <shortdesc> This interface should be implemented by converters that import HTML or HTML-structured data.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>flashx.textLayout.conversion:ITextImporter</apiBaseInterface>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> This interface should be implemented by converters that import HTML or HTML-structured data. Clients that have explicitly
	 created an importer using TextConverter.getImporter may control the import process by calling into these methods on the 
	 importer.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.conversion:ConversionType">
         <apiName>ConversionType</apiName>
         <shortdesc>
	 Values for the format of exported text.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiFinal/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Values for the format of exported text.
	 The values <codeph>STRING_TYPE</codeph> and <codeph>XML_TYPE</codeph> 
	 can be used for the <codeph>conversionType</codeph> parameter for 
	 the export() method in the ITextExporter interface and the
	 TextConverter class.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.conversion:ITextExporter">
         <apiName>ITextExporter</apiName>
         <shortdesc> 
	 Interface for exporting text content from a TextFlow instance to a given format, 
	 which may for example be String or XML format, or a user-defined format.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> 
	 Interface for exporting text content from a TextFlow instance to a given format, 
	 which may for example be String or XML format, or a user-defined format. Exporters support the getting
	 and setting of properties to control the export of data. These properties are implemented
	 as public properties, but the direct access of these properties should be avoided, since
	 a user might replace the converter class in the TextConverter registry, causing a downcast
	 to fail.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.conversion:FormatDescriptor">
         <apiName>FormatDescriptor</apiName>
         <shortdesc> Contains information about a format.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> Contains information about a format.
     
     </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.conversion:ConverterBase">
         <apiName>ConverterBase</apiName>
         <shortdesc>
	 This is a base class for importers as well as exporters.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 This is a base class for importers as well as exporters. It implements the error handling
	 plus property getters and setters that generate an error when invoked.
	 </apiDesc>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="flashx.textLayout.edit">
      <apiName>flashx.textLayout.edit</apiName>
      <apiClassifier id="flashx.textLayout.edit:SelectionManager">
         <apiName>SelectionManager</apiName>
         <shortdesc> 
     The SelectionManager class manages text selection in a text flow.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>flashx.textLayout.edit:ISelectionManager</apiBaseInterface>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> 
     The SelectionManager class manages text selection in a text flow.
     
     <p>The selection manager keeps track of the selected text range, manages its formatting, 
     and can handle events affecting the selection. To allow a user to make selections in
     a text flow, assign a SelectionManager object to the <codeph>interactionManager</codeph>
     property of the flow. (To allow editing, assign an instance of the EditManager class,
     which extends SelectionManager.)</p>
     
            <p>The following table describes how the SelectionManager class handles keyboard shortcuts:</p>
     
            <adobetable class="innertable">
     
     
     
     
     
     
     
     
     
               <tgroup cols="13">
                  <thead>
                     <row>
                        <row>
                           <entry/>
                           <entry/>
                           <entry align="center">TB,LTR</entry>
                           <entry align="right"/>
                           <entry/>
                           <entry align="center">TB,RTL</entry>
                           <entry/>
                           <entry/>
                           <entry align="center">TL,LTR</entry>
                           <entry/>
                           <entry/>
                           <entry align="center">RL,RTL</entry>
                           <entry/>
                        </row>
                        <row>
                           <entry/>
                           <entry>none</entry>
                           <entry>ctrl</entry>
                           <entry>alt|ctrl+alt</entry>
                           <entry>none</entry>
                           <entry>ctrl</entry>
                           <entry>alt|ctrl+alt</entry>
                           <entry>none</entry>
                           <entry>ctrl</entry>
                           <entry>alt|ctrl+alt</entry>
                           <entry>none</entry>
                           <entry>ctrl</entry>
                           <entry>alt|ctrl+alt</entry>
                        </row>
                     </row>
                  </thead>
                  <tbody>
                     <row>
                        <entry>leftarrow</entry>
                        <entry>previousCharacter</entry>
                        <entry>previousWord</entry>
                        <entry>previousWord</entry>
                        <entry>nextCharacter</entry>
                        <entry>nextWord</entry>
                        <entry>nextWord</entry>
                        <entry>nextLine</entry>
                        <entry>endOfDocument</entry>
                        <entry>endOfParagraph</entry>
                        <entry>nextLine</entry>
                        <entry>endOfDocument</entry>
                        <entry>endOfParagraph</entry>
                     </row>
                     <row>
                        <entry>uparrow</entry>
                        <entry>previousLine</entry>
                        <entry>startOfDocument</entry>
                        <entry>startOfParagraph</entry>
                        <entry>previousLine</entry>
                        <entry>startOfDocument</entry>
                        <entry>startOfParagraph</entry>
                        <entry>previousCharacter</entry>
                        <entry>previousWord</entry>
                        <entry>previousWord</entry>
                        <entry>nextCharacter</entry>
                        <entry>nextWord</entry>
                        <entry>nextWord</entry>
                     </row>
                     <row>
                        <entry>rightarrow</entry>
                        <entry>nextCharacter</entry>
                        <entry>nextWord</entry>
                        <entry>nextWord</entry>
                        <entry>previousCharacter</entry>
                        <entry>previousWord</entry>
                        <entry>previousWord</entry>
                        <entry>previousLine</entry>
                        <entry>startOfDocument</entry>
                        <entry>startOfParagraph</entry>
                        <entry>previousLine</entry>
                        <entry>startOfDocument</entry>
                        <entry>startOfParagraph</entry>
                     </row>
                     <row>
                        <entry>downarrow</entry>
                        <entry>nextLine</entry>
                        <entry>endOfDocument</entry>
                        <entry>endOfParagraph</entry>
                        <entry>nextLine</entry>
                        <entry>endOfDocument</entry>
                        <entry>endOfParagraph</entry>
                        <entry>nextCharacter</entry>
                        <entry>nextWord</entry>
                        <entry>nextWord</entry>
                        <entry>previousCharacter</entry>
                        <entry>previousWord</entry>
                        <entry>previousWord</entry>
                     </row>
                     <row>
                        <entry>home</entry>
                        <entry>startOfLine</entry>
                        <entry>startOfDocument</entry>
                        <entry>startOfLine</entry>
                        <entry>startOfLine</entry>
                        <entry>startOfDocument</entry>
                        <entry>startOfLine</entry>
                        <entry>startOfLine</entry>
                        <entry>startOfDocument</entry>
                        <entry>startOfLine</entry>
                        <entry>startOfLine</entry>
                        <entry>startOfDocument</entry>
                        <entry>startOfLine</entry>
                     </row>
                     <row>
                        <entry>end</entry>
                        <entry>endOfLine</entry>
                        <entry>endOfDocument</entry>
                        <entry>endOfLine</entry>
                        <entry>endOfLine</entry>
                        <entry>endOfDocument</entry>
                        <entry>endOfLine</entry>
                        <entry>endOfLine</entry>
                        <entry>endOfDocument</entry>
                        <entry>endOfLine</entry>
                        <entry>endOfLine</entry>
                        <entry>endOfDocument</entry>
                        <entry>endOfLine</entry>
                     </row>
                     <row>
                        <entry>pagedown</entry>
                        <entry>nextPage</entry>
                        <entry>nextPage</entry>
                        <entry>nextPage</entry>
                        <entry>nextPage</entry>
                        <entry>nextPage</entry>
                        <entry>nextPage</entry>
                        <entry>nextPage</entry>
                        <entry>nextPage</entry>
                        <entry>nextPage</entry>
                        <entry>nextPage</entry>
                        <entry>nextPage</entry>
                        <entry>nextPage</entry>
                     </row>
                     <row>
                        <entry>pageup</entry>
                        <entry>previousPage</entry>
                        <entry>previousPage</entry>
                        <entry>previousPage</entry>
                        <entry>previousPage</entry>
                        <entry>previousPage</entry>
                        <entry>previousPage</entry>
                        <entry>previousPage</entry>
                        <entry>previousPage</entry>
                        <entry>previousPage</entry>
                        <entry>previousPage</entry>
                        <entry>previousPage</entry>
                        <entry>previousPage</entry>
                     </row>
                  </tbody>
               </tgroup>
            </adobetable>
     
            <p>
               <b>Key:</b>
               <ul>
                  <li>none = no modifier</li>
                  <li>ctrl, shift, alt = modifiers</li>
                  <li>alt-key and ctrl+alt-key are the same on all platforms (on some platforms alt-key does not get to the Text Layout Framework (TLF)</li>
                  <li>shift key modifes to extend the active end of the selection in the specified manner</li>            
                  <li>TB (top-to-bottom),RL (right-to-left) are textFlow level <codeph>blockProgression</codeph> settings</li>                        
                  <li>LTR (left-to-right),RTL (right-to-left) are textFlow level <codeph>direction</codeph> settings</li>                 
                  <li>next and prev in logical order in the textFlow - the effect in RTL text is that the selection moves in the physical direction</li>
               </ul>
            </p>
     
         </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.edit:TextScrap">
         <apiName>TextScrap</apiName>
         <shortdesc>
	 The TextScrap class represents a fragment of a text flow.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The TextScrap class represents a fragment of a text flow.
	 
	 <p>A TextScrap is a holding place for all or part of a TextFlow. A range of text can be copied 
	 from a TextFlow into a TextScrap, and pasted from the TextScrap into another TextFlow.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.edit:ElementRange">
         <apiName>ElementRange</apiName>
         <shortdesc>
 The ElementRange class represents the range of objects selected within a text flow.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
 The ElementRange class represents the range of objects selected within a text flow.
 
 <p>The beginning elements 
 (such as <codeph>firstLeaf</codeph>) are always less than or equal to the end elements (in this case, <codeph>lastLeaf</codeph>)
 for each pair of values in an element range.</p>
 
         </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.edit:SelectionState">
         <apiName>SelectionState</apiName>
         <shortdesc>
	 The SelectionState class represents a selection in a text flow.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>flashx.textLayout.elements:TextRange</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The SelectionState class represents a selection in a text flow.  
	 
	 <p>A selection range has an anchor point, representing the point at which the selection of text began, and an
	 active point, representing the point to which the selection is extended. The active point can be before or after 
	 the anchor point in the text. If a selection is modified (for example, by a user shift-clicking with the mouse),
	 the active point changes while the anchor point always remains in the same position.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.edit:IEditManager">
         <apiName>IEditManager</apiName>
         <shortdesc> 
     IEditManager defines the interface for handling edit operations of a text flow.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>flashx.textLayout.edit:ISelectionManager</apiBaseInterface>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> 
     IEditManager defines the interface for handling edit operations of a text flow.
     
     <p>To enable text flow editing, assign an IEditManager instance to the <codeph>interactionManager</codeph> 
     property of the TextFlow object. The edit manager handles changes to the text (such as insertions, 
     deletions, and format changes). Changes are reversible if the edit manager has an undo manager. The edit
     manager triggers the recomposition and display of the text flow, as necessary.</p>
     
         </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.edit:ISelectionManager">
         <apiName>ISelectionManager</apiName>
         <shortdesc> 
	 The ISelectionManager interface defines the interface for handling text selection.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>flashx.textLayout.edit:IInteractionEventHandler</apiBaseInterface>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> 
	 The ISelectionManager interface defines the interface for handling text selection.
	 
	 <p>A SelectionManager keeps track of the selected text range and handles events for a TextFlow.</p>
	 
	           <p>A selection can be either a point selection or a range selection. A point selection is the insertion point
	 and is indicated visually by drawing a cursor. A range
	 selection includes the text between an anchor point and an active point.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.edit:EditManager">
         <apiName>EditManager</apiName>
         <shortdesc> 
	 The EditManager class manages editing changes to a TextFlow.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>flashx.textLayout.edit:IEditManager</apiBaseInterface>
               <apiBaseClassifier>flashx.textLayout.edit:SelectionManager</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> 
	 The EditManager class manages editing changes to a TextFlow. 
	 
	 <p>To enable text flow editing, assign an EditManager object to the <codeph>interactionManager</codeph> 
	 property of the TextFlow object. The edit manager handles changes to the text (such as insertions, 
	 deletions, and format changes). Changes are reversible if the edit manager has an undo manager. The edit
	 manager triggers the recomposition and display of the text flow, as necessary.</p>
	 
	           <p>The EditManager class supports the following keyboard shortcuts:</p>
	 
	           <adobetable class="innertable">
	  
	  					
	 						
	 						
	 						
	 						
	 						
	 						
	 						
	 						
	 						
	 						
	 						
	 						
	 						
	 	    
	 	    
	              <tgroup cols="2">
                  <thead>
                     <row>
                        <entry>Keys</entry>
                        <entry>Result</entry>
                     </row>
                  </thead>
                  <tbody>
                     <row>
                        <entry>ctrl-z</entry>
                        <entry>undo</entry>
                     </row>
                     <row>
                        <entry>ctrl-y</entry>
                        <entry>redo</entry>
                     </row>
                     <row>
                        <entry>ctrl-backspace</entry>
                        <entry>deletePreviousWord</entry>
                     </row>
                     <row>
                        <entry>ctrl-delete</entry>
                        <entry>deleteNextWord</entry>
                     </row>
                     <row>
                        <entry>alt+delete</entry>
                        <entry>deleteNextWord</entry>
                     </row>
                     <row>
                        <entry>ctrl+alt-delete</entry>
                        <entry>deleteNextWord</entry>
                     </row>
                     <row>
                        <entry>ctrl-shift-hyphen</entry>
                        <entry>insert discretionary hyphen</entry>
                     </row>
                     <row>
                        <entry>ctrl+backspace</entry>
                        <entry>deletePreviousWord</entry>
                     </row>
                     <row>
                        <entry>alt+backspace</entry>
                        <entry>deletePreviousWord</entry>
                     </row>
                     <row>
                        <entry>ctrl+alt-backspace</entry>
                        <entry>deletePreviousWord</entry>
                     </row>
                     <row>
                        <entry>INSERT</entry>
                        <entry>toggles overWriteMode</entry>
                     </row>
                     <row>
                        <entry>backspace</entry>
                        <entry>deletePreviousCharacter</entry>
                     </row>
                     <row>
                        <entry>ENTER</entry>
                        <entry>if textFlow.configuration.manageEnterKey in a list it creates a new list item, otherwise creates a new paragraph</entry>
                     </row>
                     <row>
                        <entry>shift-ENTER</entry>
                        <entry>if textFlow.configuration.manageEnterKey creates a new paragraph</entry>
                     </row>
                     <row>
                        <entry>TAB</entry>
                        <entry>if textFlow.configuration.manageTabKey in a list it creates nested list, otherwise inserts a TAB or overwrites next character with a TAB</entry>
                     </row>
                     <row>
                        <entry>shift-TAB</entry>
                        <entry>if textFlow.configuration.manageTabKey in the first item of a list it moves the item out of the list (promotes it)</entry>
                     </row>
                  </tbody>
               </tgroup>
            </adobetable>
	 
	           <p>
               <b>Note:</b> The following keys do not work on Windows: alt-backspace, alt-delete, ctrl+alt-backspace,
	 and ctrl+alt-delete. These keys do not generate an event for the runtime.</p>						
 	 
 	       </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.edit:IInteractionEventHandler">
         <apiName>IInteractionEventHandler</apiName>
         <shortdesc>
	 The IInteractionEventHandler interface defines the event handler functions that
	 are handled by a Text Layout Framework selection or edit manager.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The IInteractionEventHandler interface defines the event handler functions that
	 are handled by a Text Layout Framework selection or edit manager.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.edit:SelectionFormat">
         <apiName>SelectionFormat</apiName>
         <shortdesc>
	 The SelectionFormat class defines the properties of a selection highlight.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The SelectionFormat class defines the properties of a selection highlight.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.edit:TextClipboard">
         <apiName>TextClipboard</apiName>
         <shortdesc>
	 The TextClipboard class copies and pastes TextScrap objects to and from the system clipboard.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The TextClipboard class copies and pastes TextScrap objects to and from the system clipboard.
	 
	 <p>When you copy a TextScrap to the TextClipboard, the information is copied to the
	 system clipboard in two clipboard formats. One format is an XML string expressing the copied 
	 TextScrap object in Text Layout Markup syntax. This clipboard object uses the format name: 
	 "TEXT_LAYOUT_MARKUP". The second format is a plain-text string, which uses the standard 
	 Clipboard.TEXT_FORMAT name.</p>
	 
	           <p>The methods of the TextClipboard class are static functions, you do not need to
	 create an instance of TextClipboard.</p>  
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.edit:EditingMode">
         <apiName>EditingMode</apiName>
         <shortdesc> 
	 The EditingMode class defines constants used with EditManager class to represent the 
	 read, select, and edit permissions of a document.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiFinal/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> 
	 The EditingMode class defines constants used with EditManager class to represent the 
	 read, select, and edit permissions of a document.
	 
	 </apiDesc>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="flashx.textLayout.elements">
      <apiName>flashx.textLayout.elements</apiName>
      <apiClassifier id="flashx.textLayout.elements:SubParagraphGroupElementBase">
         <apiName>SubParagraphGroupElementBase</apiName>
         <shortdesc> 
	 The SubParagraphGroupElementBase class groups FlowLeafElements together.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>flashx.textLayout.elements:FlowGroupElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> 
	 The SubParagraphGroupElementBase class groups FlowLeafElements together. A SubParagraphGroupElementBase is a child of a 
	 ParagraphElement object and it can contain one or more FlowLeafElement objects as children.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.elements:IConfiguration">
         <apiName>IConfiguration</apiName>
         <shortdesc> Read-only interface to a configuration object.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> Read-only interface to a configuration object.  Used by TextFlow to guarantee it has an unchangeable 
	 configuration once its constructed.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.elements:ContainerFormattedElement">
         <apiName>ContainerFormattedElement</apiName>
         <shortdesc> 
	ContainerFormattedElement is the root class for all container-level block elements, such as DivElement
	and TextFlow objects.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>flashx.textLayout.elements:ParagraphFormattedElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> 
	ContainerFormattedElement is the root class for all container-level block elements, such as DivElement
	and TextFlow objects. Container-level block elements are grouping elements for other FlowElement objects.
	
	</apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.elements:InlineGraphicElementStatus">
         <apiName>InlineGraphicElementStatus</apiName>
         <shortdesc> The InlineGraphicElementStatus class defines a set of constants for checking the value of
     InlineGraphicElement.status.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiFinal/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> The InlineGraphicElementStatus class defines a set of constants for checking the value of
     <codeph>InlineGraphicElement.status</codeph>.
     
     </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.elements:ParagraphElement">
         <apiName>ParagraphElement</apiName>
         <shortdesc> 
	 The ParagraphElement class represents a paragraph in the text flow hierarchy.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiFinal/>
               <apiBaseClassifier>flashx.textLayout.elements:ParagraphFormattedElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> 
	 The ParagraphElement class represents a paragraph in the text flow hierarchy. Its parent
	 is a ParagraphFormattedElement, and its children can include spans (SpanElement), images 
	 (inLineGraphicElement), links (LinkElement) and TCY (Tatechuuyoko - ta-tae-chu-yo-ko) elements (TCYElement). The 
	 paragraph text is stored in one or more SpanElement objects, which define ranges of text that share the same attributes. 
	 A TCYElement object defines a small run of Japanese text that runs perpendicular to the line, as in a horizontal run of text in a 
	 vertical line. A TCYElement can also contain multiple spans.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.elements:ParagraphFormattedElement">
         <apiName>ParagraphFormattedElement</apiName>
         <shortdesc> The ParagraphFormattedElement class is an abstract base class for FlowElement classes that have paragraph properties.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>flashx.textLayout.elements:FlowGroupElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> The ParagraphFormattedElement class is an abstract base class for FlowElement classes that have paragraph properties.
	
	<p>You cannot create a ParagraphFormattedElement object directly. Invoking <codeph>new ParagraphFormattedElement()</codeph> 
	throws an error exception.</p> 
	
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.elements:ListItemElement">
         <apiName>ListItemElement</apiName>
         <shortdesc> 
	  ListItemElement is an item in a list.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiFinal/>
               <apiBaseClassifier>flashx.textLayout.elements:ContainerFormattedElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> 
	           <p> ListItemElement is an item in a list. It most commonly contains one or more ParagraphElement objects, but could
	 also have children of type DivElement or ListElement. A ListItemElement always appears within a ListElement.</p>
	 
	           <p>A ListItemElement has automatically generated content that appears before the regular content of the list. This is called
	 the <i>marker</i>, and it is what visually distinguishes the list item. The listStyleType property governs how the marker
	 is generated and allows the user to control whether the list item is marked with a bullet, a number, or alphabetically.
	 The listStylePosition governs where the marker appears relative to the list item; specifically it may appear outside, in the 
	 margin of the list, or inside, beside the list item itself. The ListMarkerFormat defines the TextLayoutFormat of the marker
	 (by default this will be the same as the list item), as well as an optional suffix that goes at the end of the marker. For 
	 instance, for a numbered list, it is common to have a "." as a suffix that appears after the number. The ListMarkerFormat also
	 allows specification of text that goes at the start of the marker, and for numbered lists allows control over the numbering.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.elements:LinkElement">
         <apiName>LinkElement</apiName>
         <shortdesc> The LinkElement class defines a link to a URI (Universal Resource Identifier), which is executed when the user clicks it.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiFinal/>
               <apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface>
               <apiBaseClassifier>flashx.textLayout.elements:SubParagraphGroupElementBase</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> The LinkElement class defines a link to a URI (Universal Resource Identifier), which is executed when the user clicks it.
	 The LinkElement class is a subclass of the SubParagraphGroupElementBase class and it can contain
	 one or more FlowElement objects, such as a SpanElement object that stores the link text. An empty
	 LinkElement, which does not contain a FlowElement object, is ignored. 
	 
	 <p>Normally when clicked the LinkElement will call the <codeph>flash.net.navigateToURL()</codeph> method.  A special URI scheme <codeph>event:</codeph>
	 is also supported.  This scheme will generate a TextFlow event that the user may listen to in order to execute AS3 code.  An example is included below.</p>
	 
	           <p>If you specify a target, it must be one of the following values:
	 <adobetable class="innertable">
	 
	 
	 
	 
	 
	                 <tgroup cols="2">
                     <thead>
                        <row>
                           <entry>Target value</entry>
                           <entry>description</entry>
                        </row>
                     </thead>
                     <tbody>
                        <row>
	                          <entry>_self</entry>
	                          <entry>Replaces the current HTML page. If it is in a frame or frameset, it will load within that frame. If it is
	       the full browser, it opens to replace the page from which it came.</entry>
	                       </row>
                        <row>
	                          <entry>_blank</entry>
	                          <entry>Opens a new browser name with no name.</entry>
	                       </row>
                        <row>
	                          <entry>_parent</entry>
	                          <entry>Replaces the HTML page from which it came.</entry>
	                       </row>
                        <row>
	                          <entry>_top</entry>
	                          <entry>Loads in the current browser, replacing anything within it, such as a frameset.</entry>
	                       </row>
                     </tbody>
                  </tgroup>
               </adobetable>
	           </p>
	 
	        </apiDesc>
         <adobeApiEvent id="flashx.textLayout.elements:LinkElement_flashx.textLayout.events.FlowElementMouseEvent.CLICK_click">
            <apiName>click</apiName>
            <shortdesc> 
	 Dispatched when the link is clicked.</shortdesc>
            <prolog>
               <asMetadata>
                  <apiVersion>
                     <apiLanguage version="3.0"/>
                     <apiPlatform description="" name="Flash" version="10"/>
                     <apiPlatform description="" name="AIR" version="1.5"/>
                  </apiVersion>
               </asMetadata>
            </prolog>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>flashx.textLayout.events.FlowElementMouseEvent.CLICK</apiEventType>
                  <adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc> 
	 Dispatched when the link is clicked. 
	 Clients may override how the link handles the event by handling it themselves, and calling preventDefault().
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="flashx.textLayout.elements:LinkElement_flashx.textLayout.events.FlowElementMouseEvent.ROLL_OUT_rollOut">
            <apiName>rollOut</apiName>
            <shortdesc> 
	 Dispatched when the mouse goes out of the link.</shortdesc>
            <prolog>
               <asMetadata>
                  <apiVersion>
                     <apiLanguage version="3.0"/>
                     <apiPlatform description="" name="Flash" version="10"/>
                     <apiPlatform description="" name="AIR" version="1.5"/>
                  </apiVersion>
               </asMetadata>
            </prolog>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>flashx.textLayout.events.FlowElementMouseEvent.ROLL_OUT</apiEventType>
                  <adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc> 
	 Dispatched when the mouse goes out of the link. 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="flashx.textLayout.elements:LinkElement_flashx.textLayout.events.FlowElementMouseEvent.ROLL_OVER_rollOver">
            <apiName>rollOver</apiName>
            <shortdesc>
	 Dispatched when the mouse first enters the link.</shortdesc>
            <prolog>
               <asMetadata>
                  <apiVersion>
                     <apiLanguage version="3.0"/>
                     <apiPlatform description="" name="Flash" version="10"/>
                     <apiPlatform description="" name="AIR" version="1.5"/>
                  </apiVersion>
               </asMetadata>
            </prolog>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>flashx.textLayout.events.FlowElementMouseEvent.ROLL_OVER</apiEventType>
                  <adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 Dispatched when the mouse first enters the link. 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="flashx.textLayout.elements:LinkElement_flashx.textLayout.events.FlowElementMouseEvent.MOUSE_MOVE_mouseMove">
            <apiName>mouseMove</apiName>
            <shortdesc> 
	 Dispatched when the mouse passes over the link.</shortdesc>
            <prolog>
               <asMetadata>
                  <apiVersion>
                     <apiLanguage version="3.0"/>
                     <apiPlatform description="" name="Flash" version="10"/>
                     <apiPlatform description="" name="AIR" version="1.5"/>
                  </apiVersion>
               </asMetadata>
            </prolog>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>flashx.textLayout.events.FlowElementMouseEvent.MOUSE_MOVE</apiEventType>
                  <adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc> 
	 Dispatched when the mouse passes over the link. 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="flashx.textLayout.elements:LinkElement_flashx.textLayout.events.FlowElementMouseEvent.MOUSE_UP_mouseUp">
            <apiName>mouseUp</apiName>
            <shortdesc> 
	 Dispatched when the mouse is released over a link.</shortdesc>
            <prolog>
               <asMetadata>
                  <apiVersion>
                     <apiLanguage version="3.0"/>
                     <apiPlatform description="" name="Flash" version="10"/>
                     <apiPlatform description="" name="AIR" version="1.5"/>
                  </apiVersion>
               </asMetadata>
            </prolog>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>flashx.textLayout.events.FlowElementMouseEvent.MOUSE_UP</apiEventType>
                  <adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc> 
	 Dispatched when the mouse is released over a link. 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="flashx.textLayout.elements:LinkElement_flashx.textLayout.events.FlowElementMouseEvent.MOUSE_DOWN_mouseDown">
            <apiName>mouseDown</apiName>
            <shortdesc> 
	 Dispatched when the mouse is pressed down over a link.</shortdesc>
            <prolog>
               <asMetadata>
                  <apiVersion>
                     <apiLanguage version="3.0"/>
                     <apiPlatform description="" name="Flash" version="10"/>
                     <apiPlatform description="" name="AIR" version="1.5"/>
                  </apiVersion>
               </asMetadata>
            </prolog>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>flashx.textLayout.events.FlowElementMouseEvent.MOUSE_DOWN</apiEventType>
                  <adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc> 
	 Dispatched when the mouse is pressed down over a link.
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.elements:TCYElement">
         <apiName>TCYElement</apiName>
         <shortdesc> 
	 The TCYElement (Tatechuuyoko - ta-tae-chu-yo-ko) class is a subclass of SubParagraphGroupElementBase that causes
	 text to draw horizontally within a vertical line.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiFinal/>
               <apiBaseClassifier>flashx.textLayout.elements:SubParagraphGroupElementBase</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> 
	 The TCYElement (Tatechuuyoko - ta-tae-chu-yo-ko) class is a subclass of SubParagraphGroupElementBase that causes
	 text to draw horizontally within a vertical line.  Traditionally, it is used to make small
	 blocks of non-Japanese text or numbers, such as dates, more readable.  TCY can be applied to 
	 horizontal text, but has no effect on drawing style unless and until it is turned vertically.
	 
	 TCY blocks which contain no text will be removed from the text flow during the normalization process.
	 <p>
	 In the example below, the image on the right shows TCY applied to the number 57, while the
	 image on the left has no TCY formatting.</p>
	           <p>
               <adobeimage alt="TCYElement" border="0" href="../../../images/textLayout_TCYElement.png"/>
	           </p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.elements:SubParagraphGroupElement">
         <apiName>SubParagraphGroupElement</apiName>
         <shortdesc> 
     The SubParagraphGroupElement is a grouping element for FlowLeafElements and other classes that extend SubParagraphGroupElementBase.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiFinal/>
               <apiBaseClassifier>flashx.textLayout.elements:SubParagraphGroupElementBase</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> 
     The SubParagraphGroupElement is a grouping element for FlowLeafElements and other classes that extend SubParagraphGroupElementBase.
	 
     </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.elements:IFormatResolver">
         <apiName>IFormatResolver</apiName>
         <shortdesc> Interface to a format resolver.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> Interface to a format resolver. An implementation allows you to attach a styling mechanism of your choosing, such as
	  Flex CSS styling and named styles, to a TextFlow.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.elements:TextFlow">
         <apiName>TextFlow</apiName>
         <shortdesc>
	 The TextFlow class is responsible for managing all the text content of a story.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface>
               <apiBaseClassifier>flashx.textLayout.elements:ContainerFormattedElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The TextFlow class is responsible for managing all the text content of a story. In TextLayout, text is stored in a 
	 hierarchical tree of elements. TextFlow is the root object of the element tree. All elements on the tree
	 derive from the base class, FlowElement. 
	 
	 <p>A TextFlow object can have ParagraphElement and DivElement objects as children. A div (DivElement object)
	 represents a group of paragraphs (ParagraphElement objects). A paragraph can have SpanElement, InlineGraphicElement, 
	 LinkElement, and TCYElement objects as children.</p>
	 
	           <p>A span (SpanElement) is a range of text in a paragraph that has the same attributes. An image 
	 (InlineGraphicElement) represents an arbitrary graphic that appears as a single character in a line of text. A 
	 LinkElement represents a hyperlink, or HTML <codeph>a</codeph> tag, and it can contain multiple spans. A TCYElement object
	 is used in Japanese text when there is a small run of text that appears perpendicular to the line, as in a horizontal
	 run within a vertical line. A TCYElement also can contain multiple spans.</p>
	 
	           <p>TextFlow also derives from the ContainerFormattedElement class, which is the root class for all container-level block 
	 elements.</p>
 	          <p>The following illustration shows the relationship of other elements, such as spans and paragraphs, to the TextFlow 
 	 object.</p>
 	          <p>
               <adobeimage alt="example TextFlow hierarchy"
                           href="../../../images/textLayout_textFlowHierarchy.gif"/>
            </p>
 	 
 	          <p>Each TextFlow object has a corresponding Configuration object that allows you to specify initial character and 
 	 paragraph formats and the initial container format. It also allows you to specify attributes for selection, links, 
 	 focus, and scrolling. When you supply a Configuration object as parameter to the <codeph>TextFlow()</codeph>
 	 constructor, it creates a read-only snapshot that you can access through the <codeph>TextFlow.configuration</codeph>
 	 property. After creation, you can't change the TextFlow's configuration. If you do not specify a Configuration, you 
 	 can access the default configuration through the <codeph>TextFlow.defaultConfiguration</codeph> property.</p>
	 
	        </apiDesc>
         <adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.UpdateCompleteEvent_updateComplete">
            <apiName>updateComplete</apiName>
            <shortdesc> Dispatched by a TextFlow object each time a container has had new DisplayObjects added or updated as a result of composition.</shortdesc>
            <prolog>
               <asMetadata>
                  <apiVersion>
                     <apiLanguage version="3.0"/>
                     <apiPlatform description="" name="Flash" version="10"/>
                     <apiPlatform description="" name="AIR" version="1.5"/>
                  </apiVersion>
               </asMetadata>
            </prolog>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <adobeApiEventClassifier>flashx.textLayout.events.UpdateCompleteEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc> Dispatched by a TextFlow object each time a container has had new DisplayObjects added or updated as a result of composition.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.DamageEvent_damage">
            <apiName>damage</apiName>
            <shortdesc> Dispatched by a TextFlow object each time it is damaged 
	 
	 You can use this event to find out that the TextFlow has changed, but do not access the TextFlow itself when this event 
	 is sent out.</shortdesc>
            <prolog>
               <asMetadata>
                  <apiVersion>
                     <apiLanguage version="3.0"/>
                     <apiPlatform description="" name="Flash" version="10"/>
                     <apiPlatform description="" name="AIR" version="1.5"/>
                  </apiVersion>
               </asMetadata>
            </prolog>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <adobeApiEventClassifier>flashx.textLayout.events.DamageEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc> Dispatched by a TextFlow object each time it is damaged 
	 
	 You can use this event to find out that the TextFlow has changed, but do not access the TextFlow itself when this event 
	 is sent out. This event is sent when TextFlow changes are partially complete, so it can be in an inconsistent state: 
	 some changes have been mad already, and other changes are still pending. Get the information you need from the event, and make 
	 required changes after control returns to your application.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.TextLayoutEvent_scroll">
            <apiName>scroll</apiName>
            <shortdesc> Dispatched by a TextFlow object after text is scrolled within a controller container.</shortdesc>
            <prolog>
               <asMetadata>
                  <apiVersion>
                     <apiLanguage version="3.0"/>
                     <apiPlatform description="" name="Flash" version="10"/>
                     <apiPlatform description="" name="AIR" version="1.5"/>
                  </apiVersion>
               </asMetadata>
            </prolog>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <adobeApiEventClassifier>flashx.textLayout.events.TextLayoutEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc> Dispatched by a TextFlow object after text is scrolled within a controller container.  
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.StatusChangeEvent_inlineGraphicStatusChanged">
            <apiName>inlineGraphicStatusChanged</apiName>
            <shortdesc> Dispatched when a InlineGraphicElement is resized due to having width or height as auto or percent 
	 and the graphic has finished loading.</shortdesc>
            <prolog>
               <asMetadata>
                  <apiVersion>
                     <apiLanguage version="3.0"/>
                     <apiPlatform description="" name="Flash" version="10"/>
                     <apiPlatform description="" name="AIR" version="1.5"/>
                  </apiVersion>
               </asMetadata>
            </prolog>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <adobeApiEventClassifier>flashx.textLayout.events.StatusChangeEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc> Dispatched when a InlineGraphicElement is resized due to having width or height as auto or percent 
	 and the graphic has finished loading. 
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.FlowElementMouseEvent_click">
            <apiName>click</apiName>
            <shortdesc> Dispatched when any link is clicked.</shortdesc>
            <prolog>
               <asMetadata>
                  <apiVersion>
                     <apiLanguage version="3.0"/>
                     <apiPlatform description="" name="Flash" version="10"/>
                     <apiPlatform description="" name="AIR" version="1.5"/>
                  </apiVersion>
               </asMetadata>
            </prolog>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc> Dispatched when any link is clicked. 
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.FlowElementMouseEvent_rollOut">
            <apiName>rollOut</apiName>
            <shortdesc> Dispatched when the mouse goes out of any link.</shortdesc>
            <prolog>
               <asMetadata>
                  <apiVersion>
                     <apiLanguage version="3.0"/>
                     <apiPlatform description="" name="Flash" version="10"/>
                     <apiPlatform description="" name="AIR" version="1.5"/>
                  </apiVersion>
               </asMetadata>
            </prolog>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc> Dispatched when the mouse goes out of any link. 
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.FlowElementMouseEvent_rollOver">
            <apiName>rollOver</apiName>
            <shortdesc> Dispatched when the mouse first enters any link.</shortdesc>
            <prolog>
               <asMetadata>
                  <apiVersion>
                     <apiLanguage version="3.0"/>
                     <apiPlatform description="" name="Flash" version="10"/>
                     <apiPlatform description="" name="AIR" version="1.5"/>
                  </apiVersion>
               </asMetadata>
            </prolog>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc> Dispatched when the mouse first enters any link. 
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.FlowElementMouseEvent_mouseMove">
            <apiName>mouseMove</apiName>
            <shortdesc> Dispatched when the mouse passes over any link.</shortdesc>
            <prolog>
               <asMetadata>
                  <apiVersion>
                     <apiLanguage version="3.0"/>
                     <apiPlatform description="" name="Flash" version="10"/>
                     <apiPlatform description="" name="AIR" version="1.5"/>
                  </apiVersion>
               </asMetadata>
            </prolog>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc> Dispatched when the mouse passes over any link. 
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.FlowElementMouseEvent_mouseUp">
            <apiName>mouseUp</apiName>
            <shortdesc> Dispatched when the mouse is released over any link.</shortdesc>
            <prolog>
               <asMetadata>
                  <apiVersion>
                     <apiLanguage version="3.0"/>
                     <apiPlatform description="" name="Flash" version="10"/>
                     <apiPlatform description="" name="AIR" version="1.5"/>
                  </apiVersion>
               </asMetadata>
            </prolog>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc> Dispatched when the mouse is released over any link. 
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.FlowElementMouseEvent_mouseDown">
            <apiName>mouseDown</apiName>
            <shortdesc> Dispatched when the mouse is pressed down over any link.</shortdesc>
            <prolog>
               <asMetadata>
                  <apiVersion>
                     <apiLanguage version="3.0"/>
                     <apiPlatform description="" name="Flash" version="10"/>
                     <apiPlatform description="" name="AIR" version="1.5"/>
                  </apiVersion>
               </asMetadata>
            </prolog>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc> Dispatched when the mouse is pressed down over any link. 
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.CompositionCompleteEvent_compositionComplete">
            <apiName>compositionComplete</apiName>
            <shortdesc> Dispatched after every recompose.</shortdesc>
            <prolog>
               <asMetadata>
                  <apiVersion>
                     <apiLanguage version="3.0"/>
                     <apiPlatform description="" name="Flash" version="10"/>
                     <apiPlatform description="" name="AIR" version="1.5"/>
                  </apiVersion>
               </asMetadata>
            </prolog>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <adobeApiEventClassifier>flashx.textLayout.events.CompositionCompleteEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc> Dispatched after every recompose. 
	
	</apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.SelectionEvent_selectionChange">
            <apiName>selectionChange</apiName>
            <shortdesc> Dispatched whenever the selection is changed.</shortdesc>
            <prolog>
               <asMetadata>
                  <apiVersion>
                     <apiLanguage version="3.0"/>
                     <apiPlatform description="" name="Flash" version="10"/>
                     <apiPlatform description="" name="AIR" version="1.5"/>
                  </apiVersion>
               </asMetadata>
            </prolog>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <adobeApiEventClassifier>flashx.textLayout.events.SelectionEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc> Dispatched whenever the selection is changed.  Primarily used to update selection-dependent user interface. 
	 It can also be used to alter the selection, but cannot be used to alter the TextFlow itself.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_COMPLETE_flowOperationComplete">
            <apiName>flowOperationComplete</apiName>
            <shortdesc>
	 
	 </shortdesc>
            <prolog>
               <asMetadata>
                  <apiVersion>
                     <apiLanguage version="3.0"/>
                     <apiPlatform description="" name="Flash" version="10"/>
                     <apiPlatform description="" name="AIR" version="1.5"/>
                  </apiVersion>
               </asMetadata>
            </prolog>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_COMPLETE</apiEventType>
                  <adobeApiEventClassifier>flashx.textLayout.events.FlowOperationEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_END_flowOperationEnd">
            <apiName>flowOperationEnd</apiName>
            <shortdesc>
	 
	 </shortdesc>
            <prolog>
               <asMetadata>
                  <apiVersion>
                     <apiLanguage version="3.0"/>
                     <apiPlatform description="" name="Flash" version="10"/>
                     <apiPlatform description="" name="AIR" version="1.5"/>
                  </apiVersion>
               </asMetadata>
            </prolog>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_END</apiEventType>
                  <adobeApiEventClassifier>flashx.textLayout.events.FlowOperationEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_BEGIN_flowOperationBegin">
            <apiName>flowOperationBegin</apiName>
            <shortdesc>
	 
	  </shortdesc>
            <prolog>
               <asMetadata>
                  <apiVersion>
                     <apiLanguage version="3.0"/>
                     <apiPlatform description="" name="Flash" version="10"/>
                     <apiPlatform description="" name="AIR" version="1.5"/>
                  </apiVersion>
               </asMetadata>
            </prolog>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_BEGIN</apiEventType>
                  <adobeApiEventClassifier>flashx.textLayout.events.FlowOperationEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 
	  </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.elements:OverflowPolicy">
         <apiName>OverflowPolicy</apiName>
         <shortdesc>
	  The OverflowPolicy class defines a set of constants for the overflowPolicy property
	  of the IConfiguration class.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiFinal/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	  The OverflowPolicy class defines a set of constants for the <codeph>overflowPolicy</codeph> property
	  of the IConfiguration class. This defines how the composer will treat lines at the end of the composition area.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.elements:BreakElement">
         <apiName>BreakElement</apiName>
         <shortdesc> 
	The BreakElement class defines a line break, which provides for creating a line break in the text without 
	creating a new paragraph.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiFinal/>
               <apiBaseClassifier>flashx.textLayout.elements:SpecialCharacterElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> 
	The BreakElement class defines a line break, which provides for creating a line break in the text without 
	creating a new paragraph. It inserts a U+2028 character in the text of the paragraph.
	
	<p>
               <b>Note</b>: This class exists primarily to support break  tags in MXML markup. To create line breaks, 
	you can add newline characters (\n) directly into the text like this:</p>
	
	           <codeblock rev="3.0">
	spanElement1.text += '\n';
	</codeblock>
	
	In markup, either FXG, TEXT_LAYOUT_FORMAT or MXML, you can simply insert a  where you want the break.
	
	</apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.elements:GlobalSettings">
         <apiName>GlobalSettings</apiName>
         <shortdesc> Configuration that applies to all TextFlow objects.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> Configuration that applies to all TextFlow objects.
     </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.elements:InlineGraphicElement">
         <apiName>InlineGraphicElement</apiName>
         <shortdesc> The InlineGraphicElement class handles graphic objects that display inline in the text.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiFinal/>
               <apiBaseClassifier>flashx.textLayout.elements:FlowLeafElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> The InlineGraphicElement class handles graphic objects that display inline in the text. 
     
     <p>You can embed a graphic or any DisplayObject or specify a URl for the location of the graphic. 
     The <codeph>height</codeph> and <codeph>width</codeph> properties of InlineGraphicElement control the actual size 
     of the graphic to display.  These values also control how much space to allocate
     for the graphic in the TextLine object that contains the graphic.
     The <codeph>height</codeph> and <codeph>width</codeph> properties each can be one of:</p>
            <ol>
               <li>A number of pixels</li>
               <li>A percent of the measured size of the image</li>
               <li>The constant, "auto", which computes the size (Default value)</li>
            </ol>
     There are three properties, or accessors, pertaining to the width and height of a graphic:
     <ul>
               <li>The <codeph>width</codeph> and <codeph>height</codeph> properties</li>
               <li>The <codeph>measuredWidth</codeph> and <codeph>measuredHeight</codeph> properties, which are the width or height of the graphic at load time</li>
               <li>The <codeph>actualWidth</codeph> and <codeph>actualHeight</codeph> properties, which are the actual display and compose width and height of the graphic as computed from <codeph>width</codeph> or <codeph>height</codeph> and <codeph>measuredWidth</codeph> or <codeph>measuredHeight</codeph>
               </li>
            </ul>
            <p>The values of the <codeph>actualWidth</codeph> and <codeph>actualHeight</codeph> properties are always zero until the graphic 
     is loaded.</p>
     
            <p>If <codeph>source</codeph> is specified as a URI, the graphic is loaded asynchronously. If it's a DisplayObject, TextLayout uses the <codeph>width</codeph> and 
     <codeph>height</codeph> at the time the graphic is set into the InlineGraphicElement object as <codeph>measuredHeight</codeph> and <codeph>measuredWidth</codeph>; 
     its width and height are read immediately.</p>
            <p>
               <b>Notes</b>: For graphics that are loaded asynchronously the user must listen for a 
     StatusChangeEvent.INLINE_GRAPHIC_STATUS_CHANGE event on the TextFlow and call <codeph>IFlowComposer.updateAllControllers()</codeph> to have the 
     graphic appear. The value of <codeph>measuredWidth</codeph> and <codeph>measuredHeight</codeph> for graphics that are in the 
     process of loading is zero.</p>
     
            <p>Some inline graphics are animations or videos that possibly have audio. They begin to run the first time they are composed after they finish loading.  
     They don't stop running until the flowComposer on the TextFlow is set to null.  At that time they are stopped and unloaded.</p>
     
     The following restrictions apply to InLineGraphicElement objects:
     <ol>
               <li>On export of TLFMarkup, source is converted to a string. If the graphic element is 
          a class, the Text Layout Framework can't export it properly</li>.
      <li>When doing a copy/paste operation of an InlineGraphicElement, if source can't be 
          used to create a new InLineGraphicElement, it won't be pasted.  For example if 
          source is a DisplayObject, or if the graphic is set directly, it can't be 
          duplicated.  Best results are obtained if the source is the class of an embedded graphic 
          though that doesn't export/import.</li>
               <li>InLineGraphicElement objects work in the factory (TextFlowTextLineFactory) only if 
          the source is a class or if you explicitly set the graphic to a loaded graphic. 
          InlineGraphic objects that require delayed loads generally do not show up.</li>
            </ol>
         </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.elements:FlowLeafElement">
         <apiName>FlowLeafElement</apiName>
         <shortdesc> Base class for FlowElements that appear at the lowest level of the flow hierarchy.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>flashx.textLayout.elements:FlowElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> Base class for FlowElements that appear at the lowest level of the flow hierarchy. FlowLeafElement objects have
	no children and include InlineGraphicElement objects and SpanElement objects.
	
	</apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.elements:Configuration">
         <apiName>Configuration</apiName>
         <shortdesc> 
	The Configuration class is a primary point of integration between the Text Layout Framework and an application.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>flashx.textLayout.elements:IConfiguration</apiBaseInterface>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> 
	The Configuration class is a primary point of integration between the Text Layout Framework and an application. You can 
	include a Configuration object as a parameter to the <codeph>TextFlow()</codeph> constructor when you create a new TextFlow
	instance. It allows the application to initially control how the Text Layout Framework behaves.
	
	<p>The Configuration class allows you to specify initial, paragraph and container formats for the text flow 
	through the <codeph>textFlowInitialFormat</codeph> property. It also allows you to specify initial format attributes for links, selection,
	scrolling, and for handling the Tab and Enter keys.</p>
	
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.elements:FlowGroupElement">
         <apiName>FlowGroupElement</apiName>
         <shortdesc> 
	 The FlowGroupElement class is the base class for FlowElement objects that can have an array of children.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>flashx.textLayout.elements:FlowElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> 
	 The FlowGroupElement class is the base class for FlowElement objects that can have an array of children. These classes include
	 TextFlow, ParagraphElement, DivElement, and LinkElement.
	 
	 <p>You cannot create a FlowGroupElement object directly. Invoking <codeph>new FlowGroupElement()</codeph> throws an error 
 	 exception.</p>
 	 
 	       </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.elements:SpanElement">
         <apiName>SpanElement</apiName>
         <shortdesc> 
	The SpanElement class represents a run of text that has a single set of formatting attributes applied.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>flashx.textLayout.elements:FlowLeafElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> 
	The SpanElement class represents a run of text that has a single set of formatting attributes applied. SpanElement 
	objects contain the text in a paragraph. A simple paragraph (ParagraphElement) includes one or more SpanElement objects. 
	
	<p>A ParagraphElement will have a single SpanElement object if all the text in the paragraph shares the same set of 
	attributes. It has multiple SpanElement objects if the text in the paragraph has multiple formats.</p>
	
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.elements:LinkState">
         <apiName>LinkState</apiName>
         <shortdesc>
	  The LinkState class defines a set of constants for the linkState property
	  of the LinkElement class.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiFinal/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	  The LinkState class defines a set of constants for the <codeph>linkState</codeph> property
	  of the LinkElement class. 
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.elements:DivElement">
         <apiName>DivElement</apiName>
         <shortdesc> 
	 The DivElement class defines an element for grouping paragraphs (ParagraphElement objects).</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiFinal/>
               <apiBaseClassifier>flashx.textLayout.elements:ContainerFormattedElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> 
	 The DivElement class defines an element for grouping paragraphs (ParagraphElement objects). If you want a group of paragraphs
	 to share the same formatting attributes, you can group them in a DivElement object and apply the attributes to it. The paragraphs
	 will inherit the attributes from the DivElement object.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.elements:FlowElement">
         <apiName>FlowElement</apiName>
         <shortdesc>
 The text in a flow is stored in tree form with the elements of the tree representing logical
 divisions within the text.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>flashx.textLayout.formats:ITextLayoutFormat</apiBaseInterface>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
 The text in a flow is stored in tree form with the elements of the tree representing logical
 divisions within the text. The FlowElement class is the abstract base class of all the objects in this tree.
 FlowElement objects represent paragraphs, spans of text within paragraphs, and
 groups of paragraphs.
 
 <p>The root of a composable FlowElement tree is always a TextFlow object. Leaf elements of the tree are always 
 subclasses of the FlowLeafElement class. All leaves arranged in a composable TextFlow have a ParagraphElement ancestor.
 </p> 
 
            <p>You cannot create a FlowElement object directly. Invoking <codeph>new FlowElement()</codeph> throws an error 
 exception.</p>
 
         </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.elements:TextRange">
         <apiName>TextRange</apiName>
         <shortdesc>
	 A read only class that describes a range of contiguous text.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 A read only class that describes a range of contiguous text. Such a range occurs when you select a
	 section of text. The range consists of the anchor point of the selection, <codeph>anchorPosition</codeph>,
	 and the point that is to be modified by actions, <codeph>activePosition</codeph>.  As block selections are 
	 modified and extended <codeph>anchorPosition</codeph> remains fixed and <codeph>activePosition</codeph> is modified.  
	 The anchor position may be placed in the text before or after the active position.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.elements:TabElement">
         <apiName>TabElement</apiName>
         <shortdesc> 
	 The TabElement class represents a &amp;lt;tab/&amp;gt; in the text flow.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiFinal/>
               <apiBaseClassifier>flashx.textLayout.elements:SpecialCharacterElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> 
	 The TabElement class represents a &lt;tab/&gt; in the text flow. You assign tab stops as an array of TabStopFormat objects to the 
	 <codeph>ParagraphElement.tabStops</codeph> property.
	 
	 <p>
               <b>Note</b>:This class exists primarily to support &lt;tab/&gt; in MXML markup. You can add tab characters (\t) directly 
	 into the text like this:</p>
	 
	           <codeblock rev="3.0">
	 spanElement1.text += '\t';
	 </codeblock>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.elements:ListElement">
         <apiName>ListElement</apiName>
         <shortdesc> 
	 The List class is used for grouping together items into a numbered or unnumbered list.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>flashx.textLayout.elements:ContainerFormattedElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> 
	 The List class is used for grouping together items into a numbered or unnumbered list. A ListElement's children may be of type ListItemElement,
	 ListElement, ParagraphElement, or DivElement. 
	 
	 <p>Each ListElement creates a scope with an implicit counter 'ordered'.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.elements:SpecialCharacterElement">
         <apiName>SpecialCharacterElement</apiName>
         <shortdesc> The SpecialCharacterElement class is an abstract base class for elements that represent special characters.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>flashx.textLayout.elements:SpanElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> The SpecialCharacterElement class is an abstract base class for elements that represent special characters.
	 
	 <p>You cannot create a SpecialCharacterElement object directly. Invoking <codeph>new SpecialCharacterElement()</codeph>
	 throws an error exception.</p>
	 
	        </apiDesc>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="flashx.textLayout.events">
      <apiName>flashx.textLayout.events</apiName>
      <apiClassifier id="flashx.textLayout.events:StatusChangeEvent">
         <apiName>StatusChangeEvent</apiName>
         <shortdesc> 
	 A TextFlow instance dispatches this event when the status of a FlowElement changes.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>flash.events:Event</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> 
	 A TextFlow instance dispatches this event when the status of a FlowElement changes. 
	 This event can be used to detect when an inline graphic element has
	 completed loading. You can use your event handler to recompose the text flow
	 based on the presence of the newly loaded inline graphic element.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.events:FlowElementMouseEvent">
         <apiName>FlowElementMouseEvent</apiName>
         <shortdesc> A link element dispatches this event when it detects mouse activity.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>flash.events:Event</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> A link element dispatches this event when it detects mouse activity.
	 The Text Layout Framework includes this special version of mouse events
	 because mouse events are generally unwanted when a flow element is
	 embedded in an editable text flow, and because link elements are not in
	 the display list (they are not DisplayObjects).
	 <p>You can add an event listener to a link element to listen for this
	 type of event. If you choose to cancel the event by calling
	 <codeph>Event.preventDefault()</codeph>, the default behavior associated
	 with the event will not occur.
	 </p>
	           <p>If you choose not to add an event listener to the link element, or
	 your event listener function does not cancel the behavior, the 
	 event is again dispatched, but this time by the link element's
	 associated TextFlow instance rather than by the link element itself. 
	 This provides a second opportunity to listen for this event with
	 an event listener attached to the TextFlow. 
	 </p>
	           <p>FlowElementMouseEvents are
	 dispatched only when the text cannot be edited or when the control key 
	 is pressed concurrently with the mouse activity.</p>
	           <p>
	 The following six event types are dispatched only when the text
	 cannot be edited or when the control key is pressed:
	 <ul>
	                 <li>
                     <codeph>FlowElementMouseEvent.CLICK</codeph>
                  </li>
	                 <li>
                     <codeph>FlowElementMouseEvent.MOUSE_DOWN</codeph>
                  </li>
	                 <li>
                     <codeph>FlowElementMouseEvent.MOUSE_UP</codeph>
                  </li>
	                 <li>
                     <codeph>FlowElementMouseEvent.MOUSE_MOVE</codeph>
                  </li>
	                 <li>
                     <codeph>FlowElementMouseEvent.ROLL_OVER</codeph>
                  </li>
	                 <li>
                     <codeph>FlowElementMouseEvent.ROLL_OUT</codeph>
                  </li>
	              </ul>
	           </p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.events:CompositionCompleteEvent">
         <apiName>CompositionCompleteEvent</apiName>
         <shortdesc> 
	 A TextFlow instance dispatches this event after a compose operation completes.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>flash.events:Event</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> 
	 A TextFlow instance dispatches this event after a compose operation completes. 
	 Each text container has two states: composition and display. This event notifies
	 you when the composition phase has ended. This provides an opportunity to make any
	 necessary and appropriate changes to the container before you display the text. 
	 For example, you can use this event to add highlighting of certain words or
	 characters in the text flow before the text is displayed.
	 
	 <p>The three main methods that dispatch this event are <codeph>compose()</codeph>, 
	 <codeph>updateToController()</codeph>, and <codeph>updateAllControllers()</codeph>.
	 All three of these methods are in the StandardFlowComposer class.</p>
	 
	           <p>
               <b>Note: </b>If the event is dispatched by the
	 <codeph>updateAllControllers()</codeph> method, do not call 
	 <codeph>updateAllControllers()</codeph> again in your event handler function.
	 Such a call would be a recursive call because the <codeph>updateAllControllers()</codeph> 
	 method executes both the composition and display steps. The <codeph>updateAllControllers()</codeph>
	 dispatches this event after composition completes, but before the display step executes.
	 The same reasoning applies to the <codeph>updateToController()</codeph> method.
	 </p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.events:DamageEvent">
         <apiName>DamageEvent</apiName>
         <shortdesc> 
	 A TextFlow instance dispatches this each time it is marked as damaged.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>flash.events:Event</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> 
	 A TextFlow instance dispatches this each time it is marked as damaged.  Damage can be caused by changes to the model or changes to the layout.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.events:SelectionEvent">
         <apiName>SelectionEvent</apiName>
         <shortdesc> 
	 A TextFlow instance dispatches a SelectionEvent object when
	 an EditManager or SelectionManager changes or selects a range of text.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>flash.events:Event</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> 
	 A TextFlow instance dispatches a SelectionEvent object when
	 an EditManager or SelectionManager changes or selects a range of text. 
	 For example, this event is dispatched not only when a range of text is
	 selected, but also when the selection changes because the
	 user clicks elsewhere in the text flow. Moreover, this
	 event is also dispatched when an EditManager changes
	 the text or text formatting within a range of text.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.events:FlowOperationEvent">
         <apiName>FlowOperationEvent</apiName>
         <shortdesc> A TextFlow instance dispatches this event just before an operation commences
	 and again just after an operation completes.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>flash.events:Event</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> A TextFlow instance dispatches this event just before an operation commences
	 and again just after an operation completes. Although the event object
	 dispatched in both cases is an instance of FlowOperationEvent, the events
	 dispatched before and after an operation differ in significant ways.
	 
	 <p>Before any operation is carried out, a TextFlow object dispatches a FlowOperationEvent
	 with its <codeph>type</codeph> property set to <codeph>FlowOperationEvent.FLOW_OPERATION_BEGIN.</codeph>
	 You can determine what type of operation is about to commence by checking
	 the <codeph>operation</codeph> property. Events of type FLOW_OPERATION_BEGIN are
	 cancellable, which means that if you decide that the operation should not proceed,
	 you can call <codeph>Event.PreventDefault()</codeph> to cancel the operation.
	 If you cancel the operation, the operation is not performed and the 
	 FLOW_OPERATION_END event is not dispatched. You may also choose to call back into the
	 EditManager to do another operation before the operation that triggered the event is done. If you do
	 this, the operations you initiate in your event handler will be undone as a single
	 operation with the operation that triggered the event.</p>
	 
	           <p>If you allow the operation to proceed, TextFlow will dispatch a FlowOperationEvent
	 upon completion of the operation with its <codeph>type</codeph> property set to
	 <codeph>FlowOperationEvent.FLOW_OPERATION_END</codeph>. This event is dispatched
	 before Flash Player throws any errors that may have occurred as a result of the
	 operation. This gives you an opportunity to process the error before Flash Player
	 throws the error. You can access the error through the event's <codeph>error</codeph>
	 property. If you choose to handle the error in your event handler, you can prevent
	 Flash Player from throwing the error by cancelling the FLOW_OPERATION_END event
	 by calling <codeph>Event.preventDefault()</codeph>. You may also choose to call back into the
	 EditManager to do some additional operations. If you do this, the operations that result
	 will be undone as a unit with the operation that triggered the event.
	 </p> 
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.events:ScrollEvent">
         <apiName>ScrollEvent</apiName>
         <shortdesc>
	  Represents events that are dispatched when the TextFlow does automatic scrolling.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>flashx.textLayout.events:TextLayoutEvent</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	  Represents events that are dispatched when the TextFlow does automatic scrolling.
	 
	  </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.events:TextLayoutEvent">
         <apiName>TextLayoutEvent</apiName>
         <shortdesc>
	 A TextLayoutEvent instance represents an event, such as the 
	 TextLayoutEvent.SCROLL event, that does not require
	 custom properties.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>flash.events:Event</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 A TextLayoutEvent instance represents an event, such as the 
	 <codeph>TextLayoutEvent.SCROLL</codeph> event, that does not require
	 custom properties. 
	 <p>A scroll event is represented by a TextLayoutEvent instance with its 
	 <codeph>type</codeph> property set to <codeph>TextLayoutEvent.SCROLL</codeph>.
	 A class specifically for scroll events is not necessary because there are
	 no custom properties for a scroll event, as there are for the other
	 events that have specific event classes.
	 If a new text layout event is needed, and the event does not require
	 custom properties, the new event will also be represented by a
	 TextLayoutEvent object, but with its <codeph>type</codeph> property
	 set to a new static constant.
	 </p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.events:ScrollEventDirection">
         <apiName>ScrollEventDirection</apiName>
         <shortdesc>
      Constants for the values of the direction property
      of a ScrollEvent.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiFinal/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
      Constants for the values of the <codeph>direction</codeph> property
      of a ScrollEvent.
     
      </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.events:UpdateCompleteEvent">
         <apiName>UpdateCompleteEvent</apiName>
         <shortdesc> 
	 A TextFlow instance dispatches this event after any of its containers completes 
	 an update.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>flash.events:Event</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> 
	 A TextFlow instance dispatches this event after any of its containers completes 
	 an update. Each text container has two states: composition and display. This 
	 event notifies you when the display phase has ended. This provides an 
	 opportunity to make any necessary changes to the container when it is ready to
	 be displayed, but hasn't yet been painted to the screen.
	 
	 </apiDesc>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="flashx.textLayout.factory">
      <apiName>flashx.textLayout.factory</apiName>
      <apiClassifier id="flashx.textLayout.factory:TruncationOptions">
         <apiName>TruncationOptions</apiName>
         <shortdesc> 
	 The TruncationOptions class specifies options for limiting the number of lines of text 
	 created by a text line factory and for indicating when lines have been left out.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiFinal/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> 
	 The TruncationOptions class specifies options for limiting the number of lines of text 
	 created by a text line factory and for indicating when lines have been left out.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.factory:StringTextLineFactory">
         <apiName>StringTextLineFactory</apiName>
         <shortdesc>
 The StringTextLineFactory class provides a simple way to create TextLines from a string.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>flashx.textLayout.factory:TextLineFactoryBase</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
 The StringTextLineFactory class provides a simple way to create TextLines from a string. 
 
 <p>The text lines are static and are created using a single format and a single paragraph. 
 The lines are created to fit in the specified bounding rectangle.</p>
 
            <p>The StringTextLineFactory provides an efficient way to create TextLines, since it reuses single TextFlow,
 ParagraphElement, SpanElement, and ContainerController objects across many repeated invocations. You can create a
 single factory, and use it again and again. You can also reuse all the parts that are the same each time
 you call it; for instance, you can reuse the various formats and the bounds.</p> 
 
            <p>
               <b>Note:</b> To create static lines that use multiple formats or paragraphs, or that include
 inline graphics, use a TextFlowTextLineFactory and a TextFlow object. </p>
 
            <p>
               <b>Note:</b> The StringTextLineFactory ignores the truncationIndicatorFormat property set in the truncationOptions when truncating text.</p>
  
         </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.factory:TextLineFactoryBase">
         <apiName>TextLineFactoryBase</apiName>
         <shortdesc>
 The TextLineFactoryBase class serves as the base class for the Text Layout Framework text line factories.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
 The TextLineFactoryBase class serves as the base class for the Text Layout Framework text line factories.
 
 <p>
               <b>Note:</b> Application code does not typically need to create or use a TextLineFactoryBase object directly.
 Use one of the derived text factory classes instead.</p>
  
         </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.factory:TextFlowTextLineFactory">
         <apiName>TextFlowTextLineFactory</apiName>
         <shortdesc>
 The TextFlowTextLineFactory class provides a simple way to create TextLines for displaying text from a text flow.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>flashx.textLayout.factory:TextLineFactoryBase</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
 The TextFlowTextLineFactory class provides a simple way to create TextLines for displaying text from a text flow.
 
 <p>The text lines are static and created fit in a single bounding rectangle, but can have multiple paragraphs and formats as well as
 inline graphics. To create TextLine objects directly from a string, use StringTextLineFactory.</p> 
 
            <p>
               <b>Note:</b> When using inline graphics, the <codeph>source</codeph> property of the InlineGraphicElement object 
 must either be an instance of a DisplayObject or a Class object representing an embedded asset. 
 URLRequest objects cannot be used. The width and height of the inline graphic at the time the line 
 is created is used to compose the flow. </p>
 
         </apiDesc>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="flashx.textLayout.formats">
      <apiName>flashx.textLayout.formats</apiName>
      <apiClassifier id="flashx.textLayout.formats:TLFTypographicCase">
         <apiName>TLFTypographicCase</apiName>
         <shortdesc>
	  Defines values for the typographicCase property of the TextLayoutFormat
	  class.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiFinal/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	  Defines values for the <codeph>typographicCase</codeph> property of the TextLayoutFormat
	  class. 
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.formats:BreakStyle">
         <apiName>BreakStyle</apiName>
         <shortdesc>
	 
	 </shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiFinal/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.formats:VerticalAlign">
         <apiName>VerticalAlign</apiName>
         <shortdesc>
	  Defines values for the verticalAlign property of the TextLayoutFormat class.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiFinal/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	  Defines values for the <codeph>verticalAlign</codeph> property of the TextLayoutFormat class. Specifies how 
	  TextFlow elements align with their containers.  
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.formats:ColorName">
         <apiName>ColorName</apiName>
         <shortdesc>
	  Defines a constant for specifying that the value of the color property
	  of the TextLayoutFormat class is "transparent".</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiFinal/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	  Defines a constant for specifying that the value of the <codeph>color</codeph> property
	  of the <codeph>TextLayoutFormat</codeph> class is "transparent".
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.formats:ListStylePosition">
         <apiName>ListStylePosition</apiName>
         <shortdesc>
	 Defines values for setting the listStylePosition property.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiFinal/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Defines values for setting the <codeph>listStylePosition</codeph> property. These values control the placement
	 of a list item marker relative to the list item.
	 
	  </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.formats:BaselineOffset">
         <apiName>BaselineOffset</apiName>
         <shortdesc>
	  Defines values for the firstBaselineOffset property
	  of the TextLayoutFormat and ContainerFormattedElement classes.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiFinal/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	  Defines values for the <codeph>firstBaselineOffset</codeph> property
	  of the <codeph>TextLayoutFormat</codeph> and <codeph>ContainerFormattedElement</codeph> classes. 
	  Determines the offset from the top inset of the container
	  to the baseline of the first line. Baseline offset may be specified as 
	  the ascent of the line, the height of the line, or an auto generated amount.
	  <p>
	              <adobeimage alt="firstBaselineOffset_1" border="0"
                           href="../../../images/textLayout_FBO1.jpg"/>
	              <adobeimage alt="firstBaselineOffset_2" border="0"
                           href="../../../images/textLayout_FBO2.jpg"/>
	              <adobeimage alt="firstBaselineOffset_3" border="0"
                           href="../../../images/textLayout_FBO3.jpg"/>
	              <adobeimage alt="firstBaselineOffset_4" border="0"
                           href="../../../images/textLayout_FBO4.jpg"/>
	           </p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.formats:BaselineShift">
         <apiName>BaselineShift</apiName>
         <shortdesc>
	  Defines constants for specifying subscript or superscript in the baselineShift property
	  of the TextLayoutFormat class.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiFinal/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	  Defines constants for specifying subscript or superscript in the <codeph>baselineShift</codeph> property
	  of the <codeph>TextLayoutFormat</codeph> class. You can specify baseline shift as an absolute pixel offset, 
	  a percentage of the current point size, or the constants SUPERSCRIPT or 
	  SUBSCRIPT. Positive values shift the line up for horizontal text (right for vertical) and negative values 
	  shift it down for horizontal (left for vertical). 
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.formats:JustificationRule">
         <apiName>JustificationRule</apiName>
         <shortdesc>
	  Defines values for setting the justificationRule property
	  of the TextLayoutFormat class.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiFinal/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	  Defines values for setting the <codeph>justificationRule</codeph> property
	  of the TextLayoutFormat class. Default value is SPACE, which accomplishes justification by adding 
	  extra space to the space characters. When you use EAST_ASIAN, Japanese style leading is employed, which 
	  applies bottom-down as opposed to top-up, which is used in Roman text. The spacing of punctuation is also 
	  different. In the Roman version, the comma and Japanese periods take a full character's width but only half 
	  in East Asian. Additionally, the spacing between sequential punctuation marks becomes tighter, obeying traditional 
	  East Asian typographic conventions. Also note the leading, applied to the second line of the paragraphs in the 
	  example below. In the East Asian version, the last two lines push left. In the Roman version, the second and 
	  following lines push left.
	  <p>
               <adobeimage alt="justificationRule" href="../../../images/textLayout_justificationrule.png"/>
            </p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.formats:TabStopFormat">
         <apiName>TabStopFormat</apiName>
         <shortdesc>
	 The TabStopFormat class represents the properties of a tab stop in a paragraph.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>flashx.textLayout.formats:ITabStopFormat</apiBaseInterface>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The TabStopFormat class represents the properties of a tab stop in a paragraph. You can set the <codeph>TextLayoutFormat.tabstops</codeph> property to an array of TabStopFormat objects.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.formats:BackgroundColor">
         <apiName>BackgroundColor</apiName>
         <shortdesc>
	  Defines a constant for specifying that the value of the backgroundColor property
	  of the TextLayoutFormat class is "transparent".</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiFinal/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	  Defines a constant for specifying that the value of the <codeph>backgroundColor</codeph> property
	  of the <codeph>TextLayoutFormat</codeph> class is "transparent".
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.formats:Direction">
         <apiName>Direction</apiName>
         <shortdesc>
	  Defines values for setting the direction property
	  of the TextLayoutFormat class.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiFinal/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	  Defines values for setting the <codeph>direction</codeph> property
	  of the <codeph>TextLayoutFormat</codeph> class. Left-to-right reading order 
	  is used in Latin-style scripts. Right-to-left reading order is used with scripts such as Arabic or Hebrew. 
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.formats:WhiteSpaceCollapse">
         <apiName>WhiteSpaceCollapse</apiName>
         <shortdesc>
	  Defines values for setting the whiteSpaceCollapse property
	  of the TextLayoutFormat class.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiFinal/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	  Defines values for setting the <codeph>whiteSpaceCollapse</codeph> property
	  of the <codeph>TextLayoutFormat</codeph> class. 
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.formats:ITextLayoutFormat">
         <apiName>ITextLayoutFormat</apiName>
         <shortdesc>
	 This interface provides read access to FlowElements-related properties.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 This interface provides read access to FlowElements-related properties.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.formats:TextLayoutFormat">
         <apiName>TextLayoutFormat</apiName>
         <shortdesc>
	 The TextLayoutFormat class holds all of the text layout properties.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>flashx.textLayout.formats:ITextLayoutFormat</apiBaseInterface>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The TextLayoutFormat class holds all of the text layout properties. These properties affect the format and style of a text flow at the container level, paragraph level, and text level.  Both the ContainerController class and the FlowElement base class have <codeph>format</codeph> properties that enable you to assign a TextLayoutFormat instance to them. Assign a TextLayoutFormat object to a container to affect the format of all of the container's content. Assign a TextLayoutFormat object to a FlowElement descendant to specify formatting for that particular element: TextFlow, ParagraphElement, DivElement, SpanElement, InlineGraphicElement, LinkElement, and TCYElement.
	 In addition to the <codeph>format</codeph> property, these classes also define each of the individual TextLayoutFormat properties so that you can override the setting of a particular style property for that element, if you wish. <p>Because you can set a given style at multiple levels, it is possible to have conflicts. For example, the color of the text at the TextFlow level could be set to black while a SpanElement object sets it to blue. The general rule is that the setting at the lowest level on the text flow tree takes precedence. So if the ligature level is set for a TextFlow instance and also set for a DivElement, the DivElement setting takes precedence. </p>
            <p>Cascading styles refers to the process of adopting styles from a higher level in the text flow if a style value is undefined at a lower level. When a style is undefined on an element at the point it is about to be rendered, it either takes its default value or the value cascades or descends from the value on a parent element. For example, if the transparency (<codeph>textAlpha</codeph> property) of the text is undefined on a SpanElement object, but is set on the TextFlow, the value of the <codeph>TextFlow.textAlpha</codeph> property cascades to the SpanElement object and is applied to the text for that span. The result of the cascade, or the sum of the styles that is applied to the element, is stored in the element's <codeph>computedFormat</codeph> property.</p>
            <p>In the same way, you can apply user styles using the <codeph>userStyles</codeph> property of the ContainerController and FlowElement classes. This  property allows you to read or write a dictionary of user styles and apply its settings to a container or a text flow element. The user styles dictionary is an object that consists of <i>stylename-value</i> pairs. Styles specified by the <codeph>userStyles</codeph> property take precedence over all others.</p>
            <p>Most styles that are undefined inherit the value of their immediate parent during a cascade. A small number of styles, however, do not inherit their parent�s value and take on their default values instead.</p>
            <p>
               <b>Style properties that adopt their default values, if undefined, include:</b> 
               <codeph>backgroundAlpha</codeph>, <codeph>backgroundColor</codeph>, <codeph>columnCount</codeph>, <codeph>columnGap</codeph>, <codeph>columnWidth</codeph>, <codeph>lineBreak</codeph>, <codeph>paddingBottom</codeph>, <codeph>paddingLeft</codeph>, <codeph>paddingRight</codeph>, <codeph>paddingTop</codeph>, <codeph>verticalAlign</codeph>
            </p>.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.formats:Float">
         <apiName>Float</apiName>
         <shortdesc>
      Defines values for the float property
	  of the InlineGraphicElement class.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiFinal/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
      Defines values for the <codeph>float</codeph> property
	  of the InlineGraphicElement class. 
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.formats:LineBreak">
         <apiName>LineBreak</apiName>
         <shortdesc> Defines values for setting the lineBreak property of TextLayoutFormat to
	  specify how lines are broken within wrapping text.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiFinal/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> Defines values for setting the <codeph>lineBreak</codeph> property of <codeph>TextLayoutFormat</codeph> to
	  specify how lines are broken within wrapping text.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.formats:BlockProgression">
         <apiName>BlockProgression</apiName>
         <shortdesc>
	  Defines values for the blockProgression property
	  of the TextLayouFormat class.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiFinal/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	  Defines values for the <codeph>blockProgression</codeph> property
	  of the <codeph>TextLayouFormat</codeph> class. BlockProgression specifies the direction in 
	  which lines are placed in the container.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.formats:Suffix">
         <apiName>Suffix</apiName>
         <shortdesc>
     Defines values for setting the suffix property of a ListMarkerFormat.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
     Defines values for setting the <codeph>suffix</codeph> property of a ListMarkerFormat. 
     
      </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.formats:IListMarkerFormat">
         <apiName>IListMarkerFormat</apiName>
         <shortdesc>
	 This interface provides read access to ListMarkerFormat properties.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>flashx.textLayout.formats:ITextLayoutFormat</apiBaseInterface>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 This interface provides read access to ListMarkerFormat properties.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.formats:ClearFloats">
         <apiName>ClearFloats</apiName>
         <shortdesc>
	  Defines values for setting the clear property
      of the TextLayoutFormat class.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiFinal/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	  Defines values for setting the <codeph>clear</codeph> property
      of the <codeph>TextLayoutFormat</codeph> class. This property controls 
	  how text wraps around floats.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.formats:TextAlign">
         <apiName>TextAlign</apiName>
         <shortdesc>
	  Defines values for setting the textAlign and textAlignLast properties
	  of the TextLayoutFormat class.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiFinal/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	  Defines values for setting the <codeph>textAlign</codeph> and <codeph>textAlignLast</codeph> properties
	  of the TextLayoutFormat class. The values describe the alignment of lines in the paragraph relative to the 
	  container.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.formats:LeadingModel">
         <apiName>LeadingModel</apiName>
         <shortdesc>
	  Defines values for setting the leadingModel property
	  of the TextLayoutFormat class, composed of valid combinations of leading basis and leading direction.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiFinal/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	  Defines values for setting the <codeph>leadingModel</codeph> property
	  of the <codeph>TextLayoutFormat</codeph> class, composed of valid combinations of leading basis and leading direction.
	  Leading basis describes which baselines determine the leading (or <codeph>lineHeight</codeph>) of lines in a paragraph.
	  Leading direction specifies whether the <codeph>lineHeight</codeph> property refers to the distance of a line's 
	  baseline from that of the line before it or the line after it. 
	  <p>
	              <adobeimage alt="baselines" border="0" href="../../../images/textLayout_baselines.jpg"/>
	              <adobeimage alt="leadingDirection_1" border="0" href="../../../images/textLayout_LD1.jpg"/>
	              <adobeimage alt="leadingDirection_2" border="0" href="../../../images/textLayout_LD2.jpg"/>
	              <adobeimage alt="leadingDirection_3" border="0" href="../../../images/textLayout_LD3.jpg"/>
	           </p>
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.formats:TextJustify">
         <apiName>TextJustify</apiName>
         <shortdesc>
	  Defines values for setting the textJustify property of the TextLayoutFormat class.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiFinal/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	  Defines values for setting the <codeph>textJustify</codeph> property of the TextLayoutFormat class. 
	  Default value is INTER_WORD, meaning that extra space in justification is added to the space characters.
	  DISTRIBUTE specifies that extra space is added both to space characters and between individual
	  letters. Use these values only when setting <codeph>justificationRule</codeph> to SPACE.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.formats:FormatValue">
         <apiName>FormatValue</apiName>
         <shortdesc>
	  Defines values for specifying that a formatting property is to inherit its parent's value or have it's value
	  generated automatically.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiFinal/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	  Defines values for specifying that a formatting property is to inherit its parent's value or have it's value
	  generated automatically. The <codeph>INHERIT</codeph> constant specifies that a property inherits its parent's value 
	  while the <codeph>AUTO</codeph> constant specifies that an internal algorithm automatically determine the property's 
	  value. As one example, you can set <codeph>TextLayoutFormat.columnWidth</codeph> using these values. Typically, a 
	  property's description indicates whether it accepts these constants.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.formats:ListStyleType">
         <apiName>ListStyleType</apiName>
         <shortdesc>
	 Defines values for setting the listStyleType property of a TextLayoutFormat object.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiFinal/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Defines values for setting the <codeph>listStyleType</codeph> property of a TextLayoutFormat object. These values are used for controlling
	 the appearance of items in a list.
	 
	  </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.formats:ListMarkerFormat">
         <apiName>ListMarkerFormat</apiName>
         <shortdesc> Defines the marker format in a ListItemElement.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>flashx.textLayout.formats:IListMarkerFormat</apiBaseInterface>
               <apiBaseClassifier>flashx.textLayout.formats:TextLayoutFormat</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> Defines the marker format in a ListItemElement.
	  
	  </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.formats:ITabStopFormat">
         <apiName>ITabStopFormat</apiName>
         <shortdesc>
	 This interface provides read access to tab stop-related properties.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 This interface provides read access to tab stop-related properties.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.formats:TextDecoration">
         <apiName>TextDecoration</apiName>
         <shortdesc>
	  Defines values for the textDecoration property
	  of the TextLayoutFormat class.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiFinal/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	  Defines values for the <codeph>textDecoration</codeph> property
	  of the TextLayoutFormat class. The values specify either normal text, with no decoration,
	  or underline.
	 
	 </apiDesc>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="flashx.textLayout.operations">
      <apiName>flashx.textLayout.operations</apiName>
      <apiClassifier id="flashx.textLayout.operations:CreateSubParagraphGroupOperation">
         <apiName>CreateSubParagraphGroupOperation</apiName>
         <shortdesc>
	 The CreateSPGEOperation class encapsulates creating a SubPargraphGroupElement
	 
	 </shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The CreateSPGEOperation class encapsulates creating a SubPargraphGroupElement
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.operations:FlowElementOperation">
         <apiName>FlowElementOperation</apiName>
         <shortdesc>
	 The FlowElementOperation class is the base class for operations that transform a FlowElement.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The FlowElementOperation class is the base class for operations that transform a FlowElement.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.operations:CutOperation">
         <apiName>CutOperation</apiName>
         <shortdesc>
	 The CutOperation class encapsulates a cut operation.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The CutOperation class encapsulates a cut operation.
	 
	 <p>The specified range is removed from the text flow.</p>
	 
	           <p>
               <b>Note:</b> The edit manager is responsible for copying the 
	 text scrap to the clipboard. Undoing a cut operation does not restore
	 the original clipboard state.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.operations:ApplyFormatOperation">
         <apiName>ApplyFormatOperation</apiName>
         <shortdesc>
	 The ApplyFormatOperation class encapsulates a style change.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The ApplyFormatOperation class encapsulates a style change.
	 
	 <p>An ApplyFormatOperation applies the leaf format to the text in the 
	 specified range (no change is made if the specified range is a single point). 
	 It applies the paragraph format to any paragraphs at least partially within the range 
	 (or a single paragraph if the range is a single point). 
	 And it applies the container format to any containers at least partially within the range 
	 (or a single container if the range is a single point).</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.operations:ClearFormatOperation">
         <apiName>ClearFormatOperation</apiName>
         <shortdesc>
	 The ClearFormatOperation class encapsulates a way to undefine formats.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The ClearFormatOperation class encapsulates a way to undefine formats.
	 
	 <p>An UndefineFormatOperation undefines properties set in the leaf format to the text in the 
	 specified range (no change is made if the specified range is a single point). 
	 It undefines properties set in the paragraph format to any paragraphs at least partially within the range 
	 (or a single paragraph if the range is a single point). 
	 And it undefines properties set in the container format to any containers at least partially within the range 
	 (or a single container if the range is a single point).</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.operations:RedoOperation">
         <apiName>RedoOperation</apiName>
         <shortdesc> 
	 The RedoOperation class encapsulates a redo operation.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>flashx.textLayout.operations:FlowOperation</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> 
	 The RedoOperation class encapsulates a redo operation.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.operations:InsertTextOperation">
         <apiName>InsertTextOperation</apiName>
         <shortdesc>
	 The InsertTextOperation class encapsulates a text insertion operation.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The InsertTextOperation class encapsulates a text insertion operation.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.operations:ApplyTCYOperation">
         <apiName>ApplyTCYOperation</apiName>
         <shortdesc> 
	 The ApplyTCYOperation class encapsulates a TCY transformation.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> 
	 The ApplyTCYOperation class encapsulates a TCY transformation.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.operations:ApplyFormatToElementOperation">
         <apiName>ApplyFormatToElementOperation</apiName>
         <shortdesc>
	 The ApplyFormatToElementOperation class encapsulates a style change to an element.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>flashx.textLayout.operations:FlowElementOperation</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The ApplyFormatToElementOperation class encapsulates a style change to an element.
	 
	 <p>This operation applies one or more formats to a flow element.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.operations:ApplyElementStyleNameOperation">
         <apiName>ApplyElementStyleNameOperation</apiName>
         <shortdesc>
	 The ApplyElementStyleNameOperation class encapsulates a style name change.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiDeprecated replacement="ApplyFormatToElementOperation" sinceVersion="2.0"/>
               <apiBaseClassifier>flashx.textLayout.operations:FlowElementOperation</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The ApplyElementStyleNameOperation class encapsulates a style name change.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.operations:FlowOperation">
         <apiName>FlowOperation</apiName>
         <shortdesc> 
	 The FlowOperation class is the base class for all Text Layout Framework operations.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>flashx.undo:IOperation</apiBaseInterface>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> 
	 The FlowOperation class is the base class for all Text Layout Framework operations. 
	 
	 <p>Operations are transformations of a text flow. An Operation class defines the
	 logic for performing and undoing the transformation. Operations are executed by an
	 edit manager. Most applications do not need to create or manage operations directly
	 (unless implementing a custom edit manager).</p>
	 
	           <p>When an operation is performed, the edit manager dispatches an Operation object 
	 within the FlowOperationEvent object. You can query 
	 this Operation object to decide whether or not to allow the operation, to decide whether 
	 to perform some other operation as well, or to update related user-interface elements.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.operations:SplitElementOperation">
         <apiName>SplitElementOperation</apiName>
         <shortdesc>
	 The SplitElementOperation class encapsulates a change that splits any FlowGroupElement into two elements.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The SplitElementOperation class encapsulates a change that splits any FlowGroupElement into two elements.
	 
	 This operation splits target at operationState.absoluteStart.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.operations:DeleteTextOperation">
         <apiName>DeleteTextOperation</apiName>
         <shortdesc>
	 The DeleteTextOperation class encapsulates the deletion of a range of text.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The DeleteTextOperation class encapsulates the deletion of a range of text.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.operations:SplitParagraphOperation">
         <apiName>SplitParagraphOperation</apiName>
         <shortdesc>
	 The SplitParagraphOperation class encapsulates a change that splits a paragraph into two elements.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>flashx.textLayout.operations:SplitElementOperation</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The SplitParagraphOperation class encapsulates a change that splits a paragraph into two elements.
	 
	 <p>The operation creates a new paragraph containing the text from 
	 the specified position to the end of the paragraph. If a range of text is specified, the text 
	 in the range is deleted first.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.operations:ClearFormatOnElementOperation">
         <apiName>ClearFormatOnElementOperation</apiName>
         <shortdesc>
	 The ClearFormatOnElementOperation class encapsulates a style change to an element.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>flashx.textLayout.operations:FlowElementOperation</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The ClearFormatOnElementOperation class encapsulates a style change to an element.
	 
	 <p>This operation undefines one or more formats to a flow element.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.operations:MoveChildrenOperation">
         <apiName>MoveChildrenOperation</apiName>
         <shortdesc>
	 The MoveChildrenOperation class allows moving a set of siblings out of its immediate parent chain, and the operation removes any empty ancestor chain left behind.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The MoveChildrenOperation class allows moving a set of siblings out of its immediate parent chain, and the operation removes any empty ancestor chain left behind.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.operations:ApplyElementTypeNameOperation">
         <apiName>ApplyElementTypeNameOperation</apiName>
         <shortdesc>
	 The ApplyElementTypeNameOperation class encapsulates a type name change.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>flashx.textLayout.operations:FlowElementOperation</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The ApplyElementTypeNameOperation class encapsulates a type name change.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.operations:CreateListOperation">
         <apiName>CreateListOperation</apiName>
         <shortdesc>
	 The CreateListOperation class encapsulates creating list
	 
	 </shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The CreateListOperation class encapsulates creating list
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.operations:FlowTextOperation">
         <apiName>FlowTextOperation</apiName>
         <shortdesc> 
	 The FlowTextOperation is the base class for operations that transform a range of text.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>flashx.textLayout.operations:FlowOperation</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> 
	 The FlowTextOperation is the base class for operations that transform a range of text.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.operations:CreateDivOperation">
         <apiName>CreateDivOperation</apiName>
         <shortdesc>
	 The CreateDivOperation class encapsulates creating DivElement
	 
	 </shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The CreateDivOperation class encapsulates creating DivElement
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.operations:ModifyInlineGraphicOperation">
         <apiName>ModifyInlineGraphicOperation</apiName>
         <shortdesc>
	 The InsertInlineGraphicOperation class encapsulates the modification of an existing inline graphic.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The InsertInlineGraphicOperation class encapsulates the modification of an existing inline graphic.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.operations:InsertInlineGraphicOperation">
         <apiName>InsertInlineGraphicOperation</apiName>
         <shortdesc>
	 The InsertInlineGraphicOperation class encapsulates the insertion of an inline
	 graphic into a text flow.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The InsertInlineGraphicOperation class encapsulates the insertion of an inline
	 graphic into a text flow.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.operations:ApplyElementUserStyleOperation">
         <apiName>ApplyElementUserStyleOperation</apiName>
         <shortdesc>
	 The ApplyElementUserStyleOperation class encapsulates a change in a style value of an element.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiDeprecated replacement="ApplyFormatToElementOperation" sinceVersion="2.0"/>
               <apiBaseClassifier>flashx.textLayout.operations:FlowElementOperation</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The ApplyElementUserStyleOperation class encapsulates a change in a style value of an element.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.operations:ApplyElementIDOperation">
         <apiName>ApplyElementIDOperation</apiName>
         <shortdesc>
	 The ChangeElementIDOperation class encapsulates an element ID change.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>flashx.textLayout.operations:FlowElementOperation</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The ChangeElementIDOperation class encapsulates an element ID change.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.operations:PasteOperation">
         <apiName>PasteOperation</apiName>
         <shortdesc>
	 The PasteOperation class encapsulates a paste operation.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The PasteOperation class encapsulates a paste operation.
	 
	 <p>The specified range is replaced by the new content.</p>
	 
	           <p>
               <b>Note:</b> The edit manager is responsible for copying the 
	 contents of the clipboard.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.operations:CopyOperation">
         <apiName>CopyOperation</apiName>
         <shortdesc>
	 The CopyOperation class encapsulates a copy operation.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The CopyOperation class encapsulates a copy operation.
	 
	 <p>
               <b>Note:</b> The operation is responsible for copying the 
	 text scrap to the clipboard. Undonig a copy operation does not restore
	 the original clipboard state.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.operations:CompositeOperation">
         <apiName>CompositeOperation</apiName>
         <shortdesc>
	 The CompositeOperation class encapsulates a group of transformations managed as a unit.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>flashx.textLayout.operations:FlowOperation</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The CompositeOperation class encapsulates a group of transformations managed as a unit.
	 
	 <p>The CompositeOperation class provides a grouping mechanism for combining multiple FlowOperations 
	 into a single atomic operation. Grouping operations allows them to be undone and redone as a unit. 
	 For example, several single character inserts followed by several backspaces can be undone together as if 
	 they were a single operation. Grouping also provides a mechanism for representing
	 complex operations. For example, a replace operation that modifies more than one text ranges
	 can be represented and managed as a single composite operation.</p>
	 
	           <p>
               <b>Note:</b> It can be more efficient to merge individual atomic operations
	  rather than to combine separate operations into a group. For example, several sequential
	  character inserts can easily be represented as a single insert operation,
	  and undoing or redoing that single operation is more efficient than
	  undoing or redoing a group of insert operations.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.operations:ApplyLinkOperation">
         <apiName>ApplyLinkOperation</apiName>
         <shortdesc>
	 The ApplyLinkOperation class encapsulates a link creation or modification operation.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>flashx.textLayout.operations:FlowTextOperation</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The ApplyLinkOperation class encapsulates a link creation or modification operation.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.operations:UndoOperation">
         <apiName>UndoOperation</apiName>
         <shortdesc> 
	 The UndoOperation class encapsulates an undo operation.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>flashx.textLayout.operations:FlowOperation</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> 
	 The UndoOperation class encapsulates an undo operation.
	 
	 </apiDesc>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="flashx.textLayout.utils">
      <apiName>flashx.textLayout.utils</apiName>
      <apiClassifier id="flashx.textLayout.utils:NavigationUtil">
         <apiName>NavigationUtil</apiName>
         <shortdesc> 
	 Utilities for manipulating a TextRange 
	 The methods of this class are static and must be called using
	 the syntax NavigationUtil.method(parameter).</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiFinal/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> 
	 Utilities for manipulating a TextRange 
	 The methods of this class are static and must be called using
	 the syntax <codeph>NavigationUtil.method(<i>parameter</i>)</codeph>.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.textLayout.utils:CharacterUtil">
         <apiName>CharacterUtil</apiName>
         <shortdesc> 
	 Utilities for managing and getting information about characters.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiFinal/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> 
	 Utilities for managing and getting information about characters.
	 The methods of this class are static and must be called using
	 the syntax <codeph>CharacterUtil.method(<i>parameter</i>)</codeph>.
	 
	 </apiDesc>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="flashx.textLayout">
      <apiName>flashx.textLayout</apiName>
      <apiClassifier id="flashx.textLayout:TextLayoutVersion">
         <apiName>TextLayoutVersion</apiName>
         <shortdesc> 
	  This class controls the backward-compatibility of the framework.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> 
	  This class controls the backward-compatibility of the framework.
	  With every new release, some aspects of the framework are changed which can affect your application.
	  
	  </apiDesc>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="flashx.undo">
      <apiName>flashx.undo</apiName>
      <apiClassifier id="flashx.undo:IOperation">
         <apiName>IOperation</apiName>
         <shortdesc> 
	 IOperation defines the interface for operations that can be undone and redone.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> 
	 IOperation defines the interface for operations that can be undone and redone.
	  
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.undo:UndoManager">
         <apiName>UndoManager</apiName>
         <shortdesc> 
	 The UndoManager class manages the history of editing operations on a text flow so
	 that these operations can be undone and redone.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>flashx.undo:IUndoManager</apiBaseInterface>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc> 
	 The UndoManager class manages the history of editing operations on a text flow so
	 that these operations can be undone and redone.
	 
	 <p>The undo manager maintains two stacks of IOperation objects. When a reversible
	 operation is executed, it is placed on the undo stack. If that operation is undone,
	 it is removed from the undo stack, reversed, and placed on the redo stack. Likewise, 
	 if that operation is then redone, it is removed from the redo stack, re-executed, and
	 then placed onto the undo stack again. If another operation is executed first, the redo 
	 stack is cleared.</p>
	 
	           <p>If the TextFlow is modified directly (not via
	 calls to the edit manager, but directly via calls to the managed FlowElement objects), then the edit manager
	 clears the undo stack to prevent the stack from getting out of sync with the current state.</p>
	 
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="flashx.undo:IUndoManager">
         <apiName>IUndoManager</apiName>
         <shortdesc>
     IUndoManager defines the interface for managing the undo and redo stacks.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
     IUndoManager defines the interface for managing the undo and redo stacks.
     
     <p>An undo manager maintains a stack of operations that can be undone and redone.</p>
     
         </apiDesc>
      </apiClassifier>
   </apiPackage>
</allClasses>